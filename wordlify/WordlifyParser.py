# Generated from Wordlify.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3:")
        buf.write("\u080f\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\3\2\7\2`\n\2\f\2\16\2c\13\2\3\2\3\2\7\2g\n\2\f\2")
        buf.write("\16\2j\13\2\3\2\3\2\7\2n\n\2\f\2\16\2q\13\2\3\2\3\2\7")
        buf.write("\2u\n\2\f\2\16\2x\13\2\3\2\3\2\7\2|\n\2\f\2\16\2\177\13")
        buf.write("\2\6\2\u0081\n\2\r\2\16\2\u0082\3\2\3\2\3\2\5\2\u0088")
        buf.write("\n\2\3\2\6\2\u008b\n\2\r\2\16\2\u008c\7\2\u008f\n\2\f")
        buf.write("\2\16\2\u0092\13\2\3\2\3\2\7\2\u0096\n\2\f\2\16\2\u0099")
        buf.write("\13\2\3\2\5\2\u009c\n\2\3\2\3\2\3\2\5\2\u00a1\n\2\5\2")
        buf.write("\u00a3\n\2\5\2\u00a5\n\2\3\2\7\2\u00a8\n\2\f\2\16\2\u00ab")
        buf.write("\13\2\3\2\5\2\u00ae\n\2\3\2\3\2\7\2\u00b2\n\2\f\2\16\2")
        buf.write("\u00b5\13\2\3\2\3\2\7\2\u00b9\n\2\f\2\16\2\u00bc\13\2")
        buf.write("\3\2\5\2\u00bf\n\2\3\2\3\2\7\2\u00c3\n\2\f\2\16\2\u00c6")
        buf.write("\13\2\3\2\3\2\7\2\u00ca\n\2\f\2\16\2\u00cd\13\2\3\2\3")
        buf.write("\2\7\2\u00d1\n\2\f\2\16\2\u00d4\13\2\6\2\u00d6\n\2\r\2")
        buf.write("\16\2\u00d7\3\2\3\2\3\2\5\2\u00dd\n\2\3\2\6\2\u00e0\n")
        buf.write("\2\r\2\16\2\u00e1\7\2\u00e4\n\2\f\2\16\2\u00e7\13\2\3")
        buf.write("\2\3\2\7\2\u00eb\n\2\f\2\16\2\u00ee\13\2\3\2\5\2\u00f1")
        buf.write("\n\2\3\2\3\2\3\2\5\2\u00f6\n\2\5\2\u00f8\n\2\5\2\u00fa")
        buf.write("\n\2\3\2\7\2\u00fd\n\2\f\2\16\2\u0100\13\2\3\2\5\2\u0103")
        buf.write("\n\2\3\2\5\2\u0106\n\2\3\3\3\3\6\3\u010a\n\3\r\3\16\3")
        buf.write("\u010b\3\3\3\3\7\3\u0110\n\3\f\3\16\3\u0113\13\3\3\3\3")
        buf.write("\3\7\3\u0117\n\3\f\3\16\3\u011a\13\3\3\3\3\3\7\3\u011e")
        buf.write("\n\3\f\3\16\3\u0121\13\3\3\3\3\3\7\3\u0125\n\3\f\3\16")
        buf.write("\3\u0128\13\3\3\3\3\3\7\3\u012c\n\3\f\3\16\3\u012f\13")
        buf.write("\3\7\3\u0131\n\3\f\3\16\3\u0134\13\3\5\3\u0136\n\3\3\3")
        buf.write("\3\3\7\3\u013a\n\3\f\3\16\3\u013d\13\3\3\3\3\3\6\3\u0141")
        buf.write("\n\3\r\3\16\3\u0142\3\3\3\3\7\3\u0147\n\3\f\3\16\3\u014a")
        buf.write("\13\3\3\3\3\3\7\3\u014e\n\3\f\3\16\3\u0151\13\3\3\3\3")
        buf.write("\3\7\3\u0155\n\3\f\3\16\3\u0158\13\3\3\3\3\3\7\3\u015c")
        buf.write("\n\3\f\3\16\3\u015f\13\3\6\3\u0161\n\3\r\3\16\3\u0162")
        buf.write("\3\3\3\3\6\3\u0167\n\3\r\3\16\3\u0168\7\3\u016b\n\3\f")
        buf.write("\3\16\3\u016e\13\3\3\3\3\3\7\3\u0172\n\3\f\3\16\3\u0175")
        buf.write("\13\3\3\3\5\3\u0178\n\3\3\3\5\3\u017b\n\3\3\3\6\3\u017e")
        buf.write("\n\3\r\3\16\3\u017f\5\3\u0182\n\3\3\3\3\3\3\3\6\3\u0187")
        buf.write("\n\3\r\3\16\3\u0188\3\3\3\3\7\3\u018d\n\3\f\3\16\3\u0190")
        buf.write("\13\3\3\3\3\3\7\3\u0194\n\3\f\3\16\3\u0197\13\3\3\3\3")
        buf.write("\3\7\3\u019b\n\3\f\3\16\3\u019e\13\3\3\3\3\3\7\3\u01a2")
        buf.write("\n\3\f\3\16\3\u01a5\13\3\3\3\3\3\7\3\u01a9\n\3\f\3\16")
        buf.write("\3\u01ac\13\3\7\3\u01ae\n\3\f\3\16\3\u01b1\13\3\5\3\u01b3")
        buf.write("\n\3\3\3\3\3\7\3\u01b7\n\3\f\3\16\3\u01ba\13\3\3\3\3\3")
        buf.write("\6\3\u01be\n\3\r\3\16\3\u01bf\3\3\3\3\7\3\u01c4\n\3\f")
        buf.write("\3\16\3\u01c7\13\3\3\3\5\3\u01ca\n\3\3\3\3\3\7\3\u01ce")
        buf.write("\n\3\f\3\16\3\u01d1\13\3\3\3\3\3\7\3\u01d5\n\3\f\3\16")
        buf.write("\3\u01d8\13\3\3\3\3\3\7\3\u01dc\n\3\f\3\16\3\u01df\13")
        buf.write("\3\6\3\u01e1\n\3\r\3\16\3\u01e2\3\3\3\3\6\3\u01e7\n\3")
        buf.write("\r\3\16\3\u01e8\7\3\u01eb\n\3\f\3\16\3\u01ee\13\3\3\3")
        buf.write("\3\3\7\3\u01f2\n\3\f\3\16\3\u01f5\13\3\3\3\5\3\u01f8\n")
        buf.write("\3\3\3\5\3\u01fb\n\3\3\3\6\3\u01fe\n\3\r\3\16\3\u01ff")
        buf.write("\5\3\u0202\n\3\3\3\5\3\u0205\n\3\3\4\3\4\3\4\5\4\u020a")
        buf.write("\n\4\3\5\3\5\6\5\u020e\n\5\r\5\16\5\u020f\3\5\3\5\6\5")
        buf.write("\u0214\n\5\r\5\16\5\u0215\3\5\3\5\6\5\u021a\n\5\r\5\16")
        buf.write("\5\u021b\3\5\3\5\3\5\5\5\u0221\n\5\3\5\6\5\u0224\n\5\r")
        buf.write("\5\16\5\u0225\3\5\3\5\6\5\u022a\n\5\r\5\16\5\u022b\3\5")
        buf.write("\3\5\7\5\u0230\n\5\f\5\16\5\u0233\13\5\3\5\3\5\7\5\u0237")
        buf.write("\n\5\f\5\16\5\u023a\13\5\3\5\3\5\7\5\u023e\n\5\f\5\16")
        buf.write("\5\u0241\13\5\3\5\3\5\7\5\u0245\n\5\f\5\16\5\u0248\13")
        buf.write("\5\6\5\u024a\n\5\r\5\16\5\u024b\3\5\3\5\6\5\u0250\n\5")
        buf.write("\r\5\16\5\u0251\7\5\u0254\n\5\f\5\16\5\u0257\13\5\3\5")
        buf.write("\3\5\7\5\u025b\n\5\f\5\16\5\u025e\13\5\3\5\3\5\6\5\u0262")
        buf.write("\n\5\r\5\16\5\u0263\5\5\u0266\n\5\3\5\3\5\6\5\u026a\n")
        buf.write("\5\r\5\16\5\u026b\5\5\u026e\n\5\5\5\u0270\n\5\3\5\3\5")
        buf.write("\3\5\6\5\u0275\n\5\r\5\16\5\u0276\3\5\3\5\6\5\u027b\n")
        buf.write("\5\r\5\16\5\u027c\3\5\3\5\6\5\u0281\n\5\r\5\16\5\u0282")
        buf.write("\3\5\3\5\3\5\5\5\u0288\n\5\3\5\6\5\u028b\n\5\r\5\16\5")
        buf.write("\u028c\3\5\3\5\6\5\u0291\n\5\r\5\16\5\u0292\3\5\3\5\7")
        buf.write("\5\u0297\n\5\f\5\16\5\u029a\13\5\3\5\5\5\u029d\n\5\3\5")
        buf.write("\3\5\7\5\u02a1\n\5\f\5\16\5\u02a4\13\5\3\5\3\5\7\5\u02a8")
        buf.write("\n\5\f\5\16\5\u02ab\13\5\3\5\3\5\7\5\u02af\n\5\f\5\16")
        buf.write("\5\u02b2\13\5\6\5\u02b4\n\5\r\5\16\5\u02b5\3\5\3\5\6\5")
        buf.write("\u02ba\n\5\r\5\16\5\u02bb\7\5\u02be\n\5\f\5\16\5\u02c1")
        buf.write("\13\5\3\5\3\5\7\5\u02c5\n\5\f\5\16\5\u02c8\13\5\3\5\3")
        buf.write("\5\6\5\u02cc\n\5\r\5\16\5\u02cd\5\5\u02d0\n\5\3\5\3\5")
        buf.write("\6\5\u02d4\n\5\r\5\16\5\u02d5\5\5\u02d8\n\5\5\5\u02da")
        buf.write("\n\5\3\5\5\5\u02dd\n\5\3\6\3\6\6\6\u02e1\n\6\r\6\16\6")
        buf.write("\u02e2\3\6\3\6\6\6\u02e7\n\6\r\6\16\6\u02e8\3\6\3\6\6")
        buf.write("\6\u02ed\n\6\r\6\16\6\u02ee\3\6\3\6\7\6\u02f3\n\6\f\6")
        buf.write("\16\6\u02f6\13\6\3\6\3\6\7\6\u02fa\n\6\f\6\16\6\u02fd")
        buf.write("\13\6\3\6\3\6\7\6\u0301\n\6\f\6\16\6\u0304\13\6\3\6\3")
        buf.write("\6\7\6\u0308\n\6\f\6\16\6\u030b\13\6\6\6\u030d\n\6\r\6")
        buf.write("\16\6\u030e\3\6\3\6\6\6\u0313\n\6\r\6\16\6\u0314\7\6\u0317")
        buf.write("\n\6\f\6\16\6\u031a\13\6\3\6\3\6\7\6\u031e\n\6\f\6\16")
        buf.write("\6\u0321\13\6\3\6\3\6\6\6\u0325\n\6\r\6\16\6\u0326\5\6")
        buf.write("\u0329\n\6\3\6\3\6\6\6\u032d\n\6\r\6\16\6\u032e\5\6\u0331")
        buf.write("\n\6\5\6\u0333\n\6\3\6\3\6\3\6\3\6\6\6\u0339\n\6\r\6\16")
        buf.write("\6\u033a\3\6\3\6\6\6\u033f\n\6\r\6\16\6\u0340\3\6\3\6")
        buf.write("\6\6\u0345\n\6\r\6\16\6\u0346\3\6\3\6\7\6\u034b\n\6\f")
        buf.write("\6\16\6\u034e\13\6\3\6\5\6\u0351\n\6\3\6\3\6\7\6\u0355")
        buf.write("\n\6\f\6\16\6\u0358\13\6\3\6\3\6\7\6\u035c\n\6\f\6\16")
        buf.write("\6\u035f\13\6\3\6\3\6\7\6\u0363\n\6\f\6\16\6\u0366\13")
        buf.write("\6\6\6\u0368\n\6\r\6\16\6\u0369\3\6\3\6\6\6\u036e\n\6")
        buf.write("\r\6\16\6\u036f\7\6\u0372\n\6\f\6\16\6\u0375\13\6\3\6")
        buf.write("\3\6\7\6\u0379\n\6\f\6\16\6\u037c\13\6\3\6\3\6\6\6\u0380")
        buf.write("\n\6\r\6\16\6\u0381\5\6\u0384\n\6\3\6\3\6\6\6\u0388\n")
        buf.write("\6\r\6\16\6\u0389\5\6\u038c\n\6\5\6\u038e\n\6\3\6\3\6")
        buf.write("\5\6\u0392\n\6\3\7\3\7\3\7\7\7\u0397\n\7\f\7\16\7\u039a")
        buf.write("\13\7\3\7\5\7\u039d\n\7\3\7\3\7\3\7\3\7\3\7\7\7\u03a4")
        buf.write("\n\7\f\7\16\7\u03a7\13\7\3\7\5\7\u03aa\n\7\3\7\3\7\5\7")
        buf.write("\u03ae\n\7\3\b\3\b\6\b\u03b2\n\b\r\b\16\b\u03b3\3\b\3")
        buf.write("\b\6\b\u03b8\n\b\r\b\16\b\u03b9\3\t\3\t\6\t\u03be\n\t")
        buf.write("\r\t\16\t\u03bf\3\t\3\t\7\t\u03c4\n\t\f\t\16\t\u03c7\13")
        buf.write("\t\3\t\3\t\7\t\u03cb\n\t\f\t\16\t\u03ce\13\t\3\t\3\t\7")
        buf.write("\t\u03d2\n\t\f\t\16\t\u03d5\13\t\3\t\3\t\7\t\u03d9\n\t")
        buf.write("\f\t\16\t\u03dc\13\t\6\t\u03de\n\t\r\t\16\t\u03df\3\t")
        buf.write("\3\t\6\t\u03e4\n\t\r\t\16\t\u03e5\7\t\u03e8\n\t\f\t\16")
        buf.write("\t\u03eb\13\t\3\t\3\t\7\t\u03ef\n\t\f\t\16\t\u03f2\13")
        buf.write("\t\3\t\3\t\6\t\u03f6\n\t\r\t\16\t\u03f7\5\t\u03fa\n\t")
        buf.write("\3\t\3\t\6\t\u03fe\n\t\r\t\16\t\u03ff\5\t\u0402\n\t\5")
        buf.write("\t\u0404\n\t\3\t\3\t\6\t\u0408\n\t\r\t\16\t\u0409\3\t")
        buf.write("\3\t\7\t\u040e\n\t\f\t\16\t\u0411\13\t\3\t\5\t\u0414\n")
        buf.write("\t\3\t\3\t\7\t\u0418\n\t\f\t\16\t\u041b\13\t\3\t\3\t\7")
        buf.write("\t\u041f\n\t\f\t\16\t\u0422\13\t\3\t\3\t\7\t\u0426\n\t")
        buf.write("\f\t\16\t\u0429\13\t\6\t\u042b\n\t\r\t\16\t\u042c\3\t")
        buf.write("\3\t\6\t\u0431\n\t\r\t\16\t\u0432\7\t\u0435\n\t\f\t\16")
        buf.write("\t\u0438\13\t\3\t\3\t\7\t\u043c\n\t\f\t\16\t\u043f\13")
        buf.write("\t\3\t\3\t\6\t\u0443\n\t\r\t\16\t\u0444\5\t\u0447\n\t")
        buf.write("\3\t\3\t\6\t\u044b\n\t\r\t\16\t\u044c\5\t\u044f\n\t\5")
        buf.write("\t\u0451\n\t\5\t\u0453\n\t\3\n\3\n\6\n\u0457\n\n\r\n\16")
        buf.write("\n\u0458\3\n\3\n\3\n\3\13\3\13\6\13\u0460\n\13\r\13\16")
        buf.write("\13\u0461\3\13\3\13\7\13\u0466\n\13\f\13\16\13\u0469\13")
        buf.write("\13\3\13\3\13\7\13\u046d\n\13\f\13\16\13\u0470\13\13\3")
        buf.write("\13\3\13\7\13\u0474\n\13\f\13\16\13\u0477\13\13\3\13\3")
        buf.write("\13\7\13\u047b\n\13\f\13\16\13\u047e\13\13\6\13\u0480")
        buf.write("\n\13\r\13\16\13\u0481\3\13\3\13\6\13\u0486\n\13\r\13")
        buf.write("\16\13\u0487\7\13\u048a\n\13\f\13\16\13\u048d\13\13\3")
        buf.write("\13\3\13\7\13\u0491\n\13\f\13\16\13\u0494\13\13\3\13\3")
        buf.write("\13\6\13\u0498\n\13\r\13\16\13\u0499\5\13\u049c\n\13\3")
        buf.write("\13\3\13\6\13\u04a0\n\13\r\13\16\13\u04a1\5\13\u04a4\n")
        buf.write("\13\5\13\u04a6\n\13\3\f\3\f\6\f\u04aa\n\f\r\f\16\f\u04ab")
        buf.write("\3\f\3\f\6\f\u04b0\n\f\r\f\16\f\u04b1\3\f\7\f\u04b5\n")
        buf.write("\f\f\f\16\f\u04b8\13\f\3\r\3\r\6\r\u04bc\n\r\r\r\16\r")
        buf.write("\u04bd\5\r\u04c0\n\r\3\r\3\r\3\r\5\r\u04c5\n\r\3\16\3")
        buf.write("\16\7\16\u04c9\n\16\f\16\16\16\u04cc\13\16\3\16\3\16\7")
        buf.write("\16\u04d0\n\16\f\16\16\16\u04d3\13\16\3\16\3\16\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u04e0\n\17")
        buf.write("\3\20\3\20\7\20\u04e4\n\20\f\20\16\20\u04e7\13\20\3\20")
        buf.write("\3\20\7\20\u04eb\n\20\f\20\16\20\u04ee\13\20\3\20\6\20")
        buf.write("\u04f1\n\20\r\20\16\20\u04f2\3\21\3\21\7\21\u04f7\n\21")
        buf.write("\f\21\16\21\u04fa\13\21\3\21\3\21\7\21\u04fe\n\21\f\21")
        buf.write("\16\21\u0501\13\21\3\21\6\21\u0504\n\21\r\21\16\21\u0505")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\5\22\u0521\n\22\3\23\3\23\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\5\23\u053d\n\23\3\24\3\24\5\24\u0541\n\24\3\24\7\24\u0544")
        buf.write("\n\24\f\24\16\24\u0547\13\24\3\24\3\24\7\24\u054b\n\24")
        buf.write("\f\24\16\24\u054e\13\24\3\24\3\24\3\24\5\24\u0553\n\24")
        buf.write("\3\24\7\24\u0556\n\24\f\24\16\24\u0559\13\24\3\24\3\24")
        buf.write("\5\24\u055d\n\24\3\25\3\25\7\25\u0561\n\25\f\25\16\25")
        buf.write("\u0564\13\25\3\25\3\25\7\25\u0568\n\25\f\25\16\25\u056b")
        buf.write("\13\25\3\25\3\25\7\25\u056f\n\25\f\25\16\25\u0572\13\25")
        buf.write("\3\26\3\26\5\26\u0576\n\26\3\26\3\26\7\26\u057a\n\26\f")
        buf.write("\26\16\26\u057d\13\26\3\26\3\26\7\26\u0581\n\26\f\26\16")
        buf.write("\26\u0584\13\26\3\26\3\26\3\27\3\27\7\27\u058a\n\27\f")
        buf.write("\27\16\27\u058d\13\27\3\27\3\27\3\30\3\30\7\30\u0593\n")
        buf.write("\30\f\30\16\30\u0596\13\30\3\30\3\30\7\30\u059a\n\30\f")
        buf.write("\30\16\30\u059d\13\30\3\30\3\30\7\30\u05a1\n\30\f\30\16")
        buf.write("\30\u05a4\13\30\3\30\3\30\7\30\u05a8\n\30\f\30\16\30\u05ab")
        buf.write("\13\30\3\30\3\30\7\30\u05af\n\30\f\30\16\30\u05b2\13\30")
        buf.write("\7\30\u05b4\n\30\f\30\16\30\u05b7\13\30\5\30\u05b9\n\30")
        buf.write("\3\30\3\30\3\31\3\31\7\31\u05bf\n\31\f\31\16\31\u05c2")
        buf.write("\13\31\3\31\3\31\7\31\u05c6\n\31\f\31\16\31\u05c9\13\31")
        buf.write("\3\31\3\31\7\31\u05cd\n\31\f\31\16\31\u05d0\13\31\3\31")
        buf.write("\3\31\3\32\3\32\7\32\u05d6\n\32\f\32\16\32\u05d9\13\32")
        buf.write("\3\32\3\32\7\32\u05dd\n\32\f\32\16\32\u05e0\13\32\3\32")
        buf.write("\3\32\7\32\u05e4\n\32\f\32\16\32\u05e7\13\32\3\32\3\32")
        buf.write("\3\33\3\33\7\33\u05ed\n\33\f\33\16\33\u05f0\13\33\3\33")
        buf.write("\3\33\7\33\u05f4\n\33\f\33\16\33\u05f7\13\33\3\33\3\33")
        buf.write("\7\33\u05fb\n\33\f\33\16\33\u05fe\13\33\3\33\3\33\3\34")
        buf.write("\3\34\7\34\u0604\n\34\f\34\16\34\u0607\13\34\3\34\3\34")
        buf.write("\7\34\u060b\n\34\f\34\16\34\u060e\13\34\3\34\3\34\7\34")
        buf.write("\u0612\n\34\f\34\16\34\u0615\13\34\3\34\3\34\3\35\3\35")
        buf.write("\7\35\u061b\n\35\f\35\16\35\u061e\13\35\3\35\3\35\7\35")
        buf.write("\u0622\n\35\f\35\16\35\u0625\13\35\3\35\3\35\7\35\u0629")
        buf.write("\n\35\f\35\16\35\u062c\13\35\3\35\3\35\7\35\u0630\n\35")
        buf.write("\f\35\16\35\u0633\13\35\3\35\3\35\7\35\u0637\n\35\f\35")
        buf.write("\16\35\u063a\13\35\3\35\3\35\3\36\3\36\7\36\u0640\n\36")
        buf.write("\f\36\16\36\u0643\13\36\3\36\3\36\7\36\u0647\n\36\f\36")
        buf.write("\16\36\u064a\13\36\3\36\3\36\7\36\u064e\n\36\f\36\16\36")
        buf.write("\u0651\13\36\3\36\3\36\3\37\3\37\7\37\u0657\n\37\f\37")
        buf.write("\16\37\u065a\13\37\3\37\3\37\7\37\u065e\n\37\f\37\16\37")
        buf.write("\u0661\13\37\3\37\3\37\7\37\u0665\n\37\f\37\16\37\u0668")
        buf.write("\13\37\3\37\3\37\7\37\u066c\n\37\f\37\16\37\u066f\13\37")
        buf.write("\3\37\3\37\7\37\u0673\n\37\f\37\16\37\u0676\13\37\3\37")
        buf.write("\3\37\3 \3 \7 \u067c\n \f \16 \u067f\13 \3 \3 \7 \u0683")
        buf.write("\n \f \16 \u0686\13 \3 \3 \7 \u068a\n \f \16 \u068d\13")
        buf.write(" \3 \3 \7 \u0691\n \f \16 \u0694\13 \3 \3 \7 \u0698\n")
        buf.write(" \f \16 \u069b\13 \3 \3 \3!\3!\7!\u06a1\n!\f!\16!\u06a4")
        buf.write("\13!\3!\3!\7!\u06a8\n!\f!\16!\u06ab\13!\3!\3!\7!\u06af")
        buf.write("\n!\f!\16!\u06b2\13!\3!\3!\7!\u06b6\n!\f!\16!\u06b9\13")
        buf.write("!\3!\3!\7!\u06bd\n!\f!\16!\u06c0\13!\3!\3!\3\"\3\"\7\"")
        buf.write("\u06c6\n\"\f\"\16\"\u06c9\13\"\3\"\3\"\7\"\u06cd\n\"\f")
        buf.write("\"\16\"\u06d0\13\"\3\"\3\"\7\"\u06d4\n\"\f\"\16\"\u06d7")
        buf.write("\13\"\3\"\3\"\7\"\u06db\n\"\f\"\16\"\u06de\13\"\3\"\3")
        buf.write("\"\7\"\u06e2\n\"\f\"\16\"\u06e5\13\"\3\"\3\"\3#\3#\7#")
        buf.write("\u06eb\n#\f#\16#\u06ee\13#\3#\3#\7#\u06f2\n#\f#\16#\u06f5")
        buf.write("\13#\3#\3#\7#\u06f9\n#\f#\16#\u06fc\13#\3#\3#\3$\3$\7")
        buf.write("$\u0702\n$\f$\16$\u0705\13$\3$\3$\7$\u0709\n$\f$\16$\u070c")
        buf.write("\13$\3$\3$\7$\u0710\n$\f$\16$\u0713\13$\3$\3$\3%\3%\7")
        buf.write("%\u0719\n%\f%\16%\u071c\13%\3%\3%\7%\u0720\n%\f%\16%\u0723")
        buf.write("\13%\3%\3%\7%\u0727\n%\f%\16%\u072a\13%\3%\3%\7%\u072e")
        buf.write("\n%\f%\16%\u0731\13%\7%\u0733\n%\f%\16%\u0736\13%\3%\3")
        buf.write("%\7%\u073a\n%\f%\16%\u073d\13%\3%\3%\3&\3&\7&\u0743\n")
        buf.write("&\f&\16&\u0746\13&\3&\3&\7&\u074a\n&\f&\16&\u074d\13&")
        buf.write("\3&\3&\7&\u0751\n&\f&\16&\u0754\13&\3&\3&\3\'\3\'\7\'")
        buf.write("\u075a\n\'\f\'\16\'\u075d\13\'\3\'\3\'\7\'\u0761\n\'\f")
        buf.write("\'\16\'\u0764\13\'\3\'\3\'\7\'\u0768\n\'\f\'\16\'\u076b")
        buf.write("\13\'\3\'\3\'\3(\3(\7(\u0771\n(\f(\16(\u0774\13(\3(\3")
        buf.write("(\7(\u0778\n(\f(\16(\u077b\13(\3(\3(\7(\u077f\n(\f(\16")
        buf.write("(\u0782\13(\3(\3(\3)\3)\7)\u0788\n)\f)\16)\u078b\13)\3")
        buf.write(")\3)\7)\u078f\n)\f)\16)\u0792\13)\3)\3)\7)\u0796\n)\f")
        buf.write(")\16)\u0799\13)\3)\3)\3*\3*\7*\u079f\n*\f*\16*\u07a2\13")
        buf.write("*\3*\3*\7*\u07a6\n*\f*\16*\u07a9\13*\3*\3*\7*\u07ad\n")
        buf.write("*\f*\16*\u07b0\13*\3*\3*\3+\3+\7+\u07b6\n+\f+\16+\u07b9")
        buf.write("\13+\3+\3+\7+\u07bd\n+\f+\16+\u07c0\13+\3+\3+\3+\5+\u07c5")
        buf.write("\n+\3+\7+\u07c8\n+\f+\16+\u07cb\13+\3+\3+\3,\3,\7,\u07d1")
        buf.write("\n,\f,\16,\u07d4\13,\3,\3,\7,\u07d8\n,\f,\16,\u07db\13")
        buf.write(",\3,\3,\7,\u07df\n,\f,\16,\u07e2\13,\3,\3,\3-\3-\3.\3")
        buf.write(".\7.\u07ea\n.\f.\16.\u07ed\13.\3.\3.\7.\u07f1\n.\f.\16")
        buf.write(".\u07f4\13.\3.\3.\7.\u07f8\n.\f.\16.\u07fb\13.\3.\7.\u07fe")
        buf.write("\n.\f.\16.\u0801\13.\3.\7.\u0804\n.\f.\16.\u0807\13.\5")
        buf.write(".\u0809\n.\3.\3.\3/\3/\3/\2\2\60\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\\2\4\3\2\678\3\2\63\66\2\u0979\2\u0105\3\2\2\2\4")
        buf.write("\u0204\3\2\2\2\6\u0209\3\2\2\2\b\u02dc\3\2\2\2\n\u0391")
        buf.write("\3\2\2\2\f\u03ad\3\2\2\2\16\u03af\3\2\2\2\20\u0452\3\2")
        buf.write("\2\2\22\u0454\3\2\2\2\24\u045d\3\2\2\2\26\u04a7\3\2\2")
        buf.write("\2\30\u04bf\3\2\2\2\32\u04c6\3\2\2\2\34\u04df\3\2\2\2")
        buf.write("\36\u04e1\3\2\2\2 \u04f4\3\2\2\2\"\u0520\3\2\2\2$\u053c")
        buf.write("\3\2\2\2&\u055c\3\2\2\2(\u055e\3\2\2\2*\u0575\3\2\2\2")
        buf.write(",\u0587\3\2\2\2.\u0590\3\2\2\2\60\u05bc\3\2\2\2\62\u05d3")
        buf.write("\3\2\2\2\64\u05ea\3\2\2\2\66\u0601\3\2\2\28\u0618\3\2")
        buf.write("\2\2:\u063d\3\2\2\2<\u0654\3\2\2\2>\u0679\3\2\2\2@\u069e")
        buf.write("\3\2\2\2B\u06c3\3\2\2\2D\u06e8\3\2\2\2F\u06ff\3\2\2\2")
        buf.write("H\u0716\3\2\2\2J\u0740\3\2\2\2L\u0757\3\2\2\2N\u076e\3")
        buf.write("\2\2\2P\u0785\3\2\2\2R\u079c\3\2\2\2T\u07b3\3\2\2\2V\u07ce")
        buf.write("\3\2\2\2X\u07e5\3\2\2\2Z\u07e7\3\2\2\2\\\u080c\3\2\2\2")
        buf.write("^`\t\2\2\2_^\3\2\2\2`c\3\2\2\2a_\3\2\2\2ab\3\2\2\2b\u00a4")
        buf.write("\3\2\2\2ca\3\2\2\2dh\5$\23\2eg\t\2\2\2fe\3\2\2\2gj\3\2")
        buf.write("\2\2hf\3\2\2\2hi\3\2\2\2ik\3\2\2\2jh\3\2\2\2ko\7\3\2\2")
        buf.write("ln\t\2\2\2ml\3\2\2\2nq\3\2\2\2om\3\2\2\2op\3\2\2\2p\u008f")
        buf.write("\3\2\2\2qo\3\2\2\2r\u0080\5$\23\2su\7\67\2\2ts\3\2\2\2")
        buf.write("ux\3\2\2\2vt\3\2\2\2vw\3\2\2\2wy\3\2\2\2xv\3\2\2\2y}\7")
        buf.write("8\2\2z|\7\67\2\2{z\3\2\2\2|\177\3\2\2\2}{\3\2\2\2}~\3")
        buf.write("\2\2\2~\u0081\3\2\2\2\177}\3\2\2\2\u0080v\3\2\2\2\u0081")
        buf.write("\u0082\3\2\2\2\u0082\u0080\3\2\2\2\u0082\u0083\3\2\2\2")
        buf.write("\u0083\u008f\3\2\2\2\u0084\u0088\5\6\4\2\u0085\u0088\5")
        buf.write("\4\3\2\u0086\u0088\5,\27\2\u0087\u0084\3\2\2\2\u0087\u0085")
        buf.write("\3\2\2\2\u0087\u0086\3\2\2\2\u0088\u008a\3\2\2\2\u0089")
        buf.write("\u008b\t\2\2\2\u008a\u0089\3\2\2\2\u008b\u008c\3\2\2\2")
        buf.write("\u008c\u008a\3\2\2\2\u008c\u008d\3\2\2\2\u008d\u008f\3")
        buf.write("\2\2\2\u008ed\3\2\2\2\u008er\3\2\2\2\u008e\u0087\3\2\2")
        buf.write("\2\u008f\u0092\3\2\2\2\u0090\u008e\3\2\2\2\u0090\u0091")
        buf.write("\3\2\2\2\u0091\u00a2\3\2\2\2\u0092\u0090\3\2\2\2\u0093")
        buf.write("\u0097\5$\23\2\u0094\u0096\t\2\2\2\u0095\u0094\3\2\2\2")
        buf.write("\u0096\u0099\3\2\2\2\u0097\u0095\3\2\2\2\u0097\u0098\3")
        buf.write("\2\2\2\u0098\u009b\3\2\2\2\u0099\u0097\3\2\2\2\u009a\u009c")
        buf.write("\7\3\2\2\u009b\u009a\3\2\2\2\u009b\u009c\3\2\2\2\u009c")
        buf.write("\u00a3\3\2\2\2\u009d\u00a1\5\6\4\2\u009e\u00a1\5\4\3\2")
        buf.write("\u009f\u00a1\5,\27\2\u00a0\u009d\3\2\2\2\u00a0\u009e\3")
        buf.write("\2\2\2\u00a0\u009f\3\2\2\2\u00a1\u00a3\3\2\2\2\u00a2\u0093")
        buf.write("\3\2\2\2\u00a2\u00a0\3\2\2\2\u00a3\u00a5\3\2\2\2\u00a4")
        buf.write("\u0090\3\2\2\2\u00a4\u00a5\3\2\2\2\u00a5\u00a9\3\2\2\2")
        buf.write("\u00a6\u00a8\t\2\2\2\u00a7\u00a6\3\2\2\2\u00a8\u00ab\3")
        buf.write("\2\2\2\u00a9\u00a7\3\2\2\2\u00a9\u00aa\3\2\2\2\u00aa\u00ad")
        buf.write("\3\2\2\2\u00ab\u00a9\3\2\2\2\u00ac\u00ae\79\2\2\u00ad")
        buf.write("\u00ac\3\2\2\2\u00ad\u00ae\3\2\2\2\u00ae\u00af\3\2\2\2")
        buf.write("\u00af\u0106\7\2\2\3\u00b0\u00b2\t\2\2\2\u00b1\u00b0\3")
        buf.write("\2\2\2\u00b2\u00b5\3\2\2\2\u00b3\u00b1\3\2\2\2\u00b3\u00b4")
        buf.write("\3\2\2\2\u00b4\u00f9\3\2\2\2\u00b5\u00b3\3\2\2\2\u00b6")
        buf.write("\u00ba\5$\23\2\u00b7\u00b9\t\2\2\2\u00b8\u00b7\3\2\2\2")
        buf.write("\u00b9\u00bc\3\2\2\2\u00ba\u00b8\3\2\2\2\u00ba\u00bb\3")
        buf.write("\2\2\2\u00bb\u00be\3\2\2\2\u00bc\u00ba\3\2\2\2\u00bd\u00bf")
        buf.write("\7\3\2\2\u00be\u00bd\3\2\2\2\u00be\u00bf\3\2\2\2\u00bf")
        buf.write("\u00c0\3\2\2\2\u00c0\u00c4\b\2\1\2\u00c1\u00c3\t\2\2\2")
        buf.write("\u00c2\u00c1\3\2\2\2\u00c3\u00c6\3\2\2\2\u00c4\u00c2\3")
        buf.write("\2\2\2\u00c4\u00c5\3\2\2\2\u00c5\u00e4\3\2\2\2\u00c6\u00c4")
        buf.write("\3\2\2\2\u00c7\u00d5\5$\23\2\u00c8\u00ca\7\67\2\2\u00c9")
        buf.write("\u00c8\3\2\2\2\u00ca\u00cd\3\2\2\2\u00cb\u00c9\3\2\2\2")
        buf.write("\u00cb\u00cc\3\2\2\2\u00cc\u00ce\3\2\2\2\u00cd\u00cb\3")
        buf.write("\2\2\2\u00ce\u00d2\78\2\2\u00cf\u00d1\7\67\2\2\u00d0\u00cf")
        buf.write("\3\2\2\2\u00d1\u00d4\3\2\2\2\u00d2\u00d0\3\2\2\2\u00d2")
        buf.write("\u00d3\3\2\2\2\u00d3\u00d6\3\2\2\2\u00d4\u00d2\3\2\2\2")
        buf.write("\u00d5\u00cb\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7\u00d5\3")
        buf.write("\2\2\2\u00d7\u00d8\3\2\2\2\u00d8\u00e4\3\2\2\2\u00d9\u00dd")
        buf.write("\5\6\4\2\u00da\u00dd\5\4\3\2\u00db\u00dd\5,\27\2\u00dc")
        buf.write("\u00d9\3\2\2\2\u00dc\u00da\3\2\2\2\u00dc\u00db\3\2\2\2")
        buf.write("\u00dd\u00df\3\2\2\2\u00de\u00e0\t\2\2\2\u00df\u00de\3")
        buf.write("\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\u00df\3\2\2\2\u00e1\u00e2")
        buf.write("\3\2\2\2\u00e2\u00e4\3\2\2\2\u00e3\u00b6\3\2\2\2\u00e3")
        buf.write("\u00c7\3\2\2\2\u00e3\u00dc\3\2\2\2\u00e4\u00e7\3\2\2\2")
        buf.write("\u00e5\u00e3\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00f7\3")
        buf.write("\2\2\2\u00e7\u00e5\3\2\2\2\u00e8\u00ec\5$\23\2\u00e9\u00eb")
        buf.write("\t\2\2\2\u00ea\u00e9\3\2\2\2\u00eb\u00ee\3\2\2\2\u00ec")
        buf.write("\u00ea\3\2\2\2\u00ec\u00ed\3\2\2\2\u00ed\u00f0\3\2\2\2")
        buf.write("\u00ee\u00ec\3\2\2\2\u00ef\u00f1\7\3\2\2\u00f0\u00ef\3")
        buf.write("\2\2\2\u00f0\u00f1\3\2\2\2\u00f1\u00f8\3\2\2\2\u00f2\u00f6")
        buf.write("\5\6\4\2\u00f3\u00f6\5\4\3\2\u00f4\u00f6\5,\27\2\u00f5")
        buf.write("\u00f2\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f5\u00f4\3\2\2\2")
        buf.write("\u00f6\u00f8\3\2\2\2\u00f7\u00e8\3\2\2\2\u00f7\u00f5\3")
        buf.write("\2\2\2\u00f8\u00fa\3\2\2\2\u00f9\u00e5\3\2\2\2\u00f9\u00fa")
        buf.write("\3\2\2\2\u00fa\u00fe\3\2\2\2\u00fb\u00fd\t\2\2\2\u00fc")
        buf.write("\u00fb\3\2\2\2\u00fd\u0100\3\2\2\2\u00fe\u00fc\3\2\2\2")
        buf.write("\u00fe\u00ff\3\2\2\2\u00ff\u0102\3\2\2\2\u0100\u00fe\3")
        buf.write("\2\2\2\u0101\u0103\79\2\2\u0102\u0101\3\2\2\2\u0102\u0103")
        buf.write("\3\2\2\2\u0103\u0104\3\2\2\2\u0104\u0106\7\2\2\3\u0105")
        buf.write("a\3\2\2\2\u0105\u00b3\3\2\2\2\u0106\3\3\2\2\2\u0107\u0109")
        buf.write("\7\n\2\2\u0108\u010a\t\2\2\2\u0109\u0108\3\2\2\2\u010a")
        buf.write("\u010b\3\2\2\2\u010b\u0109\3\2\2\2\u010b\u010c\3\2\2\2")
        buf.write("\u010c\u010d\3\2\2\2\u010d\u0111\7\65\2\2\u010e\u0110")
        buf.write("\t\2\2\2\u010f\u010e\3\2\2\2\u0110\u0113\3\2\2\2\u0111")
        buf.write("\u010f\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0114\3\2\2\2")
        buf.write("\u0113\u0111\3\2\2\2\u0114\u0118\7\4\2\2\u0115\u0117\t")
        buf.write("\2\2\2\u0116\u0115\3\2\2\2\u0117\u011a\3\2\2\2\u0118\u0116")
        buf.write("\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u0135\3\2\2\2\u011a")
        buf.write("\u0118\3\2\2\2\u011b\u011f\7\65\2\2\u011c\u011e\t\2\2")
        buf.write("\2\u011d\u011c\3\2\2\2\u011e\u0121\3\2\2\2\u011f\u011d")
        buf.write("\3\2\2\2\u011f\u0120\3\2\2\2\u0120\u0132\3\2\2\2\u0121")
        buf.write("\u011f\3\2\2\2\u0122\u0126\7\5\2\2\u0123\u0125\t\2\2\2")
        buf.write("\u0124\u0123\3\2\2\2\u0125\u0128\3\2\2\2\u0126\u0124\3")
        buf.write("\2\2\2\u0126\u0127\3\2\2\2\u0127\u0129\3\2\2\2\u0128\u0126")
        buf.write("\3\2\2\2\u0129\u012d\7\65\2\2\u012a\u012c\t\2\2\2\u012b")
        buf.write("\u012a\3\2\2\2\u012c\u012f\3\2\2\2\u012d\u012b\3\2\2\2")
        buf.write("\u012d\u012e\3\2\2\2\u012e\u0131\3\2\2\2\u012f\u012d\3")
        buf.write("\2\2\2\u0130\u0122\3\2\2\2\u0131\u0134\3\2\2\2\u0132\u0130")
        buf.write("\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0136\3\2\2\2\u0134")
        buf.write("\u0132\3\2\2\2\u0135\u011b\3\2\2\2\u0135\u0136\3\2\2\2")
        buf.write("\u0136\u0137\3\2\2\2\u0137\u013b\7\6\2\2\u0138\u013a\t")
        buf.write("\2\2\2\u0139\u0138\3\2\2\2\u013a\u013d\3\2\2\2\u013b\u0139")
        buf.write("\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u013e\3\2\2\2\u013d")
        buf.write("\u013b\3\2\2\2\u013e\u0140\7\22\2\2\u013f\u0141\t\2\2")
        buf.write("\2\u0140\u013f\3\2\2\2\u0141\u0142\3\2\2\2\u0142\u0140")
        buf.write("\3\2\2\2\u0142\u0143\3\2\2\2\u0143\u0181\3\2\2\2\u0144")
        buf.write("\u0148\5$\23\2\u0145\u0147\t\2\2\2\u0146\u0145\3\2\2\2")
        buf.write("\u0147\u014a\3\2\2\2\u0148\u0146\3\2\2\2\u0148\u0149\3")
        buf.write("\2\2\2\u0149\u014b\3\2\2\2\u014a\u0148\3\2\2\2\u014b\u014f")
        buf.write("\7\3\2\2\u014c\u014e\t\2\2\2\u014d\u014c\3\2\2\2\u014e")
        buf.write("\u0151\3\2\2\2\u014f\u014d\3\2\2\2\u014f\u0150\3\2\2\2")
        buf.write("\u0150\u016b\3\2\2\2\u0151\u014f\3\2\2\2\u0152\u0160\5")
        buf.write("$\23\2\u0153\u0155\7\67\2\2\u0154\u0153\3\2\2\2\u0155")
        buf.write("\u0158\3\2\2\2\u0156\u0154\3\2\2\2\u0156\u0157\3\2\2\2")
        buf.write("\u0157\u0159\3\2\2\2\u0158\u0156\3\2\2\2\u0159\u015d\7")
        buf.write("8\2\2\u015a\u015c\7\67\2\2\u015b\u015a\3\2\2\2\u015c\u015f")
        buf.write("\3\2\2\2\u015d\u015b\3\2\2\2\u015d\u015e\3\2\2\2\u015e")
        buf.write("\u0161\3\2\2\2\u015f\u015d\3\2\2\2\u0160\u0156\3\2\2\2")
        buf.write("\u0161\u0162\3\2\2\2\u0162\u0160\3\2\2\2\u0162\u0163\3")
        buf.write("\2\2\2\u0163\u016b\3\2\2\2\u0164\u0166\5\6\4\2\u0165\u0167")
        buf.write("\t\2\2\2\u0166\u0165\3\2\2\2\u0167\u0168\3\2\2\2\u0168")
        buf.write("\u0166\3\2\2\2\u0168\u0169\3\2\2\2\u0169\u016b\3\2\2\2")
        buf.write("\u016a\u0144\3\2\2\2\u016a\u0152\3\2\2\2\u016a\u0164\3")
        buf.write("\2\2\2\u016b\u016e\3\2\2\2\u016c\u016a\3\2\2\2\u016c\u016d")
        buf.write("\3\2\2\2\u016d\u017a\3\2\2\2\u016e\u016c\3\2\2\2\u016f")
        buf.write("\u0173\5$\23\2\u0170\u0172\t\2\2\2\u0171\u0170\3\2\2\2")
        buf.write("\u0172\u0175\3\2\2\2\u0173\u0171\3\2\2\2\u0173\u0174\3")
        buf.write("\2\2\2\u0174\u0177\3\2\2\2\u0175\u0173\3\2\2\2\u0176\u0178")
        buf.write("\7\3\2\2\u0177\u0176\3\2\2\2\u0177\u0178\3\2\2\2\u0178")
        buf.write("\u017b\3\2\2\2\u0179\u017b\5\6\4\2\u017a\u016f\3\2\2\2")
        buf.write("\u017a\u0179\3\2\2\2\u017b\u017d\3\2\2\2\u017c\u017e\t")
        buf.write("\2\2\2\u017d\u017c\3\2\2\2\u017e\u017f\3\2\2\2\u017f\u017d")
        buf.write("\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0182\3\2\2\2\u0181")
        buf.write("\u016c\3\2\2\2\u0181\u0182\3\2\2\2\u0182\u0183\3\2\2\2")
        buf.write("\u0183\u0205\7\23\2\2\u0184\u0186\7\n\2\2\u0185\u0187")
        buf.write("\t\2\2\2\u0186\u0185\3\2\2\2\u0187\u0188\3\2\2\2\u0188")
        buf.write("\u0186\3\2\2\2\u0188\u0189\3\2\2\2\u0189\u018a\3\2\2\2")
        buf.write("\u018a\u018e\7\65\2\2\u018b\u018d\t\2\2\2\u018c\u018b")
        buf.write("\3\2\2\2\u018d\u0190\3\2\2\2\u018e\u018c\3\2\2\2\u018e")
        buf.write("\u018f\3\2\2\2\u018f\u0191\3\2\2\2\u0190\u018e\3\2\2\2")
        buf.write("\u0191\u0195\7\4\2\2\u0192\u0194\t\2\2\2\u0193\u0192\3")
        buf.write("\2\2\2\u0194\u0197\3\2\2\2\u0195\u0193\3\2\2\2\u0195\u0196")
        buf.write("\3\2\2\2\u0196\u01b2\3\2\2\2\u0197\u0195\3\2\2\2\u0198")
        buf.write("\u019c\7\65\2\2\u0199\u019b\t\2\2\2\u019a\u0199\3\2\2")
        buf.write("\2\u019b\u019e\3\2\2\2\u019c\u019a\3\2\2\2\u019c\u019d")
        buf.write("\3\2\2\2\u019d\u01af\3\2\2\2\u019e\u019c\3\2\2\2\u019f")
        buf.write("\u01a3\7\5\2\2\u01a0\u01a2\t\2\2\2\u01a1\u01a0\3\2\2\2")
        buf.write("\u01a2\u01a5\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a3\u01a4\3")
        buf.write("\2\2\2\u01a4\u01a6\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a6\u01aa")
        buf.write("\7\65\2\2\u01a7\u01a9\t\2\2\2\u01a8\u01a7\3\2\2\2\u01a9")
        buf.write("\u01ac\3\2\2\2\u01aa\u01a8\3\2\2\2\u01aa\u01ab\3\2\2\2")
        buf.write("\u01ab\u01ae\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ad\u019f\3")
        buf.write("\2\2\2\u01ae\u01b1\3\2\2\2\u01af\u01ad\3\2\2\2\u01af\u01b0")
        buf.write("\3\2\2\2\u01b0\u01b3\3\2\2\2\u01b1\u01af\3\2\2\2\u01b2")
        buf.write("\u0198\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01b4\3\2\2\2")
        buf.write("\u01b4\u01b8\7\6\2\2\u01b5\u01b7\t\2\2\2\u01b6\u01b5\3")
        buf.write("\2\2\2\u01b7\u01ba\3\2\2\2\u01b8\u01b6\3\2\2\2\u01b8\u01b9")
        buf.write("\3\2\2\2\u01b9\u01bb\3\2\2\2\u01ba\u01b8\3\2\2\2\u01bb")
        buf.write("\u01bd\7\22\2\2\u01bc\u01be\t\2\2\2\u01bd\u01bc\3\2\2")
        buf.write("\2\u01be\u01bf\3\2\2\2\u01bf\u01bd\3\2\2\2\u01bf\u01c0")
        buf.write("\3\2\2\2\u01c0\u0201\3\2\2\2\u01c1\u01c5\5$\23\2\u01c2")
        buf.write("\u01c4\t\2\2\2\u01c3\u01c2\3\2\2\2\u01c4\u01c7\3\2\2\2")
        buf.write("\u01c5\u01c3\3\2\2\2\u01c5\u01c6\3\2\2\2\u01c6\u01c9\3")
        buf.write("\2\2\2\u01c7\u01c5\3\2\2\2\u01c8\u01ca\7\3\2\2\u01c9\u01c8")
        buf.write("\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb")
        buf.write("\u01cf\b\3\1\2\u01cc\u01ce\t\2\2\2\u01cd\u01cc\3\2\2\2")
        buf.write("\u01ce\u01d1\3\2\2\2\u01cf\u01cd\3\2\2\2\u01cf\u01d0\3")
        buf.write("\2\2\2\u01d0\u01eb\3\2\2\2\u01d1\u01cf\3\2\2\2\u01d2\u01e0")
        buf.write("\5$\23\2\u01d3\u01d5\7\67\2\2\u01d4\u01d3\3\2\2\2\u01d5")
        buf.write("\u01d8\3\2\2\2\u01d6\u01d4\3\2\2\2\u01d6\u01d7\3\2\2\2")
        buf.write("\u01d7\u01d9\3\2\2\2\u01d8\u01d6\3\2\2\2\u01d9\u01dd\7")
        buf.write("8\2\2\u01da\u01dc\7\67\2\2\u01db\u01da\3\2\2\2\u01dc\u01df")
        buf.write("\3\2\2\2\u01dd\u01db\3\2\2\2\u01dd\u01de\3\2\2\2\u01de")
        buf.write("\u01e1\3\2\2\2\u01df\u01dd\3\2\2\2\u01e0\u01d6\3\2\2\2")
        buf.write("\u01e1\u01e2\3\2\2\2\u01e2\u01e0\3\2\2\2\u01e2\u01e3\3")
        buf.write("\2\2\2\u01e3\u01eb\3\2\2\2\u01e4\u01e6\5\6\4\2\u01e5\u01e7")
        buf.write("\t\2\2\2\u01e6\u01e5\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8")
        buf.write("\u01e6\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9\u01eb\3\2\2\2")
        buf.write("\u01ea\u01c1\3\2\2\2\u01ea\u01d2\3\2\2\2\u01ea\u01e4\3")
        buf.write("\2\2\2\u01eb\u01ee\3\2\2\2\u01ec\u01ea\3\2\2\2\u01ec\u01ed")
        buf.write("\3\2\2\2\u01ed\u01fa\3\2\2\2\u01ee\u01ec\3\2\2\2\u01ef")
        buf.write("\u01f3\5$\23\2\u01f0\u01f2\t\2\2\2\u01f1\u01f0\3\2\2\2")
        buf.write("\u01f2\u01f5\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f3\u01f4\3")
        buf.write("\2\2\2\u01f4\u01f7\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f6\u01f8")
        buf.write("\7\3\2\2\u01f7\u01f6\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8")
        buf.write("\u01fb\3\2\2\2\u01f9\u01fb\5\6\4\2\u01fa\u01ef\3\2\2\2")
        buf.write("\u01fa\u01f9\3\2\2\2\u01fb\u01fd\3\2\2\2\u01fc\u01fe\t")
        buf.write("\2\2\2\u01fd\u01fc\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u01fd")
        buf.write("\3\2\2\2\u01ff\u0200\3\2\2\2\u0200\u0202\3\2\2\2\u0201")
        buf.write("\u01ec\3\2\2\2\u0201\u0202\3\2\2\2\u0202\u0203\3\2\2\2")
        buf.write("\u0203\u0205\7\23\2\2\u0204\u0107\3\2\2\2\u0204\u0184")
        buf.write("\3\2\2\2\u0205\5\3\2\2\2\u0206\u020a\5\f\7\2\u0207\u020a")
        buf.write("\5\n\6\2\u0208\u020a\5\b\5\2\u0209\u0206\3\2\2\2\u0209")
        buf.write("\u0207\3\2\2\2\u0209\u0208\3\2\2\2\u020a\7\3\2\2\2\u020b")
        buf.write("\u020d\7\f\2\2\u020c\u020e\t\2\2\2\u020d\u020c\3\2\2\2")
        buf.write("\u020e\u020f\3\2\2\2\u020f\u020d\3\2\2\2\u020f\u0210\3")
        buf.write("\2\2\2\u0210\u0211\3\2\2\2\u0211\u0213\7\65\2\2\u0212")
        buf.write("\u0214\t\2\2\2\u0213\u0212\3\2\2\2\u0214\u0215\3\2\2\2")
        buf.write("\u0215\u0213\3\2\2\2\u0215\u0216\3\2\2\2\u0216\u0217\3")
        buf.write("\2\2\2\u0217\u0219\7\r\2\2\u0218\u021a\t\2\2\2\u0219\u0218")
        buf.write("\3\2\2\2\u021a\u021b\3\2\2\2\u021b\u0219\3\2\2\2\u021b")
        buf.write("\u021c\3\2\2\2\u021c\u0220\3\2\2\2\u021d\u0221\7\65\2")
        buf.write("\2\u021e\u0221\5X-\2\u021f\u0221\5Z.\2\u0220\u021d\3\2")
        buf.write("\2\2\u0220\u021e\3\2\2\2\u0220\u021f\3\2\2\2\u0221\u0223")
        buf.write("\3\2\2\2\u0222\u0224\t\2\2\2\u0223\u0222\3\2\2\2\u0224")
        buf.write("\u0225\3\2\2\2\u0225\u0223\3\2\2\2\u0225\u0226\3\2\2\2")
        buf.write("\u0226\u0227\3\2\2\2\u0227\u0229\7\16\2\2\u0228\u022a")
        buf.write("\t\2\2\2\u0229\u0228\3\2\2\2\u022a\u022b\3\2\2\2\u022b")
        buf.write("\u0229\3\2\2\2\u022b\u022c\3\2\2\2\u022c\u026f\3\2\2\2")
        buf.write("\u022d\u0231\5$\23\2\u022e\u0230\t\2\2\2\u022f\u022e\3")
        buf.write("\2\2\2\u0230\u0233\3\2\2\2\u0231\u022f\3\2\2\2\u0231\u0232")
        buf.write("\3\2\2\2\u0232\u0234\3\2\2\2\u0233\u0231\3\2\2\2\u0234")
        buf.write("\u0238\7\3\2\2\u0235\u0237\t\2\2\2\u0236\u0235\3\2\2\2")
        buf.write("\u0237\u023a\3\2\2\2\u0238\u0236\3\2\2\2\u0238\u0239\3")
        buf.write("\2\2\2\u0239\u0254\3\2\2\2\u023a\u0238\3\2\2\2\u023b\u0249")
        buf.write("\5$\23\2\u023c\u023e\7\67\2\2\u023d\u023c\3\2\2\2\u023e")
        buf.write("\u0241\3\2\2\2\u023f\u023d\3\2\2\2\u023f\u0240\3\2\2\2")
        buf.write("\u0240\u0242\3\2\2\2\u0241\u023f\3\2\2\2\u0242\u0246\7")
        buf.write("8\2\2\u0243\u0245\7\67\2\2\u0244\u0243\3\2\2\2\u0245\u0248")
        buf.write("\3\2\2\2\u0246\u0244\3\2\2\2\u0246\u0247\3\2\2\2\u0247")
        buf.write("\u024a\3\2\2\2\u0248\u0246\3\2\2\2\u0249\u023f\3\2\2\2")
        buf.write("\u024a\u024b\3\2\2\2\u024b\u0249\3\2\2\2\u024b\u024c\3")
        buf.write("\2\2\2\u024c\u0254\3\2\2\2\u024d\u024f\5\6\4\2\u024e\u0250")
        buf.write("\t\2\2\2\u024f\u024e\3\2\2\2\u0250\u0251\3\2\2\2\u0251")
        buf.write("\u024f\3\2\2\2\u0251\u0252\3\2\2\2\u0252\u0254\3\2\2\2")
        buf.write("\u0253\u022d\3\2\2\2\u0253\u023b\3\2\2\2\u0253\u024d\3")
        buf.write("\2\2\2\u0254\u0257\3\2\2\2\u0255\u0253\3\2\2\2\u0255\u0256")
        buf.write("\3\2\2\2\u0256\u026d\3\2\2\2\u0257\u0255\3\2\2\2\u0258")
        buf.write("\u025c\5$\23\2\u0259\u025b\t\2\2\2\u025a\u0259\3\2\2\2")
        buf.write("\u025b\u025e\3\2\2\2\u025c\u025a\3\2\2\2\u025c\u025d\3")
        buf.write("\2\2\2\u025d\u0265\3\2\2\2\u025e\u025c\3\2\2\2\u025f\u0266")
        buf.write("\7\3\2\2\u0260\u0262\t\2\2\2\u0261\u0260\3\2\2\2\u0262")
        buf.write("\u0263\3\2\2\2\u0263\u0261\3\2\2\2\u0263\u0264\3\2\2\2")
        buf.write("\u0264\u0266\3\2\2\2\u0265\u025f\3\2\2\2\u0265\u0261\3")
        buf.write("\2\2\2\u0266\u026e\3\2\2\2\u0267\u0269\5\6\4\2\u0268\u026a")
        buf.write("\t\2\2\2\u0269\u0268\3\2\2\2\u026a\u026b\3\2\2\2\u026b")
        buf.write("\u0269\3\2\2\2\u026b\u026c\3\2\2\2\u026c\u026e\3\2\2\2")
        buf.write("\u026d\u0258\3\2\2\2\u026d\u0267\3\2\2\2\u026e\u0270\3")
        buf.write("\2\2\2\u026f\u0255\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u0271")
        buf.write("\3\2\2\2\u0271\u02dd\7\23\2\2\u0272\u0274\7\f\2\2\u0273")
        buf.write("\u0275\t\2\2\2\u0274\u0273\3\2\2\2\u0275\u0276\3\2\2\2")
        buf.write("\u0276\u0274\3\2\2\2\u0276\u0277\3\2\2\2\u0277\u0278\3")
        buf.write("\2\2\2\u0278\u027a\7\65\2\2\u0279\u027b\t\2\2\2\u027a")
        buf.write("\u0279\3\2\2\2\u027b\u027c\3\2\2\2\u027c\u027a\3\2\2\2")
        buf.write("\u027c\u027d\3\2\2\2\u027d\u027e\3\2\2\2\u027e\u0280\7")
        buf.write("\r\2\2\u027f\u0281\t\2\2\2\u0280\u027f\3\2\2\2\u0281\u0282")
        buf.write("\3\2\2\2\u0282\u0280\3\2\2\2\u0282\u0283\3\2\2\2\u0283")
        buf.write("\u0287\3\2\2\2\u0284\u0288\7\65\2\2\u0285\u0288\5X-\2")
        buf.write("\u0286\u0288\5Z.\2\u0287\u0284\3\2\2\2\u0287\u0285\3\2")
        buf.write("\2\2\u0287\u0286\3\2\2\2\u0288\u028a\3\2\2\2\u0289\u028b")
        buf.write("\t\2\2\2\u028a\u0289\3\2\2\2\u028b\u028c\3\2\2\2\u028c")
        buf.write("\u028a\3\2\2\2\u028c\u028d\3\2\2\2\u028d\u028e\3\2\2\2")
        buf.write("\u028e\u0290\7\16\2\2\u028f\u0291\t\2\2\2\u0290\u028f")
        buf.write("\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0290\3\2\2\2\u0292")
        buf.write("\u0293\3\2\2\2\u0293\u02d9\3\2\2\2\u0294\u0298\5$\23\2")
        buf.write("\u0295\u0297\t\2\2\2\u0296\u0295\3\2\2\2\u0297\u029a\3")
        buf.write("\2\2\2\u0298\u0296\3\2\2\2\u0298\u0299\3\2\2\2\u0299\u029c")
        buf.write("\3\2\2\2\u029a\u0298\3\2\2\2\u029b\u029d\7\3\2\2\u029c")
        buf.write("\u029b\3\2\2\2\u029c\u029d\3\2\2\2\u029d\u029e\3\2\2\2")
        buf.write("\u029e\u02a2\b\5\1\2\u029f\u02a1\t\2\2\2\u02a0\u029f\3")
        buf.write("\2\2\2\u02a1\u02a4\3\2\2\2\u02a2\u02a0\3\2\2\2\u02a2\u02a3")
        buf.write("\3\2\2\2\u02a3\u02be\3\2\2\2\u02a4\u02a2\3\2\2\2\u02a5")
        buf.write("\u02b3\5$\23\2\u02a6\u02a8\7\67\2\2\u02a7\u02a6\3\2\2")
        buf.write("\2\u02a8\u02ab\3\2\2\2\u02a9\u02a7\3\2\2\2\u02a9\u02aa")
        buf.write("\3\2\2\2\u02aa\u02ac\3\2\2\2\u02ab\u02a9\3\2\2\2\u02ac")
        buf.write("\u02b0\78\2\2\u02ad\u02af\7\67\2\2\u02ae\u02ad\3\2\2\2")
        buf.write("\u02af\u02b2\3\2\2\2\u02b0\u02ae\3\2\2\2\u02b0\u02b1\3")
        buf.write("\2\2\2\u02b1\u02b4\3\2\2\2\u02b2\u02b0\3\2\2\2\u02b3\u02a9")
        buf.write("\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b3\3\2\2\2\u02b5")
        buf.write("\u02b6\3\2\2\2\u02b6\u02be\3\2\2\2\u02b7\u02b9\5\6\4\2")
        buf.write("\u02b8\u02ba\t\2\2\2\u02b9\u02b8\3\2\2\2\u02ba\u02bb\3")
        buf.write("\2\2\2\u02bb\u02b9\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc\u02be")
        buf.write("\3\2\2\2\u02bd\u0294\3\2\2\2\u02bd\u02a5\3\2\2\2\u02bd")
        buf.write("\u02b7\3\2\2\2\u02be\u02c1\3\2\2\2\u02bf\u02bd\3\2\2\2")
        buf.write("\u02bf\u02c0\3\2\2\2\u02c0\u02d7\3\2\2\2\u02c1\u02bf\3")
        buf.write("\2\2\2\u02c2\u02c6\5$\23\2\u02c3\u02c5\t\2\2\2\u02c4\u02c3")
        buf.write("\3\2\2\2\u02c5\u02c8\3\2\2\2\u02c6\u02c4\3\2\2\2\u02c6")
        buf.write("\u02c7\3\2\2\2\u02c7\u02cf\3\2\2\2\u02c8\u02c6\3\2\2\2")
        buf.write("\u02c9\u02d0\7\3\2\2\u02ca\u02cc\t\2\2\2\u02cb\u02ca\3")
        buf.write("\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02cb\3\2\2\2\u02cd\u02ce")
        buf.write("\3\2\2\2\u02ce\u02d0\3\2\2\2\u02cf\u02c9\3\2\2\2\u02cf")
        buf.write("\u02cb\3\2\2\2\u02d0\u02d8\3\2\2\2\u02d1\u02d3\5\6\4\2")
        buf.write("\u02d2\u02d4\t\2\2\2\u02d3\u02d2\3\2\2\2\u02d4\u02d5\3")
        buf.write("\2\2\2\u02d5\u02d3\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6\u02d8")
        buf.write("\3\2\2\2\u02d7\u02c2\3\2\2\2\u02d7\u02d1\3\2\2\2\u02d8")
        buf.write("\u02da\3\2\2\2\u02d9\u02bf\3\2\2\2\u02d9\u02da\3\2\2\2")
        buf.write("\u02da\u02db\3\2\2\2\u02db\u02dd\7\23\2\2\u02dc\u020b")
        buf.write("\3\2\2\2\u02dc\u0272\3\2\2\2\u02dd\t\3\2\2\2\u02de\u02e0")
        buf.write("\7\13\2\2\u02df\u02e1\t\2\2\2\u02e0\u02df\3\2\2\2\u02e1")
        buf.write("\u02e2\3\2\2\2\u02e2\u02e0\3\2\2\2\u02e2\u02e3\3\2\2\2")
        buf.write("\u02e3\u02e4\3\2\2\2\u02e4\u02e6\5\26\f\2\u02e5\u02e7")
        buf.write("\t\2\2\2\u02e6\u02e5\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8")
        buf.write("\u02e6\3\2\2\2\u02e8\u02e9\3\2\2\2\u02e9\u02ea\3\2\2\2")
        buf.write("\u02ea\u02ec\7\16\2\2\u02eb\u02ed\t\2\2\2\u02ec\u02eb")
        buf.write("\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee\u02ec\3\2\2\2\u02ee")
        buf.write("\u02ef\3\2\2\2\u02ef\u0332\3\2\2\2\u02f0\u02f4\5$\23\2")
        buf.write("\u02f1\u02f3\t\2\2\2\u02f2\u02f1\3\2\2\2\u02f3\u02f6\3")
        buf.write("\2\2\2\u02f4\u02f2\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02f7")
        buf.write("\3\2\2\2\u02f6\u02f4\3\2\2\2\u02f7\u02fb\7\3\2\2\u02f8")
        buf.write("\u02fa\t\2\2\2\u02f9\u02f8\3\2\2\2\u02fa\u02fd\3\2\2\2")
        buf.write("\u02fb\u02f9\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc\u0317\3")
        buf.write("\2\2\2\u02fd\u02fb\3\2\2\2\u02fe\u030c\5$\23\2\u02ff\u0301")
        buf.write("\7\67\2\2\u0300\u02ff\3\2\2\2\u0301\u0304\3\2\2\2\u0302")
        buf.write("\u0300\3\2\2\2\u0302\u0303\3\2\2\2\u0303\u0305\3\2\2\2")
        buf.write("\u0304\u0302\3\2\2\2\u0305\u0309\78\2\2\u0306\u0308\7")
        buf.write("\67\2\2\u0307\u0306\3\2\2\2\u0308\u030b\3\2\2\2\u0309")
        buf.write("\u0307\3\2\2\2\u0309\u030a\3\2\2\2\u030a\u030d\3\2\2\2")
        buf.write("\u030b\u0309\3\2\2\2\u030c\u0302\3\2\2\2\u030d\u030e\3")
        buf.write("\2\2\2\u030e\u030c\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0317")
        buf.write("\3\2\2\2\u0310\u0312\5\6\4\2\u0311\u0313\t\2\2\2\u0312")
        buf.write("\u0311\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0312\3\2\2\2")
        buf.write("\u0314\u0315\3\2\2\2\u0315\u0317\3\2\2\2\u0316\u02f0\3")
        buf.write("\2\2\2\u0316\u02fe\3\2\2\2\u0316\u0310\3\2\2\2\u0317\u031a")
        buf.write("\3\2\2\2\u0318\u0316\3\2\2\2\u0318\u0319\3\2\2\2\u0319")
        buf.write("\u0330\3\2\2\2\u031a\u0318\3\2\2\2\u031b\u031f\5$\23\2")
        buf.write("\u031c\u031e\t\2\2\2\u031d\u031c\3\2\2\2\u031e\u0321\3")
        buf.write("\2\2\2\u031f\u031d\3\2\2\2\u031f\u0320\3\2\2\2\u0320\u0328")
        buf.write("\3\2\2\2\u0321\u031f\3\2\2\2\u0322\u0329\7\3\2\2\u0323")
        buf.write("\u0325\t\2\2\2\u0324\u0323\3\2\2\2\u0325\u0326\3\2\2\2")
        buf.write("\u0326\u0324\3\2\2\2\u0326\u0327\3\2\2\2\u0327\u0329\3")
        buf.write("\2\2\2\u0328\u0322\3\2\2\2\u0328\u0324\3\2\2\2\u0329\u0331")
        buf.write("\3\2\2\2\u032a\u032c\5\6\4\2\u032b\u032d\t\2\2\2\u032c")
        buf.write("\u032b\3\2\2\2\u032d\u032e\3\2\2\2\u032e\u032c\3\2\2\2")
        buf.write("\u032e\u032f\3\2\2\2\u032f\u0331\3\2\2\2\u0330\u031b\3")
        buf.write("\2\2\2\u0330\u032a\3\2\2\2\u0331\u0333\3\2\2\2\u0332\u0318")
        buf.write("\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0334\3\2\2\2\u0334")
        buf.write("\u0335\7\23\2\2\u0335\u0392\3\2\2\2\u0336\u0338\7\13\2")
        buf.write("\2\u0337\u0339\t\2\2\2\u0338\u0337\3\2\2\2\u0339\u033a")
        buf.write("\3\2\2\2\u033a\u0338\3\2\2\2\u033a\u033b\3\2\2\2\u033b")
        buf.write("\u033c\3\2\2\2\u033c\u033e\5\26\f\2\u033d\u033f\t\2\2")
        buf.write("\2\u033e\u033d\3\2\2\2\u033f\u0340\3\2\2\2\u0340\u033e")
        buf.write("\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u0342\3\2\2\2\u0342")
        buf.write("\u0344\7\16\2\2\u0343\u0345\t\2\2\2\u0344\u0343\3\2\2")
        buf.write("\2\u0345\u0346\3\2\2\2\u0346\u0344\3\2\2\2\u0346\u0347")
        buf.write("\3\2\2\2\u0347\u038d\3\2\2\2\u0348\u034c\5$\23\2\u0349")
        buf.write("\u034b\t\2\2\2\u034a\u0349\3\2\2\2\u034b\u034e\3\2\2\2")
        buf.write("\u034c\u034a\3\2\2\2\u034c\u034d\3\2\2\2\u034d\u0350\3")
        buf.write("\2\2\2\u034e\u034c\3\2\2\2\u034f\u0351\7\3\2\2\u0350\u034f")
        buf.write("\3\2\2\2\u0350\u0351\3\2\2\2\u0351\u0352\3\2\2\2\u0352")
        buf.write("\u0356\b\6\1\2\u0353\u0355\t\2\2\2\u0354\u0353\3\2\2\2")
        buf.write("\u0355\u0358\3\2\2\2\u0356\u0354\3\2\2\2\u0356\u0357\3")
        buf.write("\2\2\2\u0357\u0372\3\2\2\2\u0358\u0356\3\2\2\2\u0359\u0367")
        buf.write("\5$\23\2\u035a\u035c\7\67\2\2\u035b\u035a\3\2\2\2\u035c")
        buf.write("\u035f\3\2\2\2\u035d\u035b\3\2\2\2\u035d\u035e\3\2\2\2")
        buf.write("\u035e\u0360\3\2\2\2\u035f\u035d\3\2\2\2\u0360\u0364\7")
        buf.write("8\2\2\u0361\u0363\7\67\2\2\u0362\u0361\3\2\2\2\u0363\u0366")
        buf.write("\3\2\2\2\u0364\u0362\3\2\2\2\u0364\u0365\3\2\2\2\u0365")
        buf.write("\u0368\3\2\2\2\u0366\u0364\3\2\2\2\u0367\u035d\3\2\2\2")
        buf.write("\u0368\u0369\3\2\2\2\u0369\u0367\3\2\2\2\u0369\u036a\3")
        buf.write("\2\2\2\u036a\u0372\3\2\2\2\u036b\u036d\5\6\4\2\u036c\u036e")
        buf.write("\t\2\2\2\u036d\u036c\3\2\2\2\u036e\u036f\3\2\2\2\u036f")
        buf.write("\u036d\3\2\2\2\u036f\u0370\3\2\2\2\u0370\u0372\3\2\2\2")
        buf.write("\u0371\u0348\3\2\2\2\u0371\u0359\3\2\2\2\u0371\u036b\3")
        buf.write("\2\2\2\u0372\u0375\3\2\2\2\u0373\u0371\3\2\2\2\u0373\u0374")
        buf.write("\3\2\2\2\u0374\u038b\3\2\2\2\u0375\u0373\3\2\2\2\u0376")
        buf.write("\u037a\5$\23\2\u0377\u0379\t\2\2\2\u0378\u0377\3\2\2\2")
        buf.write("\u0379\u037c\3\2\2\2\u037a\u0378\3\2\2\2\u037a\u037b\3")
        buf.write("\2\2\2\u037b\u0383\3\2\2\2\u037c\u037a\3\2\2\2\u037d\u0384")
        buf.write("\7\3\2\2\u037e\u0380\t\2\2\2\u037f\u037e\3\2\2\2\u0380")
        buf.write("\u0381\3\2\2\2\u0381\u037f\3\2\2\2\u0381\u0382\3\2\2\2")
        buf.write("\u0382\u0384\3\2\2\2\u0383\u037d\3\2\2\2\u0383\u037f\3")
        buf.write("\2\2\2\u0384\u038c\3\2\2\2\u0385\u0387\5\6\4\2\u0386\u0388")
        buf.write("\t\2\2\2\u0387\u0386\3\2\2\2\u0388\u0389\3\2\2\2\u0389")
        buf.write("\u0387\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u038c\3\2\2\2")
        buf.write("\u038b\u0376\3\2\2\2\u038b\u0385\3\2\2\2\u038c\u038e\3")
        buf.write("\2\2\2\u038d\u0373\3\2\2\2\u038d\u038e\3\2\2\2\u038e\u038f")
        buf.write("\3\2\2\2\u038f\u0390\7\23\2\2\u0390\u0392\3\2\2\2\u0391")
        buf.write("\u02de\3\2\2\2\u0391\u0336\3\2\2\2\u0392\13\3\2\2\2\u0393")
        buf.write("\u0394\5\16\b\2\u0394\u0398\5\20\t\2\u0395\u0397\5\22")
        buf.write("\n\2\u0396\u0395\3\2\2\2\u0397\u039a\3\2\2\2\u0398\u0396")
        buf.write("\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u039c\3\2\2\2\u039a")
        buf.write("\u0398\3\2\2\2\u039b\u039d\5\24\13\2\u039c\u039b\3\2\2")
        buf.write("\2\u039c\u039d\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u039f")
        buf.write("\7\23\2\2\u039f\u03ae\3\2\2\2\u03a0\u03a1\5\16\b\2\u03a1")
        buf.write("\u03a5\5\20\t\2\u03a2\u03a4\5\22\n\2\u03a3\u03a2\3\2\2")
        buf.write("\2\u03a4\u03a7\3\2\2\2\u03a5\u03a3\3\2\2\2\u03a5\u03a6")
        buf.write("\3\2\2\2\u03a6\u03a9\3\2\2\2\u03a7\u03a5\3\2\2\2\u03a8")
        buf.write("\u03aa\5\24\13\2\u03a9\u03a8\3\2\2\2\u03a9\u03aa\3\2\2")
        buf.write("\2\u03aa\u03ab\3\2\2\2\u03ab\u03ac\b\7\1\2\u03ac\u03ae")
        buf.write("\3\2\2\2\u03ad\u0393\3\2\2\2\u03ad\u03a0\3\2\2\2\u03ae")
        buf.write("\r\3\2\2\2\u03af\u03b1\7\17\2\2\u03b0\u03b2\t\2\2\2\u03b1")
        buf.write("\u03b0\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b1\3\2\2\2")
        buf.write("\u03b3\u03b4\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5\u03b7\5")
        buf.write("\26\f\2\u03b6\u03b8\t\2\2\2\u03b7\u03b6\3\2\2\2\u03b8")
        buf.write("\u03b9\3\2\2\2\u03b9\u03b7\3\2\2\2\u03b9\u03ba\3\2\2\2")
        buf.write("\u03ba\17\3\2\2\2\u03bb\u03bd\7\20\2\2\u03bc\u03be\t\2")
        buf.write("\2\2\u03bd\u03bc\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u03bd")
        buf.write("\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\u0403\3\2\2\2\u03c1")
        buf.write("\u03c5\5$\23\2\u03c2\u03c4\t\2\2\2\u03c3\u03c2\3\2\2\2")
        buf.write("\u03c4\u03c7\3\2\2\2\u03c5\u03c3\3\2\2\2\u03c5\u03c6\3")
        buf.write("\2\2\2\u03c6\u03c8\3\2\2\2\u03c7\u03c5\3\2\2\2\u03c8\u03cc")
        buf.write("\7\3\2\2\u03c9\u03cb\t\2\2\2\u03ca\u03c9\3\2\2\2\u03cb")
        buf.write("\u03ce\3\2\2\2\u03cc\u03ca\3\2\2\2\u03cc\u03cd\3\2\2\2")
        buf.write("\u03cd\u03e8\3\2\2\2\u03ce\u03cc\3\2\2\2\u03cf\u03dd\5")
        buf.write("$\23\2\u03d0\u03d2\7\67\2\2\u03d1\u03d0\3\2\2\2\u03d2")
        buf.write("\u03d5\3\2\2\2\u03d3\u03d1\3\2\2\2\u03d3\u03d4\3\2\2\2")
        buf.write("\u03d4\u03d6\3\2\2\2\u03d5\u03d3\3\2\2\2\u03d6\u03da\7")
        buf.write("8\2\2\u03d7\u03d9\7\67\2\2\u03d8\u03d7\3\2\2\2\u03d9\u03dc")
        buf.write("\3\2\2\2\u03da\u03d8\3\2\2\2\u03da\u03db\3\2\2\2\u03db")
        buf.write("\u03de\3\2\2\2\u03dc\u03da\3\2\2\2\u03dd\u03d3\3\2\2\2")
        buf.write("\u03de\u03df\3\2\2\2\u03df\u03dd\3\2\2\2\u03df\u03e0\3")
        buf.write("\2\2\2\u03e0\u03e8\3\2\2\2\u03e1\u03e3\5\6\4\2\u03e2\u03e4")
        buf.write("\t\2\2\2\u03e3\u03e2\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5")
        buf.write("\u03e3\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03e8\3\2\2\2")
        buf.write("\u03e7\u03c1\3\2\2\2\u03e7\u03cf\3\2\2\2\u03e7\u03e1\3")
        buf.write("\2\2\2\u03e8\u03eb\3\2\2\2\u03e9\u03e7\3\2\2\2\u03e9\u03ea")
        buf.write("\3\2\2\2\u03ea\u0401\3\2\2\2\u03eb\u03e9\3\2\2\2\u03ec")
        buf.write("\u03f0\5$\23\2\u03ed\u03ef\t\2\2\2\u03ee\u03ed\3\2\2\2")
        buf.write("\u03ef\u03f2\3\2\2\2\u03f0\u03ee\3\2\2\2\u03f0\u03f1\3")
        buf.write("\2\2\2\u03f1\u03f9\3\2\2\2\u03f2\u03f0\3\2\2\2\u03f3\u03fa")
        buf.write("\7\3\2\2\u03f4\u03f6\t\2\2\2\u03f5\u03f4\3\2\2\2\u03f6")
        buf.write("\u03f7\3\2\2\2\u03f7\u03f5\3\2\2\2\u03f7\u03f8\3\2\2\2")
        buf.write("\u03f8\u03fa\3\2\2\2\u03f9\u03f3\3\2\2\2\u03f9\u03f5\3")
        buf.write("\2\2\2\u03fa\u0402\3\2\2\2\u03fb\u03fd\5\6\4\2\u03fc\u03fe")
        buf.write("\t\2\2\2\u03fd\u03fc\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff")
        buf.write("\u03fd\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u0402\3\2\2\2")
        buf.write("\u0401\u03ec\3\2\2\2\u0401\u03fb\3\2\2\2\u0402\u0404\3")
        buf.write("\2\2\2\u0403\u03e9\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u0453")
        buf.write("\3\2\2\2\u0405\u0407\7\20\2\2\u0406\u0408\t\2\2\2\u0407")
        buf.write("\u0406\3\2\2\2\u0408\u0409\3\2\2\2\u0409\u0407\3\2\2\2")
        buf.write("\u0409\u040a\3\2\2\2\u040a\u0450\3\2\2\2\u040b\u040f\5")
        buf.write("$\23\2\u040c\u040e\t\2\2\2\u040d\u040c\3\2\2\2\u040e\u0411")
        buf.write("\3\2\2\2\u040f\u040d\3\2\2\2\u040f\u0410\3\2\2\2\u0410")
        buf.write("\u0413\3\2\2\2\u0411\u040f\3\2\2\2\u0412\u0414\7\3\2\2")
        buf.write("\u0413\u0412\3\2\2\2\u0413\u0414\3\2\2\2\u0414\u0415\3")
        buf.write("\2\2\2\u0415\u0419\b\t\1\2\u0416\u0418\t\2\2\2\u0417\u0416")
        buf.write("\3\2\2\2\u0418\u041b\3\2\2\2\u0419\u0417\3\2\2\2\u0419")
        buf.write("\u041a\3\2\2\2\u041a\u0435\3\2\2\2\u041b\u0419\3\2\2\2")
        buf.write("\u041c\u042a\5$\23\2\u041d\u041f\7\67\2\2\u041e\u041d")
        buf.write("\3\2\2\2\u041f\u0422\3\2\2\2\u0420\u041e\3\2\2\2\u0420")
        buf.write("\u0421\3\2\2\2\u0421\u0423\3\2\2\2\u0422\u0420\3\2\2\2")
        buf.write("\u0423\u0427\78\2\2\u0424\u0426\7\67\2\2\u0425\u0424\3")
        buf.write("\2\2\2\u0426\u0429\3\2\2\2\u0427\u0425\3\2\2\2\u0427\u0428")
        buf.write("\3\2\2\2\u0428\u042b\3\2\2\2\u0429\u0427\3\2\2\2\u042a")
        buf.write("\u0420\3\2\2\2\u042b\u042c\3\2\2\2\u042c\u042a\3\2\2\2")
        buf.write("\u042c\u042d\3\2\2\2\u042d\u0435\3\2\2\2\u042e\u0430\5")
        buf.write("\6\4\2\u042f\u0431\t\2\2\2\u0430\u042f\3\2\2\2\u0431\u0432")
        buf.write("\3\2\2\2\u0432\u0430\3\2\2\2\u0432\u0433\3\2\2\2\u0433")
        buf.write("\u0435\3\2\2\2\u0434\u040b\3\2\2\2\u0434\u041c\3\2\2\2")
        buf.write("\u0434\u042e\3\2\2\2\u0435\u0438\3\2\2\2\u0436\u0434\3")
        buf.write("\2\2\2\u0436\u0437\3\2\2\2\u0437\u044e\3\2\2\2\u0438\u0436")
        buf.write("\3\2\2\2\u0439\u043d\5$\23\2\u043a\u043c\t\2\2\2\u043b")
        buf.write("\u043a\3\2\2\2\u043c\u043f\3\2\2\2\u043d\u043b\3\2\2\2")
        buf.write("\u043d\u043e\3\2\2\2\u043e\u0446\3\2\2\2\u043f\u043d\3")
        buf.write("\2\2\2\u0440\u0447\7\3\2\2\u0441\u0443\t\2\2\2\u0442\u0441")
        buf.write("\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0442\3\2\2\2\u0444")
        buf.write("\u0445\3\2\2\2\u0445\u0447\3\2\2\2\u0446\u0440\3\2\2\2")
        buf.write("\u0446\u0442\3\2\2\2\u0447\u044f\3\2\2\2\u0448\u044a\5")
        buf.write("\6\4\2\u0449\u044b\t\2\2\2\u044a\u0449\3\2\2\2\u044b\u044c")
        buf.write("\3\2\2\2\u044c\u044a\3\2\2\2\u044c\u044d\3\2\2\2\u044d")
        buf.write("\u044f\3\2\2\2\u044e\u0439\3\2\2\2\u044e\u0448\3\2\2\2")
        buf.write("\u044f\u0451\3\2\2\2\u0450\u0436\3\2\2\2\u0450\u0451\3")
        buf.write("\2\2\2\u0451\u0453\3\2\2\2\u0452\u03bb\3\2\2\2\u0452\u0405")
        buf.write("\3\2\2\2\u0453\21\3\2\2\2\u0454\u0456\7\21\2\2\u0455\u0457")
        buf.write("\t\2\2\2\u0456\u0455\3\2\2\2\u0457\u0458\3\2\2\2\u0458")
        buf.write("\u0456\3\2\2\2\u0458\u0459\3\2\2\2\u0459\u045a\3\2\2\2")
        buf.write("\u045a\u045b\5\16\b\2\u045b\u045c\5\20\t\2\u045c\23\3")
        buf.write("\2\2\2\u045d\u045f\7\21\2\2\u045e\u0460\t\2\2\2\u045f")
        buf.write("\u045e\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u045f\3\2\2\2")
        buf.write("\u0461\u0462\3\2\2\2\u0462\u04a5\3\2\2\2\u0463\u0467\5")
        buf.write("$\23\2\u0464\u0466\t\2\2\2\u0465\u0464\3\2\2\2\u0466\u0469")
        buf.write("\3\2\2\2\u0467\u0465\3\2\2\2\u0467\u0468\3\2\2\2\u0468")
        buf.write("\u046a\3\2\2\2\u0469\u0467\3\2\2\2\u046a\u046e\7\3\2\2")
        buf.write("\u046b\u046d\t\2\2\2\u046c\u046b\3\2\2\2\u046d\u0470\3")
        buf.write("\2\2\2\u046e\u046c\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u048a")
        buf.write("\3\2\2\2\u0470\u046e\3\2\2\2\u0471\u047f\5$\23\2\u0472")
        buf.write("\u0474\7\67\2\2\u0473\u0472\3\2\2\2\u0474\u0477\3\2\2")
        buf.write("\2\u0475\u0473\3\2\2\2\u0475\u0476\3\2\2\2\u0476\u0478")
        buf.write("\3\2\2\2\u0477\u0475\3\2\2\2\u0478\u047c\78\2\2\u0479")
        buf.write("\u047b\7\67\2\2\u047a\u0479\3\2\2\2\u047b\u047e\3\2\2")
        buf.write("\2\u047c\u047a\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u0480")
        buf.write("\3\2\2\2\u047e\u047c\3\2\2\2\u047f\u0475\3\2\2\2\u0480")
        buf.write("\u0481\3\2\2\2\u0481\u047f\3\2\2\2\u0481\u0482\3\2\2\2")
        buf.write("\u0482\u048a\3\2\2\2\u0483\u0485\5\6\4\2\u0484\u0486\t")
        buf.write("\2\2\2\u0485\u0484\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0485")
        buf.write("\3\2\2\2\u0487\u0488\3\2\2\2\u0488\u048a\3\2\2\2\u0489")
        buf.write("\u0463\3\2\2\2\u0489\u0471\3\2\2\2\u0489\u0483\3\2\2\2")
        buf.write("\u048a\u048d\3\2\2\2\u048b\u0489\3\2\2\2\u048b\u048c\3")
        buf.write("\2\2\2\u048c\u04a3\3\2\2\2\u048d\u048b\3\2\2\2\u048e\u0492")
        buf.write("\5$\23\2\u048f\u0491\t\2\2\2\u0490\u048f\3\2\2\2\u0491")
        buf.write("\u0494\3\2\2\2\u0492\u0490\3\2\2\2\u0492\u0493\3\2\2\2")
        buf.write("\u0493\u049b\3\2\2\2\u0494\u0492\3\2\2\2\u0495\u049c\7")
        buf.write("\3\2\2\u0496\u0498\t\2\2\2\u0497\u0496\3\2\2\2\u0498\u0499")
        buf.write("\3\2\2\2\u0499\u0497\3\2\2\2\u0499\u049a\3\2\2\2\u049a")
        buf.write("\u049c\3\2\2\2\u049b\u0495\3\2\2\2\u049b\u0497\3\2\2\2")
        buf.write("\u049c\u04a4\3\2\2\2\u049d\u049f\5\6\4\2\u049e\u04a0\t")
        buf.write("\2\2\2\u049f\u049e\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u049f")
        buf.write("\3\2\2\2\u04a1\u04a2\3\2\2\2\u04a2\u04a4\3\2\2\2\u04a3")
        buf.write("\u048e\3\2\2\2\u04a3\u049d\3\2\2\2\u04a4\u04a6\3\2\2\2")
        buf.write("\u04a5\u048b\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\25\3\2")
        buf.write("\2\2\u04a7\u04b6\5\30\r\2\u04a8\u04aa\t\2\2\2\u04a9\u04a8")
        buf.write("\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab\u04a9\3\2\2\2\u04ab")
        buf.write("\u04ac\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad\u04af\7\61\2")
        buf.write("\2\u04ae\u04b0\t\2\2\2\u04af\u04ae\3\2\2\2\u04b0\u04b1")
        buf.write("\3\2\2\2\u04b1\u04af\3\2\2\2\u04b1\u04b2\3\2\2\2\u04b2")
        buf.write("\u04b3\3\2\2\2\u04b3\u04b5\5\30\r\2\u04b4\u04a9\3\2\2")
        buf.write("\2\u04b5\u04b8\3\2\2\2\u04b6\u04b4\3\2\2\2\u04b6\u04b7")
        buf.write("\3\2\2\2\u04b7\27\3\2\2\2\u04b8\u04b6\3\2\2\2\u04b9\u04bb")
        buf.write("\7\62\2\2\u04ba\u04bc\t\2\2\2\u04bb\u04ba\3\2\2\2\u04bc")
        buf.write("\u04bd\3\2\2\2\u04bd\u04bb\3\2\2\2\u04bd\u04be\3\2\2\2")
        buf.write("\u04be\u04c0\3\2\2\2\u04bf\u04b9\3\2\2\2\u04bf\u04c0\3")
        buf.write("\2\2\2\u04c0\u04c4\3\2\2\2\u04c1\u04c5\5\"\22\2\u04c2")
        buf.write("\u04c5\7\63\2\2\u04c3\u04c5\5\32\16\2\u04c4\u04c1\3\2")
        buf.write("\2\2\u04c4\u04c2\3\2\2\2\u04c4\u04c3\3\2\2\2\u04c5\31")
        buf.write("\3\2\2\2\u04c6\u04ca\5\34\17\2\u04c7\u04c9\t\2\2\2\u04c8")
        buf.write("\u04c7\3\2\2\2\u04c9\u04cc\3\2\2\2\u04ca\u04c8\3\2\2\2")
        buf.write("\u04ca\u04cb\3\2\2\2\u04cb\u04cd\3\2\2\2\u04cc\u04ca\3")
        buf.write("\2\2\2\u04cd\u04d1\7.\2\2\u04ce\u04d0\t\2\2\2\u04cf\u04ce")
        buf.write("\3\2\2\2\u04d0\u04d3\3\2\2\2\u04d1\u04cf\3\2\2\2\u04d1")
        buf.write("\u04d2\3\2\2\2\u04d2\u04d4\3\2\2\2\u04d3\u04d1\3\2\2\2")
        buf.write("\u04d4\u04d5\5\34\17\2\u04d5\33\3\2\2\2\u04d6\u04e0\5")
        buf.write("\"\22\2\u04d7\u04e0\7\64\2\2\u04d8\u04e0\7\66\2\2\u04d9")
        buf.write("\u04e0\7\65\2\2\u04da\u04e0\7\63\2\2\u04db\u04e0\5\36")
        buf.write("\20\2\u04dc\u04e0\5Z.\2\u04dd\u04e0\5*\26\2\u04de\u04e0")
        buf.write("\5 \21\2\u04df\u04d6\3\2\2\2\u04df\u04d7\3\2\2\2\u04df")
        buf.write("\u04d8\3\2\2\2\u04df\u04d9\3\2\2\2\u04df\u04da\3\2\2\2")
        buf.write("\u04df\u04db\3\2\2\2\u04df\u04dc\3\2\2\2\u04df\u04dd\3")
        buf.write("\2\2\2\u04df\u04de\3\2\2\2\u04e0\35\3\2\2\2\u04e1\u04f0")
        buf.write("\5\\/\2\u04e2\u04e4\t\2\2\2\u04e3\u04e2\3\2\2\2\u04e4")
        buf.write("\u04e7\3\2\2\2\u04e5\u04e3\3\2\2\2\u04e5\u04e6\3\2\2\2")
        buf.write("\u04e6\u04e8\3\2\2\2\u04e7\u04e5\3\2\2\2\u04e8\u04ec\7")
        buf.write("/\2\2\u04e9\u04eb\t\2\2\2\u04ea\u04e9\3\2\2\2\u04eb\u04ee")
        buf.write("\3\2\2\2\u04ec\u04ea\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed")
        buf.write("\u04ef\3\2\2\2\u04ee\u04ec\3\2\2\2\u04ef\u04f1\5\\/\2")
        buf.write("\u04f0\u04e5\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f0\3")
        buf.write("\2\2\2\u04f2\u04f3\3\2\2\2\u04f3\37\3\2\2\2\u04f4\u0503")
        buf.write("\5\\/\2\u04f5\u04f7\t\2\2\2\u04f6\u04f5\3\2\2\2\u04f7")
        buf.write("\u04fa\3\2\2\2\u04f8\u04f6\3\2\2\2\u04f8\u04f9\3\2\2\2")
        buf.write("\u04f9\u04fb\3\2\2\2\u04fa\u04f8\3\2\2\2\u04fb\u04ff\7")
        buf.write("\60\2\2\u04fc\u04fe\t\2\2\2\u04fd\u04fc\3\2\2\2\u04fe")
        buf.write("\u0501\3\2\2\2\u04ff\u04fd\3\2\2\2\u04ff\u0500\3\2\2\2")
        buf.write("\u0500\u0502\3\2\2\2\u0501\u04ff\3\2\2\2\u0502\u0504\5")
        buf.write("\\/\2\u0503\u04f8\3\2\2\2\u0504\u0505\3\2\2\2\u0505\u0503")
        buf.write("\3\2\2\2\u0505\u0506\3\2\2\2\u0506!\3\2\2\2\u0507\u0521")
        buf.write("\5.\30\2\u0508\u0521\5\60\31\2\u0509\u0521\5\66\34\2\u050a")
        buf.write("\u0521\58\35\2\u050b\u0521\5V,\2\u050c\u0521\5:\36\2\u050d")
        buf.write("\u0521\5<\37\2\u050e\u0521\5> \2\u050f\u0521\5@!\2\u0510")
        buf.write("\u0521\5B\"\2\u0511\u0521\5D#\2\u0512\u0521\5F$\2\u0513")
        buf.write("\u0521\5H%\2\u0514\u0521\5J&\2\u0515\u0521\5L\'\2\u0516")
        buf.write("\u0521\5N(\2\u0517\u0521\5P)\2\u0518\u0521\5R*\2\u0519")
        buf.write("\u0521\5T+\2\u051a\u0521\5\64\33\2\u051b\u0521\5\62\32")
        buf.write("\2\u051c\u0521\7!\2\2\u051d\u0521\7&\2\2\u051e\u0521\7")
        buf.write("\'\2\2\u051f\u0521\5X-\2\u0520\u0507\3\2\2\2\u0520\u0508")
        buf.write("\3\2\2\2\u0520\u0509\3\2\2\2\u0520\u050a\3\2\2\2\u0520")
        buf.write("\u050b\3\2\2\2\u0520\u050c\3\2\2\2\u0520\u050d\3\2\2\2")
        buf.write("\u0520\u050e\3\2\2\2\u0520\u050f\3\2\2\2\u0520\u0510\3")
        buf.write("\2\2\2\u0520\u0511\3\2\2\2\u0520\u0512\3\2\2\2\u0520\u0513")
        buf.write("\3\2\2\2\u0520\u0514\3\2\2\2\u0520\u0515\3\2\2\2\u0520")
        buf.write("\u0516\3\2\2\2\u0520\u0517\3\2\2\2\u0520\u0518\3\2\2\2")
        buf.write("\u0520\u0519\3\2\2\2\u0520\u051a\3\2\2\2\u0520\u051b\3")
        buf.write("\2\2\2\u0520\u051c\3\2\2\2\u0520\u051d\3\2\2\2\u0520\u051e")
        buf.write("\3\2\2\2\u0520\u051f\3\2\2\2\u0521#\3\2\2\2\u0522\u053d")
        buf.write("\5.\30\2\u0523\u053d\5\60\31\2\u0524\u053d\5\66\34\2\u0525")
        buf.write("\u053d\58\35\2\u0526\u053d\5V,\2\u0527\u053d\5:\36\2\u0528")
        buf.write("\u053d\5<\37\2\u0529\u053d\5> \2\u052a\u053d\5@!\2\u052b")
        buf.write("\u053d\5B\"\2\u052c\u053d\5D#\2\u052d\u053d\5F$\2\u052e")
        buf.write("\u053d\5H%\2\u052f\u053d\5J&\2\u0530\u053d\5L\'\2\u0531")
        buf.write("\u053d\5N(\2\u0532\u053d\5P)\2\u0533\u053d\5R*\2\u0534")
        buf.write("\u053d\5(\25\2\u0535\u053d\5&\24\2\u0536\u053d\5\64\33")
        buf.write("\2\u0537\u053d\5\62\32\2\u0538\u053d\7!\2\2\u0539\u053d")
        buf.write("\7&\2\2\u053a\u053d\7\'\2\2\u053b\u053d\5X-\2\u053c\u0522")
        buf.write("\3\2\2\2\u053c\u0523\3\2\2\2\u053c\u0524\3\2\2\2\u053c")
        buf.write("\u0525\3\2\2\2\u053c\u0526\3\2\2\2\u053c\u0527\3\2\2\2")
        buf.write("\u053c\u0528\3\2\2\2\u053c\u0529\3\2\2\2\u053c\u052a\3")
        buf.write("\2\2\2\u053c\u052b\3\2\2\2\u053c\u052c\3\2\2\2\u053c\u052d")
        buf.write("\3\2\2\2\u053c\u052e\3\2\2\2\u053c\u052f\3\2\2\2\u053c")
        buf.write("\u0530\3\2\2\2\u053c\u0531\3\2\2\2\u053c\u0532\3\2\2\2")
        buf.write("\u053c\u0533\3\2\2\2\u053c\u0534\3\2\2\2\u053c\u0535\3")
        buf.write("\2\2\2\u053c\u0536\3\2\2\2\u053c\u0537\3\2\2\2\u053c\u0538")
        buf.write("\3\2\2\2\u053c\u0539\3\2\2\2\u053c\u053a\3\2\2\2\u053c")
        buf.write("\u053b\3\2\2\2\u053d%\3\2\2\2\u053e\u0541\7\65\2\2\u053f")
        buf.write("\u0541\5*\26\2\u0540\u053e\3\2\2\2\u0540\u053f\3\2\2\2")
        buf.write("\u0541\u0545\3\2\2\2\u0542\u0544\t\2\2\2\u0543\u0542\3")
        buf.write("\2\2\2\u0544\u0547\3\2\2\2\u0545\u0543\3\2\2\2\u0545\u0546")
        buf.write("\3\2\2\2\u0546\u0548\3\2\2\2\u0547\u0545\3\2\2\2\u0548")
        buf.write("\u054c\7\7\2\2\u0549\u054b\t\2\2\2\u054a\u0549\3\2\2\2")
        buf.write("\u054b\u054e\3\2\2\2\u054c\u054a\3\2\2\2\u054c\u054d\3")
        buf.write("\2\2\2\u054d\u054f\3\2\2\2\u054e\u054c\3\2\2\2\u054f\u055d")
        buf.write("\5\34\17\2\u0550\u0553\7\65\2\2\u0551\u0553\5*\26\2\u0552")
        buf.write("\u0550\3\2\2\2\u0552\u0551\3\2\2\2\u0553\u0557\3\2\2\2")
        buf.write("\u0554\u0556\t\2\2\2\u0555\u0554\3\2\2\2\u0556\u0559\3")
        buf.write("\2\2\2\u0557\u0555\3\2\2\2\u0557\u0558\3\2\2\2\u0558\u055a")
        buf.write("\3\2\2\2\u0559\u0557\3\2\2\2\u055a\u055b\7\7\2\2\u055b")
        buf.write("\u055d\b\24\1\2\u055c\u0540\3\2\2\2\u055c\u0552\3\2\2")
        buf.write("\2\u055d\'\3\2\2\2\u055e\u0562\7\65\2\2\u055f\u0561\t")
        buf.write("\2\2\2\u0560\u055f\3\2\2\2\u0561\u0564\3\2\2\2\u0562\u0560")
        buf.write("\3\2\2\2\u0562\u0563\3\2\2\2\u0563\u0565\3\2\2\2\u0564")
        buf.write("\u0562\3\2\2\2\u0565\u0569\7-\2\2\u0566\u0568\t\2\2\2")
        buf.write("\u0567\u0566\3\2\2\2\u0568\u056b\3\2\2\2\u0569\u0567\3")
        buf.write("\2\2\2\u0569\u056a\3\2\2\2\u056a\u056c\3\2\2\2\u056b\u0569")
        buf.write("\3\2\2\2\u056c\u0570\5\34\17\2\u056d\u056f\t\2\2\2\u056e")
        buf.write("\u056d\3\2\2\2\u056f\u0572\3\2\2\2\u0570\u056e\3\2\2\2")
        buf.write("\u0570\u0571\3\2\2\2\u0571)\3\2\2\2\u0572\u0570\3\2\2")
        buf.write("\2\u0573\u0576\7\65\2\2\u0574\u0576\5X-\2\u0575\u0573")
        buf.write("\3\2\2\2\u0575\u0574\3\2\2\2\u0576\u0577\3\2\2\2\u0577")
        buf.write("\u057b\7\b\2\2\u0578\u057a\t\2\2\2\u0579\u0578\3\2\2\2")
        buf.write("\u057a\u057d\3\2\2\2\u057b\u0579\3\2\2\2\u057b\u057c\3")
        buf.write("\2\2\2\u057c\u057e\3\2\2\2\u057d\u057b\3\2\2\2\u057e\u0582")
        buf.write("\5\34\17\2\u057f\u0581\t\2\2\2\u0580\u057f\3\2\2\2\u0581")
        buf.write("\u0584\3\2\2\2\u0582\u0580\3\2\2\2\u0582\u0583\3\2\2\2")
        buf.write("\u0583\u0585\3\2\2\2\u0584\u0582\3\2\2\2\u0585\u0586\7")
        buf.write("\t\2\2\u0586+\3\2\2\2\u0587\u058b\7\25\2\2\u0588\u058a")
        buf.write("\t\2\2\2\u0589\u0588\3\2\2\2\u058a\u058d\3\2\2\2\u058b")
        buf.write("\u0589\3\2\2\2\u058b\u058c\3\2\2\2\u058c\u058e\3\2\2\2")
        buf.write("\u058d\u058b\3\2\2\2\u058e\u058f\7\65\2\2\u058f-\3\2\2")
        buf.write("\2\u0590\u0594\7\65\2\2\u0591\u0593\t\2\2\2\u0592\u0591")
        buf.write("\3\2\2\2\u0593\u0596\3\2\2\2\u0594\u0592\3\2\2\2\u0594")
        buf.write("\u0595\3\2\2\2\u0595\u0597\3\2\2\2\u0596\u0594\3\2\2\2")
        buf.write("\u0597\u059b\7\4\2\2\u0598\u059a\t\2\2\2\u0599\u0598\3")
        buf.write("\2\2\2\u059a\u059d\3\2\2\2\u059b\u0599\3\2\2\2\u059b\u059c")
        buf.write("\3\2\2\2\u059c\u05b8\3\2\2\2\u059d\u059b\3\2\2\2\u059e")
        buf.write("\u05a2\5\34\17\2\u059f\u05a1\t\2\2\2\u05a0\u059f\3\2\2")
        buf.write("\2\u05a1\u05a4\3\2\2\2\u05a2\u05a0\3\2\2\2\u05a2\u05a3")
        buf.write("\3\2\2\2\u05a3\u05b5\3\2\2\2\u05a4\u05a2\3\2\2\2\u05a5")
        buf.write("\u05a9\7\5\2\2\u05a6\u05a8\t\2\2\2\u05a7\u05a6\3\2\2\2")
        buf.write("\u05a8\u05ab\3\2\2\2\u05a9\u05a7\3\2\2\2\u05a9\u05aa\3")
        buf.write("\2\2\2\u05aa\u05ac\3\2\2\2\u05ab\u05a9\3\2\2\2\u05ac\u05b0")
        buf.write("\5\34\17\2\u05ad\u05af\t\2\2\2\u05ae\u05ad\3\2\2\2\u05af")
        buf.write("\u05b2\3\2\2\2\u05b0\u05ae\3\2\2\2\u05b0\u05b1\3\2\2\2")
        buf.write("\u05b1\u05b4\3\2\2\2\u05b2\u05b0\3\2\2\2\u05b3\u05a5\3")
        buf.write("\2\2\2\u05b4\u05b7\3\2\2\2\u05b5\u05b3\3\2\2\2\u05b5\u05b6")
        buf.write("\3\2\2\2\u05b6\u05b9\3\2\2\2\u05b7\u05b5\3\2\2\2\u05b8")
        buf.write("\u059e\3\2\2\2\u05b8\u05b9\3\2\2\2\u05b9\u05ba\3\2\2\2")
        buf.write("\u05ba\u05bb\7\6\2\2\u05bb/\3\2\2\2\u05bc\u05c0\7\26\2")
        buf.write("\2\u05bd\u05bf\t\2\2\2\u05be\u05bd\3\2\2\2\u05bf\u05c2")
        buf.write("\3\2\2\2\u05c0\u05be\3\2\2\2\u05c0\u05c1\3\2\2\2\u05c1")
        buf.write("\u05c3\3\2\2\2\u05c2\u05c0\3\2\2\2\u05c3\u05c7\7\4\2\2")
        buf.write("\u05c4\u05c6\t\2\2\2\u05c5\u05c4\3\2\2\2\u05c6\u05c9\3")
        buf.write("\2\2\2\u05c7\u05c5\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05ca")
        buf.write("\3\2\2\2\u05c9\u05c7\3\2\2\2\u05ca\u05ce\5\34\17\2\u05cb")
        buf.write("\u05cd\t\2\2\2\u05cc\u05cb\3\2\2\2\u05cd\u05d0\3\2\2\2")
        buf.write("\u05ce\u05cc\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf\u05d1\3")
        buf.write("\2\2\2\u05d0\u05ce\3\2\2\2\u05d1\u05d2\7\6\2\2\u05d2\61")
        buf.write("\3\2\2\2\u05d3\u05d7\7%\2\2\u05d4\u05d6\t\2\2\2\u05d5")
        buf.write("\u05d4\3\2\2\2\u05d6\u05d9\3\2\2\2\u05d7\u05d5\3\2\2\2")
        buf.write("\u05d7\u05d8\3\2\2\2\u05d8\u05da\3\2\2\2\u05d9\u05d7\3")
        buf.write("\2\2\2\u05da\u05de\7\4\2\2\u05db\u05dd\t\2\2\2\u05dc\u05db")
        buf.write("\3\2\2\2\u05dd\u05e0\3\2\2\2\u05de\u05dc\3\2\2\2\u05de")
        buf.write("\u05df\3\2\2\2\u05df\u05e1\3\2\2\2\u05e0\u05de\3\2\2\2")
        buf.write("\u05e1\u05e5\5\34\17\2\u05e2\u05e4\t\2\2\2\u05e3\u05e2")
        buf.write("\3\2\2\2\u05e4\u05e7\3\2\2\2\u05e5\u05e3\3\2\2\2\u05e5")
        buf.write("\u05e6\3\2\2\2\u05e6\u05e8\3\2\2\2\u05e7\u05e5\3\2\2\2")
        buf.write("\u05e8\u05e9\7\6\2\2\u05e9\63\3\2\2\2\u05ea\u05ee\7$\2")
        buf.write("\2\u05eb\u05ed\t\2\2\2\u05ec\u05eb\3\2\2\2\u05ed\u05f0")
        buf.write("\3\2\2\2\u05ee\u05ec\3\2\2\2\u05ee\u05ef\3\2\2\2\u05ef")
        buf.write("\u05f1\3\2\2\2\u05f0\u05ee\3\2\2\2\u05f1\u05f5\7\4\2\2")
        buf.write("\u05f2\u05f4\t\2\2\2\u05f3\u05f2\3\2\2\2\u05f4\u05f7\3")
        buf.write("\2\2\2\u05f5\u05f3\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6\u05f8")
        buf.write("\3\2\2\2\u05f7\u05f5\3\2\2\2\u05f8\u05fc\5\34\17\2\u05f9")
        buf.write("\u05fb\t\2\2\2\u05fa\u05f9\3\2\2\2\u05fb\u05fe\3\2\2\2")
        buf.write("\u05fc\u05fa\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd\u05ff\3")
        buf.write("\2\2\2\u05fe\u05fc\3\2\2\2\u05ff\u0600\7\6\2\2\u0600\65")
        buf.write("\3\2\2\2\u0601\u0605\7\27\2\2\u0602\u0604\t\2\2\2\u0603")
        buf.write("\u0602\3\2\2\2\u0604\u0607\3\2\2\2\u0605\u0603\3\2\2\2")
        buf.write("\u0605\u0606\3\2\2\2\u0606\u0608\3\2\2\2\u0607\u0605\3")
        buf.write("\2\2\2\u0608\u060c\7\4\2\2\u0609\u060b\t\2\2\2\u060a\u0609")
        buf.write("\3\2\2\2\u060b\u060e\3\2\2\2\u060c\u060a\3\2\2\2\u060c")
        buf.write("\u060d\3\2\2\2\u060d\u060f\3\2\2\2\u060e\u060c\3\2\2\2")
        buf.write("\u060f\u0613\5\34\17\2\u0610\u0612\t\2\2\2\u0611\u0610")
        buf.write("\3\2\2\2\u0612\u0615\3\2\2\2\u0613\u0611\3\2\2\2\u0613")
        buf.write("\u0614\3\2\2\2\u0614\u0616\3\2\2\2\u0615\u0613\3\2\2\2")
        buf.write("\u0616\u0617\7\6\2\2\u0617\67\3\2\2\2\u0618\u061c\7\30")
        buf.write("\2\2\u0619\u061b\t\2\2\2\u061a\u0619\3\2\2\2\u061b\u061e")
        buf.write("\3\2\2\2\u061c\u061a\3\2\2\2\u061c\u061d\3\2\2\2\u061d")
        buf.write("\u061f\3\2\2\2\u061e\u061c\3\2\2\2\u061f\u0623\7\4\2\2")
        buf.write("\u0620\u0622\t\2\2\2\u0621\u0620\3\2\2\2\u0622\u0625\3")
        buf.write("\2\2\2\u0623\u0621\3\2\2\2\u0623\u0624\3\2\2\2\u0624\u0626")
        buf.write("\3\2\2\2\u0625\u0623\3\2\2\2\u0626\u062a\5\34\17\2\u0627")
        buf.write("\u0629\t\2\2\2\u0628\u0627\3\2\2\2\u0629\u062c\3\2\2\2")
        buf.write("\u062a\u0628\3\2\2\2\u062a\u062b\3\2\2\2\u062b\u062d\3")
        buf.write("\2\2\2\u062c\u062a\3\2\2\2\u062d\u0631\7\5\2\2\u062e\u0630")
        buf.write("\t\2\2\2\u062f\u062e\3\2\2\2\u0630\u0633\3\2\2\2\u0631")
        buf.write("\u062f\3\2\2\2\u0631\u0632\3\2\2\2\u0632\u0634\3\2\2\2")
        buf.write("\u0633\u0631\3\2\2\2\u0634\u0638\5\34\17\2\u0635\u0637")
        buf.write("\t\2\2\2\u0636\u0635\3\2\2\2\u0637\u063a\3\2\2\2\u0638")
        buf.write("\u0636\3\2\2\2\u0638\u0639\3\2\2\2\u0639\u063b\3\2\2\2")
        buf.write("\u063a\u0638\3\2\2\2\u063b\u063c\7\6\2\2\u063c9\3\2\2")
        buf.write("\2\u063d\u0641\7\31\2\2\u063e\u0640\t\2\2\2\u063f\u063e")
        buf.write("\3\2\2\2\u0640\u0643\3\2\2\2\u0641\u063f\3\2\2\2\u0641")
        buf.write("\u0642\3\2\2\2\u0642\u0644\3\2\2\2\u0643\u0641\3\2\2\2")
        buf.write("\u0644\u0648\7\4\2\2\u0645\u0647\t\2\2\2\u0646\u0645\3")
        buf.write("\2\2\2\u0647\u064a\3\2\2\2\u0648\u0646\3\2\2\2\u0648\u0649")
        buf.write("\3\2\2\2\u0649\u064b\3\2\2\2\u064a\u0648\3\2\2\2\u064b")
        buf.write("\u064f\5\34\17\2\u064c\u064e\t\2\2\2\u064d\u064c\3\2\2")
        buf.write("\2\u064e\u0651\3\2\2\2\u064f\u064d\3\2\2\2\u064f\u0650")
        buf.write("\3\2\2\2\u0650\u0652\3\2\2\2\u0651\u064f\3\2\2\2\u0652")
        buf.write("\u0653\7\6\2\2\u0653;\3\2\2\2\u0654\u0658\7\32\2\2\u0655")
        buf.write("\u0657\t\2\2\2\u0656\u0655\3\2\2\2\u0657\u065a\3\2\2\2")
        buf.write("\u0658\u0656\3\2\2\2\u0658\u0659\3\2\2\2\u0659\u065b\3")
        buf.write("\2\2\2\u065a\u0658\3\2\2\2\u065b\u065f\7\4\2\2\u065c\u065e")
        buf.write("\t\2\2\2\u065d\u065c\3\2\2\2\u065e\u0661\3\2\2\2\u065f")
        buf.write("\u065d\3\2\2\2\u065f\u0660\3\2\2\2\u0660\u0662\3\2\2\2")
        buf.write("\u0661\u065f\3\2\2\2\u0662\u0666\5\34\17\2\u0663\u0665")
        buf.write("\t\2\2\2\u0664\u0663\3\2\2\2\u0665\u0668\3\2\2\2\u0666")
        buf.write("\u0664\3\2\2\2\u0666\u0667\3\2\2\2\u0667\u0669\3\2\2\2")
        buf.write("\u0668\u0666\3\2\2\2\u0669\u066d\7\5\2\2\u066a\u066c\t")
        buf.write("\2\2\2\u066b\u066a\3\2\2\2\u066c\u066f\3\2\2\2\u066d\u066b")
        buf.write("\3\2\2\2\u066d\u066e\3\2\2\2\u066e\u0670\3\2\2\2\u066f")
        buf.write("\u066d\3\2\2\2\u0670\u0674\5\34\17\2\u0671\u0673\t\2\2")
        buf.write("\2\u0672\u0671\3\2\2\2\u0673\u0676\3\2\2\2\u0674\u0672")
        buf.write("\3\2\2\2\u0674\u0675\3\2\2\2\u0675\u0677\3\2\2\2\u0676")
        buf.write("\u0674\3\2\2\2\u0677\u0678\7\6\2\2\u0678=\3\2\2\2\u0679")
        buf.write("\u067d\7\33\2\2\u067a\u067c\t\2\2\2\u067b\u067a\3\2\2")
        buf.write("\2\u067c\u067f\3\2\2\2\u067d\u067b\3\2\2\2\u067d\u067e")
        buf.write("\3\2\2\2\u067e\u0680\3\2\2\2\u067f\u067d\3\2\2\2\u0680")
        buf.write("\u0684\7\4\2\2\u0681\u0683\t\2\2\2\u0682\u0681\3\2\2\2")
        buf.write("\u0683\u0686\3\2\2\2\u0684\u0682\3\2\2\2\u0684\u0685\3")
        buf.write("\2\2\2\u0685\u0687\3\2\2\2\u0686\u0684\3\2\2\2\u0687\u068b")
        buf.write("\5\34\17\2\u0688\u068a\t\2\2\2\u0689\u0688\3\2\2\2\u068a")
        buf.write("\u068d\3\2\2\2\u068b\u0689\3\2\2\2\u068b\u068c\3\2\2\2")
        buf.write("\u068c\u068e\3\2\2\2\u068d\u068b\3\2\2\2\u068e\u0692\7")
        buf.write("\5\2\2\u068f\u0691\t\2\2\2\u0690\u068f\3\2\2\2\u0691\u0694")
        buf.write("\3\2\2\2\u0692\u0690\3\2\2\2\u0692\u0693\3\2\2\2\u0693")
        buf.write("\u0695\3\2\2\2\u0694\u0692\3\2\2\2\u0695\u0699\5\34\17")
        buf.write("\2\u0696\u0698\t\2\2\2\u0697\u0696\3\2\2\2\u0698\u069b")
        buf.write("\3\2\2\2\u0699\u0697\3\2\2\2\u0699\u069a\3\2\2\2\u069a")
        buf.write("\u069c\3\2\2\2\u069b\u0699\3\2\2\2\u069c\u069d\7\6\2\2")
        buf.write("\u069d?\3\2\2\2\u069e\u06a2\7\34\2\2\u069f\u06a1\t\2\2")
        buf.write("\2\u06a0\u069f\3\2\2\2\u06a1\u06a4\3\2\2\2\u06a2\u06a0")
        buf.write("\3\2\2\2\u06a2\u06a3\3\2\2\2\u06a3\u06a5\3\2\2\2\u06a4")
        buf.write("\u06a2\3\2\2\2\u06a5\u06a9\7\4\2\2\u06a6\u06a8\t\2\2\2")
        buf.write("\u06a7\u06a6\3\2\2\2\u06a8\u06ab\3\2\2\2\u06a9\u06a7\3")
        buf.write("\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u06ac\3\2\2\2\u06ab\u06a9")
        buf.write("\3\2\2\2\u06ac\u06b0\5\34\17\2\u06ad\u06af\t\2\2\2\u06ae")
        buf.write("\u06ad\3\2\2\2\u06af\u06b2\3\2\2\2\u06b0\u06ae\3\2\2\2")
        buf.write("\u06b0\u06b1\3\2\2\2\u06b1\u06b3\3\2\2\2\u06b2\u06b0\3")
        buf.write("\2\2\2\u06b3\u06b7\7\5\2\2\u06b4\u06b6\t\2\2\2\u06b5\u06b4")
        buf.write("\3\2\2\2\u06b6\u06b9\3\2\2\2\u06b7\u06b5\3\2\2\2\u06b7")
        buf.write("\u06b8\3\2\2\2\u06b8\u06ba\3\2\2\2\u06b9\u06b7\3\2\2\2")
        buf.write("\u06ba\u06be\5\34\17\2\u06bb\u06bd\t\2\2\2\u06bc\u06bb")
        buf.write("\3\2\2\2\u06bd\u06c0\3\2\2\2\u06be\u06bc\3\2\2\2\u06be")
        buf.write("\u06bf\3\2\2\2\u06bf\u06c1\3\2\2\2\u06c0\u06be\3\2\2\2")
        buf.write("\u06c1\u06c2\7\6\2\2\u06c2A\3\2\2\2\u06c3\u06c7\7\35\2")
        buf.write("\2\u06c4\u06c6\t\2\2\2\u06c5\u06c4\3\2\2\2\u06c6\u06c9")
        buf.write("\3\2\2\2\u06c7\u06c5\3\2\2\2\u06c7\u06c8\3\2\2\2\u06c8")
        buf.write("\u06ca\3\2\2\2\u06c9\u06c7\3\2\2\2\u06ca\u06ce\7\4\2\2")
        buf.write("\u06cb\u06cd\t\2\2\2\u06cc\u06cb\3\2\2\2\u06cd\u06d0\3")
        buf.write("\2\2\2\u06ce\u06cc\3\2\2\2\u06ce\u06cf\3\2\2\2\u06cf\u06d1")
        buf.write("\3\2\2\2\u06d0\u06ce\3\2\2\2\u06d1\u06d5\5\34\17\2\u06d2")
        buf.write("\u06d4\t\2\2\2\u06d3\u06d2\3\2\2\2\u06d4\u06d7\3\2\2\2")
        buf.write("\u06d5\u06d3\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d6\u06d8\3")
        buf.write("\2\2\2\u06d7\u06d5\3\2\2\2\u06d8\u06dc\7\5\2\2\u06d9\u06db")
        buf.write("\t\2\2\2\u06da\u06d9\3\2\2\2\u06db\u06de\3\2\2\2\u06dc")
        buf.write("\u06da\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd\u06df\3\2\2\2")
        buf.write("\u06de\u06dc\3\2\2\2\u06df\u06e3\5\34\17\2\u06e0\u06e2")
        buf.write("\t\2\2\2\u06e1\u06e0\3\2\2\2\u06e2\u06e5\3\2\2\2\u06e3")
        buf.write("\u06e1\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4\u06e6\3\2\2\2")
        buf.write("\u06e5\u06e3\3\2\2\2\u06e6\u06e7\7\6\2\2\u06e7C\3\2\2")
        buf.write("\2\u06e8\u06ec\7*\2\2\u06e9\u06eb\t\2\2\2\u06ea\u06e9")
        buf.write("\3\2\2\2\u06eb\u06ee\3\2\2\2\u06ec\u06ea\3\2\2\2\u06ec")
        buf.write("\u06ed\3\2\2\2\u06ed\u06ef\3\2\2\2\u06ee\u06ec\3\2\2\2")
        buf.write("\u06ef\u06f3\7\4\2\2\u06f0\u06f2\t\2\2\2\u06f1\u06f0\3")
        buf.write("\2\2\2\u06f2\u06f5\3\2\2\2\u06f3\u06f1\3\2\2\2\u06f3\u06f4")
        buf.write("\3\2\2\2\u06f4\u06f6\3\2\2\2\u06f5\u06f3\3\2\2\2\u06f6")
        buf.write("\u06fa\5\34\17\2\u06f7\u06f9\t\2\2\2\u06f8\u06f7\3\2\2")
        buf.write("\2\u06f9\u06fc\3\2\2\2\u06fa\u06f8\3\2\2\2\u06fa\u06fb")
        buf.write("\3\2\2\2\u06fb\u06fd\3\2\2\2\u06fc\u06fa\3\2\2\2\u06fd")
        buf.write("\u06fe\7\6\2\2\u06feE\3\2\2\2\u06ff\u0703\7\36\2\2\u0700")
        buf.write("\u0702\t\2\2\2\u0701\u0700\3\2\2\2\u0702\u0705\3\2\2\2")
        buf.write("\u0703\u0701\3\2\2\2\u0703\u0704\3\2\2\2\u0704\u0706\3")
        buf.write("\2\2\2\u0705\u0703\3\2\2\2\u0706\u070a\7\4\2\2\u0707\u0709")
        buf.write("\t\2\2\2\u0708\u0707\3\2\2\2\u0709\u070c\3\2\2\2\u070a")
        buf.write("\u0708\3\2\2\2\u070a\u070b\3\2\2\2\u070b\u070d\3\2\2\2")
        buf.write("\u070c\u070a\3\2\2\2\u070d\u0711\5\34\17\2\u070e\u0710")
        buf.write("\t\2\2\2\u070f\u070e\3\2\2\2\u0710\u0713\3\2\2\2\u0711")
        buf.write("\u070f\3\2\2\2\u0711\u0712\3\2\2\2\u0712\u0714\3\2\2\2")
        buf.write("\u0713\u0711\3\2\2\2\u0714\u0715\7\6\2\2\u0715G\3\2\2")
        buf.write("\2\u0716\u071a\7\37\2\2\u0717\u0719\t\2\2\2\u0718\u0717")
        buf.write("\3\2\2\2\u0719\u071c\3\2\2\2\u071a\u0718\3\2\2\2\u071a")
        buf.write("\u071b\3\2\2\2\u071b\u071d\3\2\2\2\u071c\u071a\3\2\2\2")
        buf.write("\u071d\u0721\7\4\2\2\u071e\u0720\t\2\2\2\u071f\u071e\3")
        buf.write("\2\2\2\u0720\u0723\3\2\2\2\u0721\u071f\3\2\2\2\u0721\u0722")
        buf.write("\3\2\2\2\u0722\u0734\3\2\2\2\u0723\u0721\3\2\2\2\u0724")
        buf.write("\u0728\5\34\17\2\u0725\u0727\t\2\2\2\u0726\u0725\3\2\2")
        buf.write("\2\u0727\u072a\3\2\2\2\u0728\u0726\3\2\2\2\u0728\u0729")
        buf.write("\3\2\2\2\u0729\u072b\3\2\2\2\u072a\u0728\3\2\2\2\u072b")
        buf.write("\u072f\7\5\2\2\u072c\u072e\t\2\2\2\u072d\u072c\3\2\2\2")
        buf.write("\u072e\u0731\3\2\2\2\u072f\u072d\3\2\2\2\u072f\u0730\3")
        buf.write("\2\2\2\u0730\u0733\3\2\2\2\u0731\u072f\3\2\2\2\u0732\u0724")
        buf.write("\3\2\2\2\u0733\u0736\3\2\2\2\u0734\u0732\3\2\2\2\u0734")
        buf.write("\u0735\3\2\2\2\u0735\u0737\3\2\2\2\u0736\u0734\3\2\2\2")
        buf.write("\u0737\u073b\5\34\17\2\u0738\u073a\t\2\2\2\u0739\u0738")
        buf.write("\3\2\2\2\u073a\u073d\3\2\2\2\u073b\u0739\3\2\2\2\u073b")
        buf.write("\u073c\3\2\2\2\u073c\u073e\3\2\2\2\u073d\u073b\3\2\2\2")
        buf.write("\u073e\u073f\7\6\2\2\u073fI\3\2\2\2\u0740\u0744\7\"\2")
        buf.write("\2\u0741\u0743\t\2\2\2\u0742\u0741\3\2\2\2\u0743\u0746")
        buf.write("\3\2\2\2\u0744\u0742\3\2\2\2\u0744\u0745\3\2\2\2\u0745")
        buf.write("\u0747\3\2\2\2\u0746\u0744\3\2\2\2\u0747\u074b\7\4\2\2")
        buf.write("\u0748\u074a\t\2\2\2\u0749\u0748\3\2\2\2\u074a\u074d\3")
        buf.write("\2\2\2\u074b\u0749\3\2\2\2\u074b\u074c\3\2\2\2\u074c\u074e")
        buf.write("\3\2\2\2\u074d\u074b\3\2\2\2\u074e\u0752\5\34\17\2\u074f")
        buf.write("\u0751\t\2\2\2\u0750\u074f\3\2\2\2\u0751\u0754\3\2\2\2")
        buf.write("\u0752\u0750\3\2\2\2\u0752\u0753\3\2\2\2\u0753\u0755\3")
        buf.write("\2\2\2\u0754\u0752\3\2\2\2\u0755\u0756\7\6\2\2\u0756K")
        buf.write("\3\2\2\2\u0757\u075b\7#\2\2\u0758\u075a\t\2\2\2\u0759")
        buf.write("\u0758\3\2\2\2\u075a\u075d\3\2\2\2\u075b\u0759\3\2\2\2")
        buf.write("\u075b\u075c\3\2\2\2\u075c\u075e\3\2\2\2\u075d\u075b\3")
        buf.write("\2\2\2\u075e\u0762\7\4\2\2\u075f\u0761\t\2\2\2\u0760\u075f")
        buf.write("\3\2\2\2\u0761\u0764\3\2\2\2\u0762\u0760\3\2\2\2\u0762")
        buf.write("\u0763\3\2\2\2\u0763\u0765\3\2\2\2\u0764\u0762\3\2\2\2")
        buf.write("\u0765\u0769\5\34\17\2\u0766\u0768\t\2\2\2\u0767\u0766")
        buf.write("\3\2\2\2\u0768\u076b\3\2\2\2\u0769\u0767\3\2\2\2\u0769")
        buf.write("\u076a\3\2\2\2\u076a\u076c\3\2\2\2\u076b\u0769\3\2\2\2")
        buf.write("\u076c\u076d\7\6\2\2\u076dM\3\2\2\2\u076e\u0772\7)\2\2")
        buf.write("\u076f\u0771\t\2\2\2\u0770\u076f\3\2\2\2\u0771\u0774\3")
        buf.write("\2\2\2\u0772\u0770\3\2\2\2\u0772\u0773\3\2\2\2\u0773\u0775")
        buf.write("\3\2\2\2\u0774\u0772\3\2\2\2\u0775\u0779\7\4\2\2\u0776")
        buf.write("\u0778\t\2\2\2\u0777\u0776\3\2\2\2\u0778\u077b\3\2\2\2")
        buf.write("\u0779\u0777\3\2\2\2\u0779\u077a\3\2\2\2\u077a\u077c\3")
        buf.write("\2\2\2\u077b\u0779\3\2\2\2\u077c\u0780\5\34\17\2\u077d")
        buf.write("\u077f\t\2\2\2\u077e\u077d\3\2\2\2\u077f\u0782\3\2\2\2")
        buf.write("\u0780\u077e\3\2\2\2\u0780\u0781\3\2\2\2\u0781\u0783\3")
        buf.write("\2\2\2\u0782\u0780\3\2\2\2\u0783\u0784\7\6\2\2\u0784O")
        buf.write("\3\2\2\2\u0785\u0789\7 \2\2\u0786\u0788\t\2\2\2\u0787")
        buf.write("\u0786\3\2\2\2\u0788\u078b\3\2\2\2\u0789\u0787\3\2\2\2")
        buf.write("\u0789\u078a\3\2\2\2\u078a\u078c\3\2\2\2\u078b\u0789\3")
        buf.write("\2\2\2\u078c\u0790\7\4\2\2\u078d\u078f\t\2\2\2\u078e\u078d")
        buf.write("\3\2\2\2\u078f\u0792\3\2\2\2\u0790\u078e\3\2\2\2\u0790")
        buf.write("\u0791\3\2\2\2\u0791\u0793\3\2\2\2\u0792\u0790\3\2\2\2")
        buf.write("\u0793\u0797\5\34\17\2\u0794\u0796\t\2\2\2\u0795\u0794")
        buf.write("\3\2\2\2\u0796\u0799\3\2\2\2\u0797\u0795\3\2\2\2\u0797")
        buf.write("\u0798\3\2\2\2\u0798\u079a\3\2\2\2\u0799\u0797\3\2\2\2")
        buf.write("\u079a\u079b\7\6\2\2\u079bQ\3\2\2\2\u079c\u07a0\7+\2\2")
        buf.write("\u079d\u079f\t\2\2\2\u079e\u079d\3\2\2\2\u079f\u07a2\3")
        buf.write("\2\2\2\u07a0\u079e\3\2\2\2\u07a0\u07a1\3\2\2\2\u07a1\u07a3")
        buf.write("\3\2\2\2\u07a2\u07a0\3\2\2\2\u07a3\u07a7\7\4\2\2\u07a4")
        buf.write("\u07a6\t\2\2\2\u07a5\u07a4\3\2\2\2\u07a6\u07a9\3\2\2\2")
        buf.write("\u07a7\u07a5\3\2\2\2\u07a7\u07a8\3\2\2\2\u07a8\u07aa\3")
        buf.write("\2\2\2\u07a9\u07a7\3\2\2\2\u07aa\u07ae\5\34\17\2\u07ab")
        buf.write("\u07ad\t\2\2\2\u07ac\u07ab\3\2\2\2\u07ad\u07b0\3\2\2\2")
        buf.write("\u07ae\u07ac\3\2\2\2\u07ae\u07af\3\2\2\2\u07af\u07b1\3")
        buf.write("\2\2\2\u07b0\u07ae\3\2\2\2\u07b1\u07b2\7\6\2\2\u07b2S")
        buf.write("\3\2\2\2\u07b3\u07b7\7,\2\2\u07b4\u07b6\t\2\2\2\u07b5")
        buf.write("\u07b4\3\2\2\2\u07b6\u07b9\3\2\2\2\u07b7\u07b5\3\2\2\2")
        buf.write("\u07b7\u07b8\3\2\2\2\u07b8\u07ba\3\2\2\2\u07b9\u07b7\3")
        buf.write("\2\2\2\u07ba\u07be\7\4\2\2\u07bb\u07bd\t\2\2\2\u07bc\u07bb")
        buf.write("\3\2\2\2\u07bd\u07c0\3\2\2\2\u07be\u07bc\3\2\2\2\u07be")
        buf.write("\u07bf\3\2\2\2\u07bf\u07c4\3\2\2\2\u07c0\u07be\3\2\2\2")
        buf.write("\u07c1\u07c5\7\65\2\2\u07c2\u07c5\5Z.\2\u07c3\u07c5\5")
        buf.write("X-\2\u07c4\u07c1\3\2\2\2\u07c4\u07c2\3\2\2\2\u07c4\u07c3")
        buf.write("\3\2\2\2\u07c5\u07c9\3\2\2\2\u07c6\u07c8\t\2\2\2\u07c7")
        buf.write("\u07c6\3\2\2\2\u07c8\u07cb\3\2\2\2\u07c9\u07c7\3\2\2\2")
        buf.write("\u07c9\u07ca\3\2\2\2\u07ca\u07cc\3\2\2\2\u07cb\u07c9\3")
        buf.write("\2\2\2\u07cc\u07cd\7\6\2\2\u07cdU\3\2\2\2\u07ce\u07d2")
        buf.write("\7\24\2\2\u07cf\u07d1\t\2\2\2\u07d0\u07cf\3\2\2\2\u07d1")
        buf.write("\u07d4\3\2\2\2\u07d2\u07d0\3\2\2\2\u07d2\u07d3\3\2\2\2")
        buf.write("\u07d3\u07d5\3\2\2\2\u07d4\u07d2\3\2\2\2\u07d5\u07d9\7")
        buf.write("\4\2\2\u07d6\u07d8\t\2\2\2\u07d7\u07d6\3\2\2\2\u07d8\u07db")
        buf.write("\3\2\2\2\u07d9\u07d7\3\2\2\2\u07d9\u07da\3\2\2\2\u07da")
        buf.write("\u07dc\3\2\2\2\u07db\u07d9\3\2\2\2\u07dc\u07e0\5\34\17")
        buf.write("\2\u07dd\u07df\t\2\2\2\u07de\u07dd\3\2\2\2\u07df\u07e2")
        buf.write("\3\2\2\2\u07e0\u07de\3\2\2\2\u07e0\u07e1\3\2\2\2\u07e1")
        buf.write("\u07e3\3\2\2\2\u07e2\u07e0\3\2\2\2\u07e3\u07e4\7\6\2\2")
        buf.write("\u07e4W\3\2\2\2\u07e5\u07e6\7(\2\2\u07e6Y\3\2\2\2\u07e7")
        buf.write("\u07eb\7\b\2\2\u07e8\u07ea\t\2\2\2\u07e9\u07e8\3\2\2\2")
        buf.write("\u07ea\u07ed\3\2\2\2\u07eb\u07e9\3\2\2\2\u07eb\u07ec\3")
        buf.write("\2\2\2\u07ec\u0808\3\2\2\2\u07ed\u07eb\3\2\2\2\u07ee\u07ff")
        buf.write("\5\\/\2\u07ef\u07f1\t\2\2\2\u07f0\u07ef\3\2\2\2\u07f1")
        buf.write("\u07f4\3\2\2\2\u07f2\u07f0\3\2\2\2\u07f2\u07f3\3\2\2\2")
        buf.write("\u07f3\u07f5\3\2\2\2\u07f4\u07f2\3\2\2\2\u07f5\u07f9\7")
        buf.write("\5\2\2\u07f6\u07f8\t\2\2\2\u07f7\u07f6\3\2\2\2\u07f8\u07fb")
        buf.write("\3\2\2\2\u07f9\u07f7\3\2\2\2\u07f9\u07fa\3\2\2\2\u07fa")
        buf.write("\u07fc\3\2\2\2\u07fb\u07f9\3\2\2\2\u07fc\u07fe\5\\/\2")
        buf.write("\u07fd\u07f2\3\2\2\2\u07fe\u0801\3\2\2\2\u07ff\u07fd\3")
        buf.write("\2\2\2\u07ff\u0800\3\2\2\2\u0800\u0805\3\2\2\2\u0801\u07ff")
        buf.write("\3\2\2\2\u0802\u0804\t\2\2\2\u0803\u0802\3\2\2\2\u0804")
        buf.write("\u0807\3\2\2\2\u0805\u0803\3\2\2\2\u0805\u0806\3\2\2\2")
        buf.write("\u0806\u0809\3\2\2\2\u0807\u0805\3\2\2\2\u0808\u07ee\3")
        buf.write("\2\2\2\u0808\u0809\3\2\2\2\u0809\u080a\3\2\2\2\u080a\u080b")
        buf.write("\7\t\2\2\u080b[\3\2\2\2\u080c\u080d\t\3\2\2\u080d]\3\2")
        buf.write("\2\2\u0151ahov}\u0082\u0087\u008c\u008e\u0090\u0097\u009b")
        buf.write("\u00a0\u00a2\u00a4\u00a9\u00ad\u00b3\u00ba\u00be\u00c4")
        buf.write("\u00cb\u00d2\u00d7\u00dc\u00e1\u00e3\u00e5\u00ec\u00f0")
        buf.write("\u00f5\u00f7\u00f9\u00fe\u0102\u0105\u010b\u0111\u0118")
        buf.write("\u011f\u0126\u012d\u0132\u0135\u013b\u0142\u0148\u014f")
        buf.write("\u0156\u015d\u0162\u0168\u016a\u016c\u0173\u0177\u017a")
        buf.write("\u017f\u0181\u0188\u018e\u0195\u019c\u01a3\u01aa\u01af")
        buf.write("\u01b2\u01b8\u01bf\u01c5\u01c9\u01cf\u01d6\u01dd\u01e2")
        buf.write("\u01e8\u01ea\u01ec\u01f3\u01f7\u01fa\u01ff\u0201\u0204")
        buf.write("\u0209\u020f\u0215\u021b\u0220\u0225\u022b\u0231\u0238")
        buf.write("\u023f\u0246\u024b\u0251\u0253\u0255\u025c\u0263\u0265")
        buf.write("\u026b\u026d\u026f\u0276\u027c\u0282\u0287\u028c\u0292")
        buf.write("\u0298\u029c\u02a2\u02a9\u02b0\u02b5\u02bb\u02bd\u02bf")
        buf.write("\u02c6\u02cd\u02cf\u02d5\u02d7\u02d9\u02dc\u02e2\u02e8")
        buf.write("\u02ee\u02f4\u02fb\u0302\u0309\u030e\u0314\u0316\u0318")
        buf.write("\u031f\u0326\u0328\u032e\u0330\u0332\u033a\u0340\u0346")
        buf.write("\u034c\u0350\u0356\u035d\u0364\u0369\u036f\u0371\u0373")
        buf.write("\u037a\u0381\u0383\u0389\u038b\u038d\u0391\u0398\u039c")
        buf.write("\u03a5\u03a9\u03ad\u03b3\u03b9\u03bf\u03c5\u03cc\u03d3")
        buf.write("\u03da\u03df\u03e5\u03e7\u03e9\u03f0\u03f7\u03f9\u03ff")
        buf.write("\u0401\u0403\u0409\u040f\u0413\u0419\u0420\u0427\u042c")
        buf.write("\u0432\u0434\u0436\u043d\u0444\u0446\u044c\u044e\u0450")
        buf.write("\u0452\u0458\u0461\u0467\u046e\u0475\u047c\u0481\u0487")
        buf.write("\u0489\u048b\u0492\u0499\u049b\u04a1\u04a3\u04a5\u04ab")
        buf.write("\u04b1\u04b6\u04bd\u04bf\u04c4\u04ca\u04d1\u04df\u04e5")
        buf.write("\u04ec\u04f2\u04f8\u04ff\u0505\u0520\u053c\u0540\u0545")
        buf.write("\u054c\u0552\u0557\u055c\u0562\u0569\u0570\u0575\u057b")
        buf.write("\u0582\u058b\u0594\u059b\u05a2\u05a9\u05b0\u05b5\u05b8")
        buf.write("\u05c0\u05c7\u05ce\u05d7\u05de\u05e5\u05ee\u05f5\u05fc")
        buf.write("\u0605\u060c\u0613\u061c\u0623\u062a\u0631\u0638\u0641")
        buf.write("\u0648\u064f\u0658\u065f\u0666\u066d\u0674\u067d\u0684")
        buf.write("\u068b\u0692\u0699\u06a2\u06a9\u06b0\u06b7\u06be\u06c7")
        buf.write("\u06ce\u06d5\u06dc\u06e3\u06ec\u06f3\u06fa\u0703\u070a")
        buf.write("\u0711\u071a\u0721\u0728\u072f\u0734\u073b\u0744\u074b")
        buf.write("\u0752\u075b\u0762\u0769\u0772\u0779\u0780\u0789\u0790")
        buf.write("\u0797\u07a0\u07a7\u07ae\u07b7\u07be\u07c4\u07c9\u07d2")
        buf.write("\u07d9\u07e0\u07eb\u07f2\u07f9\u07ff\u0805\u0808")
        return buf.getvalue()


class WordlifyParser ( Parser ):

    grammarFileName = "Wordlify.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'('", "','", "')'", "'='", "'['", 
                     "']'", "'fn'", "'while'", "'foreach'", "'in'", "'do'", 
                     "'if'", "'then'", "'else'", "'begin'", "'end'", "'baseName'", 
                     "'use'", "'exist'", "'print'", "'rename'", "'remove'", 
                     "'move'", "'copy'", "'download'", "'write'", "'wait'", 
                     "'execute'", "'exit'", "'time'", "'getFiles'", "'dateModified'", 
                     "'isDir'", "'isFile'", "'file'", "'folder'", "'args'", 
                     "'size'", "'read'", "'create'", "'length'", "'<-'", 
                     "<INVALID>", "<INVALID>", "'.'", "<INVALID>", "'not'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "FN", "WHILE", "FOREACH", "IN", "DO", "IF", "THEN", 
                      "ELSE", "BEGIN", "END", "BASENAME", "IMPORT", "EXIST", 
                      "PRINT", "RENAME", "REMOVE", "MOVE", "COPY", "DOWNLOAD", 
                      "WRITE", "WAIT", "EXECUTE", "EXIT", "TIME", "GET_FILES", 
                      "DATE_MODIFIED", "IS_DIR", "IS_FILE", "FILE", "FOLDER", 
                      "ARGS", "SIZE", "READ", "CREATE", "LENGTH", "APPEND", 
                      "CMP_OP", "ARITH_OP", "CONCAT_OP", "BIN_LOG_OP", "NOT", 
                      "BOOL", "STR", "ID", "NUM", "WS", "NL", "END_COMMENT", 
                      "ERROR_CHAR" ]

    RULE_program = 0
    RULE_fn_def = 1
    RULE_block_instr = 2
    RULE_foreach = 3
    RULE_while_instr = 4
    RULE_if_instr = 5
    RULE_if_cond = 6
    RULE_then = 7
    RULE_else_if = 8
    RULE_else_block = 9
    RULE_cond = 10
    RULE_single_cond = 11
    RULE_comparison = 12
    RULE_expr = 13
    RULE_arith_expr = 14
    RULE_concat = 15
    RULE_fn_call = 16
    RULE_atom_instr = 17
    RULE_assign = 18
    RULE_array_append = 19
    RULE_array_elem = 20
    RULE_import_call = 21
    RULE_own_fn_call = 22
    RULE_exist = 23
    RULE_is_file = 24
    RULE_is_dir = 25
    RULE_print_instr = 26
    RULE_rename = 27
    RULE_remove = 28
    RULE_move = 29
    RULE_copy = 30
    RULE_download = 31
    RULE_write = 32
    RULE_read = 33
    RULE_wait_instr = 34
    RULE_execute = 35
    RULE_get_files = 36
    RULE_date_modified = 37
    RULE_size = 38
    RULE_exit = 39
    RULE_create = 40
    RULE_length = 41
    RULE_basename = 42
    RULE_args = 43
    RULE_array = 44
    RULE_value_or_id = 45

    ruleNames =  [ "program", "fn_def", "block_instr", "foreach", "while_instr", 
                   "if_instr", "if_cond", "then", "else_if", "else_block", 
                   "cond", "single_cond", "comparison", "expr", "arith_expr", 
                   "concat", "fn_call", "atom_instr", "assign", "array_append", 
                   "array_elem", "import_call", "own_fn_call", "exist", 
                   "is_file", "is_dir", "print_instr", "rename", "remove", 
                   "move", "copy", "download", "write", "read", "wait_instr", 
                   "execute", "get_files", "date_modified", "size", "exit", 
                   "create", "length", "basename", "args", "array", "value_or_id" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    FN=8
    WHILE=9
    FOREACH=10
    IN=11
    DO=12
    IF=13
    THEN=14
    ELSE=15
    BEGIN=16
    END=17
    BASENAME=18
    IMPORT=19
    EXIST=20
    PRINT=21
    RENAME=22
    REMOVE=23
    MOVE=24
    COPY=25
    DOWNLOAD=26
    WRITE=27
    WAIT=28
    EXECUTE=29
    EXIT=30
    TIME=31
    GET_FILES=32
    DATE_MODIFIED=33
    IS_DIR=34
    IS_FILE=35
    FILE=36
    FOLDER=37
    ARGS=38
    SIZE=39
    READ=40
    CREATE=41
    LENGTH=42
    APPEND=43
    CMP_OP=44
    ARITH_OP=45
    CONCAT_OP=46
    BIN_LOG_OP=47
    NOT=48
    BOOL=49
    STR=50
    ID=51
    NUM=52
    WS=53
    NL=54
    END_COMMENT=55
    ERROR_CHAR=56

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(WordlifyParser.EOF, 0)

        def END_COMMENT(self):
            return self.getToken(WordlifyParser.END_COMMENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def fn_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Fn_defContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Fn_defContext,i)


        def import_call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Import_callContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Import_callContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = WordlifyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.state = 259
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 95
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 92
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 97
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                self.state = 162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.FN) | (1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.IMPORT) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 142
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 140
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                            if la_ == 1:
                                self.state = 98
                                self.atom_instr()
                                self.state = 102
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 99
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 104
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 105
                                self.match(WordlifyParser.T__0)
                                self.state = 109
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 106
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 111
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 112
                                self.atom_instr()
                                self.state = 126 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 116
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 113
                                        self.match(WordlifyParser.WS)
                                        self.state = 118
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 119
                                    self.match(WordlifyParser.NL)
                                    self.state = 123
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 120
                                            self.match(WordlifyParser.WS) 
                                        self.state = 125
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                                    self.state = 128 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 133
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                                    self.state = 130
                                    self.block_instr()
                                    pass
                                elif token in [WordlifyParser.FN]:
                                    self.state = 131
                                    self.fn_def()
                                    pass
                                elif token in [WordlifyParser.IMPORT]:
                                    self.state = 132
                                    self.import_call()
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                self.state = 136 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 135
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 138 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 144
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                    self.state = 160
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 145
                        self.atom_instr()
                        self.state = 149
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 146
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 151
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                        self.state = 153
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==WordlifyParser.T__0:
                            self.state = 152
                            self.match(WordlifyParser.T__0)


                        pass
                    elif token in [WordlifyParser.FN, WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF, WordlifyParser.IMPORT]:
                        self.state = 158
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                            self.state = 155
                            self.block_instr()
                            pass
                        elif token in [WordlifyParser.FN]:
                            self.state = 156
                            self.fn_def()
                            pass
                        elif token in [WordlifyParser.IMPORT]:
                            self.state = 157
                            self.import_call()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 164
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 169
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.END_COMMENT:
                    self.state = 170
                    self.match(WordlifyParser.END_COMMENT)


                self.state = 173
                self.match(WordlifyParser.EOF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 177
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 174
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 179
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.FN) | (1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.IMPORT) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 227
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 225
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                            if la_ == 1:
                                self.state = 180
                                self.atom_instr()
                                self.state = 184
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 181
                                        _la = self._input.LA(1)
                                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                            self._errHandler.recoverInline(self)
                                        else:
                                            self._errHandler.reportMatch(self)
                                            self.consume() 
                                    self.state = 186
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

                                self.state = 188
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==WordlifyParser.T__0:
                                    self.state = 187
                                    self.match(WordlifyParser.T__0)


                                self.notifyErrorListeners("Missing semicolon")
                                self.state = 194
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 191
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 196
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 197
                                self.atom_instr()
                                self.state = 211 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 201
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 198
                                        self.match(WordlifyParser.WS)
                                        self.state = 203
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 204
                                    self.match(WordlifyParser.NL)
                                    self.state = 208
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 205
                                            self.match(WordlifyParser.WS) 
                                        self.state = 210
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

                                    self.state = 213 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 218
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                                    self.state = 215
                                    self.block_instr()
                                    pass
                                elif token in [WordlifyParser.FN]:
                                    self.state = 216
                                    self.fn_def()
                                    pass
                                elif token in [WordlifyParser.IMPORT]:
                                    self.state = 217
                                    self.import_call()
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                self.state = 221 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 220
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 223 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 229
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                    self.state = 245
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 230
                        self.atom_instr()
                        self.state = 234
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 231
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 236
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

                        self.state = 238
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==WordlifyParser.T__0:
                            self.state = 237
                            self.match(WordlifyParser.T__0)


                        pass
                    elif token in [WordlifyParser.FN, WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF, WordlifyParser.IMPORT]:
                        self.state = 243
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                            self.state = 240
                            self.block_instr()
                            pass
                        elif token in [WordlifyParser.FN]:
                            self.state = 241
                            self.fn_def()
                            pass
                        elif token in [WordlifyParser.IMPORT]:
                            self.state = 242
                            self.import_call()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 249
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.END_COMMENT:
                    self.state = 255
                    self.match(WordlifyParser.END_COMMENT)


                self.state = 258
                self.match(WordlifyParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FN(self):
            return self.getToken(WordlifyParser.FN, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def BEGIN(self):
            return self.getToken(WordlifyParser.BEGIN, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_def" ):
                listener.enterFn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_def" ):
                listener.exitFn_def(self)




    def fn_def(self):

        localctx = WordlifyParser.Fn_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fn_def)
        self._la = 0 # Token type
        try:
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 261
                self.match(WordlifyParser.FN)
                self.state = 263 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 262
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 265 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 267
                self.match(WordlifyParser.ID)
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 268
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 274
                self.match(WordlifyParser.T__1)
                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 275
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 280
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ID:
                    self.state = 281
                    self.match(WordlifyParser.ID)
                    self.state = 285
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 282
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 287
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 304
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.T__2:
                        self.state = 288
                        self.match(WordlifyParser.T__2)
                        self.state = 292
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 289
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 294
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 295
                        self.match(WordlifyParser.ID)
                        self.state = 299
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 296
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 301
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 306
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 309
                self.match(WordlifyParser.T__3)
                self.state = 313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 310
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 315
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 316
                self.match(WordlifyParser.BEGIN)
                self.state = 318 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 317
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 320 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 362
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 360
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                            if la_ == 1:
                                self.state = 322
                                self.atom_instr()
                                self.state = 326
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 323
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 328
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 329
                                self.match(WordlifyParser.T__0)
                                self.state = 333
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 330
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 335
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 336
                                self.atom_instr()
                                self.state = 350 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 340
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 337
                                        self.match(WordlifyParser.WS)
                                        self.state = 342
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 343
                                    self.match(WordlifyParser.NL)
                                    self.state = 347
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 344
                                            self.match(WordlifyParser.WS) 
                                        self.state = 349
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                                    self.state = 352 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 354
                                self.block_instr()
                                self.state = 356 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 355
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 358 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 364
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

                    self.state = 376
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 365
                        self.atom_instr()
                        self.state = 369
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 366
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 371
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

                        self.state = 373
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==WordlifyParser.T__0:
                            self.state = 372
                            self.match(WordlifyParser.T__0)


                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 375
                        self.block_instr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 379 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 378
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 381 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break



                self.state = 385
                self.match(WordlifyParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 386
                self.match(WordlifyParser.FN)
                self.state = 388 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 387
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 390 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 392
                self.match(WordlifyParser.ID)
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 393
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 398
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 399
                self.match(WordlifyParser.T__1)
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 400
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 405
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ID:
                    self.state = 406
                    self.match(WordlifyParser.ID)
                    self.state = 410
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 407
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 412
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 429
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.T__2:
                        self.state = 413
                        self.match(WordlifyParser.T__2)
                        self.state = 417
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 414
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 419
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 420
                        self.match(WordlifyParser.ID)
                        self.state = 424
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 421
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 426
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 431
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 434
                self.match(WordlifyParser.T__3)
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 435
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 441
                self.match(WordlifyParser.BEGIN)
                self.state = 443 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 442
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 445 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 490
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 488
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                            if la_ == 1:
                                self.state = 447
                                self.atom_instr()
                                self.state = 451
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 448
                                        _la = self._input.LA(1)
                                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                            self._errHandler.recoverInline(self)
                                        else:
                                            self._errHandler.reportMatch(self)
                                            self.consume() 
                                    self.state = 453
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

                                self.state = 455
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==WordlifyParser.T__0:
                                    self.state = 454
                                    self.match(WordlifyParser.T__0)


                                self.notifyErrorListeners("Missing semicolon in function")
                                self.state = 461
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 458
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 463
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 464
                                self.atom_instr()
                                self.state = 478 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 468
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 465
                                        self.match(WordlifyParser.WS)
                                        self.state = 470
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 471
                                    self.match(WordlifyParser.NL)
                                    self.state = 475
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 472
                                            self.match(WordlifyParser.WS) 
                                        self.state = 477
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

                                    self.state = 480 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 482
                                self.block_instr()
                                self.state = 484 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 483
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 486 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 492
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

                    self.state = 504
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 493
                        self.atom_instr()
                        self.state = 497
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 494
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 499
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

                        self.state = 501
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==WordlifyParser.T__0:
                            self.state = 500
                            self.match(WordlifyParser.T__0)


                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 503
                        self.block_instr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 507 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 506
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 509 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break



                self.state = 513
                self.match(WordlifyParser.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_instr(self):
            return self.getTypedRuleContext(WordlifyParser.If_instrContext,0)


        def while_instr(self):
            return self.getTypedRuleContext(WordlifyParser.While_instrContext,0)


        def foreach(self):
            return self.getTypedRuleContext(WordlifyParser.ForeachContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_block_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_instr" ):
                listener.enterBlock_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_instr" ):
                listener.exitBlock_instr(self)




    def block_instr(self):

        localctx = WordlifyParser.Block_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block_instr)
        try:
            self.state = 519
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 516
                self.if_instr()
                pass
            elif token in [WordlifyParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 517
                self.while_instr()
                pass
            elif token in [WordlifyParser.FOREACH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 518
                self.foreach()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeachContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(WordlifyParser.FOREACH, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def IN(self):
            return self.getToken(WordlifyParser.IN, 0)

        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_foreach

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeach" ):
                listener.enterForeach(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeach" ):
                listener.exitForeach(self)




    def foreach(self):

        localctx = WordlifyParser.ForeachContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_foreach)
        self._la = 0 # Token type
        try:
            self.state = 730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 521
                self.match(WordlifyParser.FOREACH)
                self.state = 523 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 522
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 525 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 527
                self.match(WordlifyParser.ID)
                self.state = 529 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 528
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 531 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 533
                self.match(WordlifyParser.IN)
                self.state = 535 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 534
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 537 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 542
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.ID]:
                    self.state = 539
                    self.match(WordlifyParser.ID)
                    pass
                elif token in [WordlifyParser.ARGS]:
                    self.state = 540
                    self.args()
                    pass
                elif token in [WordlifyParser.T__5]:
                    self.state = 541
                    self.array()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 545 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 544
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 547 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 549
                self.match(WordlifyParser.DO)
                self.state = 551 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 550
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 553 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 595
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 593
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                            if la_ == 1:
                                self.state = 555
                                self.atom_instr()
                                self.state = 559
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 556
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 561
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 562
                                self.match(WordlifyParser.T__0)
                                self.state = 566
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 563
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 568
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 569
                                self.atom_instr()
                                self.state = 583 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 573
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 570
                                        self.match(WordlifyParser.WS)
                                        self.state = 575
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 576
                                    self.match(WordlifyParser.NL)
                                    self.state = 580
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 577
                                            self.match(WordlifyParser.WS) 
                                        self.state = 582
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                                    self.state = 585 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 587
                                self.block_instr()
                                self.state = 589 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 588
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 591 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 597
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                    self.state = 619
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 598
                        self.atom_instr()
                        self.state = 602
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 599
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 604
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                        self.state = 611
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 605
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 607 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 606
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 609 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 613
                        self.block_instr()
                        self.state = 615 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 614
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 617 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 623
                self.match(WordlifyParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 624
                self.match(WordlifyParser.FOREACH)
                self.state = 626 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 625
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 628 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 630
                self.match(WordlifyParser.ID)
                self.state = 632 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 631
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 634 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 636
                self.match(WordlifyParser.IN)
                self.state = 638 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 637
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 640 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 645
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.ID]:
                    self.state = 642
                    self.match(WordlifyParser.ID)
                    pass
                elif token in [WordlifyParser.ARGS]:
                    self.state = 643
                    self.args()
                    pass
                elif token in [WordlifyParser.T__5]:
                    self.state = 644
                    self.array()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 648 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 647
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 650 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 652
                self.match(WordlifyParser.DO)
                self.state = 654 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 653
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 656 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 701
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 699
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                            if la_ == 1:
                                self.state = 658
                                self.atom_instr()
                                self.state = 662
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 659
                                        _la = self._input.LA(1)
                                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                            self._errHandler.recoverInline(self)
                                        else:
                                            self._errHandler.reportMatch(self)
                                            self.consume() 
                                    self.state = 664
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

                                self.state = 666
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==WordlifyParser.T__0:
                                    self.state = 665
                                    self.match(WordlifyParser.T__0)


                                self.notifyErrorListeners("Missing semicolon in foreach loop")
                                self.state = 672
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 669
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 674
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 675
                                self.atom_instr()
                                self.state = 689 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 679
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 676
                                        self.match(WordlifyParser.WS)
                                        self.state = 681
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 682
                                    self.match(WordlifyParser.NL)
                                    self.state = 686
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 683
                                            self.match(WordlifyParser.WS) 
                                        self.state = 688
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

                                    self.state = 691 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 693
                                self.block_instr()
                                self.state = 695 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 694
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 697 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 703
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

                    self.state = 725
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 704
                        self.atom_instr()
                        self.state = 708
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 705
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 710
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

                        self.state = 717
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 711
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 713 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 712
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 715 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 719
                        self.block_instr()
                        self.state = 721 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 720
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 723 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 729
                self.match(WordlifyParser.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(WordlifyParser.WHILE, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_while_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_instr" ):
                listener.enterWhile_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_instr" ):
                listener.exitWhile_instr(self)




    def while_instr(self):

        localctx = WordlifyParser.While_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_while_instr)
        self._la = 0 # Token type
        try:
            self.state = 911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 732
                self.match(WordlifyParser.WHILE)
                self.state = 734 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 733
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 736 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 738
                self.cond()
                self.state = 740 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 739
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 742 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 744
                self.match(WordlifyParser.DO)
                self.state = 746 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 745
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 748 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 790
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 788
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                            if la_ == 1:
                                self.state = 750
                                self.atom_instr()
                                self.state = 754
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 751
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 756
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 757
                                self.match(WordlifyParser.T__0)
                                self.state = 761
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 758
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 763
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 764
                                self.atom_instr()
                                self.state = 778 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 768
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 765
                                        self.match(WordlifyParser.WS)
                                        self.state = 770
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 771
                                    self.match(WordlifyParser.NL)
                                    self.state = 775
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 772
                                            self.match(WordlifyParser.WS) 
                                        self.state = 777
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

                                    self.state = 780 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 782
                                self.block_instr()
                                self.state = 784 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 783
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 786 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 792
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

                    self.state = 814
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 793
                        self.atom_instr()
                        self.state = 797
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 794
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 799
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

                        self.state = 806
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 800
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 802 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 801
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 804 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 808
                        self.block_instr()
                        self.state = 810 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 809
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 812 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 818
                self.match(WordlifyParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 820
                self.match(WordlifyParser.WHILE)
                self.state = 822 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 821
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 824 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 826
                self.cond()
                self.state = 828 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 827
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 830 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 832
                self.match(WordlifyParser.DO)
                self.state = 834 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 833
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 836 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 881
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 879
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                            if la_ == 1:
                                self.state = 838
                                self.atom_instr()
                                self.state = 842
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 839
                                        _la = self._input.LA(1)
                                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                            self._errHandler.recoverInline(self)
                                        else:
                                            self._errHandler.reportMatch(self)
                                            self.consume() 
                                    self.state = 844
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

                                self.state = 846
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==WordlifyParser.T__0:
                                    self.state = 845
                                    self.match(WordlifyParser.T__0)


                                self.notifyErrorListeners("Missing semicolon in while loop")
                                self.state = 852
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 849
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 854
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 855
                                self.atom_instr()
                                self.state = 869 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 859
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 856
                                        self.match(WordlifyParser.WS)
                                        self.state = 861
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 862
                                    self.match(WordlifyParser.NL)
                                    self.state = 866
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 863
                                            self.match(WordlifyParser.WS) 
                                        self.state = 868
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

                                    self.state = 871 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 873
                                self.block_instr()
                                self.state = 875 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 874
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 877 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 883
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

                    self.state = 905
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 884
                        self.atom_instr()
                        self.state = 888
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 885
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 890
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

                        self.state = 897
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 891
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 893 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 892
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 895 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 899
                        self.block_instr()
                        self.state = 901 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 900
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 903 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 909
                self.match(WordlifyParser.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def else_if(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Else_ifContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Else_ifContext,i)


        def else_block(self):
            return self.getTypedRuleContext(WordlifyParser.Else_blockContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_if_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_instr" ):
                listener.enterIf_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_instr" ):
                listener.exitIf_instr(self)




    def if_instr(self):

        localctx = WordlifyParser.If_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_if_instr)
        self._la = 0 # Token type
        try:
            self.state = 939
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 913
                self.if_cond()
                self.state = 914
                self.then()
                self.state = 918
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 915
                        self.else_if() 
                    self.state = 920
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ELSE:
                    self.state = 921
                    self.else_block()


                self.state = 924
                self.match(WordlifyParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 926
                self.if_cond()
                self.state = 927
                self.then()
                self.state = 931
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 928
                        self.else_if() 
                    self.state = 933
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ELSE:
                    self.state = 934
                    self.else_block()


                self.notifyErrorListeners("Missing 'end' at end of 'if' instruction")
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(WordlifyParser.IF, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_if_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_cond" ):
                listener.enterIf_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_cond" ):
                listener.exitIf_cond(self)




    def if_cond(self):

        localctx = WordlifyParser.If_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_if_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            self.match(WordlifyParser.IF)
            self.state = 943 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 942
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 945 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 947
            self.cond()
            self.state = 949 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 948
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 951 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEN(self):
            return self.getToken(WordlifyParser.THEN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_then

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThen" ):
                listener.enterThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThen" ):
                listener.exitThen(self)




    def then(self):

        localctx = WordlifyParser.ThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_then)
        self._la = 0 # Token type
        try:
            self.state = 1104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 953
                self.match(WordlifyParser.THEN)
                self.state = 955 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 954
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 957 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

                self.state = 1025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 999
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 997
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                            if la_ == 1:
                                self.state = 959
                                self.atom_instr()
                                self.state = 963
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 960
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 965
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 966
                                self.match(WordlifyParser.T__0)
                                self.state = 970
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 967
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 972
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 973
                                self.atom_instr()
                                self.state = 987 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 977
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 974
                                        self.match(WordlifyParser.WS)
                                        self.state = 979
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 980
                                    self.match(WordlifyParser.NL)
                                    self.state = 984
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 981
                                            self.match(WordlifyParser.WS) 
                                        self.state = 986
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

                                    self.state = 989 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 991
                                self.block_instr()
                                self.state = 993 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 992
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 995 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 1001
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

                    self.state = 1023
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 1002
                        self.atom_instr()
                        self.state = 1006
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1003
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 1008
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

                        self.state = 1015
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 1009
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 1011 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1010
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()

                                else:
                                    raise NoViableAltException(self)
                                self.state = 1013 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 1017
                        self.block_instr()
                        self.state = 1019 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1018
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1021 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1027
                self.match(WordlifyParser.THEN)
                self.state = 1029 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1028
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1031 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

                self.state = 1102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 1076
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1074
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                            if la_ == 1:
                                self.state = 1033
                                self.atom_instr()
                                self.state = 1037
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 1034
                                        _la = self._input.LA(1)
                                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                            self._errHandler.recoverInline(self)
                                        else:
                                            self._errHandler.reportMatch(self)
                                            self.consume() 
                                    self.state = 1039
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

                                self.state = 1041
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==WordlifyParser.T__0:
                                    self.state = 1040
                                    self.match(WordlifyParser.T__0)


                                self.notifyErrorListeners("Missing semicolon in if-instruction")
                                self.state = 1047
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 1044
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 1049
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 1050
                                self.atom_instr()
                                self.state = 1064 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 1054
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 1051
                                        self.match(WordlifyParser.WS)
                                        self.state = 1056
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 1057
                                    self.match(WordlifyParser.NL)
                                    self.state = 1061
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,190,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 1058
                                            self.match(WordlifyParser.WS) 
                                        self.state = 1063
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,190,self._ctx)

                                    self.state = 1066 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 1068
                                self.block_instr()
                                self.state = 1070 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 1069
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 1072 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 1078
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

                    self.state = 1100
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 1079
                        self.atom_instr()
                        self.state = 1083
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1080
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 1085
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

                        self.state = 1092
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 1086
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 1088 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1087
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()

                                else:
                                    raise NoViableAltException(self)
                                self.state = 1090 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 1094
                        self.block_instr()
                        self.state = 1096 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1095
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1098 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_else_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_if" ):
                listener.enterElse_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_if" ):
                listener.exitElse_if(self)




    def else_if(self):

        localctx = WordlifyParser.Else_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_else_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.match(WordlifyParser.ELSE)
            self.state = 1108 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1107
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1110 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 1112
            self.if_cond()
            self.state = 1113
            self.then()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_else_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_block" ):
                listener.enterElse_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_block" ):
                listener.exitElse_block(self)




    def else_block(self):

        localctx = WordlifyParser.Else_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_else_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            self.match(WordlifyParser.ELSE)
            self.state = 1117 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1116
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1119 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

            self.state = 1187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 1161
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1159
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                        if la_ == 1:
                            self.state = 1121
                            self.atom_instr()
                            self.state = 1125
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 1122
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 1127
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 1128
                            self.match(WordlifyParser.T__0)
                            self.state = 1132
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 1129
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 1134
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 1135
                            self.atom_instr()
                            self.state = 1149 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 1139
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 1136
                                    self.match(WordlifyParser.WS)
                                    self.state = 1141
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 1142
                                self.match(WordlifyParser.NL)
                                self.state = 1146
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,207,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 1143
                                        self.match(WordlifyParser.WS) 
                                    self.state = 1148
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,207,self._ctx)

                                self.state = 1151 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 1153
                            self.block_instr()
                            self.state = 1155 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 1154
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 1157 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 1163
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

                self.state = 1185
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 1164
                    self.atom_instr()
                    self.state = 1168
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1165
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 1170
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

                    self.state = 1177
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 1171
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 1173 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1172
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1175 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,213,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 1179
                    self.block_instr()
                    self.state = 1181 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1180
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1183 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,215,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Single_condContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Single_condContext,i)


        def BIN_LOG_OP(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.BIN_LOG_OP)
            else:
                return self.getToken(WordlifyParser.BIN_LOG_OP, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)




    def cond(self):

        localctx = WordlifyParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.single_cond()
            self.state = 1204
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,220,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1191 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1190
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1193 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    self.state = 1195
                    self.match(WordlifyParser.BIN_LOG_OP)
                    self.state = 1197 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 1196
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1199 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    self.state = 1201
                    self.single_cond() 
                self.state = 1206
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def comparison(self):
            return self.getTypedRuleContext(WordlifyParser.ComparisonContext,0)


        def NOT(self):
            return self.getToken(WordlifyParser.NOT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_single_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_cond" ):
                listener.enterSingle_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_cond" ):
                listener.exitSingle_cond(self)




    def single_cond(self):

        localctx = WordlifyParser.Single_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_single_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.NOT:
                self.state = 1207
                self.match(WordlifyParser.NOT)
                self.state = 1209 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1208
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1211 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break



            self.state = 1218
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                self.state = 1215
                self.fn_call()
                pass

            elif la_ == 2:
                self.state = 1216
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 3:
                self.state = 1217
                self.comparison()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def CMP_OP(self):
            return self.getToken(WordlifyParser.CMP_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = WordlifyParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.expr()
            self.state = 1224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1221
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1226
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1227
            self.match(WordlifyParser.CMP_OP)
            self.state = 1231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1228
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1233
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1234
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def arith_expr(self):
            return self.getTypedRuleContext(WordlifyParser.Arith_exprContext,0)


        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def array_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Array_elemContext,0)


        def concat(self):
            return self.getTypedRuleContext(WordlifyParser.ConcatContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = WordlifyParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_expr)
        try:
            self.state = 1245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1236
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1237
                self.match(WordlifyParser.STR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1238
                self.match(WordlifyParser.NUM)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1239
                self.match(WordlifyParser.ID)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1240
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1241
                self.arith_expr()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1242
                self.array()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1243
                self.array_elem()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1244
                self.concat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def ARITH_OP(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ARITH_OP)
            else:
                return self.getToken(WordlifyParser.ARITH_OP, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)




    def arith_expr(self):

        localctx = WordlifyParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1247
            self.value_or_id()
            self.state = 1262 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1251
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1248
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1253
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1254
                    self.match(WordlifyParser.ARITH_OP)
                    self.state = 1258
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1255
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1260
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1261
                    self.value_or_id()

                else:
                    raise NoViableAltException(self)
                self.state = 1264 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,229,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConcatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def CONCAT_OP(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.CONCAT_OP)
            else:
                return self.getToken(WordlifyParser.CONCAT_OP, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_concat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcat" ):
                listener.enterConcat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcat" ):
                listener.exitConcat(self)




    def concat(self):

        localctx = WordlifyParser.ConcatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_concat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self.value_or_id()
            self.state = 1281 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1270
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1267
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1272
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1273
                    self.match(WordlifyParser.CONCAT_OP)
                    self.state = 1277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1274
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1279
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1280
                    self.value_or_id()

                else:
                    raise NoViableAltException(self)
                self.state = 1283 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def basename(self):
            return self.getTypedRuleContext(WordlifyParser.BasenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def length(self):
            return self.getTypedRuleContext(WordlifyParser.LengthContext,0)


        def is_dir(self):
            return self.getTypedRuleContext(WordlifyParser.Is_dirContext,0)


        def is_file(self):
            return self.getTypedRuleContext(WordlifyParser.Is_fileContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_call" ):
                listener.enterFn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_call" ):
                listener.exitFn_call(self)




    def fn_call(self):

        localctx = WordlifyParser.Fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_fn_call)
        try:
            self.state = 1310
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1285
                self.own_fn_call()
                pass
            elif token in [WordlifyParser.EXIST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1286
                self.exist()
                pass
            elif token in [WordlifyParser.PRINT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1287
                self.print_instr()
                pass
            elif token in [WordlifyParser.RENAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1288
                self.rename()
                pass
            elif token in [WordlifyParser.BASENAME]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1289
                self.basename()
                pass
            elif token in [WordlifyParser.REMOVE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1290
                self.remove()
                pass
            elif token in [WordlifyParser.MOVE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1291
                self.move()
                pass
            elif token in [WordlifyParser.COPY]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1292
                self.copy()
                pass
            elif token in [WordlifyParser.DOWNLOAD]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1293
                self.download()
                pass
            elif token in [WordlifyParser.WRITE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1294
                self.write()
                pass
            elif token in [WordlifyParser.READ]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1295
                self.read()
                pass
            elif token in [WordlifyParser.WAIT]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1296
                self.wait_instr()
                pass
            elif token in [WordlifyParser.EXECUTE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1297
                self.execute()
                pass
            elif token in [WordlifyParser.GET_FILES]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1298
                self.get_files()
                pass
            elif token in [WordlifyParser.DATE_MODIFIED]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1299
                self.date_modified()
                pass
            elif token in [WordlifyParser.SIZE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1300
                self.size()
                pass
            elif token in [WordlifyParser.EXIT]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1301
                self.exit()
                pass
            elif token in [WordlifyParser.CREATE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1302
                self.create()
                pass
            elif token in [WordlifyParser.LENGTH]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1303
                self.length()
                pass
            elif token in [WordlifyParser.IS_DIR]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1304
                self.is_dir()
                pass
            elif token in [WordlifyParser.IS_FILE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1305
                self.is_file()
                pass
            elif token in [WordlifyParser.TIME]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1306
                self.match(WordlifyParser.TIME)
                pass
            elif token in [WordlifyParser.FILE]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1307
                self.match(WordlifyParser.FILE)
                pass
            elif token in [WordlifyParser.FOLDER]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1308
                self.match(WordlifyParser.FOLDER)
                pass
            elif token in [WordlifyParser.ARGS]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1309
                self.args()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def basename(self):
            return self.getTypedRuleContext(WordlifyParser.BasenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def array_append(self):
            return self.getTypedRuleContext(WordlifyParser.Array_appendContext,0)


        def assign(self):
            return self.getTypedRuleContext(WordlifyParser.AssignContext,0)


        def is_dir(self):
            return self.getTypedRuleContext(WordlifyParser.Is_dirContext,0)


        def is_file(self):
            return self.getTypedRuleContext(WordlifyParser.Is_fileContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_atom_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_instr" ):
                listener.enterAtom_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_instr" ):
                listener.exitAtom_instr(self)




    def atom_instr(self):

        localctx = WordlifyParser.Atom_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_atom_instr)
        try:
            self.state = 1338
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1312
                self.own_fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1313
                self.exist()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1314
                self.print_instr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1315
                self.rename()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1316
                self.basename()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1317
                self.remove()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1318
                self.move()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1319
                self.copy()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1320
                self.download()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1321
                self.write()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1322
                self.read()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1323
                self.wait_instr()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1324
                self.execute()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1325
                self.get_files()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1326
                self.date_modified()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1327
                self.size()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1328
                self.exit()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1329
                self.create()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1330
                self.array_append()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1331
                self.assign()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1332
                self.is_dir()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1333
                self.is_file()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1334
                self.match(WordlifyParser.TIME)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1335
                self.match(WordlifyParser.FILE)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1336
                self.match(WordlifyParser.FOLDER)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1337
                self.args()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def array_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Array_elemContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)




    def assign(self):

        localctx = WordlifyParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_assign)
        self._la = 0 # Token type
        try:
            self.state = 1370
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1342
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                if la_ == 1:
                    self.state = 1340
                    self.match(WordlifyParser.ID)
                    pass

                elif la_ == 2:
                    self.state = 1341
                    self.array_elem()
                    pass


                self.state = 1347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1344
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1349
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1350
                self.match(WordlifyParser.T__4)
                self.state = 1354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1351
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1356
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1357
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1360
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 1358
                    self.match(WordlifyParser.ID)
                    pass

                elif la_ == 2:
                    self.state = 1359
                    self.array_elem()
                    pass


                self.state = 1365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1362
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1367
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1368
                self.match(WordlifyParser.T__4)
                self.notifyErrorListeners("Missing value to assign to variable")
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_appendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def APPEND(self):
            return self.getToken(WordlifyParser.APPEND, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array_append

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_append" ):
                listener.enterArray_append(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_append" ):
                listener.exitArray_append(self)




    def array_append(self):

        localctx = WordlifyParser.Array_appendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_array_append)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1372
            self.match(WordlifyParser.ID)
            self.state = 1376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1373
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1378
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1379
            self.match(WordlifyParser.APPEND)
            self.state = 1383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1380
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1385
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1386
            self.expr()
            self.state = 1390
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,243,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1387
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 1392
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,243,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_elem" ):
                listener.enterArray_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_elem" ):
                listener.exitArray_elem(self)




    def array_elem(self):

        localctx = WordlifyParser.Array_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_array_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.state = 1393
                self.match(WordlifyParser.ID)
                pass
            elif token in [WordlifyParser.ARGS]:
                self.state = 1394
                self.args()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1397
            self.match(WordlifyParser.T__5)
            self.state = 1401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1398
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1403
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1404
            self.expr()
            self.state = 1408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1405
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1410
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1411
            self.match(WordlifyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(WordlifyParser.IMPORT, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_import_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_call" ):
                listener.enterImport_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_call" ):
                listener.exitImport_call(self)




    def import_call(self):

        localctx = WordlifyParser.Import_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_import_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1413
            self.match(WordlifyParser.IMPORT)
            self.state = 1417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1414
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1419
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1420
            self.match(WordlifyParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Own_fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_own_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOwn_fn_call" ):
                listener.enterOwn_fn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOwn_fn_call" ):
                listener.exitOwn_fn_call(self)




    def own_fn_call(self):

        localctx = WordlifyParser.Own_fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_own_fn_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            self.match(WordlifyParser.ID)
            self.state = 1426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1423
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1428
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1429
            self.match(WordlifyParser.T__1)
            self.state = 1433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1430
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1435
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.T__5) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.LENGTH) | (1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 1436
                self.expr()
                self.state = 1440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1437
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.T__2:
                    self.state = 1443
                    self.match(WordlifyParser.T__2)
                    self.state = 1447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1444
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1449
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1450
                    self.expr()
                    self.state = 1454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1451
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1456
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1461
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1464
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIST(self):
            return self.getToken(WordlifyParser.EXIST, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExist" ):
                listener.enterExist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExist" ):
                listener.exitExist(self)




    def exist(self):

        localctx = WordlifyParser.ExistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_exist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1466
            self.match(WordlifyParser.EXIST)
            self.state = 1470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1467
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1472
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1473
            self.match(WordlifyParser.T__1)
            self.state = 1477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1474
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1479
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1480
            self.expr()
            self.state = 1484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1481
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1486
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1487
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS_FILE(self):
            return self.getToken(WordlifyParser.IS_FILE, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_is_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_file" ):
                listener.enterIs_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_file" ):
                listener.exitIs_file(self)




    def is_file(self):

        localctx = WordlifyParser.Is_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_is_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1489
            self.match(WordlifyParser.IS_FILE)
            self.state = 1493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1490
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1495
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1496
            self.match(WordlifyParser.T__1)
            self.state = 1500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1497
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1502
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1503
            self.expr()
            self.state = 1507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1504
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1509
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1510
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_dirContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS_DIR(self):
            return self.getToken(WordlifyParser.IS_DIR, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_is_dir

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_dir" ):
                listener.enterIs_dir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_dir" ):
                listener.exitIs_dir(self)




    def is_dir(self):

        localctx = WordlifyParser.Is_dirContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_is_dir)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1512
            self.match(WordlifyParser.IS_DIR)
            self.state = 1516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1513
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1518
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1519
            self.match(WordlifyParser.T__1)
            self.state = 1523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1520
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1525
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1526
            self.expr()
            self.state = 1530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1527
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1532
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1533
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(WordlifyParser.PRINT, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_print_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_instr" ):
                listener.enterPrint_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_instr" ):
                listener.exitPrint_instr(self)




    def print_instr(self):

        localctx = WordlifyParser.Print_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_print_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1535
            self.match(WordlifyParser.PRINT)
            self.state = 1539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1536
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1541
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1542
            self.match(WordlifyParser.T__1)
            self.state = 1546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1543
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1548
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1549
            self.expr()
            self.state = 1553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1550
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1555
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1556
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(WordlifyParser.RENAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_rename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename" ):
                listener.enterRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename" ):
                listener.exitRename(self)




    def rename(self):

        localctx = WordlifyParser.RenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_rename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1558
            self.match(WordlifyParser.RENAME)
            self.state = 1562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1559
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1564
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1565
            self.match(WordlifyParser.T__1)
            self.state = 1569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1566
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1571
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1572
            self.expr()
            self.state = 1576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1573
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1578
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1579
            self.match(WordlifyParser.T__2)
            self.state = 1583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1580
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1585
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1586
            self.expr()
            self.state = 1590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1587
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1592
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1593
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(WordlifyParser.REMOVE, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove" ):
                listener.enterRemove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove" ):
                listener.exitRemove(self)




    def remove(self):

        localctx = WordlifyParser.RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1595
            self.match(WordlifyParser.REMOVE)
            self.state = 1599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1596
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1601
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1602
            self.match(WordlifyParser.T__1)
            self.state = 1606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1603
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1608
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1609
            self.expr()
            self.state = 1613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1610
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1615
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1616
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOVE(self):
            return self.getToken(WordlifyParser.MOVE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)




    def move(self):

        localctx = WordlifyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1618
            self.match(WordlifyParser.MOVE)
            self.state = 1622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1619
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1624
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1625
            self.match(WordlifyParser.T__1)
            self.state = 1629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1626
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1631
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1632
            self.expr()
            self.state = 1636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1633
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1638
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1639
            self.match(WordlifyParser.T__2)
            self.state = 1643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1640
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1645
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1646
            self.expr()
            self.state = 1650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1647
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1652
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1653
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(WordlifyParser.COPY, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_copy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy" ):
                listener.enterCopy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy" ):
                listener.exitCopy(self)




    def copy(self):

        localctx = WordlifyParser.CopyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_copy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1655
            self.match(WordlifyParser.COPY)
            self.state = 1659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1656
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1661
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1662
            self.match(WordlifyParser.T__1)
            self.state = 1666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1663
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1668
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1669
            self.expr()
            self.state = 1673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1670
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1676
            self.match(WordlifyParser.T__2)
            self.state = 1680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1677
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1682
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1683
            self.expr()
            self.state = 1687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1684
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1689
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1690
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DownloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOWNLOAD(self):
            return self.getToken(WordlifyParser.DOWNLOAD, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_download

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDownload" ):
                listener.enterDownload(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDownload" ):
                listener.exitDownload(self)




    def download(self):

        localctx = WordlifyParser.DownloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_download)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692
            self.match(WordlifyParser.DOWNLOAD)
            self.state = 1696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1693
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1698
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1699
            self.match(WordlifyParser.T__1)
            self.state = 1703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1700
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1705
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1706
            self.expr()
            self.state = 1710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1707
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1712
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1713
            self.match(WordlifyParser.T__2)
            self.state = 1717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1714
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1719
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1720
            self.expr()
            self.state = 1724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1721
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1726
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1727
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(WordlifyParser.WRITE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_write

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite" ):
                listener.enterWrite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite" ):
                listener.exitWrite(self)




    def write(self):

        localctx = WordlifyParser.WriteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_write)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1729
            self.match(WordlifyParser.WRITE)
            self.state = 1733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1730
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1735
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1736
            self.match(WordlifyParser.T__1)
            self.state = 1740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1737
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1742
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1743
            self.expr()
            self.state = 1747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1744
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1749
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1750
            self.match(WordlifyParser.T__2)
            self.state = 1754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1751
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1756
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1757
            self.expr()
            self.state = 1761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1758
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1763
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1764
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(WordlifyParser.READ, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_read

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead" ):
                listener.enterRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead" ):
                listener.exitRead(self)




    def read(self):

        localctx = WordlifyParser.ReadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_read)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1766
            self.match(WordlifyParser.READ)
            self.state = 1770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1767
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1772
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1773
            self.match(WordlifyParser.T__1)
            self.state = 1777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1774
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1779
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1780
            self.expr()
            self.state = 1784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1781
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1786
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1787
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wait_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(WordlifyParser.WAIT, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_wait_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_instr" ):
                listener.enterWait_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_instr" ):
                listener.exitWait_instr(self)




    def wait_instr(self):

        localctx = WordlifyParser.Wait_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_wait_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1789
            self.match(WordlifyParser.WAIT)
            self.state = 1793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1790
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1795
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1796
            self.match(WordlifyParser.T__1)
            self.state = 1800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1797
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1802
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1803
            self.expr()
            self.state = 1807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1804
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1810
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(WordlifyParser.EXECUTE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_execute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)




    def execute(self):

        localctx = WordlifyParser.ExecuteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_execute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812
            self.match(WordlifyParser.EXECUTE)
            self.state = 1816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1813
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1818
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1819
            self.match(WordlifyParser.T__1)
            self.state = 1823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1820
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1825
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1842
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,305,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1826
                    self.expr()
                    self.state = 1830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1827
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1832
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1833
                    self.match(WordlifyParser.T__2)
                    self.state = 1837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1834
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1839
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
             
                self.state = 1844
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,305,self._ctx)

            self.state = 1845
            self.expr()
            self.state = 1849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1846
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1851
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1852
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_filesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET_FILES(self):
            return self.getToken(WordlifyParser.GET_FILES, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_get_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_files" ):
                listener.enterGet_files(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_files" ):
                listener.exitGet_files(self)




    def get_files(self):

        localctx = WordlifyParser.Get_filesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_get_files)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1854
            self.match(WordlifyParser.GET_FILES)
            self.state = 1858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1855
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1860
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1861
            self.match(WordlifyParser.T__1)
            self.state = 1865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1862
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1867
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1868
            self.expr()
            self.state = 1872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1869
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1874
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1875
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_modifiedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_MODIFIED(self):
            return self.getToken(WordlifyParser.DATE_MODIFIED, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_date_modified

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_modified" ):
                listener.enterDate_modified(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_modified" ):
                listener.exitDate_modified(self)




    def date_modified(self):

        localctx = WordlifyParser.Date_modifiedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_date_modified)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1877
            self.match(WordlifyParser.DATE_MODIFIED)
            self.state = 1881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1878
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1883
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1884
            self.match(WordlifyParser.T__1)
            self.state = 1888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1885
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1890
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1891
            self.expr()
            self.state = 1895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1892
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1897
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1898
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIZE(self):
            return self.getToken(WordlifyParser.SIZE, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSize" ):
                listener.enterSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSize" ):
                listener.exitSize(self)




    def size(self):

        localctx = WordlifyParser.SizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1900
            self.match(WordlifyParser.SIZE)
            self.state = 1904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1901
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1906
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1907
            self.match(WordlifyParser.T__1)
            self.state = 1911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1908
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1913
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1914
            self.expr()
            self.state = 1918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1915
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1920
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1921
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(WordlifyParser.EXIT, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit" ):
                listener.enterExit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit" ):
                listener.exitExit(self)




    def exit(self):

        localctx = WordlifyParser.ExitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_exit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1923
            self.match(WordlifyParser.EXIT)
            self.state = 1927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1924
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1929
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1930
            self.match(WordlifyParser.T__1)
            self.state = 1934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1931
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1936
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1937
            self.expr()
            self.state = 1941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1938
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1943
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1944
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(WordlifyParser.CREATE, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate" ):
                listener.enterCreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate" ):
                listener.exitCreate(self)




    def create(self):

        localctx = WordlifyParser.CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1946
            self.match(WordlifyParser.CREATE)
            self.state = 1950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1947
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1952
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1953
            self.match(WordlifyParser.T__1)
            self.state = 1957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1954
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1959
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1960
            self.expr()
            self.state = 1964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1961
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1966
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1967
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LENGTH(self):
            return self.getToken(WordlifyParser.LENGTH, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLength" ):
                listener.enterLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLength" ):
                listener.exitLength(self)




    def length(self):

        localctx = WordlifyParser.LengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_length)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1969
            self.match(WordlifyParser.LENGTH)
            self.state = 1973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1970
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1975
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1976
            self.match(WordlifyParser.T__1)
            self.state = 1980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1977
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1982
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1986
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.state = 1983
                self.match(WordlifyParser.ID)
                pass
            elif token in [WordlifyParser.T__5]:
                self.state = 1984
                self.array()
                pass
            elif token in [WordlifyParser.ARGS]:
                self.state = 1985
                self.args()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1988
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1993
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1994
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BASENAME(self):
            return self.getToken(WordlifyParser.BASENAME, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_basename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasename" ):
                listener.enterBasename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasename" ):
                listener.exitBasename(self)




    def basename(self):

        localctx = WordlifyParser.BasenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_basename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1996
            self.match(WordlifyParser.BASENAME)
            self.state = 2000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1997
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2002
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2003
            self.match(WordlifyParser.T__1)
            self.state = 2007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2004
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2009
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2010
            self.expr()
            self.state = 2014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2011
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2016
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2017
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARGS(self):
            return self.getToken(WordlifyParser.ARGS, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)




    def args(self):

        localctx = WordlifyParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_args)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2019
            self.match(WordlifyParser.ARGS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray" ):
                listener.enterArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray" ):
                listener.exitArray(self)




    def array(self):

        localctx = WordlifyParser.ArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2021
            self.match(WordlifyParser.T__5)
            self.state = 2025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2022
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2027
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 2028
                self.value_or_id()
                self.state = 2045
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,332,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2032
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 2029
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 2034
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2035
                        self.match(WordlifyParser.T__2)
                        self.state = 2039
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 2036
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 2041
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2042
                        self.value_or_id() 
                    self.state = 2047
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,332,self._ctx)

                self.state = 2051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2048
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2053
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2056
            self.match(WordlifyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_or_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_value_or_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_or_id" ):
                listener.enterValue_or_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_or_id" ):
                listener.exitValue_or_id(self)




    def value_or_id(self):

        localctx = WordlifyParser.Value_or_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_value_or_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2058
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





