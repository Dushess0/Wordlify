# Generated from Wordlify.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3:")
        buf.write("\u084a\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\3\2\7\2h")
        buf.write("\n\2\f\2\16\2k\13\2\3\2\3\2\7\2o\n\2\f\2\16\2r\13\2\3")
        buf.write("\2\3\2\7\2v\n\2\f\2\16\2y\13\2\3\2\3\2\7\2}\n\2\f\2\16")
        buf.write("\2\u0080\13\2\3\2\3\2\7\2\u0084\n\2\f\2\16\2\u0087\13")
        buf.write("\2\6\2\u0089\n\2\r\2\16\2\u008a\3\2\3\2\3\2\5\2\u0090")
        buf.write("\n\2\3\2\6\2\u0093\n\2\r\2\16\2\u0094\7\2\u0097\n\2\f")
        buf.write("\2\16\2\u009a\13\2\3\2\3\2\7\2\u009e\n\2\f\2\16\2\u00a1")
        buf.write("\13\2\3\2\5\2\u00a4\n\2\3\2\3\2\3\2\5\2\u00a9\n\2\5\2")
        buf.write("\u00ab\n\2\5\2\u00ad\n\2\3\2\7\2\u00b0\n\2\f\2\16\2\u00b3")
        buf.write("\13\2\3\2\5\2\u00b6\n\2\3\2\3\2\7\2\u00ba\n\2\f\2\16\2")
        buf.write("\u00bd\13\2\3\2\3\2\7\2\u00c1\n\2\f\2\16\2\u00c4\13\2")
        buf.write("\3\2\5\2\u00c7\n\2\3\2\3\2\7\2\u00cb\n\2\f\2\16\2\u00ce")
        buf.write("\13\2\3\2\3\2\7\2\u00d2\n\2\f\2\16\2\u00d5\13\2\3\2\3")
        buf.write("\2\7\2\u00d9\n\2\f\2\16\2\u00dc\13\2\6\2\u00de\n\2\r\2")
        buf.write("\16\2\u00df\3\2\3\2\3\2\5\2\u00e5\n\2\3\2\6\2\u00e8\n")
        buf.write("\2\r\2\16\2\u00e9\7\2\u00ec\n\2\f\2\16\2\u00ef\13\2\3")
        buf.write("\2\3\2\7\2\u00f3\n\2\f\2\16\2\u00f6\13\2\3\2\5\2\u00f9")
        buf.write("\n\2\3\2\3\2\3\2\5\2\u00fe\n\2\5\2\u0100\n\2\5\2\u0102")
        buf.write("\n\2\3\2\7\2\u0105\n\2\f\2\16\2\u0108\13\2\3\2\5\2\u010b")
        buf.write("\n\2\3\2\5\2\u010e\n\2\3\3\3\3\6\3\u0112\n\3\r\3\16\3")
        buf.write("\u0113\3\3\3\3\7\3\u0118\n\3\f\3\16\3\u011b\13\3\3\3\3")
        buf.write("\3\7\3\u011f\n\3\f\3\16\3\u0122\13\3\3\3\3\3\7\3\u0126")
        buf.write("\n\3\f\3\16\3\u0129\13\3\3\3\3\3\7\3\u012d\n\3\f\3\16")
        buf.write("\3\u0130\13\3\3\3\3\3\7\3\u0134\n\3\f\3\16\3\u0137\13")
        buf.write("\3\7\3\u0139\n\3\f\3\16\3\u013c\13\3\5\3\u013e\n\3\3\3")
        buf.write("\3\3\7\3\u0142\n\3\f\3\16\3\u0145\13\3\3\3\3\3\6\3\u0149")
        buf.write("\n\3\r\3\16\3\u014a\3\3\3\3\7\3\u014f\n\3\f\3\16\3\u0152")
        buf.write("\13\3\3\3\3\3\7\3\u0156\n\3\f\3\16\3\u0159\13\3\3\3\3")
        buf.write("\3\7\3\u015d\n\3\f\3\16\3\u0160\13\3\3\3\3\3\7\3\u0164")
        buf.write("\n\3\f\3\16\3\u0167\13\3\6\3\u0169\n\3\r\3\16\3\u016a")
        buf.write("\3\3\3\3\6\3\u016f\n\3\r\3\16\3\u0170\7\3\u0173\n\3\f")
        buf.write("\3\16\3\u0176\13\3\3\3\3\3\7\3\u017a\n\3\f\3\16\3\u017d")
        buf.write("\13\3\3\3\5\3\u0180\n\3\3\3\5\3\u0183\n\3\3\3\6\3\u0186")
        buf.write("\n\3\r\3\16\3\u0187\5\3\u018a\n\3\3\3\3\3\3\3\6\3\u018f")
        buf.write("\n\3\r\3\16\3\u0190\3\3\3\3\7\3\u0195\n\3\f\3\16\3\u0198")
        buf.write("\13\3\3\3\3\3\7\3\u019c\n\3\f\3\16\3\u019f\13\3\3\3\3")
        buf.write("\3\7\3\u01a3\n\3\f\3\16\3\u01a6\13\3\3\3\3\3\7\3\u01aa")
        buf.write("\n\3\f\3\16\3\u01ad\13\3\3\3\3\3\7\3\u01b1\n\3\f\3\16")
        buf.write("\3\u01b4\13\3\7\3\u01b6\n\3\f\3\16\3\u01b9\13\3\5\3\u01bb")
        buf.write("\n\3\3\3\3\3\7\3\u01bf\n\3\f\3\16\3\u01c2\13\3\3\3\3\3")
        buf.write("\6\3\u01c6\n\3\r\3\16\3\u01c7\3\3\3\3\7\3\u01cc\n\3\f")
        buf.write("\3\16\3\u01cf\13\3\3\3\5\3\u01d2\n\3\3\3\3\3\7\3\u01d6")
        buf.write("\n\3\f\3\16\3\u01d9\13\3\3\3\3\3\7\3\u01dd\n\3\f\3\16")
        buf.write("\3\u01e0\13\3\3\3\3\3\7\3\u01e4\n\3\f\3\16\3\u01e7\13")
        buf.write("\3\6\3\u01e9\n\3\r\3\16\3\u01ea\3\3\3\3\6\3\u01ef\n\3")
        buf.write("\r\3\16\3\u01f0\7\3\u01f3\n\3\f\3\16\3\u01f6\13\3\3\3")
        buf.write("\3\3\7\3\u01fa\n\3\f\3\16\3\u01fd\13\3\3\3\5\3\u0200\n")
        buf.write("\3\3\3\5\3\u0203\n\3\3\3\6\3\u0206\n\3\r\3\16\3\u0207")
        buf.write("\5\3\u020a\n\3\3\3\5\3\u020d\n\3\3\4\3\4\3\4\5\4\u0212")
        buf.write("\n\4\3\5\3\5\6\5\u0216\n\5\r\5\16\5\u0217\3\5\3\5\6\5")
        buf.write("\u021c\n\5\r\5\16\5\u021d\3\5\3\5\6\5\u0222\n\5\r\5\16")
        buf.write("\5\u0223\3\5\3\5\3\5\5\5\u0229\n\5\3\5\6\5\u022c\n\5\r")
        buf.write("\5\16\5\u022d\3\5\3\5\6\5\u0232\n\5\r\5\16\5\u0233\3\5")
        buf.write("\3\5\7\5\u0238\n\5\f\5\16\5\u023b\13\5\3\5\3\5\7\5\u023f")
        buf.write("\n\5\f\5\16\5\u0242\13\5\3\5\3\5\7\5\u0246\n\5\f\5\16")
        buf.write("\5\u0249\13\5\3\5\3\5\7\5\u024d\n\5\f\5\16\5\u0250\13")
        buf.write("\5\6\5\u0252\n\5\r\5\16\5\u0253\3\5\3\5\6\5\u0258\n\5")
        buf.write("\r\5\16\5\u0259\7\5\u025c\n\5\f\5\16\5\u025f\13\5\3\5")
        buf.write("\3\5\7\5\u0263\n\5\f\5\16\5\u0266\13\5\3\5\3\5\6\5\u026a")
        buf.write("\n\5\r\5\16\5\u026b\5\5\u026e\n\5\3\5\3\5\6\5\u0272\n")
        buf.write("\5\r\5\16\5\u0273\5\5\u0276\n\5\5\5\u0278\n\5\3\5\3\5")
        buf.write("\3\5\6\5\u027d\n\5\r\5\16\5\u027e\3\5\3\5\6\5\u0283\n")
        buf.write("\5\r\5\16\5\u0284\3\5\3\5\6\5\u0289\n\5\r\5\16\5\u028a")
        buf.write("\3\5\3\5\3\5\5\5\u0290\n\5\3\5\6\5\u0293\n\5\r\5\16\5")
        buf.write("\u0294\3\5\3\5\6\5\u0299\n\5\r\5\16\5\u029a\3\5\3\5\7")
        buf.write("\5\u029f\n\5\f\5\16\5\u02a2\13\5\3\5\5\5\u02a5\n\5\3\5")
        buf.write("\3\5\7\5\u02a9\n\5\f\5\16\5\u02ac\13\5\3\5\3\5\7\5\u02b0")
        buf.write("\n\5\f\5\16\5\u02b3\13\5\3\5\3\5\7\5\u02b7\n\5\f\5\16")
        buf.write("\5\u02ba\13\5\6\5\u02bc\n\5\r\5\16\5\u02bd\3\5\3\5\6\5")
        buf.write("\u02c2\n\5\r\5\16\5\u02c3\7\5\u02c6\n\5\f\5\16\5\u02c9")
        buf.write("\13\5\3\5\3\5\7\5\u02cd\n\5\f\5\16\5\u02d0\13\5\3\5\3")
        buf.write("\5\6\5\u02d4\n\5\r\5\16\5\u02d5\5\5\u02d8\n\5\3\5\3\5")
        buf.write("\6\5\u02dc\n\5\r\5\16\5\u02dd\5\5\u02e0\n\5\5\5\u02e2")
        buf.write("\n\5\3\5\5\5\u02e5\n\5\3\6\3\6\6\6\u02e9\n\6\r\6\16\6")
        buf.write("\u02ea\3\6\3\6\6\6\u02ef\n\6\r\6\16\6\u02f0\3\6\3\6\6")
        buf.write("\6\u02f5\n\6\r\6\16\6\u02f6\3\6\3\6\7\6\u02fb\n\6\f\6")
        buf.write("\16\6\u02fe\13\6\3\6\3\6\7\6\u0302\n\6\f\6\16\6\u0305")
        buf.write("\13\6\3\6\3\6\7\6\u0309\n\6\f\6\16\6\u030c\13\6\3\6\3")
        buf.write("\6\7\6\u0310\n\6\f\6\16\6\u0313\13\6\6\6\u0315\n\6\r\6")
        buf.write("\16\6\u0316\3\6\3\6\6\6\u031b\n\6\r\6\16\6\u031c\7\6\u031f")
        buf.write("\n\6\f\6\16\6\u0322\13\6\3\6\3\6\7\6\u0326\n\6\f\6\16")
        buf.write("\6\u0329\13\6\3\6\3\6\6\6\u032d\n\6\r\6\16\6\u032e\5\6")
        buf.write("\u0331\n\6\3\6\3\6\6\6\u0335\n\6\r\6\16\6\u0336\5\6\u0339")
        buf.write("\n\6\5\6\u033b\n\6\3\6\3\6\3\6\3\6\6\6\u0341\n\6\r\6\16")
        buf.write("\6\u0342\3\6\3\6\6\6\u0347\n\6\r\6\16\6\u0348\3\6\3\6")
        buf.write("\6\6\u034d\n\6\r\6\16\6\u034e\3\6\3\6\7\6\u0353\n\6\f")
        buf.write("\6\16\6\u0356\13\6\3\6\5\6\u0359\n\6\3\6\3\6\7\6\u035d")
        buf.write("\n\6\f\6\16\6\u0360\13\6\3\6\3\6\7\6\u0364\n\6\f\6\16")
        buf.write("\6\u0367\13\6\3\6\3\6\7\6\u036b\n\6\f\6\16\6\u036e\13")
        buf.write("\6\6\6\u0370\n\6\r\6\16\6\u0371\3\6\3\6\6\6\u0376\n\6")
        buf.write("\r\6\16\6\u0377\7\6\u037a\n\6\f\6\16\6\u037d\13\6\3\6")
        buf.write("\3\6\7\6\u0381\n\6\f\6\16\6\u0384\13\6\3\6\3\6\6\6\u0388")
        buf.write("\n\6\r\6\16\6\u0389\5\6\u038c\n\6\3\6\3\6\6\6\u0390\n")
        buf.write("\6\r\6\16\6\u0391\5\6\u0394\n\6\5\6\u0396\n\6\3\6\3\6")
        buf.write("\5\6\u039a\n\6\3\7\3\7\3\7\7\7\u039f\n\7\f\7\16\7\u03a2")
        buf.write("\13\7\3\7\5\7\u03a5\n\7\3\7\3\7\3\7\3\7\3\7\7\7\u03ac")
        buf.write("\n\7\f\7\16\7\u03af\13\7\3\7\5\7\u03b2\n\7\3\7\3\7\5\7")
        buf.write("\u03b6\n\7\3\b\3\b\6\b\u03ba\n\b\r\b\16\b\u03bb\3\b\3")
        buf.write("\b\6\b\u03c0\n\b\r\b\16\b\u03c1\3\t\3\t\6\t\u03c6\n\t")
        buf.write("\r\t\16\t\u03c7\3\t\3\t\7\t\u03cc\n\t\f\t\16\t\u03cf\13")
        buf.write("\t\3\t\3\t\7\t\u03d3\n\t\f\t\16\t\u03d6\13\t\3\t\3\t\7")
        buf.write("\t\u03da\n\t\f\t\16\t\u03dd\13\t\3\t\3\t\7\t\u03e1\n\t")
        buf.write("\f\t\16\t\u03e4\13\t\6\t\u03e6\n\t\r\t\16\t\u03e7\3\t")
        buf.write("\3\t\6\t\u03ec\n\t\r\t\16\t\u03ed\7\t\u03f0\n\t\f\t\16")
        buf.write("\t\u03f3\13\t\3\t\3\t\7\t\u03f7\n\t\f\t\16\t\u03fa\13")
        buf.write("\t\3\t\3\t\6\t\u03fe\n\t\r\t\16\t\u03ff\5\t\u0402\n\t")
        buf.write("\3\t\3\t\6\t\u0406\n\t\r\t\16\t\u0407\5\t\u040a\n\t\5")
        buf.write("\t\u040c\n\t\3\t\3\t\6\t\u0410\n\t\r\t\16\t\u0411\3\t")
        buf.write("\3\t\7\t\u0416\n\t\f\t\16\t\u0419\13\t\3\t\5\t\u041c\n")
        buf.write("\t\3\t\3\t\7\t\u0420\n\t\f\t\16\t\u0423\13\t\3\t\3\t\7")
        buf.write("\t\u0427\n\t\f\t\16\t\u042a\13\t\3\t\3\t\7\t\u042e\n\t")
        buf.write("\f\t\16\t\u0431\13\t\6\t\u0433\n\t\r\t\16\t\u0434\3\t")
        buf.write("\3\t\6\t\u0439\n\t\r\t\16\t\u043a\7\t\u043d\n\t\f\t\16")
        buf.write("\t\u0440\13\t\3\t\3\t\7\t\u0444\n\t\f\t\16\t\u0447\13")
        buf.write("\t\3\t\3\t\6\t\u044b\n\t\r\t\16\t\u044c\5\t\u044f\n\t")
        buf.write("\3\t\3\t\6\t\u0453\n\t\r\t\16\t\u0454\5\t\u0457\n\t\5")
        buf.write("\t\u0459\n\t\5\t\u045b\n\t\3\n\3\n\6\n\u045f\n\n\r\n\16")
        buf.write("\n\u0460\3\n\3\n\3\n\3\13\3\13\6\13\u0468\n\13\r\13\16")
        buf.write("\13\u0469\3\13\3\13\7\13\u046e\n\13\f\13\16\13\u0471\13")
        buf.write("\13\3\13\3\13\7\13\u0475\n\13\f\13\16\13\u0478\13\13\3")
        buf.write("\13\3\13\7\13\u047c\n\13\f\13\16\13\u047f\13\13\3\13\3")
        buf.write("\13\7\13\u0483\n\13\f\13\16\13\u0486\13\13\6\13\u0488")
        buf.write("\n\13\r\13\16\13\u0489\3\13\3\13\6\13\u048e\n\13\r\13")
        buf.write("\16\13\u048f\7\13\u0492\n\13\f\13\16\13\u0495\13\13\3")
        buf.write("\13\3\13\7\13\u0499\n\13\f\13\16\13\u049c\13\13\3\13\3")
        buf.write("\13\6\13\u04a0\n\13\r\13\16\13\u04a1\5\13\u04a4\n\13\3")
        buf.write("\13\3\13\6\13\u04a8\n\13\r\13\16\13\u04a9\5\13\u04ac\n")
        buf.write("\13\5\13\u04ae\n\13\3\f\3\f\6\f\u04b2\n\f\r\f\16\f\u04b3")
        buf.write("\3\f\3\f\6\f\u04b8\n\f\r\f\16\f\u04b9\3\f\5\f\u04bd\n")
        buf.write("\f\3\r\3\r\6\r\u04c1\n\r\r\r\16\r\u04c2\3\r\3\r\3\r\7")
        buf.write("\r\u04c8\n\r\f\r\16\r\u04cb\13\r\3\r\3\r\7\r\u04cf\n\r")
        buf.write("\f\r\16\r\u04d2\13\r\3\r\3\r\3\r\5\r\u04d7\n\r\3\16\3")
        buf.write("\16\3\16\5\16\u04dc\n\16\3\17\3\17\7\17\u04e0\n\17\f\17")
        buf.write("\16\17\u04e3\13\17\3\17\3\17\7\17\u04e7\n\17\f\17\16\17")
        buf.write("\u04ea\13\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\5\20\u04f7\n\20\3\21\3\21\7\21\u04fb\n\21")
        buf.write("\f\21\16\21\u04fe\13\21\3\21\3\21\7\21\u0502\n\21\f\21")
        buf.write("\16\21\u0505\13\21\3\21\5\21\u0508\n\21\3\22\3\22\7\22")
        buf.write("\u050c\n\22\f\22\16\22\u050f\13\22\3\22\3\22\7\22\u0513")
        buf.write("\n\22\f\22\16\22\u0516\13\22\3\22\3\22\3\22\5\22\u051b")
        buf.write("\n\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u0524\n")
        buf.write("\23\3\24\3\24\7\24\u0528\n\24\f\24\16\24\u052b\13\24\3")
        buf.write("\24\3\24\7\24\u052f\n\24\f\24\16\24\u0532\13\24\3\24\6")
        buf.write("\24\u0535\n\24\r\24\16\24\u0536\3\25\3\25\3\25\3\25\3")
        buf.write("\25\3\25\3\25\3\25\5\25\u0541\n\25\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26")
        buf.write("\u055c\n\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u0578\n\27\3")
        buf.write("\30\3\30\5\30\u057c\n\30\3\30\7\30\u057f\n\30\f\30\16")
        buf.write("\30\u0582\13\30\3\30\3\30\7\30\u0586\n\30\f\30\16\30\u0589")
        buf.write("\13\30\3\30\3\30\3\30\5\30\u058e\n\30\3\30\7\30\u0591")
        buf.write("\n\30\f\30\16\30\u0594\13\30\3\30\3\30\5\30\u0598\n\30")
        buf.write("\3\31\3\31\7\31\u059c\n\31\f\31\16\31\u059f\13\31\3\31")
        buf.write("\3\31\7\31\u05a3\n\31\f\31\16\31\u05a6\13\31\3\31\3\31")
        buf.write("\7\31\u05aa\n\31\f\31\16\31\u05ad\13\31\3\32\3\32\5\32")
        buf.write("\u05b1\n\32\3\32\3\32\7\32\u05b5\n\32\f\32\16\32\u05b8")
        buf.write("\13\32\3\32\3\32\7\32\u05bc\n\32\f\32\16\32\u05bf\13\32")
        buf.write("\3\32\3\32\3\33\3\33\7\33\u05c5\n\33\f\33\16\33\u05c8")
        buf.write("\13\33\3\33\3\33\3\34\3\34\7\34\u05ce\n\34\f\34\16\34")
        buf.write("\u05d1\13\34\3\34\3\34\7\34\u05d5\n\34\f\34\16\34\u05d8")
        buf.write("\13\34\3\34\3\34\7\34\u05dc\n\34\f\34\16\34\u05df\13\34")
        buf.write("\3\34\3\34\7\34\u05e3\n\34\f\34\16\34\u05e6\13\34\3\34")
        buf.write("\3\34\7\34\u05ea\n\34\f\34\16\34\u05ed\13\34\7\34\u05ef")
        buf.write("\n\34\f\34\16\34\u05f2\13\34\5\34\u05f4\n\34\3\34\3\34")
        buf.write("\3\35\3\35\7\35\u05fa\n\35\f\35\16\35\u05fd\13\35\3\35")
        buf.write("\3\35\7\35\u0601\n\35\f\35\16\35\u0604\13\35\3\35\3\35")
        buf.write("\7\35\u0608\n\35\f\35\16\35\u060b\13\35\3\35\3\35\3\36")
        buf.write("\3\36\7\36\u0611\n\36\f\36\16\36\u0614\13\36\3\36\3\36")
        buf.write("\7\36\u0618\n\36\f\36\16\36\u061b\13\36\3\36\3\36\7\36")
        buf.write("\u061f\n\36\f\36\16\36\u0622\13\36\3\36\3\36\3\37\3\37")
        buf.write("\7\37\u0628\n\37\f\37\16\37\u062b\13\37\3\37\3\37\7\37")
        buf.write("\u062f\n\37\f\37\16\37\u0632\13\37\3\37\3\37\7\37\u0636")
        buf.write("\n\37\f\37\16\37\u0639\13\37\3\37\3\37\3 \3 \7 \u063f")
        buf.write("\n \f \16 \u0642\13 \3 \3 \7 \u0646\n \f \16 \u0649\13")
        buf.write(" \3 \3 \7 \u064d\n \f \16 \u0650\13 \3 \3 \3!\3!\7!\u0656")
        buf.write("\n!\f!\16!\u0659\13!\3!\3!\7!\u065d\n!\f!\16!\u0660\13")
        buf.write("!\3!\3!\7!\u0664\n!\f!\16!\u0667\13!\3!\3!\7!\u066b\n")
        buf.write("!\f!\16!\u066e\13!\3!\3!\7!\u0672\n!\f!\16!\u0675\13!")
        buf.write("\3!\3!\3\"\3\"\7\"\u067b\n\"\f\"\16\"\u067e\13\"\3\"\3")
        buf.write("\"\7\"\u0682\n\"\f\"\16\"\u0685\13\"\3\"\3\"\7\"\u0689")
        buf.write("\n\"\f\"\16\"\u068c\13\"\3\"\3\"\3#\3#\7#\u0692\n#\f#")
        buf.write("\16#\u0695\13#\3#\3#\7#\u0699\n#\f#\16#\u069c\13#\3#\3")
        buf.write("#\7#\u06a0\n#\f#\16#\u06a3\13#\3#\3#\7#\u06a7\n#\f#\16")
        buf.write("#\u06aa\13#\3#\3#\7#\u06ae\n#\f#\16#\u06b1\13#\3#\3#\3")
        buf.write("$\3$\7$\u06b7\n$\f$\16$\u06ba\13$\3$\3$\7$\u06be\n$\f")
        buf.write("$\16$\u06c1\13$\3$\3$\7$\u06c5\n$\f$\16$\u06c8\13$\3$")
        buf.write("\3$\7$\u06cc\n$\f$\16$\u06cf\13$\3$\3$\7$\u06d3\n$\f$")
        buf.write("\16$\u06d6\13$\3$\3$\3%\3%\7%\u06dc\n%\f%\16%\u06df\13")
        buf.write("%\3%\3%\7%\u06e3\n%\f%\16%\u06e6\13%\3%\3%\7%\u06ea\n")
        buf.write("%\f%\16%\u06ed\13%\3%\3%\7%\u06f1\n%\f%\16%\u06f4\13%")
        buf.write("\3%\3%\7%\u06f8\n%\f%\16%\u06fb\13%\3%\3%\3&\3&\7&\u0701")
        buf.write("\n&\f&\16&\u0704\13&\3&\3&\7&\u0708\n&\f&\16&\u070b\13")
        buf.write("&\3&\3&\7&\u070f\n&\f&\16&\u0712\13&\3&\3&\7&\u0716\n")
        buf.write("&\f&\16&\u0719\13&\3&\3&\7&\u071d\n&\f&\16&\u0720\13&")
        buf.write("\3&\3&\3\'\3\'\7\'\u0726\n\'\f\'\16\'\u0729\13\'\3\'\3")
        buf.write("\'\7\'\u072d\n\'\f\'\16\'\u0730\13\'\3\'\3\'\7\'\u0734")
        buf.write("\n\'\f\'\16\'\u0737\13\'\3\'\3\'\3(\3(\7(\u073d\n(\f(")
        buf.write("\16(\u0740\13(\3(\3(\7(\u0744\n(\f(\16(\u0747\13(\3(\3")
        buf.write("(\7(\u074b\n(\f(\16(\u074e\13(\3(\3(\3)\3)\7)\u0754\n")
        buf.write(")\f)\16)\u0757\13)\3)\3)\7)\u075b\n)\f)\16)\u075e\13)")
        buf.write("\3)\3)\7)\u0762\n)\f)\16)\u0765\13)\3)\3)\7)\u0769\n)")
        buf.write("\f)\16)\u076c\13)\7)\u076e\n)\f)\16)\u0771\13)\3)\3)\7")
        buf.write(")\u0775\n)\f)\16)\u0778\13)\3)\3)\3*\3*\7*\u077e\n*\f")
        buf.write("*\16*\u0781\13*\3*\3*\7*\u0785\n*\f*\16*\u0788\13*\3*")
        buf.write("\3*\7*\u078c\n*\f*\16*\u078f\13*\3*\3*\3+\3+\7+\u0795")
        buf.write("\n+\f+\16+\u0798\13+\3+\3+\7+\u079c\n+\f+\16+\u079f\13")
        buf.write("+\3+\3+\7+\u07a3\n+\f+\16+\u07a6\13+\3+\3+\3,\3,\7,\u07ac")
        buf.write("\n,\f,\16,\u07af\13,\3,\3,\7,\u07b3\n,\f,\16,\u07b6\13")
        buf.write(",\3,\3,\7,\u07ba\n,\f,\16,\u07bd\13,\3,\3,\3-\3-\7-\u07c3")
        buf.write("\n-\f-\16-\u07c6\13-\3-\3-\7-\u07ca\n-\f-\16-\u07cd\13")
        buf.write("-\3-\3-\7-\u07d1\n-\f-\16-\u07d4\13-\3-\3-\3.\3.\7.\u07da")
        buf.write("\n.\f.\16.\u07dd\13.\3.\3.\7.\u07e1\n.\f.\16.\u07e4\13")
        buf.write(".\3.\3.\7.\u07e8\n.\f.\16.\u07eb\13.\3.\3.\3/\3/\7/\u07f1")
        buf.write("\n/\f/\16/\u07f4\13/\3/\3/\7/\u07f8\n/\f/\16/\u07fb\13")
        buf.write("/\3/\3/\3/\5/\u0800\n/\3/\7/\u0803\n/\f/\16/\u0806\13")
        buf.write("/\3/\3/\3\60\3\60\7\60\u080c\n\60\f\60\16\60\u080f\13")
        buf.write("\60\3\60\3\60\7\60\u0813\n\60\f\60\16\60\u0816\13\60\3")
        buf.write("\60\3\60\7\60\u081a\n\60\f\60\16\60\u081d\13\60\3\60\3")
        buf.write("\60\3\61\3\61\3\62\3\62\7\62\u0825\n\62\f\62\16\62\u0828")
        buf.write("\13\62\3\62\3\62\7\62\u082c\n\62\f\62\16\62\u082f\13\62")
        buf.write("\3\62\3\62\7\62\u0833\n\62\f\62\16\62\u0836\13\62\3\62")
        buf.write("\7\62\u0839\n\62\f\62\16\62\u083c\13\62\3\62\7\62\u083f")
        buf.write("\n\62\f\62\16\62\u0842\13\62\5\62\u0844\n\62\3\62\3\62")
        buf.write("\3\63\3\63\3\63\2\2\64\2\4\6\b\n\f\16\20\22\24\26\30\32")
        buf.write("\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bd\2")
        buf.write("\4\3\2\678\3\2\63\66\2\u09c3\2\u010d\3\2\2\2\4\u020c\3")
        buf.write("\2\2\2\6\u0211\3\2\2\2\b\u02e4\3\2\2\2\n\u0399\3\2\2\2")
        buf.write("\f\u03b5\3\2\2\2\16\u03b7\3\2\2\2\20\u045a\3\2\2\2\22")
        buf.write("\u045c\3\2\2\2\24\u0465\3\2\2\2\26\u04af\3\2\2\2\30\u04d6")
        buf.write("\3\2\2\2\32\u04db\3\2\2\2\34\u04dd\3\2\2\2\36\u04f6\3")
        buf.write("\2\2\2 \u04f8\3\2\2\2\"\u051a\3\2\2\2$\u0523\3\2\2\2&")
        buf.write("\u0525\3\2\2\2(\u0540\3\2\2\2*\u055b\3\2\2\2,\u0577\3")
        buf.write("\2\2\2.\u0597\3\2\2\2\60\u0599\3\2\2\2\62\u05b0\3\2\2")
        buf.write("\2\64\u05c2\3\2\2\2\66\u05cb\3\2\2\28\u05f7\3\2\2\2:\u060e")
        buf.write("\3\2\2\2<\u0625\3\2\2\2>\u063c\3\2\2\2@\u0653\3\2\2\2")
        buf.write("B\u0678\3\2\2\2D\u068f\3\2\2\2F\u06b4\3\2\2\2H\u06d9\3")
        buf.write("\2\2\2J\u06fe\3\2\2\2L\u0723\3\2\2\2N\u073a\3\2\2\2P\u0751")
        buf.write("\3\2\2\2R\u077b\3\2\2\2T\u0792\3\2\2\2V\u07a9\3\2\2\2")
        buf.write("X\u07c0\3\2\2\2Z\u07d7\3\2\2\2\\\u07ee\3\2\2\2^\u0809")
        buf.write("\3\2\2\2`\u0820\3\2\2\2b\u0822\3\2\2\2d\u0847\3\2\2\2")
        buf.write("fh\t\2\2\2gf\3\2\2\2hk\3\2\2\2ig\3\2\2\2ij\3\2\2\2j\u00ac")
        buf.write("\3\2\2\2ki\3\2\2\2lp\5,\27\2mo\t\2\2\2nm\3\2\2\2or\3\2")
        buf.write("\2\2pn\3\2\2\2pq\3\2\2\2qs\3\2\2\2rp\3\2\2\2sw\7\3\2\2")
        buf.write("tv\t\2\2\2ut\3\2\2\2vy\3\2\2\2wu\3\2\2\2wx\3\2\2\2x\u0097")
        buf.write("\3\2\2\2yw\3\2\2\2z\u0088\5,\27\2{}\7\67\2\2|{\3\2\2\2")
        buf.write("}\u0080\3\2\2\2~|\3\2\2\2~\177\3\2\2\2\177\u0081\3\2\2")
        buf.write("\2\u0080~\3\2\2\2\u0081\u0085\78\2\2\u0082\u0084\7\67")
        buf.write("\2\2\u0083\u0082\3\2\2\2\u0084\u0087\3\2\2\2\u0085\u0083")
        buf.write("\3\2\2\2\u0085\u0086\3\2\2\2\u0086\u0089\3\2\2\2\u0087")
        buf.write("\u0085\3\2\2\2\u0088~\3\2\2\2\u0089\u008a\3\2\2\2\u008a")
        buf.write("\u0088\3\2\2\2\u008a\u008b\3\2\2\2\u008b\u0097\3\2\2\2")
        buf.write("\u008c\u0090\5\6\4\2\u008d\u0090\5\4\3\2\u008e\u0090\5")
        buf.write("\64\33\2\u008f\u008c\3\2\2\2\u008f\u008d\3\2\2\2\u008f")
        buf.write("\u008e\3\2\2\2\u0090\u0092\3\2\2\2\u0091\u0093\t\2\2\2")
        buf.write("\u0092\u0091\3\2\2\2\u0093\u0094\3\2\2\2\u0094\u0092\3")
        buf.write("\2\2\2\u0094\u0095\3\2\2\2\u0095\u0097\3\2\2\2\u0096l")
        buf.write("\3\2\2\2\u0096z\3\2\2\2\u0096\u008f\3\2\2\2\u0097\u009a")
        buf.write("\3\2\2\2\u0098\u0096\3\2\2\2\u0098\u0099\3\2\2\2\u0099")
        buf.write("\u00aa\3\2\2\2\u009a\u0098\3\2\2\2\u009b\u009f\5,\27\2")
        buf.write("\u009c\u009e\t\2\2\2\u009d\u009c\3\2\2\2\u009e\u00a1\3")
        buf.write("\2\2\2\u009f\u009d\3\2\2\2\u009f\u00a0\3\2\2\2\u00a0\u00a3")
        buf.write("\3\2\2\2\u00a1\u009f\3\2\2\2\u00a2\u00a4\7\3\2\2\u00a3")
        buf.write("\u00a2\3\2\2\2\u00a3\u00a4\3\2\2\2\u00a4\u00ab\3\2\2\2")
        buf.write("\u00a5\u00a9\5\6\4\2\u00a6\u00a9\5\4\3\2\u00a7\u00a9\5")
        buf.write("\64\33\2\u00a8\u00a5\3\2\2\2\u00a8\u00a6\3\2\2\2\u00a8")
        buf.write("\u00a7\3\2\2\2\u00a9\u00ab\3\2\2\2\u00aa\u009b\3\2\2\2")
        buf.write("\u00aa\u00a8\3\2\2\2\u00ab\u00ad\3\2\2\2\u00ac\u0098\3")
        buf.write("\2\2\2\u00ac\u00ad\3\2\2\2\u00ad\u00b1\3\2\2\2\u00ae\u00b0")
        buf.write("\t\2\2\2\u00af\u00ae\3\2\2\2\u00b0\u00b3\3\2\2\2\u00b1")
        buf.write("\u00af\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2\u00b5\3\2\2\2")
        buf.write("\u00b3\u00b1\3\2\2\2\u00b4\u00b6\79\2\2\u00b5\u00b4\3")
        buf.write("\2\2\2\u00b5\u00b6\3\2\2\2\u00b6\u00b7\3\2\2\2\u00b7\u010e")
        buf.write("\7\2\2\3\u00b8\u00ba\t\2\2\2\u00b9\u00b8\3\2\2\2\u00ba")
        buf.write("\u00bd\3\2\2\2\u00bb\u00b9\3\2\2\2\u00bb\u00bc\3\2\2\2")
        buf.write("\u00bc\u0101\3\2\2\2\u00bd\u00bb\3\2\2\2\u00be\u00c2\5")
        buf.write(",\27\2\u00bf\u00c1\t\2\2\2\u00c0\u00bf\3\2\2\2\u00c1\u00c4")
        buf.write("\3\2\2\2\u00c2\u00c0\3\2\2\2\u00c2\u00c3\3\2\2\2\u00c3")
        buf.write("\u00c6\3\2\2\2\u00c4\u00c2\3\2\2\2\u00c5\u00c7\7\3\2\2")
        buf.write("\u00c6\u00c5\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00c8\3")
        buf.write("\2\2\2\u00c8\u00cc\b\2\1\2\u00c9\u00cb\t\2\2\2\u00ca\u00c9")
        buf.write("\3\2\2\2\u00cb\u00ce\3\2\2\2\u00cc\u00ca\3\2\2\2\u00cc")
        buf.write("\u00cd\3\2\2\2\u00cd\u00ec\3\2\2\2\u00ce\u00cc\3\2\2\2")
        buf.write("\u00cf\u00dd\5,\27\2\u00d0\u00d2\7\67\2\2\u00d1\u00d0")
        buf.write("\3\2\2\2\u00d2\u00d5\3\2\2\2\u00d3\u00d1\3\2\2\2\u00d3")
        buf.write("\u00d4\3\2\2\2\u00d4\u00d6\3\2\2\2\u00d5\u00d3\3\2\2\2")
        buf.write("\u00d6\u00da\78\2\2\u00d7\u00d9\7\67\2\2\u00d8\u00d7\3")
        buf.write("\2\2\2\u00d9\u00dc\3\2\2\2\u00da\u00d8\3\2\2\2\u00da\u00db")
        buf.write("\3\2\2\2\u00db\u00de\3\2\2\2\u00dc\u00da\3\2\2\2\u00dd")
        buf.write("\u00d3\3\2\2\2\u00de\u00df\3\2\2\2\u00df\u00dd\3\2\2\2")
        buf.write("\u00df\u00e0\3\2\2\2\u00e0\u00ec\3\2\2\2\u00e1\u00e5\5")
        buf.write("\6\4\2\u00e2\u00e5\5\4\3\2\u00e3\u00e5\5\64\33\2\u00e4")
        buf.write("\u00e1\3\2\2\2\u00e4\u00e2\3\2\2\2\u00e4\u00e3\3\2\2\2")
        buf.write("\u00e5\u00e7\3\2\2\2\u00e6\u00e8\t\2\2\2\u00e7\u00e6\3")
        buf.write("\2\2\2\u00e8\u00e9\3\2\2\2\u00e9\u00e7\3\2\2\2\u00e9\u00ea")
        buf.write("\3\2\2\2\u00ea\u00ec\3\2\2\2\u00eb\u00be\3\2\2\2\u00eb")
        buf.write("\u00cf\3\2\2\2\u00eb\u00e4\3\2\2\2\u00ec\u00ef\3\2\2\2")
        buf.write("\u00ed\u00eb\3\2\2\2\u00ed\u00ee\3\2\2\2\u00ee\u00ff\3")
        buf.write("\2\2\2\u00ef\u00ed\3\2\2\2\u00f0\u00f4\5,\27\2\u00f1\u00f3")
        buf.write("\t\2\2\2\u00f2\u00f1\3\2\2\2\u00f3\u00f6\3\2\2\2\u00f4")
        buf.write("\u00f2\3\2\2\2\u00f4\u00f5\3\2\2\2\u00f5\u00f8\3\2\2\2")
        buf.write("\u00f6\u00f4\3\2\2\2\u00f7\u00f9\7\3\2\2\u00f8\u00f7\3")
        buf.write("\2\2\2\u00f8\u00f9\3\2\2\2\u00f9\u0100\3\2\2\2\u00fa\u00fe")
        buf.write("\5\6\4\2\u00fb\u00fe\5\4\3\2\u00fc\u00fe\5\64\33\2\u00fd")
        buf.write("\u00fa\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fd\u00fc\3\2\2\2")
        buf.write("\u00fe\u0100\3\2\2\2\u00ff\u00f0\3\2\2\2\u00ff\u00fd\3")
        buf.write("\2\2\2\u0100\u0102\3\2\2\2\u0101\u00ed\3\2\2\2\u0101\u0102")
        buf.write("\3\2\2\2\u0102\u0106\3\2\2\2\u0103\u0105\t\2\2\2\u0104")
        buf.write("\u0103\3\2\2\2\u0105\u0108\3\2\2\2\u0106\u0104\3\2\2\2")
        buf.write("\u0106\u0107\3\2\2\2\u0107\u010a\3\2\2\2\u0108\u0106\3")
        buf.write("\2\2\2\u0109\u010b\79\2\2\u010a\u0109\3\2\2\2\u010a\u010b")
        buf.write("\3\2\2\2\u010b\u010c\3\2\2\2\u010c\u010e\7\2\2\3\u010d")
        buf.write("i\3\2\2\2\u010d\u00bb\3\2\2\2\u010e\3\3\2\2\2\u010f\u0111")
        buf.write("\7\b\2\2\u0110\u0112\t\2\2\2\u0111\u0110\3\2\2\2\u0112")
        buf.write("\u0113\3\2\2\2\u0113\u0111\3\2\2\2\u0113\u0114\3\2\2\2")
        buf.write("\u0114\u0115\3\2\2\2\u0115\u0119\7\65\2\2\u0116\u0118")
        buf.write("\t\2\2\2\u0117\u0116\3\2\2\2\u0118\u011b\3\2\2\2\u0119")
        buf.write("\u0117\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u011c\3\2\2\2")
        buf.write("\u011b\u0119\3\2\2\2\u011c\u0120\7+\2\2\u011d\u011f\t")
        buf.write("\2\2\2\u011e\u011d\3\2\2\2\u011f\u0122\3\2\2\2\u0120\u011e")
        buf.write("\3\2\2\2\u0120\u0121\3\2\2\2\u0121\u013d\3\2\2\2\u0122")
        buf.write("\u0120\3\2\2\2\u0123\u0127\7\65\2\2\u0124\u0126\t\2\2")
        buf.write("\2\u0125\u0124\3\2\2\2\u0126\u0129\3\2\2\2\u0127\u0125")
        buf.write("\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u013a\3\2\2\2\u0129")
        buf.write("\u0127\3\2\2\2\u012a\u012e\7\4\2\2\u012b\u012d\t\2\2\2")
        buf.write("\u012c\u012b\3\2\2\2\u012d\u0130\3\2\2\2\u012e\u012c\3")
        buf.write("\2\2\2\u012e\u012f\3\2\2\2\u012f\u0131\3\2\2\2\u0130\u012e")
        buf.write("\3\2\2\2\u0131\u0135\7\65\2\2\u0132\u0134\t\2\2\2\u0133")
        buf.write("\u0132\3\2\2\2\u0134\u0137\3\2\2\2\u0135\u0133\3\2\2\2")
        buf.write("\u0135\u0136\3\2\2\2\u0136\u0139\3\2\2\2\u0137\u0135\3")
        buf.write("\2\2\2\u0138\u012a\3\2\2\2\u0139\u013c\3\2\2\2\u013a\u0138")
        buf.write("\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u013e\3\2\2\2\u013c")
        buf.write("\u013a\3\2\2\2\u013d\u0123\3\2\2\2\u013d\u013e\3\2\2\2")
        buf.write("\u013e\u013f\3\2\2\2\u013f\u0143\7,\2\2\u0140\u0142\t")
        buf.write("\2\2\2\u0141\u0140\3\2\2\2\u0142\u0145\3\2\2\2\u0143\u0141")
        buf.write("\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0146\3\2\2\2\u0145")
        buf.write("\u0143\3\2\2\2\u0146\u0148\7\20\2\2\u0147\u0149\t\2\2")
        buf.write("\2\u0148\u0147\3\2\2\2\u0149\u014a\3\2\2\2\u014a\u0148")
        buf.write("\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u0189\3\2\2\2\u014c")
        buf.write("\u0150\5,\27\2\u014d\u014f\t\2\2\2\u014e\u014d\3\2\2\2")
        buf.write("\u014f\u0152\3\2\2\2\u0150\u014e\3\2\2\2\u0150\u0151\3")
        buf.write("\2\2\2\u0151\u0153\3\2\2\2\u0152\u0150\3\2\2\2\u0153\u0157")
        buf.write("\7\3\2\2\u0154\u0156\t\2\2\2\u0155\u0154\3\2\2\2\u0156")
        buf.write("\u0159\3\2\2\2\u0157\u0155\3\2\2\2\u0157\u0158\3\2\2\2")
        buf.write("\u0158\u0173\3\2\2\2\u0159\u0157\3\2\2\2\u015a\u0168\5")
        buf.write(",\27\2\u015b\u015d\7\67\2\2\u015c\u015b\3\2\2\2\u015d")
        buf.write("\u0160\3\2\2\2\u015e\u015c\3\2\2\2\u015e\u015f\3\2\2\2")
        buf.write("\u015f\u0161\3\2\2\2\u0160\u015e\3\2\2\2\u0161\u0165\7")
        buf.write("8\2\2\u0162\u0164\7\67\2\2\u0163\u0162\3\2\2\2\u0164\u0167")
        buf.write("\3\2\2\2\u0165\u0163\3\2\2\2\u0165\u0166\3\2\2\2\u0166")
        buf.write("\u0169\3\2\2\2\u0167\u0165\3\2\2\2\u0168\u015e\3\2\2\2")
        buf.write("\u0169\u016a\3\2\2\2\u016a\u0168\3\2\2\2\u016a\u016b\3")
        buf.write("\2\2\2\u016b\u0173\3\2\2\2\u016c\u016e\5\6\4\2\u016d\u016f")
        buf.write("\t\2\2\2\u016e\u016d\3\2\2\2\u016f\u0170\3\2\2\2\u0170")
        buf.write("\u016e\3\2\2\2\u0170\u0171\3\2\2\2\u0171\u0173\3\2\2\2")
        buf.write("\u0172\u014c\3\2\2\2\u0172\u015a\3\2\2\2\u0172\u016c\3")
        buf.write("\2\2\2\u0173\u0176\3\2\2\2\u0174\u0172\3\2\2\2\u0174\u0175")
        buf.write("\3\2\2\2\u0175\u0182\3\2\2\2\u0176\u0174\3\2\2\2\u0177")
        buf.write("\u017b\5,\27\2\u0178\u017a\t\2\2\2\u0179\u0178\3\2\2\2")
        buf.write("\u017a\u017d\3\2\2\2\u017b\u0179\3\2\2\2\u017b\u017c\3")
        buf.write("\2\2\2\u017c\u017f\3\2\2\2\u017d\u017b\3\2\2\2\u017e\u0180")
        buf.write("\7\3\2\2\u017f\u017e\3\2\2\2\u017f\u0180\3\2\2\2\u0180")
        buf.write("\u0183\3\2\2\2\u0181\u0183\5\6\4\2\u0182\u0177\3\2\2\2")
        buf.write("\u0182\u0181\3\2\2\2\u0183\u0185\3\2\2\2\u0184\u0186\t")
        buf.write("\2\2\2\u0185\u0184\3\2\2\2\u0186\u0187\3\2\2\2\u0187\u0185")
        buf.write("\3\2\2\2\u0187\u0188\3\2\2\2\u0188\u018a\3\2\2\2\u0189")
        buf.write("\u0174\3\2\2\2\u0189\u018a\3\2\2\2\u018a\u018b\3\2\2\2")
        buf.write("\u018b\u020d\7\21\2\2\u018c\u018e\7\b\2\2\u018d\u018f")
        buf.write("\t\2\2\2\u018e\u018d\3\2\2\2\u018f\u0190\3\2\2\2\u0190")
        buf.write("\u018e\3\2\2\2\u0190\u0191\3\2\2\2\u0191\u0192\3\2\2\2")
        buf.write("\u0192\u0196\7\65\2\2\u0193\u0195\t\2\2\2\u0194\u0193")
        buf.write("\3\2\2\2\u0195\u0198\3\2\2\2\u0196\u0194\3\2\2\2\u0196")
        buf.write("\u0197\3\2\2\2\u0197\u0199\3\2\2\2\u0198\u0196\3\2\2\2")
        buf.write("\u0199\u019d\7+\2\2\u019a\u019c\t\2\2\2\u019b\u019a\3")
        buf.write("\2\2\2\u019c\u019f\3\2\2\2\u019d\u019b\3\2\2\2\u019d\u019e")
        buf.write("\3\2\2\2\u019e\u01ba\3\2\2\2\u019f\u019d\3\2\2\2\u01a0")
        buf.write("\u01a4\7\65\2\2\u01a1\u01a3\t\2\2\2\u01a2\u01a1\3\2\2")
        buf.write("\2\u01a3\u01a6\3\2\2\2\u01a4\u01a2\3\2\2\2\u01a4\u01a5")
        buf.write("\3\2\2\2\u01a5\u01b7\3\2\2\2\u01a6\u01a4\3\2\2\2\u01a7")
        buf.write("\u01ab\7\4\2\2\u01a8\u01aa\t\2\2\2\u01a9\u01a8\3\2\2\2")
        buf.write("\u01aa\u01ad\3\2\2\2\u01ab\u01a9\3\2\2\2\u01ab\u01ac\3")
        buf.write("\2\2\2\u01ac\u01ae\3\2\2\2\u01ad\u01ab\3\2\2\2\u01ae\u01b2")
        buf.write("\7\65\2\2\u01af\u01b1\t\2\2\2\u01b0\u01af\3\2\2\2\u01b1")
        buf.write("\u01b4\3\2\2\2\u01b2\u01b0\3\2\2\2\u01b2\u01b3\3\2\2\2")
        buf.write("\u01b3\u01b6\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b5\u01a7\3")
        buf.write("\2\2\2\u01b6\u01b9\3\2\2\2\u01b7\u01b5\3\2\2\2\u01b7\u01b8")
        buf.write("\3\2\2\2\u01b8\u01bb\3\2\2\2\u01b9\u01b7\3\2\2\2\u01ba")
        buf.write("\u01a0\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01bc\3\2\2\2")
        buf.write("\u01bc\u01c0\7,\2\2\u01bd\u01bf\t\2\2\2\u01be\u01bd\3")
        buf.write("\2\2\2\u01bf\u01c2\3\2\2\2\u01c0\u01be\3\2\2\2\u01c0\u01c1")
        buf.write("\3\2\2\2\u01c1\u01c3\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c3")
        buf.write("\u01c5\7\20\2\2\u01c4\u01c6\t\2\2\2\u01c5\u01c4\3\2\2")
        buf.write("\2\u01c6\u01c7\3\2\2\2\u01c7\u01c5\3\2\2\2\u01c7\u01c8")
        buf.write("\3\2\2\2\u01c8\u0209\3\2\2\2\u01c9\u01cd\5,\27\2\u01ca")
        buf.write("\u01cc\t\2\2\2\u01cb\u01ca\3\2\2\2\u01cc\u01cf\3\2\2\2")
        buf.write("\u01cd\u01cb\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce\u01d1\3")
        buf.write("\2\2\2\u01cf\u01cd\3\2\2\2\u01d0\u01d2\7\3\2\2\u01d1\u01d0")
        buf.write("\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3")
        buf.write("\u01d7\b\3\1\2\u01d4\u01d6\t\2\2\2\u01d5\u01d4\3\2\2\2")
        buf.write("\u01d6\u01d9\3\2\2\2\u01d7\u01d5\3\2\2\2\u01d7\u01d8\3")
        buf.write("\2\2\2\u01d8\u01f3\3\2\2\2\u01d9\u01d7\3\2\2\2\u01da\u01e8")
        buf.write("\5,\27\2\u01db\u01dd\7\67\2\2\u01dc\u01db\3\2\2\2\u01dd")
        buf.write("\u01e0\3\2\2\2\u01de\u01dc\3\2\2\2\u01de\u01df\3\2\2\2")
        buf.write("\u01df\u01e1\3\2\2\2\u01e0\u01de\3\2\2\2\u01e1\u01e5\7")
        buf.write("8\2\2\u01e2\u01e4\7\67\2\2\u01e3\u01e2\3\2\2\2\u01e4\u01e7")
        buf.write("\3\2\2\2\u01e5\u01e3\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6")
        buf.write("\u01e9\3\2\2\2\u01e7\u01e5\3\2\2\2\u01e8\u01de\3\2\2\2")
        buf.write("\u01e9\u01ea\3\2\2\2\u01ea\u01e8\3\2\2\2\u01ea\u01eb\3")
        buf.write("\2\2\2\u01eb\u01f3\3\2\2\2\u01ec\u01ee\5\6\4\2\u01ed\u01ef")
        buf.write("\t\2\2\2\u01ee\u01ed\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0")
        buf.write("\u01ee\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f3\3\2\2\2")
        buf.write("\u01f2\u01c9\3\2\2\2\u01f2\u01da\3\2\2\2\u01f2\u01ec\3")
        buf.write("\2\2\2\u01f3\u01f6\3\2\2\2\u01f4\u01f2\3\2\2\2\u01f4\u01f5")
        buf.write("\3\2\2\2\u01f5\u0202\3\2\2\2\u01f6\u01f4\3\2\2\2\u01f7")
        buf.write("\u01fb\5,\27\2\u01f8\u01fa\t\2\2\2\u01f9\u01f8\3\2\2\2")
        buf.write("\u01fa\u01fd\3\2\2\2\u01fb\u01f9\3\2\2\2\u01fb\u01fc\3")
        buf.write("\2\2\2\u01fc\u01ff\3\2\2\2\u01fd\u01fb\3\2\2\2\u01fe\u0200")
        buf.write("\7\3\2\2\u01ff\u01fe\3\2\2\2\u01ff\u0200\3\2\2\2\u0200")
        buf.write("\u0203\3\2\2\2\u0201\u0203\5\6\4\2\u0202\u01f7\3\2\2\2")
        buf.write("\u0202\u0201\3\2\2\2\u0203\u0205\3\2\2\2\u0204\u0206\t")
        buf.write("\2\2\2\u0205\u0204\3\2\2\2\u0206\u0207\3\2\2\2\u0207\u0205")
        buf.write("\3\2\2\2\u0207\u0208\3\2\2\2\u0208\u020a\3\2\2\2\u0209")
        buf.write("\u01f4\3\2\2\2\u0209\u020a\3\2\2\2\u020a\u020b\3\2\2\2")
        buf.write("\u020b\u020d\7\21\2\2\u020c\u010f\3\2\2\2\u020c\u018c")
        buf.write("\3\2\2\2\u020d\5\3\2\2\2\u020e\u0212\5\f\7\2\u020f\u0212")
        buf.write("\5\n\6\2\u0210\u0212\5\b\5\2\u0211\u020e\3\2\2\2\u0211")
        buf.write("\u020f\3\2\2\2\u0211\u0210\3\2\2\2\u0212\7\3\2\2\2\u0213")
        buf.write("\u0215\7\n\2\2\u0214\u0216\t\2\2\2\u0215\u0214\3\2\2\2")
        buf.write("\u0216\u0217\3\2\2\2\u0217\u0215\3\2\2\2\u0217\u0218\3")
        buf.write("\2\2\2\u0218\u0219\3\2\2\2\u0219\u021b\7\65\2\2\u021a")
        buf.write("\u021c\t\2\2\2\u021b\u021a\3\2\2\2\u021c\u021d\3\2\2\2")
        buf.write("\u021d\u021b\3\2\2\2\u021d\u021e\3\2\2\2\u021e\u021f\3")
        buf.write("\2\2\2\u021f\u0221\7\13\2\2\u0220\u0222\t\2\2\2\u0221")
        buf.write("\u0220\3\2\2\2\u0222\u0223\3\2\2\2\u0223\u0221\3\2\2\2")
        buf.write("\u0223\u0224\3\2\2\2\u0224\u0228\3\2\2\2\u0225\u0229\7")
        buf.write("\65\2\2\u0226\u0229\5`\61\2\u0227\u0229\5b\62\2\u0228")
        buf.write("\u0225\3\2\2\2\u0228\u0226\3\2\2\2\u0228\u0227\3\2\2\2")
        buf.write("\u0229\u022b\3\2\2\2\u022a\u022c\t\2\2\2\u022b\u022a\3")
        buf.write("\2\2\2\u022c\u022d\3\2\2\2\u022d\u022b\3\2\2\2\u022d\u022e")
        buf.write("\3\2\2\2\u022e\u022f\3\2\2\2\u022f\u0231\7\f\2\2\u0230")
        buf.write("\u0232\t\2\2\2\u0231\u0230\3\2\2\2\u0232\u0233\3\2\2\2")
        buf.write("\u0233\u0231\3\2\2\2\u0233\u0234\3\2\2\2\u0234\u0277\3")
        buf.write("\2\2\2\u0235\u0239\5,\27\2\u0236\u0238\t\2\2\2\u0237\u0236")
        buf.write("\3\2\2\2\u0238\u023b\3\2\2\2\u0239\u0237\3\2\2\2\u0239")
        buf.write("\u023a\3\2\2\2\u023a\u023c\3\2\2\2\u023b\u0239\3\2\2\2")
        buf.write("\u023c\u0240\7\3\2\2\u023d\u023f\t\2\2\2\u023e\u023d\3")
        buf.write("\2\2\2\u023f\u0242\3\2\2\2\u0240\u023e\3\2\2\2\u0240\u0241")
        buf.write("\3\2\2\2\u0241\u025c\3\2\2\2\u0242\u0240\3\2\2\2\u0243")
        buf.write("\u0251\5,\27\2\u0244\u0246\7\67\2\2\u0245\u0244\3\2\2")
        buf.write("\2\u0246\u0249\3\2\2\2\u0247\u0245\3\2\2\2\u0247\u0248")
        buf.write("\3\2\2\2\u0248\u024a\3\2\2\2\u0249\u0247\3\2\2\2\u024a")
        buf.write("\u024e\78\2\2\u024b\u024d\7\67\2\2\u024c\u024b\3\2\2\2")
        buf.write("\u024d\u0250\3\2\2\2\u024e\u024c\3\2\2\2\u024e\u024f\3")
        buf.write("\2\2\2\u024f\u0252\3\2\2\2\u0250\u024e\3\2\2\2\u0251\u0247")
        buf.write("\3\2\2\2\u0252\u0253\3\2\2\2\u0253\u0251\3\2\2\2\u0253")
        buf.write("\u0254\3\2\2\2\u0254\u025c\3\2\2\2\u0255\u0257\5\6\4\2")
        buf.write("\u0256\u0258\t\2\2\2\u0257\u0256\3\2\2\2\u0258\u0259\3")
        buf.write("\2\2\2\u0259\u0257\3\2\2\2\u0259\u025a\3\2\2\2\u025a\u025c")
        buf.write("\3\2\2\2\u025b\u0235\3\2\2\2\u025b\u0243\3\2\2\2\u025b")
        buf.write("\u0255\3\2\2\2\u025c\u025f\3\2\2\2\u025d\u025b\3\2\2\2")
        buf.write("\u025d\u025e\3\2\2\2\u025e\u0275\3\2\2\2\u025f\u025d\3")
        buf.write("\2\2\2\u0260\u0264\5,\27\2\u0261\u0263\t\2\2\2\u0262\u0261")
        buf.write("\3\2\2\2\u0263\u0266\3\2\2\2\u0264\u0262\3\2\2\2\u0264")
        buf.write("\u0265\3\2\2\2\u0265\u026d\3\2\2\2\u0266\u0264\3\2\2\2")
        buf.write("\u0267\u026e\7\3\2\2\u0268\u026a\t\2\2\2\u0269\u0268\3")
        buf.write("\2\2\2\u026a\u026b\3\2\2\2\u026b\u0269\3\2\2\2\u026b\u026c")
        buf.write("\3\2\2\2\u026c\u026e\3\2\2\2\u026d\u0267\3\2\2\2\u026d")
        buf.write("\u0269\3\2\2\2\u026e\u0276\3\2\2\2\u026f\u0271\5\6\4\2")
        buf.write("\u0270\u0272\t\2\2\2\u0271\u0270\3\2\2\2\u0272\u0273\3")
        buf.write("\2\2\2\u0273\u0271\3\2\2\2\u0273\u0274\3\2\2\2\u0274\u0276")
        buf.write("\3\2\2\2\u0275\u0260\3\2\2\2\u0275\u026f\3\2\2\2\u0276")
        buf.write("\u0278\3\2\2\2\u0277\u025d\3\2\2\2\u0277\u0278\3\2\2\2")
        buf.write("\u0278\u0279\3\2\2\2\u0279\u02e5\7\21\2\2\u027a\u027c")
        buf.write("\7\n\2\2\u027b\u027d\t\2\2\2\u027c\u027b\3\2\2\2\u027d")
        buf.write("\u027e\3\2\2\2\u027e\u027c\3\2\2\2\u027e\u027f\3\2\2\2")
        buf.write("\u027f\u0280\3\2\2\2\u0280\u0282\7\65\2\2\u0281\u0283")
        buf.write("\t\2\2\2\u0282\u0281\3\2\2\2\u0283\u0284\3\2\2\2\u0284")
        buf.write("\u0282\3\2\2\2\u0284\u0285\3\2\2\2\u0285\u0286\3\2\2\2")
        buf.write("\u0286\u0288\7\13\2\2\u0287\u0289\t\2\2\2\u0288\u0287")
        buf.write("\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u0288\3\2\2\2\u028a")
        buf.write("\u028b\3\2\2\2\u028b\u028f\3\2\2\2\u028c\u0290\7\65\2")
        buf.write("\2\u028d\u0290\5`\61\2\u028e\u0290\5b\62\2\u028f\u028c")
        buf.write("\3\2\2\2\u028f\u028d\3\2\2\2\u028f\u028e\3\2\2\2\u0290")
        buf.write("\u0292\3\2\2\2\u0291\u0293\t\2\2\2\u0292\u0291\3\2\2\2")
        buf.write("\u0293\u0294\3\2\2\2\u0294\u0292\3\2\2\2\u0294\u0295\3")
        buf.write("\2\2\2\u0295\u0296\3\2\2\2\u0296\u0298\7\f\2\2\u0297\u0299")
        buf.write("\t\2\2\2\u0298\u0297\3\2\2\2\u0299\u029a\3\2\2\2\u029a")
        buf.write("\u0298\3\2\2\2\u029a\u029b\3\2\2\2\u029b\u02e1\3\2\2\2")
        buf.write("\u029c\u02a0\5,\27\2\u029d\u029f\t\2\2\2\u029e\u029d\3")
        buf.write("\2\2\2\u029f\u02a2\3\2\2\2\u02a0\u029e\3\2\2\2\u02a0\u02a1")
        buf.write("\3\2\2\2\u02a1\u02a4\3\2\2\2\u02a2\u02a0\3\2\2\2\u02a3")
        buf.write("\u02a5\7\3\2\2\u02a4\u02a3\3\2\2\2\u02a4\u02a5\3\2\2\2")
        buf.write("\u02a5\u02a6\3\2\2\2\u02a6\u02aa\b\5\1\2\u02a7\u02a9\t")
        buf.write("\2\2\2\u02a8\u02a7\3\2\2\2\u02a9\u02ac\3\2\2\2\u02aa\u02a8")
        buf.write("\3\2\2\2\u02aa\u02ab\3\2\2\2\u02ab\u02c6\3\2\2\2\u02ac")
        buf.write("\u02aa\3\2\2\2\u02ad\u02bb\5,\27\2\u02ae\u02b0\7\67\2")
        buf.write("\2\u02af\u02ae\3\2\2\2\u02b0\u02b3\3\2\2\2\u02b1\u02af")
        buf.write("\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b4\3\2\2\2\u02b3")
        buf.write("\u02b1\3\2\2\2\u02b4\u02b8\78\2\2\u02b5\u02b7\7\67\2\2")
        buf.write("\u02b6\u02b5\3\2\2\2\u02b7\u02ba\3\2\2\2\u02b8\u02b6\3")
        buf.write("\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02bc\3\2\2\2\u02ba\u02b8")
        buf.write("\3\2\2\2\u02bb\u02b1\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd")
        buf.write("\u02bb\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02c6\3\2\2\2")
        buf.write("\u02bf\u02c1\5\6\4\2\u02c0\u02c2\t\2\2\2\u02c1\u02c0\3")
        buf.write("\2\2\2\u02c2\u02c3\3\2\2\2\u02c3\u02c1\3\2\2\2\u02c3\u02c4")
        buf.write("\3\2\2\2\u02c4\u02c6\3\2\2\2\u02c5\u029c\3\2\2\2\u02c5")
        buf.write("\u02ad\3\2\2\2\u02c5\u02bf\3\2\2\2\u02c6\u02c9\3\2\2\2")
        buf.write("\u02c7\u02c5\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8\u02df\3")
        buf.write("\2\2\2\u02c9\u02c7\3\2\2\2\u02ca\u02ce\5,\27\2\u02cb\u02cd")
        buf.write("\t\2\2\2\u02cc\u02cb\3\2\2\2\u02cd\u02d0\3\2\2\2\u02ce")
        buf.write("\u02cc\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02d7\3\2\2\2")
        buf.write("\u02d0\u02ce\3\2\2\2\u02d1\u02d8\7\3\2\2\u02d2\u02d4\t")
        buf.write("\2\2\2\u02d3\u02d2\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d3")
        buf.write("\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6\u02d8\3\2\2\2\u02d7")
        buf.write("\u02d1\3\2\2\2\u02d7\u02d3\3\2\2\2\u02d8\u02e0\3\2\2\2")
        buf.write("\u02d9\u02db\5\6\4\2\u02da\u02dc\t\2\2\2\u02db\u02da\3")
        buf.write("\2\2\2\u02dc\u02dd\3\2\2\2\u02dd\u02db\3\2\2\2\u02dd\u02de")
        buf.write("\3\2\2\2\u02de\u02e0\3\2\2\2\u02df\u02ca\3\2\2\2\u02df")
        buf.write("\u02d9\3\2\2\2\u02e0\u02e2\3\2\2\2\u02e1\u02c7\3\2\2\2")
        buf.write("\u02e1\u02e2\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3\u02e5\7")
        buf.write("\21\2\2\u02e4\u0213\3\2\2\2\u02e4\u027a\3\2\2\2\u02e5")
        buf.write("\t\3\2\2\2\u02e6\u02e8\7\t\2\2\u02e7\u02e9\t\2\2\2\u02e8")
        buf.write("\u02e7\3\2\2\2\u02e9\u02ea\3\2\2\2\u02ea\u02e8\3\2\2\2")
        buf.write("\u02ea\u02eb\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02ee\5")
        buf.write("\26\f\2\u02ed\u02ef\t\2\2\2\u02ee\u02ed\3\2\2\2\u02ef")
        buf.write("\u02f0\3\2\2\2\u02f0\u02ee\3\2\2\2\u02f0\u02f1\3\2\2\2")
        buf.write("\u02f1\u02f2\3\2\2\2\u02f2\u02f4\7\f\2\2\u02f3\u02f5\t")
        buf.write("\2\2\2\u02f4\u02f3\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6\u02f4")
        buf.write("\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\u033a\3\2\2\2\u02f8")
        buf.write("\u02fc\5,\27\2\u02f9\u02fb\t\2\2\2\u02fa\u02f9\3\2\2\2")
        buf.write("\u02fb\u02fe\3\2\2\2\u02fc\u02fa\3\2\2\2\u02fc\u02fd\3")
        buf.write("\2\2\2\u02fd\u02ff\3\2\2\2\u02fe\u02fc\3\2\2\2\u02ff\u0303")
        buf.write("\7\3\2\2\u0300\u0302\t\2\2\2\u0301\u0300\3\2\2\2\u0302")
        buf.write("\u0305\3\2\2\2\u0303\u0301\3\2\2\2\u0303\u0304\3\2\2\2")
        buf.write("\u0304\u031f\3\2\2\2\u0305\u0303\3\2\2\2\u0306\u0314\5")
        buf.write(",\27\2\u0307\u0309\7\67\2\2\u0308\u0307\3\2\2\2\u0309")
        buf.write("\u030c\3\2\2\2\u030a\u0308\3\2\2\2\u030a\u030b\3\2\2\2")
        buf.write("\u030b\u030d\3\2\2\2\u030c\u030a\3\2\2\2\u030d\u0311\7")
        buf.write("8\2\2\u030e\u0310\7\67\2\2\u030f\u030e\3\2\2\2\u0310\u0313")
        buf.write("\3\2\2\2\u0311\u030f\3\2\2\2\u0311\u0312\3\2\2\2\u0312")
        buf.write("\u0315\3\2\2\2\u0313\u0311\3\2\2\2\u0314\u030a\3\2\2\2")
        buf.write("\u0315\u0316\3\2\2\2\u0316\u0314\3\2\2\2\u0316\u0317\3")
        buf.write("\2\2\2\u0317\u031f\3\2\2\2\u0318\u031a\5\6\4\2\u0319\u031b")
        buf.write("\t\2\2\2\u031a\u0319\3\2\2\2\u031b\u031c\3\2\2\2\u031c")
        buf.write("\u031a\3\2\2\2\u031c\u031d\3\2\2\2\u031d\u031f\3\2\2\2")
        buf.write("\u031e\u02f8\3\2\2\2\u031e\u0306\3\2\2\2\u031e\u0318\3")
        buf.write("\2\2\2\u031f\u0322\3\2\2\2\u0320\u031e\3\2\2\2\u0320\u0321")
        buf.write("\3\2\2\2\u0321\u0338\3\2\2\2\u0322\u0320\3\2\2\2\u0323")
        buf.write("\u0327\5,\27\2\u0324\u0326\t\2\2\2\u0325\u0324\3\2\2\2")
        buf.write("\u0326\u0329\3\2\2\2\u0327\u0325\3\2\2\2\u0327\u0328\3")
        buf.write("\2\2\2\u0328\u0330\3\2\2\2\u0329\u0327\3\2\2\2\u032a\u0331")
        buf.write("\7\3\2\2\u032b\u032d\t\2\2\2\u032c\u032b\3\2\2\2\u032d")
        buf.write("\u032e\3\2\2\2\u032e\u032c\3\2\2\2\u032e\u032f\3\2\2\2")
        buf.write("\u032f\u0331\3\2\2\2\u0330\u032a\3\2\2\2\u0330\u032c\3")
        buf.write("\2\2\2\u0331\u0339\3\2\2\2\u0332\u0334\5\6\4\2\u0333\u0335")
        buf.write("\t\2\2\2\u0334\u0333\3\2\2\2\u0335\u0336\3\2\2\2\u0336")
        buf.write("\u0334\3\2\2\2\u0336\u0337\3\2\2\2\u0337\u0339\3\2\2\2")
        buf.write("\u0338\u0323\3\2\2\2\u0338\u0332\3\2\2\2\u0339\u033b\3")
        buf.write("\2\2\2\u033a\u0320\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u033c")
        buf.write("\3\2\2\2\u033c\u033d\7\21\2\2\u033d\u039a\3\2\2\2\u033e")
        buf.write("\u0340\7\t\2\2\u033f\u0341\t\2\2\2\u0340\u033f\3\2\2\2")
        buf.write("\u0341\u0342\3\2\2\2\u0342\u0340\3\2\2\2\u0342\u0343\3")
        buf.write("\2\2\2\u0343\u0344\3\2\2\2\u0344\u0346\5\26\f\2\u0345")
        buf.write("\u0347\t\2\2\2\u0346\u0345\3\2\2\2\u0347\u0348\3\2\2\2")
        buf.write("\u0348\u0346\3\2\2\2\u0348\u0349\3\2\2\2\u0349\u034a\3")
        buf.write("\2\2\2\u034a\u034c\7\f\2\2\u034b\u034d\t\2\2\2\u034c\u034b")
        buf.write("\3\2\2\2\u034d\u034e\3\2\2\2\u034e\u034c\3\2\2\2\u034e")
        buf.write("\u034f\3\2\2\2\u034f\u0395\3\2\2\2\u0350\u0354\5,\27\2")
        buf.write("\u0351\u0353\t\2\2\2\u0352\u0351\3\2\2\2\u0353\u0356\3")
        buf.write("\2\2\2\u0354\u0352\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u0358")
        buf.write("\3\2\2\2\u0356\u0354\3\2\2\2\u0357\u0359\7\3\2\2\u0358")
        buf.write("\u0357\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035a\3\2\2\2")
        buf.write("\u035a\u035e\b\6\1\2\u035b\u035d\t\2\2\2\u035c\u035b\3")
        buf.write("\2\2\2\u035d\u0360\3\2\2\2\u035e\u035c\3\2\2\2\u035e\u035f")
        buf.write("\3\2\2\2\u035f\u037a\3\2\2\2\u0360\u035e\3\2\2\2\u0361")
        buf.write("\u036f\5,\27\2\u0362\u0364\7\67\2\2\u0363\u0362\3\2\2")
        buf.write("\2\u0364\u0367\3\2\2\2\u0365\u0363\3\2\2\2\u0365\u0366")
        buf.write("\3\2\2\2\u0366\u0368\3\2\2\2\u0367\u0365\3\2\2\2\u0368")
        buf.write("\u036c\78\2\2\u0369\u036b\7\67\2\2\u036a\u0369\3\2\2\2")
        buf.write("\u036b\u036e\3\2\2\2\u036c\u036a\3\2\2\2\u036c\u036d\3")
        buf.write("\2\2\2\u036d\u0370\3\2\2\2\u036e\u036c\3\2\2\2\u036f\u0365")
        buf.write("\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u036f\3\2\2\2\u0371")
        buf.write("\u0372\3\2\2\2\u0372\u037a\3\2\2\2\u0373\u0375\5\6\4\2")
        buf.write("\u0374\u0376\t\2\2\2\u0375\u0374\3\2\2\2\u0376\u0377\3")
        buf.write("\2\2\2\u0377\u0375\3\2\2\2\u0377\u0378\3\2\2\2\u0378\u037a")
        buf.write("\3\2\2\2\u0379\u0350\3\2\2\2\u0379\u0361\3\2\2\2\u0379")
        buf.write("\u0373\3\2\2\2\u037a\u037d\3\2\2\2\u037b\u0379\3\2\2\2")
        buf.write("\u037b\u037c\3\2\2\2\u037c\u0393\3\2\2\2\u037d\u037b\3")
        buf.write("\2\2\2\u037e\u0382\5,\27\2\u037f\u0381\t\2\2\2\u0380\u037f")
        buf.write("\3\2\2\2\u0381\u0384\3\2\2\2\u0382\u0380\3\2\2\2\u0382")
        buf.write("\u0383\3\2\2\2\u0383\u038b\3\2\2\2\u0384\u0382\3\2\2\2")
        buf.write("\u0385\u038c\7\3\2\2\u0386\u0388\t\2\2\2\u0387\u0386\3")
        buf.write("\2\2\2\u0388\u0389\3\2\2\2\u0389\u0387\3\2\2\2\u0389\u038a")
        buf.write("\3\2\2\2\u038a\u038c\3\2\2\2\u038b\u0385\3\2\2\2\u038b")
        buf.write("\u0387\3\2\2\2\u038c\u0394\3\2\2\2\u038d\u038f\5\6\4\2")
        buf.write("\u038e\u0390\t\2\2\2\u038f\u038e\3\2\2\2\u0390\u0391\3")
        buf.write("\2\2\2\u0391\u038f\3\2\2\2\u0391\u0392\3\2\2\2\u0392\u0394")
        buf.write("\3\2\2\2\u0393\u037e\3\2\2\2\u0393\u038d\3\2\2\2\u0394")
        buf.write("\u0396\3\2\2\2\u0395\u037b\3\2\2\2\u0395\u0396\3\2\2\2")
        buf.write("\u0396\u0397\3\2\2\2\u0397\u0398\7\21\2\2\u0398\u039a")
        buf.write("\3\2\2\2\u0399\u02e6\3\2\2\2\u0399\u033e\3\2\2\2\u039a")
        buf.write("\13\3\2\2\2\u039b\u039c\5\16\b\2\u039c\u03a0\5\20\t\2")
        buf.write("\u039d\u039f\5\22\n\2\u039e\u039d\3\2\2\2\u039f\u03a2")
        buf.write("\3\2\2\2\u03a0\u039e\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1")
        buf.write("\u03a4\3\2\2\2\u03a2\u03a0\3\2\2\2\u03a3\u03a5\5\24\13")
        buf.write("\2\u03a4\u03a3\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a6")
        buf.write("\3\2\2\2\u03a6\u03a7\7\21\2\2\u03a7\u03b6\3\2\2\2\u03a8")
        buf.write("\u03a9\5\16\b\2\u03a9\u03ad\5\20\t\2\u03aa\u03ac\5\22")
        buf.write("\n\2\u03ab\u03aa\3\2\2\2\u03ac\u03af\3\2\2\2\u03ad\u03ab")
        buf.write("\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03b1\3\2\2\2\u03af")
        buf.write("\u03ad\3\2\2\2\u03b0\u03b2\5\24\13\2\u03b1\u03b0\3\2\2")
        buf.write("\2\u03b1\u03b2\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b4")
        buf.write("\b\7\1\2\u03b4\u03b6\3\2\2\2\u03b5\u039b\3\2\2\2\u03b5")
        buf.write("\u03a8\3\2\2\2\u03b6\r\3\2\2\2\u03b7\u03b9\7\r\2\2\u03b8")
        buf.write("\u03ba\t\2\2\2\u03b9\u03b8\3\2\2\2\u03ba\u03bb\3\2\2\2")
        buf.write("\u03bb\u03b9\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03bd\3")
        buf.write("\2\2\2\u03bd\u03bf\5\26\f\2\u03be\u03c0\t\2\2\2\u03bf")
        buf.write("\u03be\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03bf\3\2\2\2")
        buf.write("\u03c1\u03c2\3\2\2\2\u03c2\17\3\2\2\2\u03c3\u03c5\7\16")
        buf.write("\2\2\u03c4\u03c6\t\2\2\2\u03c5\u03c4\3\2\2\2\u03c6\u03c7")
        buf.write("\3\2\2\2\u03c7\u03c5\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8")
        buf.write("\u040b\3\2\2\2\u03c9\u03cd\5,\27\2\u03ca\u03cc\t\2\2\2")
        buf.write("\u03cb\u03ca\3\2\2\2\u03cc\u03cf\3\2\2\2\u03cd\u03cb\3")
        buf.write("\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03d0\3\2\2\2\u03cf\u03cd")
        buf.write("\3\2\2\2\u03d0\u03d4\7\3\2\2\u03d1\u03d3\t\2\2\2\u03d2")
        buf.write("\u03d1\3\2\2\2\u03d3\u03d6\3\2\2\2\u03d4\u03d2\3\2\2\2")
        buf.write("\u03d4\u03d5\3\2\2\2\u03d5\u03f0\3\2\2\2\u03d6\u03d4\3")
        buf.write("\2\2\2\u03d7\u03e5\5,\27\2\u03d8\u03da\7\67\2\2\u03d9")
        buf.write("\u03d8\3\2\2\2\u03da\u03dd\3\2\2\2\u03db\u03d9\3\2\2\2")
        buf.write("\u03db\u03dc\3\2\2\2\u03dc\u03de\3\2\2\2\u03dd\u03db\3")
        buf.write("\2\2\2\u03de\u03e2\78\2\2\u03df\u03e1\7\67\2\2\u03e0\u03df")
        buf.write("\3\2\2\2\u03e1\u03e4\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e2")
        buf.write("\u03e3\3\2\2\2\u03e3\u03e6\3\2\2\2\u03e4\u03e2\3\2\2\2")
        buf.write("\u03e5\u03db\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7\u03e5\3")
        buf.write("\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03f0\3\2\2\2\u03e9\u03eb")
        buf.write("\5\6\4\2\u03ea\u03ec\t\2\2\2\u03eb\u03ea\3\2\2\2\u03ec")
        buf.write("\u03ed\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ed\u03ee\3\2\2\2")
        buf.write("\u03ee\u03f0\3\2\2\2\u03ef\u03c9\3\2\2\2\u03ef\u03d7\3")
        buf.write("\2\2\2\u03ef\u03e9\3\2\2\2\u03f0\u03f3\3\2\2\2\u03f1\u03ef")
        buf.write("\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u0409\3\2\2\2\u03f3")
        buf.write("\u03f1\3\2\2\2\u03f4\u03f8\5,\27\2\u03f5\u03f7\t\2\2\2")
        buf.write("\u03f6\u03f5\3\2\2\2\u03f7\u03fa\3\2\2\2\u03f8\u03f6\3")
        buf.write("\2\2\2\u03f8\u03f9\3\2\2\2\u03f9\u0401\3\2\2\2\u03fa\u03f8")
        buf.write("\3\2\2\2\u03fb\u0402\7\3\2\2\u03fc\u03fe\t\2\2\2\u03fd")
        buf.write("\u03fc\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u03fd\3\2\2\2")
        buf.write("\u03ff\u0400\3\2\2\2\u0400\u0402\3\2\2\2\u0401\u03fb\3")
        buf.write("\2\2\2\u0401\u03fd\3\2\2\2\u0402\u040a\3\2\2\2\u0403\u0405")
        buf.write("\5\6\4\2\u0404\u0406\t\2\2\2\u0405\u0404\3\2\2\2\u0406")
        buf.write("\u0407\3\2\2\2\u0407\u0405\3\2\2\2\u0407\u0408\3\2\2\2")
        buf.write("\u0408\u040a\3\2\2\2\u0409\u03f4\3\2\2\2\u0409\u0403\3")
        buf.write("\2\2\2\u040a\u040c\3\2\2\2\u040b\u03f1\3\2\2\2\u040b\u040c")
        buf.write("\3\2\2\2\u040c\u045b\3\2\2\2\u040d\u040f\7\16\2\2\u040e")
        buf.write("\u0410\t\2\2\2\u040f\u040e\3\2\2\2\u0410\u0411\3\2\2\2")
        buf.write("\u0411\u040f\3\2\2\2\u0411\u0412\3\2\2\2\u0412\u0458\3")
        buf.write("\2\2\2\u0413\u0417\5,\27\2\u0414\u0416\t\2\2\2\u0415\u0414")
        buf.write("\3\2\2\2\u0416\u0419\3\2\2\2\u0417\u0415\3\2\2\2\u0417")
        buf.write("\u0418\3\2\2\2\u0418\u041b\3\2\2\2\u0419\u0417\3\2\2\2")
        buf.write("\u041a\u041c\7\3\2\2\u041b\u041a\3\2\2\2\u041b\u041c\3")
        buf.write("\2\2\2\u041c\u041d\3\2\2\2\u041d\u0421\b\t\1\2\u041e\u0420")
        buf.write("\t\2\2\2\u041f\u041e\3\2\2\2\u0420\u0423\3\2\2\2\u0421")
        buf.write("\u041f\3\2\2\2\u0421\u0422\3\2\2\2\u0422\u043d\3\2\2\2")
        buf.write("\u0423\u0421\3\2\2\2\u0424\u0432\5,\27\2\u0425\u0427\7")
        buf.write("\67\2\2\u0426\u0425\3\2\2\2\u0427\u042a\3\2\2\2\u0428")
        buf.write("\u0426\3\2\2\2\u0428\u0429\3\2\2\2\u0429\u042b\3\2\2\2")
        buf.write("\u042a\u0428\3\2\2\2\u042b\u042f\78\2\2\u042c\u042e\7")
        buf.write("\67\2\2\u042d\u042c\3\2\2\2\u042e\u0431\3\2\2\2\u042f")
        buf.write("\u042d\3\2\2\2\u042f\u0430\3\2\2\2\u0430\u0433\3\2\2\2")
        buf.write("\u0431\u042f\3\2\2\2\u0432\u0428\3\2\2\2\u0433\u0434\3")
        buf.write("\2\2\2\u0434\u0432\3\2\2\2\u0434\u0435\3\2\2\2\u0435\u043d")
        buf.write("\3\2\2\2\u0436\u0438\5\6\4\2\u0437\u0439\t\2\2\2\u0438")
        buf.write("\u0437\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u0438\3\2\2\2")
        buf.write("\u043a\u043b\3\2\2\2\u043b\u043d\3\2\2\2\u043c\u0413\3")
        buf.write("\2\2\2\u043c\u0424\3\2\2\2\u043c\u0436\3\2\2\2\u043d\u0440")
        buf.write("\3\2\2\2\u043e\u043c\3\2\2\2\u043e\u043f\3\2\2\2\u043f")
        buf.write("\u0456\3\2\2\2\u0440\u043e\3\2\2\2\u0441\u0445\5,\27\2")
        buf.write("\u0442\u0444\t\2\2\2\u0443\u0442\3\2\2\2\u0444\u0447\3")
        buf.write("\2\2\2\u0445\u0443\3\2\2\2\u0445\u0446\3\2\2\2\u0446\u044e")
        buf.write("\3\2\2\2\u0447\u0445\3\2\2\2\u0448\u044f\7\3\2\2\u0449")
        buf.write("\u044b\t\2\2\2\u044a\u0449\3\2\2\2\u044b\u044c\3\2\2\2")
        buf.write("\u044c\u044a\3\2\2\2\u044c\u044d\3\2\2\2\u044d\u044f\3")
        buf.write("\2\2\2\u044e\u0448\3\2\2\2\u044e\u044a\3\2\2\2\u044f\u0457")
        buf.write("\3\2\2\2\u0450\u0452\5\6\4\2\u0451\u0453\t\2\2\2\u0452")
        buf.write("\u0451\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0452\3\2\2\2")
        buf.write("\u0454\u0455\3\2\2\2\u0455\u0457\3\2\2\2\u0456\u0441\3")
        buf.write("\2\2\2\u0456\u0450\3\2\2\2\u0457\u0459\3\2\2\2\u0458\u043e")
        buf.write("\3\2\2\2\u0458\u0459\3\2\2\2\u0459\u045b\3\2\2\2\u045a")
        buf.write("\u03c3\3\2\2\2\u045a\u040d\3\2\2\2\u045b\21\3\2\2\2\u045c")
        buf.write("\u045e\7\17\2\2\u045d\u045f\t\2\2\2\u045e\u045d\3\2\2")
        buf.write("\2\u045f\u0460\3\2\2\2\u0460\u045e\3\2\2\2\u0460\u0461")
        buf.write("\3\2\2\2\u0461\u0462\3\2\2\2\u0462\u0463\5\16\b\2\u0463")
        buf.write("\u0464\5\20\t\2\u0464\23\3\2\2\2\u0465\u0467\7\17\2\2")
        buf.write("\u0466\u0468\t\2\2\2\u0467\u0466\3\2\2\2\u0468\u0469\3")
        buf.write("\2\2\2\u0469\u0467\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u04ad")
        buf.write("\3\2\2\2\u046b\u046f\5,\27\2\u046c\u046e\t\2\2\2\u046d")
        buf.write("\u046c\3\2\2\2\u046e\u0471\3\2\2\2\u046f\u046d\3\2\2\2")
        buf.write("\u046f\u0470\3\2\2\2\u0470\u0472\3\2\2\2\u0471\u046f\3")
        buf.write("\2\2\2\u0472\u0476\7\3\2\2\u0473\u0475\t\2\2\2\u0474\u0473")
        buf.write("\3\2\2\2\u0475\u0478\3\2\2\2\u0476\u0474\3\2\2\2\u0476")
        buf.write("\u0477\3\2\2\2\u0477\u0492\3\2\2\2\u0478\u0476\3\2\2\2")
        buf.write("\u0479\u0487\5,\27\2\u047a\u047c\7\67\2\2\u047b\u047a")
        buf.write("\3\2\2\2\u047c\u047f\3\2\2\2\u047d\u047b\3\2\2\2\u047d")
        buf.write("\u047e\3\2\2\2\u047e\u0480\3\2\2\2\u047f\u047d\3\2\2\2")
        buf.write("\u0480\u0484\78\2\2\u0481\u0483\7\67\2\2\u0482\u0481\3")
        buf.write("\2\2\2\u0483\u0486\3\2\2\2\u0484\u0482\3\2\2\2\u0484\u0485")
        buf.write("\3\2\2\2\u0485\u0488\3\2\2\2\u0486\u0484\3\2\2\2\u0487")
        buf.write("\u047d\3\2\2\2\u0488\u0489\3\2\2\2\u0489\u0487\3\2\2\2")
        buf.write("\u0489\u048a\3\2\2\2\u048a\u0492\3\2\2\2\u048b\u048d\5")
        buf.write("\6\4\2\u048c\u048e\t\2\2\2\u048d\u048c\3\2\2\2\u048e\u048f")
        buf.write("\3\2\2\2\u048f\u048d\3\2\2\2\u048f\u0490\3\2\2\2\u0490")
        buf.write("\u0492\3\2\2\2\u0491\u046b\3\2\2\2\u0491\u0479\3\2\2\2")
        buf.write("\u0491\u048b\3\2\2\2\u0492\u0495\3\2\2\2\u0493\u0491\3")
        buf.write("\2\2\2\u0493\u0494\3\2\2\2\u0494\u04ab\3\2\2\2\u0495\u0493")
        buf.write("\3\2\2\2\u0496\u049a\5,\27\2\u0497\u0499\t\2\2\2\u0498")
        buf.write("\u0497\3\2\2\2\u0499\u049c\3\2\2\2\u049a\u0498\3\2\2\2")
        buf.write("\u049a\u049b\3\2\2\2\u049b\u04a3\3\2\2\2\u049c\u049a\3")
        buf.write("\2\2\2\u049d\u04a4\7\3\2\2\u049e\u04a0\t\2\2\2\u049f\u049e")
        buf.write("\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u049f\3\2\2\2\u04a1")
        buf.write("\u04a2\3\2\2\2\u04a2\u04a4\3\2\2\2\u04a3\u049d\3\2\2\2")
        buf.write("\u04a3\u049f\3\2\2\2\u04a4\u04ac\3\2\2\2\u04a5\u04a7\5")
        buf.write("\6\4\2\u04a6\u04a8\t\2\2\2\u04a7\u04a6\3\2\2\2\u04a8\u04a9")
        buf.write("\3\2\2\2\u04a9\u04a7\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa")
        buf.write("\u04ac\3\2\2\2\u04ab\u0496\3\2\2\2\u04ab\u04a5\3\2\2\2")
        buf.write("\u04ac\u04ae\3\2\2\2\u04ad\u0493\3\2\2\2\u04ad\u04ae\3")
        buf.write("\2\2\2\u04ae\25\3\2\2\2\u04af\u04bc\5\30\r\2\u04b0\u04b2")
        buf.write("\t\2\2\2\u04b1\u04b0\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3")
        buf.write("\u04b1\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4\u04b5\3\2\2\2")
        buf.write("\u04b5\u04b7\7\61\2\2\u04b6\u04b8\t\2\2\2\u04b7\u04b6")
        buf.write("\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9\u04b7\3\2\2\2\u04b9")
        buf.write("\u04ba\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb\u04bd\5\26\f")
        buf.write("\2\u04bc\u04b1\3\2\2\2\u04bc\u04bd\3\2\2\2\u04bd\27\3")
        buf.write("\2\2\2\u04be\u04c0\7\62\2\2\u04bf\u04c1\t\2\2\2\u04c0")
        buf.write("\u04bf\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2\u04c0\3\2\2\2")
        buf.write("\u04c2\u04c3\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4\u04d7\5")
        buf.write("\30\r\2\u04c5\u04c9\7+\2\2\u04c6\u04c8\t\2\2\2\u04c7\u04c6")
        buf.write("\3\2\2\2\u04c8\u04cb\3\2\2\2\u04c9\u04c7\3\2\2\2\u04c9")
        buf.write("\u04ca\3\2\2\2\u04ca\u04cc\3\2\2\2\u04cb\u04c9\3\2\2\2")
        buf.write("\u04cc\u04d0\5\26\f\2\u04cd\u04cf\t\2\2\2\u04ce\u04cd")
        buf.write("\3\2\2\2\u04cf\u04d2\3\2\2\2\u04d0\u04ce\3\2\2\2\u04d0")
        buf.write("\u04d1\3\2\2\2\u04d1\u04d3\3\2\2\2\u04d2\u04d0\3\2\2\2")
        buf.write("\u04d3\u04d4\7,\2\2\u04d4\u04d7\3\2\2\2\u04d5\u04d7\5")
        buf.write("\32\16\2\u04d6\u04be\3\2\2\2\u04d6\u04c5\3\2\2\2\u04d6")
        buf.write("\u04d5\3\2\2\2\u04d7\31\3\2\2\2\u04d8\u04dc\5*\26\2\u04d9")
        buf.write("\u04dc\7\63\2\2\u04da\u04dc\5\34\17\2\u04db\u04d8\3\2")
        buf.write("\2\2\u04db\u04d9\3\2\2\2\u04db\u04da\3\2\2\2\u04dc\33")
        buf.write("\3\2\2\2\u04dd\u04e1\5\36\20\2\u04de\u04e0\t\2\2\2\u04df")
        buf.write("\u04de\3\2\2\2\u04e0\u04e3\3\2\2\2\u04e1\u04df\3\2\2\2")
        buf.write("\u04e1\u04e2\3\2\2\2\u04e2\u04e4\3\2\2\2\u04e3\u04e1\3")
        buf.write("\2\2\2\u04e4\u04e8\7.\2\2\u04e5\u04e7\t\2\2\2\u04e6\u04e5")
        buf.write("\3\2\2\2\u04e7\u04ea\3\2\2\2\u04e8\u04e6\3\2\2\2\u04e8")
        buf.write("\u04e9\3\2\2\2\u04e9\u04eb\3\2\2\2\u04ea\u04e8\3\2\2\2")
        buf.write("\u04eb\u04ec\5\36\20\2\u04ec\35\3\2\2\2\u04ed\u04f7\5")
        buf.write("*\26\2\u04ee\u04f7\7\64\2\2\u04ef\u04f7\7\66\2\2\u04f0")
        buf.write("\u04f7\7\65\2\2\u04f1\u04f7\7\63\2\2\u04f2\u04f7\5b\62")
        buf.write("\2\u04f3\u04f7\5\62\32\2\u04f4\u04f7\5&\24\2\u04f5\u04f7")
        buf.write("\5 \21\2\u04f6\u04ed\3\2\2\2\u04f6\u04ee\3\2\2\2\u04f6")
        buf.write("\u04ef\3\2\2\2\u04f6\u04f0\3\2\2\2\u04f6\u04f1\3\2\2\2")
        buf.write("\u04f6\u04f2\3\2\2\2\u04f6\u04f3\3\2\2\2\u04f6\u04f4\3")
        buf.write("\2\2\2\u04f6\u04f5\3\2\2\2\u04f7\37\3\2\2\2\u04f8\u0507")
        buf.write("\5\"\22\2\u04f9\u04fb\t\2\2\2\u04fa\u04f9\3\2\2\2\u04fb")
        buf.write("\u04fe\3\2\2\2\u04fc\u04fa\3\2\2\2\u04fc\u04fd\3\2\2\2")
        buf.write("\u04fd\u04ff\3\2\2\2\u04fe\u04fc\3\2\2\2\u04ff\u0503\7")
        buf.write("/\2\2\u0500\u0502\t\2\2\2\u0501\u0500\3\2\2\2\u0502\u0505")
        buf.write("\3\2\2\2\u0503\u0501\3\2\2\2\u0503\u0504\3\2\2\2\u0504")
        buf.write("\u0506\3\2\2\2\u0505\u0503\3\2\2\2\u0506\u0508\5 \21\2")
        buf.write("\u0507\u04fc\3\2\2\2\u0507\u0508\3\2\2\2\u0508!\3\2\2")
        buf.write("\2\u0509\u050d\7+\2\2\u050a\u050c\t\2\2\2\u050b\u050a")
        buf.write("\3\2\2\2\u050c\u050f\3\2\2\2\u050d\u050b\3\2\2\2\u050d")
        buf.write("\u050e\3\2\2\2\u050e\u0510\3\2\2\2\u050f\u050d\3\2\2\2")
        buf.write("\u0510\u0514\5 \21\2\u0511\u0513\t\2\2\2\u0512\u0511\3")
        buf.write("\2\2\2\u0513\u0516\3\2\2\2\u0514\u0512\3\2\2\2\u0514\u0515")
        buf.write("\3\2\2\2\u0515\u0517\3\2\2\2\u0516\u0514\3\2\2\2\u0517")
        buf.write("\u0518\7,\2\2\u0518\u051b\3\2\2\2\u0519\u051b\5$\23\2")
        buf.write("\u051a\u0509\3\2\2\2\u051a\u0519\3\2\2\2\u051b#\3\2\2")
        buf.write("\2\u051c\u0524\5*\26\2\u051d\u0524\7\64\2\2\u051e\u0524")
        buf.write("\7\66\2\2\u051f\u0524\7\65\2\2\u0520\u0524\7\63\2\2\u0521")
        buf.write("\u0524\5b\62\2\u0522\u0524\5\62\32\2\u0523\u051c\3\2\2")
        buf.write("\2\u0523\u051d\3\2\2\2\u0523\u051e\3\2\2\2\u0523\u051f")
        buf.write("\3\2\2\2\u0523\u0520\3\2\2\2\u0523\u0521\3\2\2\2\u0523")
        buf.write("\u0522\3\2\2\2\u0524%\3\2\2\2\u0525\u0534\5(\25\2\u0526")
        buf.write("\u0528\t\2\2\2\u0527\u0526\3\2\2\2\u0528\u052b\3\2\2\2")
        buf.write("\u0529\u0527\3\2\2\2\u0529\u052a\3\2\2\2\u052a\u052c\3")
        buf.write("\2\2\2\u052b\u0529\3\2\2\2\u052c\u0530\7\60\2\2\u052d")
        buf.write("\u052f\t\2\2\2\u052e\u052d\3\2\2\2\u052f\u0532\3\2\2\2")
        buf.write("\u0530\u052e\3\2\2\2\u0530\u0531\3\2\2\2\u0531\u0533\3")
        buf.write("\2\2\2\u0532\u0530\3\2\2\2\u0533\u0535\5(\25\2\u0534\u0529")
        buf.write("\3\2\2\2\u0535\u0536\3\2\2\2\u0536\u0534\3\2\2\2\u0536")
        buf.write("\u0537\3\2\2\2\u0537\'\3\2\2\2\u0538\u0541\5*\26\2\u0539")
        buf.write("\u0541\7\64\2\2\u053a\u0541\7\66\2\2\u053b\u0541\7\65")
        buf.write("\2\2\u053c\u0541\7\63\2\2\u053d\u0541\5 \21\2\u053e\u0541")
        buf.write("\5b\62\2\u053f\u0541\5\62\32\2\u0540\u0538\3\2\2\2\u0540")
        buf.write("\u0539\3\2\2\2\u0540\u053a\3\2\2\2\u0540\u053b\3\2\2\2")
        buf.write("\u0540\u053c\3\2\2\2\u0540\u053d\3\2\2\2\u0540\u053e\3")
        buf.write("\2\2\2\u0540\u053f\3\2\2\2\u0541)\3\2\2\2\u0542\u055c")
        buf.write("\5\66\34\2\u0543\u055c\58\35\2\u0544\u055c\5> \2\u0545")
        buf.write("\u055c\5@!\2\u0546\u055c\5^\60\2\u0547\u055c\5B\"\2\u0548")
        buf.write("\u055c\5D#\2\u0549\u055c\5F$\2\u054a\u055c\5H%\2\u054b")
        buf.write("\u055c\5J&\2\u054c\u055c\5L\'\2\u054d\u055c\5N(\2\u054e")
        buf.write("\u055c\5P)\2\u054f\u055c\5R*\2\u0550\u055c\5T+\2\u0551")
        buf.write("\u055c\5V,\2\u0552\u055c\5X-\2\u0553\u055c\5Z.\2\u0554")
        buf.write("\u055c\5\\/\2\u0555\u055c\5<\37\2\u0556\u055c\5:\36\2")
        buf.write("\u0557\u055c\7\37\2\2\u0558\u055c\7$\2\2\u0559\u055c\7")
        buf.write("%\2\2\u055a\u055c\5`\61\2\u055b\u0542\3\2\2\2\u055b\u0543")
        buf.write("\3\2\2\2\u055b\u0544\3\2\2\2\u055b\u0545\3\2\2\2\u055b")
        buf.write("\u0546\3\2\2\2\u055b\u0547\3\2\2\2\u055b\u0548\3\2\2\2")
        buf.write("\u055b\u0549\3\2\2\2\u055b\u054a\3\2\2\2\u055b\u054b\3")
        buf.write("\2\2\2\u055b\u054c\3\2\2\2\u055b\u054d\3\2\2\2\u055b\u054e")
        buf.write("\3\2\2\2\u055b\u054f\3\2\2\2\u055b\u0550\3\2\2\2\u055b")
        buf.write("\u0551\3\2\2\2\u055b\u0552\3\2\2\2\u055b\u0553\3\2\2\2")
        buf.write("\u055b\u0554\3\2\2\2\u055b\u0555\3\2\2\2\u055b\u0556\3")
        buf.write("\2\2\2\u055b\u0557\3\2\2\2\u055b\u0558\3\2\2\2\u055b\u0559")
        buf.write("\3\2\2\2\u055b\u055a\3\2\2\2\u055c+\3\2\2\2\u055d\u0578")
        buf.write("\5\66\34\2\u055e\u0578\58\35\2\u055f\u0578\5> \2\u0560")
        buf.write("\u0578\5@!\2\u0561\u0578\5^\60\2\u0562\u0578\5B\"\2\u0563")
        buf.write("\u0578\5D#\2\u0564\u0578\5F$\2\u0565\u0578\5H%\2\u0566")
        buf.write("\u0578\5J&\2\u0567\u0578\5L\'\2\u0568\u0578\5N(\2\u0569")
        buf.write("\u0578\5P)\2\u056a\u0578\5R*\2\u056b\u0578\5T+\2\u056c")
        buf.write("\u0578\5V,\2\u056d\u0578\5X-\2\u056e\u0578\5Z.\2\u056f")
        buf.write("\u0578\5\60\31\2\u0570\u0578\5.\30\2\u0571\u0578\5<\37")
        buf.write("\2\u0572\u0578\5:\36\2\u0573\u0578\7\37\2\2\u0574\u0578")
        buf.write("\7$\2\2\u0575\u0578\7%\2\2\u0576\u0578\5`\61\2\u0577\u055d")
        buf.write("\3\2\2\2\u0577\u055e\3\2\2\2\u0577\u055f\3\2\2\2\u0577")
        buf.write("\u0560\3\2\2\2\u0577\u0561\3\2\2\2\u0577\u0562\3\2\2\2")
        buf.write("\u0577\u0563\3\2\2\2\u0577\u0564\3\2\2\2\u0577\u0565\3")
        buf.write("\2\2\2\u0577\u0566\3\2\2\2\u0577\u0567\3\2\2\2\u0577\u0568")
        buf.write("\3\2\2\2\u0577\u0569\3\2\2\2\u0577\u056a\3\2\2\2\u0577")
        buf.write("\u056b\3\2\2\2\u0577\u056c\3\2\2\2\u0577\u056d\3\2\2\2")
        buf.write("\u0577\u056e\3\2\2\2\u0577\u056f\3\2\2\2\u0577\u0570\3")
        buf.write("\2\2\2\u0577\u0571\3\2\2\2\u0577\u0572\3\2\2\2\u0577\u0573")
        buf.write("\3\2\2\2\u0577\u0574\3\2\2\2\u0577\u0575\3\2\2\2\u0577")
        buf.write("\u0576\3\2\2\2\u0578-\3\2\2\2\u0579\u057c\7\65\2\2\u057a")
        buf.write("\u057c\5\62\32\2\u057b\u0579\3\2\2\2\u057b\u057a\3\2\2")
        buf.write("\2\u057c\u0580\3\2\2\2\u057d\u057f\t\2\2\2\u057e\u057d")
        buf.write("\3\2\2\2\u057f\u0582\3\2\2\2\u0580\u057e\3\2\2\2\u0580")
        buf.write("\u0581\3\2\2\2\u0581\u0583\3\2\2\2\u0582\u0580\3\2\2\2")
        buf.write("\u0583\u0587\7\5\2\2\u0584\u0586\t\2\2\2\u0585\u0584\3")
        buf.write("\2\2\2\u0586\u0589\3\2\2\2\u0587\u0585\3\2\2\2\u0587\u0588")
        buf.write("\3\2\2\2\u0588\u058a\3\2\2\2\u0589\u0587\3\2\2\2\u058a")
        buf.write("\u0598\5\36\20\2\u058b\u058e\7\65\2\2\u058c\u058e\5\62")
        buf.write("\32\2\u058d\u058b\3\2\2\2\u058d\u058c\3\2\2\2\u058e\u0592")
        buf.write("\3\2\2\2\u058f\u0591\t\2\2\2\u0590\u058f\3\2\2\2\u0591")
        buf.write("\u0594\3\2\2\2\u0592\u0590\3\2\2\2\u0592\u0593\3\2\2\2")
        buf.write("\u0593\u0595\3\2\2\2\u0594\u0592\3\2\2\2\u0595\u0596\7")
        buf.write("\5\2\2\u0596\u0598\b\30\1\2\u0597\u057b\3\2\2\2\u0597")
        buf.write("\u058d\3\2\2\2\u0598/\3\2\2\2\u0599\u059d\7\65\2\2\u059a")
        buf.write("\u059c\t\2\2\2\u059b\u059a\3\2\2\2\u059c\u059f\3\2\2\2")
        buf.write("\u059d\u059b\3\2\2\2\u059d\u059e\3\2\2\2\u059e\u05a0\3")
        buf.write("\2\2\2\u059f\u059d\3\2\2\2\u05a0\u05a4\7-\2\2\u05a1\u05a3")
        buf.write("\t\2\2\2\u05a2\u05a1\3\2\2\2\u05a3\u05a6\3\2\2\2\u05a4")
        buf.write("\u05a2\3\2\2\2\u05a4\u05a5\3\2\2\2\u05a5\u05a7\3\2\2\2")
        buf.write("\u05a6\u05a4\3\2\2\2\u05a7\u05ab\5\36\20\2\u05a8\u05aa")
        buf.write("\t\2\2\2\u05a9\u05a8\3\2\2\2\u05aa\u05ad\3\2\2\2\u05ab")
        buf.write("\u05a9\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\61\3\2\2\2\u05ad")
        buf.write("\u05ab\3\2\2\2\u05ae\u05b1\7\65\2\2\u05af\u05b1\5`\61")
        buf.write("\2\u05b0\u05ae\3\2\2\2\u05b0\u05af\3\2\2\2\u05b1\u05b2")
        buf.write("\3\2\2\2\u05b2\u05b6\7\6\2\2\u05b3\u05b5\t\2\2\2\u05b4")
        buf.write("\u05b3\3\2\2\2\u05b5\u05b8\3\2\2\2\u05b6\u05b4\3\2\2\2")
        buf.write("\u05b6\u05b7\3\2\2\2\u05b7\u05b9\3\2\2\2\u05b8\u05b6\3")
        buf.write("\2\2\2\u05b9\u05bd\5\36\20\2\u05ba\u05bc\t\2\2\2\u05bb")
        buf.write("\u05ba\3\2\2\2\u05bc\u05bf\3\2\2\2\u05bd\u05bb\3\2\2\2")
        buf.write("\u05bd\u05be\3\2\2\2\u05be\u05c0\3\2\2\2\u05bf\u05bd\3")
        buf.write("\2\2\2\u05c0\u05c1\7\7\2\2\u05c1\63\3\2\2\2\u05c2\u05c6")
        buf.write("\7\23\2\2\u05c3\u05c5\t\2\2\2\u05c4\u05c3\3\2\2\2\u05c5")
        buf.write("\u05c8\3\2\2\2\u05c6\u05c4\3\2\2\2\u05c6\u05c7\3\2\2\2")
        buf.write("\u05c7\u05c9\3\2\2\2\u05c8\u05c6\3\2\2\2\u05c9\u05ca\7")
        buf.write("\65\2\2\u05ca\65\3\2\2\2\u05cb\u05cf\7\65\2\2\u05cc\u05ce")
        buf.write("\t\2\2\2\u05cd\u05cc\3\2\2\2\u05ce\u05d1\3\2\2\2\u05cf")
        buf.write("\u05cd\3\2\2\2\u05cf\u05d0\3\2\2\2\u05d0\u05d2\3\2\2\2")
        buf.write("\u05d1\u05cf\3\2\2\2\u05d2\u05d6\7+\2\2\u05d3\u05d5\t")
        buf.write("\2\2\2\u05d4\u05d3\3\2\2\2\u05d5\u05d8\3\2\2\2\u05d6\u05d4")
        buf.write("\3\2\2\2\u05d6\u05d7\3\2\2\2\u05d7\u05f3\3\2\2\2\u05d8")
        buf.write("\u05d6\3\2\2\2\u05d9\u05dd\5\36\20\2\u05da\u05dc\t\2\2")
        buf.write("\2\u05db\u05da\3\2\2\2\u05dc\u05df\3\2\2\2\u05dd\u05db")
        buf.write("\3\2\2\2\u05dd\u05de\3\2\2\2\u05de\u05f0\3\2\2\2\u05df")
        buf.write("\u05dd\3\2\2\2\u05e0\u05e4\7\4\2\2\u05e1\u05e3\t\2\2\2")
        buf.write("\u05e2\u05e1\3\2\2\2\u05e3\u05e6\3\2\2\2\u05e4\u05e2\3")
        buf.write("\2\2\2\u05e4\u05e5\3\2\2\2\u05e5\u05e7\3\2\2\2\u05e6\u05e4")
        buf.write("\3\2\2\2\u05e7\u05eb\5\36\20\2\u05e8\u05ea\t\2\2\2\u05e9")
        buf.write("\u05e8\3\2\2\2\u05ea\u05ed\3\2\2\2\u05eb\u05e9\3\2\2\2")
        buf.write("\u05eb\u05ec\3\2\2\2\u05ec\u05ef\3\2\2\2\u05ed\u05eb\3")
        buf.write("\2\2\2\u05ee\u05e0\3\2\2\2\u05ef\u05f2\3\2\2\2\u05f0\u05ee")
        buf.write("\3\2\2\2\u05f0\u05f1\3\2\2\2\u05f1\u05f4\3\2\2\2\u05f2")
        buf.write("\u05f0\3\2\2\2\u05f3\u05d9\3\2\2\2\u05f3\u05f4\3\2\2\2")
        buf.write("\u05f4\u05f5\3\2\2\2\u05f5\u05f6\7,\2\2\u05f6\67\3\2\2")
        buf.write("\2\u05f7\u05fb\7\24\2\2\u05f8\u05fa\t\2\2\2\u05f9\u05f8")
        buf.write("\3\2\2\2\u05fa\u05fd\3\2\2\2\u05fb\u05f9\3\2\2\2\u05fb")
        buf.write("\u05fc\3\2\2\2\u05fc\u05fe\3\2\2\2\u05fd\u05fb\3\2\2\2")
        buf.write("\u05fe\u0602\7+\2\2\u05ff\u0601\t\2\2\2\u0600\u05ff\3")
        buf.write("\2\2\2\u0601\u0604\3\2\2\2\u0602\u0600\3\2\2\2\u0602\u0603")
        buf.write("\3\2\2\2\u0603\u0605\3\2\2\2\u0604\u0602\3\2\2\2\u0605")
        buf.write("\u0609\5\36\20\2\u0606\u0608\t\2\2\2\u0607\u0606\3\2\2")
        buf.write("\2\u0608\u060b\3\2\2\2\u0609\u0607\3\2\2\2\u0609\u060a")
        buf.write("\3\2\2\2\u060a\u060c\3\2\2\2\u060b\u0609\3\2\2\2\u060c")
        buf.write("\u060d\7,\2\2\u060d9\3\2\2\2\u060e\u0612\7#\2\2\u060f")
        buf.write("\u0611\t\2\2\2\u0610\u060f\3\2\2\2\u0611\u0614\3\2\2\2")
        buf.write("\u0612\u0610\3\2\2\2\u0612\u0613\3\2\2\2\u0613\u0615\3")
        buf.write("\2\2\2\u0614\u0612\3\2\2\2\u0615\u0619\7+\2\2\u0616\u0618")
        buf.write("\t\2\2\2\u0617\u0616\3\2\2\2\u0618\u061b\3\2\2\2\u0619")
        buf.write("\u0617\3\2\2\2\u0619\u061a\3\2\2\2\u061a\u061c\3\2\2\2")
        buf.write("\u061b\u0619\3\2\2\2\u061c\u0620\5\36\20\2\u061d\u061f")
        buf.write("\t\2\2\2\u061e\u061d\3\2\2\2\u061f\u0622\3\2\2\2\u0620")
        buf.write("\u061e\3\2\2\2\u0620\u0621\3\2\2\2\u0621\u0623\3\2\2\2")
        buf.write("\u0622\u0620\3\2\2\2\u0623\u0624\7,\2\2\u0624;\3\2\2\2")
        buf.write("\u0625\u0629\7\"\2\2\u0626\u0628\t\2\2\2\u0627\u0626\3")
        buf.write("\2\2\2\u0628\u062b\3\2\2\2\u0629\u0627\3\2\2\2\u0629\u062a")
        buf.write("\3\2\2\2\u062a\u062c\3\2\2\2\u062b\u0629\3\2\2\2\u062c")
        buf.write("\u0630\7+\2\2\u062d\u062f\t\2\2\2\u062e\u062d\3\2\2\2")
        buf.write("\u062f\u0632\3\2\2\2\u0630\u062e\3\2\2\2\u0630\u0631\3")
        buf.write("\2\2\2\u0631\u0633\3\2\2\2\u0632\u0630\3\2\2\2\u0633\u0637")
        buf.write("\5\36\20\2\u0634\u0636\t\2\2\2\u0635\u0634\3\2\2\2\u0636")
        buf.write("\u0639\3\2\2\2\u0637\u0635\3\2\2\2\u0637\u0638\3\2\2\2")
        buf.write("\u0638\u063a\3\2\2\2\u0639\u0637\3\2\2\2\u063a\u063b\7")
        buf.write(",\2\2\u063b=\3\2\2\2\u063c\u0640\7\25\2\2\u063d\u063f")
        buf.write("\t\2\2\2\u063e\u063d\3\2\2\2\u063f\u0642\3\2\2\2\u0640")
        buf.write("\u063e\3\2\2\2\u0640\u0641\3\2\2\2\u0641\u0643\3\2\2\2")
        buf.write("\u0642\u0640\3\2\2\2\u0643\u0647\7+\2\2\u0644\u0646\t")
        buf.write("\2\2\2\u0645\u0644\3\2\2\2\u0646\u0649\3\2\2\2\u0647\u0645")
        buf.write("\3\2\2\2\u0647\u0648\3\2\2\2\u0648\u064a\3\2\2\2\u0649")
        buf.write("\u0647\3\2\2\2\u064a\u064e\5\36\20\2\u064b\u064d\t\2\2")
        buf.write("\2\u064c\u064b\3\2\2\2\u064d\u0650\3\2\2\2\u064e\u064c")
        buf.write("\3\2\2\2\u064e\u064f\3\2\2\2\u064f\u0651\3\2\2\2\u0650")
        buf.write("\u064e\3\2\2\2\u0651\u0652\7,\2\2\u0652?\3\2\2\2\u0653")
        buf.write("\u0657\7\26\2\2\u0654\u0656\t\2\2\2\u0655\u0654\3\2\2")
        buf.write("\2\u0656\u0659\3\2\2\2\u0657\u0655\3\2\2\2\u0657\u0658")
        buf.write("\3\2\2\2\u0658\u065a\3\2\2\2\u0659\u0657\3\2\2\2\u065a")
        buf.write("\u065e\7+\2\2\u065b\u065d\t\2\2\2\u065c\u065b\3\2\2\2")
        buf.write("\u065d\u0660\3\2\2\2\u065e\u065c\3\2\2\2\u065e\u065f\3")
        buf.write("\2\2\2\u065f\u0661\3\2\2\2\u0660\u065e\3\2\2\2\u0661\u0665")
        buf.write("\5\36\20\2\u0662\u0664\t\2\2\2\u0663\u0662\3\2\2\2\u0664")
        buf.write("\u0667\3\2\2\2\u0665\u0663\3\2\2\2\u0665\u0666\3\2\2\2")
        buf.write("\u0666\u0668\3\2\2\2\u0667\u0665\3\2\2\2\u0668\u066c\7")
        buf.write("\4\2\2\u0669\u066b\t\2\2\2\u066a\u0669\3\2\2\2\u066b\u066e")
        buf.write("\3\2\2\2\u066c\u066a\3\2\2\2\u066c\u066d\3\2\2\2\u066d")
        buf.write("\u066f\3\2\2\2\u066e\u066c\3\2\2\2\u066f\u0673\5\36\20")
        buf.write("\2\u0670\u0672\t\2\2\2\u0671\u0670\3\2\2\2\u0672\u0675")
        buf.write("\3\2\2\2\u0673\u0671\3\2\2\2\u0673\u0674\3\2\2\2\u0674")
        buf.write("\u0676\3\2\2\2\u0675\u0673\3\2\2\2\u0676\u0677\7,\2\2")
        buf.write("\u0677A\3\2\2\2\u0678\u067c\7\27\2\2\u0679\u067b\t\2\2")
        buf.write("\2\u067a\u0679\3\2\2\2\u067b\u067e\3\2\2\2\u067c\u067a")
        buf.write("\3\2\2\2\u067c\u067d\3\2\2\2\u067d\u067f\3\2\2\2\u067e")
        buf.write("\u067c\3\2\2\2\u067f\u0683\7+\2\2\u0680\u0682\t\2\2\2")
        buf.write("\u0681\u0680\3\2\2\2\u0682\u0685\3\2\2\2\u0683\u0681\3")
        buf.write("\2\2\2\u0683\u0684\3\2\2\2\u0684\u0686\3\2\2\2\u0685\u0683")
        buf.write("\3\2\2\2\u0686\u068a\5\36\20\2\u0687\u0689\t\2\2\2\u0688")
        buf.write("\u0687\3\2\2\2\u0689\u068c\3\2\2\2\u068a\u0688\3\2\2\2")
        buf.write("\u068a\u068b\3\2\2\2\u068b\u068d\3\2\2\2\u068c\u068a\3")
        buf.write("\2\2\2\u068d\u068e\7,\2\2\u068eC\3\2\2\2\u068f\u0693\7")
        buf.write("\30\2\2\u0690\u0692\t\2\2\2\u0691\u0690\3\2\2\2\u0692")
        buf.write("\u0695\3\2\2\2\u0693\u0691\3\2\2\2\u0693\u0694\3\2\2\2")
        buf.write("\u0694\u0696\3\2\2\2\u0695\u0693\3\2\2\2\u0696\u069a\7")
        buf.write("+\2\2\u0697\u0699\t\2\2\2\u0698\u0697\3\2\2\2\u0699\u069c")
        buf.write("\3\2\2\2\u069a\u0698\3\2\2\2\u069a\u069b\3\2\2\2\u069b")
        buf.write("\u069d\3\2\2\2\u069c\u069a\3\2\2\2\u069d\u06a1\5\36\20")
        buf.write("\2\u069e\u06a0\t\2\2\2\u069f\u069e\3\2\2\2\u06a0\u06a3")
        buf.write("\3\2\2\2\u06a1\u069f\3\2\2\2\u06a1\u06a2\3\2\2\2\u06a2")
        buf.write("\u06a4\3\2\2\2\u06a3\u06a1\3\2\2\2\u06a4\u06a8\7\4\2\2")
        buf.write("\u06a5\u06a7\t\2\2\2\u06a6\u06a5\3\2\2\2\u06a7\u06aa\3")
        buf.write("\2\2\2\u06a8\u06a6\3\2\2\2\u06a8\u06a9\3\2\2\2\u06a9\u06ab")
        buf.write("\3\2\2\2\u06aa\u06a8\3\2\2\2\u06ab\u06af\5\36\20\2\u06ac")
        buf.write("\u06ae\t\2\2\2\u06ad\u06ac\3\2\2\2\u06ae\u06b1\3\2\2\2")
        buf.write("\u06af\u06ad\3\2\2\2\u06af\u06b0\3\2\2\2\u06b0\u06b2\3")
        buf.write("\2\2\2\u06b1\u06af\3\2\2\2\u06b2\u06b3\7,\2\2\u06b3E\3")
        buf.write("\2\2\2\u06b4\u06b8\7\31\2\2\u06b5\u06b7\t\2\2\2\u06b6")
        buf.write("\u06b5\3\2\2\2\u06b7\u06ba\3\2\2\2\u06b8\u06b6\3\2\2\2")
        buf.write("\u06b8\u06b9\3\2\2\2\u06b9\u06bb\3\2\2\2\u06ba\u06b8\3")
        buf.write("\2\2\2\u06bb\u06bf\7+\2\2\u06bc\u06be\t\2\2\2\u06bd\u06bc")
        buf.write("\3\2\2\2\u06be\u06c1\3\2\2\2\u06bf\u06bd\3\2\2\2\u06bf")
        buf.write("\u06c0\3\2\2\2\u06c0\u06c2\3\2\2\2\u06c1\u06bf\3\2\2\2")
        buf.write("\u06c2\u06c6\5\36\20\2\u06c3\u06c5\t\2\2\2\u06c4\u06c3")
        buf.write("\3\2\2\2\u06c5\u06c8\3\2\2\2\u06c6\u06c4\3\2\2\2\u06c6")
        buf.write("\u06c7\3\2\2\2\u06c7\u06c9\3\2\2\2\u06c8\u06c6\3\2\2\2")
        buf.write("\u06c9\u06cd\7\4\2\2\u06ca\u06cc\t\2\2\2\u06cb\u06ca\3")
        buf.write("\2\2\2\u06cc\u06cf\3\2\2\2\u06cd\u06cb\3\2\2\2\u06cd\u06ce")
        buf.write("\3\2\2\2\u06ce\u06d0\3\2\2\2\u06cf\u06cd\3\2\2\2\u06d0")
        buf.write("\u06d4\5\36\20\2\u06d1\u06d3\t\2\2\2\u06d2\u06d1\3\2\2")
        buf.write("\2\u06d3\u06d6\3\2\2\2\u06d4\u06d2\3\2\2\2\u06d4\u06d5")
        buf.write("\3\2\2\2\u06d5\u06d7\3\2\2\2\u06d6\u06d4\3\2\2\2\u06d7")
        buf.write("\u06d8\7,\2\2\u06d8G\3\2\2\2\u06d9\u06dd\7\32\2\2\u06da")
        buf.write("\u06dc\t\2\2\2\u06db\u06da\3\2\2\2\u06dc\u06df\3\2\2\2")
        buf.write("\u06dd\u06db\3\2\2\2\u06dd\u06de\3\2\2\2\u06de\u06e0\3")
        buf.write("\2\2\2\u06df\u06dd\3\2\2\2\u06e0\u06e4\7+\2\2\u06e1\u06e3")
        buf.write("\t\2\2\2\u06e2\u06e1\3\2\2\2\u06e3\u06e6\3\2\2\2\u06e4")
        buf.write("\u06e2\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5\u06e7\3\2\2\2")
        buf.write("\u06e6\u06e4\3\2\2\2\u06e7\u06eb\5\36\20\2\u06e8\u06ea")
        buf.write("\t\2\2\2\u06e9\u06e8\3\2\2\2\u06ea\u06ed\3\2\2\2\u06eb")
        buf.write("\u06e9\3\2\2\2\u06eb\u06ec\3\2\2\2\u06ec\u06ee\3\2\2\2")
        buf.write("\u06ed\u06eb\3\2\2\2\u06ee\u06f2\7\4\2\2\u06ef\u06f1\t")
        buf.write("\2\2\2\u06f0\u06ef\3\2\2\2\u06f1\u06f4\3\2\2\2\u06f2\u06f0")
        buf.write("\3\2\2\2\u06f2\u06f3\3\2\2\2\u06f3\u06f5\3\2\2\2\u06f4")
        buf.write("\u06f2\3\2\2\2\u06f5\u06f9\5\36\20\2\u06f6\u06f8\t\2\2")
        buf.write("\2\u06f7\u06f6\3\2\2\2\u06f8\u06fb\3\2\2\2\u06f9\u06f7")
        buf.write("\3\2\2\2\u06f9\u06fa\3\2\2\2\u06fa\u06fc\3\2\2\2\u06fb")
        buf.write("\u06f9\3\2\2\2\u06fc\u06fd\7,\2\2\u06fdI\3\2\2\2\u06fe")
        buf.write("\u0702\7\33\2\2\u06ff\u0701\t\2\2\2\u0700\u06ff\3\2\2")
        buf.write("\2\u0701\u0704\3\2\2\2\u0702\u0700\3\2\2\2\u0702\u0703")
        buf.write("\3\2\2\2\u0703\u0705\3\2\2\2\u0704\u0702\3\2\2\2\u0705")
        buf.write("\u0709\7+\2\2\u0706\u0708\t\2\2\2\u0707\u0706\3\2\2\2")
        buf.write("\u0708\u070b\3\2\2\2\u0709\u0707\3\2\2\2\u0709\u070a\3")
        buf.write("\2\2\2\u070a\u070c\3\2\2\2\u070b\u0709\3\2\2\2\u070c\u0710")
        buf.write("\5\36\20\2\u070d\u070f\t\2\2\2\u070e\u070d\3\2\2\2\u070f")
        buf.write("\u0712\3\2\2\2\u0710\u070e\3\2\2\2\u0710\u0711\3\2\2\2")
        buf.write("\u0711\u0713\3\2\2\2\u0712\u0710\3\2\2\2\u0713\u0717\7")
        buf.write("\4\2\2\u0714\u0716\t\2\2\2\u0715\u0714\3\2\2\2\u0716\u0719")
        buf.write("\3\2\2\2\u0717\u0715\3\2\2\2\u0717\u0718\3\2\2\2\u0718")
        buf.write("\u071a\3\2\2\2\u0719\u0717\3\2\2\2\u071a\u071e\5\36\20")
        buf.write("\2\u071b\u071d\t\2\2\2\u071c\u071b\3\2\2\2\u071d\u0720")
        buf.write("\3\2\2\2\u071e\u071c\3\2\2\2\u071e\u071f\3\2\2\2\u071f")
        buf.write("\u0721\3\2\2\2\u0720\u071e\3\2\2\2\u0721\u0722\7,\2\2")
        buf.write("\u0722K\3\2\2\2\u0723\u0727\7(\2\2\u0724\u0726\t\2\2\2")
        buf.write("\u0725\u0724\3\2\2\2\u0726\u0729\3\2\2\2\u0727\u0725\3")
        buf.write("\2\2\2\u0727\u0728\3\2\2\2\u0728\u072a\3\2\2\2\u0729\u0727")
        buf.write("\3\2\2\2\u072a\u072e\7+\2\2\u072b\u072d\t\2\2\2\u072c")
        buf.write("\u072b\3\2\2\2\u072d\u0730\3\2\2\2\u072e\u072c\3\2\2\2")
        buf.write("\u072e\u072f\3\2\2\2\u072f\u0731\3\2\2\2\u0730\u072e\3")
        buf.write("\2\2\2\u0731\u0735\5\36\20\2\u0732\u0734\t\2\2\2\u0733")
        buf.write("\u0732\3\2\2\2\u0734\u0737\3\2\2\2\u0735\u0733\3\2\2\2")
        buf.write("\u0735\u0736\3\2\2\2\u0736\u0738\3\2\2\2\u0737\u0735\3")
        buf.write("\2\2\2\u0738\u0739\7,\2\2\u0739M\3\2\2\2\u073a\u073e\7")
        buf.write("\34\2\2\u073b\u073d\t\2\2\2\u073c\u073b\3\2\2\2\u073d")
        buf.write("\u0740\3\2\2\2\u073e\u073c\3\2\2\2\u073e\u073f\3\2\2\2")
        buf.write("\u073f\u0741\3\2\2\2\u0740\u073e\3\2\2\2\u0741\u0745\7")
        buf.write("+\2\2\u0742\u0744\t\2\2\2\u0743\u0742\3\2\2\2\u0744\u0747")
        buf.write("\3\2\2\2\u0745\u0743\3\2\2\2\u0745\u0746\3\2\2\2\u0746")
        buf.write("\u0748\3\2\2\2\u0747\u0745\3\2\2\2\u0748\u074c\5\36\20")
        buf.write("\2\u0749\u074b\t\2\2\2\u074a\u0749\3\2\2\2\u074b\u074e")
        buf.write("\3\2\2\2\u074c\u074a\3\2\2\2\u074c\u074d\3\2\2\2\u074d")
        buf.write("\u074f\3\2\2\2\u074e\u074c\3\2\2\2\u074f\u0750\7,\2\2")
        buf.write("\u0750O\3\2\2\2\u0751\u0755\7\35\2\2\u0752\u0754\t\2\2")
        buf.write("\2\u0753\u0752\3\2\2\2\u0754\u0757\3\2\2\2\u0755\u0753")
        buf.write("\3\2\2\2\u0755\u0756\3\2\2\2\u0756\u0758\3\2\2\2\u0757")
        buf.write("\u0755\3\2\2\2\u0758\u075c\7+\2\2\u0759\u075b\t\2\2\2")
        buf.write("\u075a\u0759\3\2\2\2\u075b\u075e\3\2\2\2\u075c\u075a\3")
        buf.write("\2\2\2\u075c\u075d\3\2\2\2\u075d\u076f\3\2\2\2\u075e\u075c")
        buf.write("\3\2\2\2\u075f\u0763\5\36\20\2\u0760\u0762\t\2\2\2\u0761")
        buf.write("\u0760\3\2\2\2\u0762\u0765\3\2\2\2\u0763\u0761\3\2\2\2")
        buf.write("\u0763\u0764\3\2\2\2\u0764\u0766\3\2\2\2\u0765\u0763\3")
        buf.write("\2\2\2\u0766\u076a\7\4\2\2\u0767\u0769\t\2\2\2\u0768\u0767")
        buf.write("\3\2\2\2\u0769\u076c\3\2\2\2\u076a\u0768\3\2\2\2\u076a")
        buf.write("\u076b\3\2\2\2\u076b\u076e\3\2\2\2\u076c\u076a\3\2\2\2")
        buf.write("\u076d\u075f\3\2\2\2\u076e\u0771\3\2\2\2\u076f\u076d\3")
        buf.write("\2\2\2\u076f\u0770\3\2\2\2\u0770\u0772\3\2\2\2\u0771\u076f")
        buf.write("\3\2\2\2\u0772\u0776\5\36\20\2\u0773\u0775\t\2\2\2\u0774")
        buf.write("\u0773\3\2\2\2\u0775\u0778\3\2\2\2\u0776\u0774\3\2\2\2")
        buf.write("\u0776\u0777\3\2\2\2\u0777\u0779\3\2\2\2\u0778\u0776\3")
        buf.write("\2\2\2\u0779\u077a\7,\2\2\u077aQ\3\2\2\2\u077b\u077f\7")
        buf.write(" \2\2\u077c\u077e\t\2\2\2\u077d\u077c\3\2\2\2\u077e\u0781")
        buf.write("\3\2\2\2\u077f\u077d\3\2\2\2\u077f\u0780\3\2\2\2\u0780")
        buf.write("\u0782\3\2\2\2\u0781\u077f\3\2\2\2\u0782\u0786\7+\2\2")
        buf.write("\u0783\u0785\t\2\2\2\u0784\u0783\3\2\2\2\u0785\u0788\3")
        buf.write("\2\2\2\u0786\u0784\3\2\2\2\u0786\u0787\3\2\2\2\u0787\u0789")
        buf.write("\3\2\2\2\u0788\u0786\3\2\2\2\u0789\u078d\5\36\20\2\u078a")
        buf.write("\u078c\t\2\2\2\u078b\u078a\3\2\2\2\u078c\u078f\3\2\2\2")
        buf.write("\u078d\u078b\3\2\2\2\u078d\u078e\3\2\2\2\u078e\u0790\3")
        buf.write("\2\2\2\u078f\u078d\3\2\2\2\u0790\u0791\7,\2\2\u0791S\3")
        buf.write("\2\2\2\u0792\u0796\7!\2\2\u0793\u0795\t\2\2\2\u0794\u0793")
        buf.write("\3\2\2\2\u0795\u0798\3\2\2\2\u0796\u0794\3\2\2\2\u0796")
        buf.write("\u0797\3\2\2\2\u0797\u0799\3\2\2\2\u0798\u0796\3\2\2\2")
        buf.write("\u0799\u079d\7+\2\2\u079a\u079c\t\2\2\2\u079b\u079a\3")
        buf.write("\2\2\2\u079c\u079f\3\2\2\2\u079d\u079b\3\2\2\2\u079d\u079e")
        buf.write("\3\2\2\2\u079e\u07a0\3\2\2\2\u079f\u079d\3\2\2\2\u07a0")
        buf.write("\u07a4\5\36\20\2\u07a1\u07a3\t\2\2\2\u07a2\u07a1\3\2\2")
        buf.write("\2\u07a3\u07a6\3\2\2\2\u07a4\u07a2\3\2\2\2\u07a4\u07a5")
        buf.write("\3\2\2\2\u07a5\u07a7\3\2\2\2\u07a6\u07a4\3\2\2\2\u07a7")
        buf.write("\u07a8\7,\2\2\u07a8U\3\2\2\2\u07a9\u07ad\7\'\2\2\u07aa")
        buf.write("\u07ac\t\2\2\2\u07ab\u07aa\3\2\2\2\u07ac\u07af\3\2\2\2")
        buf.write("\u07ad\u07ab\3\2\2\2\u07ad\u07ae\3\2\2\2\u07ae\u07b0\3")
        buf.write("\2\2\2\u07af\u07ad\3\2\2\2\u07b0\u07b4\7+\2\2\u07b1\u07b3")
        buf.write("\t\2\2\2\u07b2\u07b1\3\2\2\2\u07b3\u07b6\3\2\2\2\u07b4")
        buf.write("\u07b2\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5\u07b7\3\2\2\2")
        buf.write("\u07b6\u07b4\3\2\2\2\u07b7\u07bb\5\36\20\2\u07b8\u07ba")
        buf.write("\t\2\2\2\u07b9\u07b8\3\2\2\2\u07ba\u07bd\3\2\2\2\u07bb")
        buf.write("\u07b9\3\2\2\2\u07bb\u07bc\3\2\2\2\u07bc\u07be\3\2\2\2")
        buf.write("\u07bd\u07bb\3\2\2\2\u07be\u07bf\7,\2\2\u07bfW\3\2\2\2")
        buf.write("\u07c0\u07c4\7\36\2\2\u07c1\u07c3\t\2\2\2\u07c2\u07c1")
        buf.write("\3\2\2\2\u07c3\u07c6\3\2\2\2\u07c4\u07c2\3\2\2\2\u07c4")
        buf.write("\u07c5\3\2\2\2\u07c5\u07c7\3\2\2\2\u07c6\u07c4\3\2\2\2")
        buf.write("\u07c7\u07cb\7+\2\2\u07c8\u07ca\t\2\2\2\u07c9\u07c8\3")
        buf.write("\2\2\2\u07ca\u07cd\3\2\2\2\u07cb\u07c9\3\2\2\2\u07cb\u07cc")
        buf.write("\3\2\2\2\u07cc\u07ce\3\2\2\2\u07cd\u07cb\3\2\2\2\u07ce")
        buf.write("\u07d2\5\36\20\2\u07cf\u07d1\t\2\2\2\u07d0\u07cf\3\2\2")
        buf.write("\2\u07d1\u07d4\3\2\2\2\u07d2\u07d0\3\2\2\2\u07d2\u07d3")
        buf.write("\3\2\2\2\u07d3\u07d5\3\2\2\2\u07d4\u07d2\3\2\2\2\u07d5")
        buf.write("\u07d6\7,\2\2\u07d6Y\3\2\2\2\u07d7\u07db\7)\2\2\u07d8")
        buf.write("\u07da\t\2\2\2\u07d9\u07d8\3\2\2\2\u07da\u07dd\3\2\2\2")
        buf.write("\u07db\u07d9\3\2\2\2\u07db\u07dc\3\2\2\2\u07dc\u07de\3")
        buf.write("\2\2\2\u07dd\u07db\3\2\2\2\u07de\u07e2\7+\2\2\u07df\u07e1")
        buf.write("\t\2\2\2\u07e0\u07df\3\2\2\2\u07e1\u07e4\3\2\2\2\u07e2")
        buf.write("\u07e0\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3\u07e5\3\2\2\2")
        buf.write("\u07e4\u07e2\3\2\2\2\u07e5\u07e9\5\36\20\2\u07e6\u07e8")
        buf.write("\t\2\2\2\u07e7\u07e6\3\2\2\2\u07e8\u07eb\3\2\2\2\u07e9")
        buf.write("\u07e7\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea\u07ec\3\2\2\2")
        buf.write("\u07eb\u07e9\3\2\2\2\u07ec\u07ed\7,\2\2\u07ed[\3\2\2\2")
        buf.write("\u07ee\u07f2\7*\2\2\u07ef\u07f1\t\2\2\2\u07f0\u07ef\3")
        buf.write("\2\2\2\u07f1\u07f4\3\2\2\2\u07f2\u07f0\3\2\2\2\u07f2\u07f3")
        buf.write("\3\2\2\2\u07f3\u07f5\3\2\2\2\u07f4\u07f2\3\2\2\2\u07f5")
        buf.write("\u07f9\7+\2\2\u07f6\u07f8\t\2\2\2\u07f7\u07f6\3\2\2\2")
        buf.write("\u07f8\u07fb\3\2\2\2\u07f9\u07f7\3\2\2\2\u07f9\u07fa\3")
        buf.write("\2\2\2\u07fa\u07ff\3\2\2\2\u07fb\u07f9\3\2\2\2\u07fc\u0800")
        buf.write("\7\65\2\2\u07fd\u0800\5b\62\2\u07fe\u0800\5`\61\2\u07ff")
        buf.write("\u07fc\3\2\2\2\u07ff\u07fd\3\2\2\2\u07ff\u07fe\3\2\2\2")
        buf.write("\u0800\u0804\3\2\2\2\u0801\u0803\t\2\2\2\u0802\u0801\3")
        buf.write("\2\2\2\u0803\u0806\3\2\2\2\u0804\u0802\3\2\2\2\u0804\u0805")
        buf.write("\3\2\2\2\u0805\u0807\3\2\2\2\u0806\u0804\3\2\2\2\u0807")
        buf.write("\u0808\7,\2\2\u0808]\3\2\2\2\u0809\u080d\7\22\2\2\u080a")
        buf.write("\u080c\t\2\2\2\u080b\u080a\3\2\2\2\u080c\u080f\3\2\2\2")
        buf.write("\u080d\u080b\3\2\2\2\u080d\u080e\3\2\2\2\u080e\u0810\3")
        buf.write("\2\2\2\u080f\u080d\3\2\2\2\u0810\u0814\7+\2\2\u0811\u0813")
        buf.write("\t\2\2\2\u0812\u0811\3\2\2\2\u0813\u0816\3\2\2\2\u0814")
        buf.write("\u0812\3\2\2\2\u0814\u0815\3\2\2\2\u0815\u0817\3\2\2\2")
        buf.write("\u0816\u0814\3\2\2\2\u0817\u081b\5\36\20\2\u0818\u081a")
        buf.write("\t\2\2\2\u0819\u0818\3\2\2\2\u081a\u081d\3\2\2\2\u081b")
        buf.write("\u0819\3\2\2\2\u081b\u081c\3\2\2\2\u081c\u081e\3\2\2\2")
        buf.write("\u081d\u081b\3\2\2\2\u081e\u081f\7,\2\2\u081f_\3\2\2\2")
        buf.write("\u0820\u0821\7&\2\2\u0821a\3\2\2\2\u0822\u0826\7\6\2\2")
        buf.write("\u0823\u0825\t\2\2\2\u0824\u0823\3\2\2\2\u0825\u0828\3")
        buf.write("\2\2\2\u0826\u0824\3\2\2\2\u0826\u0827\3\2\2\2\u0827\u0843")
        buf.write("\3\2\2\2\u0828\u0826\3\2\2\2\u0829\u083a\5d\63\2\u082a")
        buf.write("\u082c\t\2\2\2\u082b\u082a\3\2\2\2\u082c\u082f\3\2\2\2")
        buf.write("\u082d\u082b\3\2\2\2\u082d\u082e\3\2\2\2\u082e\u0830\3")
        buf.write("\2\2\2\u082f\u082d\3\2\2\2\u0830\u0834\7\4\2\2\u0831\u0833")
        buf.write("\t\2\2\2\u0832\u0831\3\2\2\2\u0833\u0836\3\2\2\2\u0834")
        buf.write("\u0832\3\2\2\2\u0834\u0835\3\2\2\2\u0835\u0837\3\2\2\2")
        buf.write("\u0836\u0834\3\2\2\2\u0837\u0839\5d\63\2\u0838\u082d\3")
        buf.write("\2\2\2\u0839\u083c\3\2\2\2\u083a\u0838\3\2\2\2\u083a\u083b")
        buf.write("\3\2\2\2\u083b\u0840\3\2\2\2\u083c\u083a\3\2\2\2\u083d")
        buf.write("\u083f\t\2\2\2\u083e\u083d\3\2\2\2\u083f\u0842\3\2\2\2")
        buf.write("\u0840\u083e\3\2\2\2\u0840\u0841\3\2\2\2\u0841\u0844\3")
        buf.write("\2\2\2\u0842\u0840\3\2\2\2\u0843\u0829\3\2\2\2\u0843\u0844")
        buf.write("\3\2\2\2\u0844\u0845\3\2\2\2\u0845\u0846\7\7\2\2\u0846")
        buf.write("c\3\2\2\2\u0847\u0848\t\3\2\2\u0848e\3\2\2\2\u0158ipw")
        buf.write("~\u0085\u008a\u008f\u0094\u0096\u0098\u009f\u00a3\u00a8")
        buf.write("\u00aa\u00ac\u00b1\u00b5\u00bb\u00c2\u00c6\u00cc\u00d3")
        buf.write("\u00da\u00df\u00e4\u00e9\u00eb\u00ed\u00f4\u00f8\u00fd")
        buf.write("\u00ff\u0101\u0106\u010a\u010d\u0113\u0119\u0120\u0127")
        buf.write("\u012e\u0135\u013a\u013d\u0143\u014a\u0150\u0157\u015e")
        buf.write("\u0165\u016a\u0170\u0172\u0174\u017b\u017f\u0182\u0187")
        buf.write("\u0189\u0190\u0196\u019d\u01a4\u01ab\u01b2\u01b7\u01ba")
        buf.write("\u01c0\u01c7\u01cd\u01d1\u01d7\u01de\u01e5\u01ea\u01f0")
        buf.write("\u01f2\u01f4\u01fb\u01ff\u0202\u0207\u0209\u020c\u0211")
        buf.write("\u0217\u021d\u0223\u0228\u022d\u0233\u0239\u0240\u0247")
        buf.write("\u024e\u0253\u0259\u025b\u025d\u0264\u026b\u026d\u0273")
        buf.write("\u0275\u0277\u027e\u0284\u028a\u028f\u0294\u029a\u02a0")
        buf.write("\u02a4\u02aa\u02b1\u02b8\u02bd\u02c3\u02c5\u02c7\u02ce")
        buf.write("\u02d5\u02d7\u02dd\u02df\u02e1\u02e4\u02ea\u02f0\u02f6")
        buf.write("\u02fc\u0303\u030a\u0311\u0316\u031c\u031e\u0320\u0327")
        buf.write("\u032e\u0330\u0336\u0338\u033a\u0342\u0348\u034e\u0354")
        buf.write("\u0358\u035e\u0365\u036c\u0371\u0377\u0379\u037b\u0382")
        buf.write("\u0389\u038b\u0391\u0393\u0395\u0399\u03a0\u03a4\u03ad")
        buf.write("\u03b1\u03b5\u03bb\u03c1\u03c7\u03cd\u03d4\u03db\u03e2")
        buf.write("\u03e7\u03ed\u03ef\u03f1\u03f8\u03ff\u0401\u0407\u0409")
        buf.write("\u040b\u0411\u0417\u041b\u0421\u0428\u042f\u0434\u043a")
        buf.write("\u043c\u043e\u0445\u044c\u044e\u0454\u0456\u0458\u045a")
        buf.write("\u0460\u0469\u046f\u0476\u047d\u0484\u0489\u048f\u0491")
        buf.write("\u0493\u049a\u04a1\u04a3\u04a9\u04ab\u04ad\u04b3\u04b9")
        buf.write("\u04bc\u04c2\u04c9\u04d0\u04d6\u04db\u04e1\u04e8\u04f6")
        buf.write("\u04fc\u0503\u0507\u050d\u0514\u051a\u0523\u0529\u0530")
        buf.write("\u0536\u0540\u055b\u0577\u057b\u0580\u0587\u058d\u0592")
        buf.write("\u0597\u059d\u05a4\u05ab\u05b0\u05b6\u05bd\u05c6\u05cf")
        buf.write("\u05d6\u05dd\u05e4\u05eb\u05f0\u05f3\u05fb\u0602\u0609")
        buf.write("\u0612\u0619\u0620\u0629\u0630\u0637\u0640\u0647\u064e")
        buf.write("\u0657\u065e\u0665\u066c\u0673\u067c\u0683\u068a\u0693")
        buf.write("\u069a\u06a1\u06a8\u06af\u06b8\u06bf\u06c6\u06cd\u06d4")
        buf.write("\u06dd\u06e4\u06eb\u06f2\u06f9\u0702\u0709\u0710\u0717")
        buf.write("\u071e\u0727\u072e\u0735\u073e\u0745\u074c\u0755\u075c")
        buf.write("\u0763\u076a\u076f\u0776\u077f\u0786\u078d\u0796\u079d")
        buf.write("\u07a4\u07ad\u07b4\u07bb\u07c4\u07cb\u07d2\u07db\u07e2")
        buf.write("\u07e9\u07f2\u07f9\u07ff\u0804\u080d\u0814\u081b\u0826")
        buf.write("\u082d\u0834\u083a\u0840\u0843")
        return buf.getvalue()


class WordlifyParser ( Parser ):

    grammarFileName = "Wordlify.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "','", "'='", "'['", "']'", "'fn'", 
                     "'while'", "'foreach'", "'in'", "'do'", "'if'", "'then'", 
                     "'else'", "'begin'", "'end'", "'baseName'", "'use'", 
                     "'exist'", "'print'", "'rename'", "'remove'", "'move'", 
                     "'copy'", "'download'", "'write'", "'wait'", "'execute'", 
                     "'exit'", "'time'", "'getFiles'", "'dateModified'", 
                     "'isDir'", "'isFile'", "'file'", "'folder'", "'args'", 
                     "'size'", "'read'", "'create'", "'length'", "'('", 
                     "')'", "'<-'", "<INVALID>", "<INVALID>", "'.'", "<INVALID>", 
                     "'not'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "FN", "WHILE", "FOREACH", 
                      "IN", "DO", "IF", "THEN", "ELSE", "BEGIN", "END", 
                      "BASENAME", "IMPORT", "EXIST", "PRINT", "RENAME", 
                      "REMOVE", "MOVE", "COPY", "DOWNLOAD", "WRITE", "WAIT", 
                      "EXECUTE", "EXIT", "TIME", "GET_FILES", "DATE_MODIFIED", 
                      "IS_DIR", "IS_FILE", "FILE", "FOLDER", "ARGS", "SIZE", 
                      "READ", "CREATE", "LENGTH", "L_PAREN", "R_PAREN", 
                      "APPEND", "CMP_OP", "ARITH_OP", "CONCAT_OP", "BIN_LOG_OP", 
                      "NOT", "BOOL", "STR", "ID", "NUM", "WS", "NL", "END_COMMENT", 
                      "ERROR_CHAR" ]

    RULE_program = 0
    RULE_fn_def = 1
    RULE_block_instr = 2
    RULE_foreach = 3
    RULE_while_instr = 4
    RULE_if_instr = 5
    RULE_if_cond = 6
    RULE_then = 7
    RULE_else_if = 8
    RULE_else_block = 9
    RULE_cond = 10
    RULE_cond1 = 11
    RULE_single_cond = 12
    RULE_comparison = 13
    RULE_expr = 14
    RULE_arith_expr = 15
    RULE_arith_expr1 = 16
    RULE_arith_elem = 17
    RULE_concat = 18
    RULE_concat_elem = 19
    RULE_fn_call = 20
    RULE_atom_instr = 21
    RULE_assign = 22
    RULE_array_append = 23
    RULE_array_elem = 24
    RULE_import_call = 25
    RULE_own_fn_call = 26
    RULE_exist = 27
    RULE_is_file = 28
    RULE_is_dir = 29
    RULE_print_instr = 30
    RULE_rename = 31
    RULE_remove = 32
    RULE_move = 33
    RULE_copy = 34
    RULE_download = 35
    RULE_write = 36
    RULE_read = 37
    RULE_wait_instr = 38
    RULE_execute = 39
    RULE_get_files = 40
    RULE_date_modified = 41
    RULE_size = 42
    RULE_exit = 43
    RULE_create = 44
    RULE_length = 45
    RULE_basename = 46
    RULE_args = 47
    RULE_array = 48
    RULE_value_or_id = 49

    ruleNames =  [ "program", "fn_def", "block_instr", "foreach", "while_instr", 
                   "if_instr", "if_cond", "then", "else_if", "else_block", 
                   "cond", "cond1", "single_cond", "comparison", "expr", 
                   "arith_expr", "arith_expr1", "arith_elem", "concat", 
                   "concat_elem", "fn_call", "atom_instr", "assign", "array_append", 
                   "array_elem", "import_call", "own_fn_call", "exist", 
                   "is_file", "is_dir", "print_instr", "rename", "remove", 
                   "move", "copy", "download", "write", "read", "wait_instr", 
                   "execute", "get_files", "date_modified", "size", "exit", 
                   "create", "length", "basename", "args", "array", "value_or_id" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    FN=6
    WHILE=7
    FOREACH=8
    IN=9
    DO=10
    IF=11
    THEN=12
    ELSE=13
    BEGIN=14
    END=15
    BASENAME=16
    IMPORT=17
    EXIST=18
    PRINT=19
    RENAME=20
    REMOVE=21
    MOVE=22
    COPY=23
    DOWNLOAD=24
    WRITE=25
    WAIT=26
    EXECUTE=27
    EXIT=28
    TIME=29
    GET_FILES=30
    DATE_MODIFIED=31
    IS_DIR=32
    IS_FILE=33
    FILE=34
    FOLDER=35
    ARGS=36
    SIZE=37
    READ=38
    CREATE=39
    LENGTH=40
    L_PAREN=41
    R_PAREN=42
    APPEND=43
    CMP_OP=44
    ARITH_OP=45
    CONCAT_OP=46
    BIN_LOG_OP=47
    NOT=48
    BOOL=49
    STR=50
    ID=51
    NUM=52
    WS=53
    NL=54
    END_COMMENT=55
    ERROR_CHAR=56

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(WordlifyParser.EOF, 0)

        def END_COMMENT(self):
            return self.getToken(WordlifyParser.END_COMMENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def fn_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Fn_defContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Fn_defContext,i)


        def import_call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Import_callContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Import_callContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = WordlifyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.state = 267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 103
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 100
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 105
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                self.state = 170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.FN) | (1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.IMPORT) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 150
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 148
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                            if la_ == 1:
                                self.state = 106
                                self.atom_instr()
                                self.state = 110
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 107
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 112
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 113
                                self.match(WordlifyParser.T__0)
                                self.state = 117
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 114
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 119
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 120
                                self.atom_instr()
                                self.state = 134 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 124
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 121
                                        self.match(WordlifyParser.WS)
                                        self.state = 126
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 127
                                    self.match(WordlifyParser.NL)
                                    self.state = 131
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 128
                                            self.match(WordlifyParser.WS) 
                                        self.state = 133
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                                    self.state = 136 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 141
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                                    self.state = 138
                                    self.block_instr()
                                    pass
                                elif token in [WordlifyParser.FN]:
                                    self.state = 139
                                    self.fn_def()
                                    pass
                                elif token in [WordlifyParser.IMPORT]:
                                    self.state = 140
                                    self.import_call()
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                self.state = 144 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 143
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 146 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 152
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                    self.state = 168
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 153
                        self.atom_instr()
                        self.state = 157
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 154
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 159
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                        self.state = 161
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==WordlifyParser.T__0:
                            self.state = 160
                            self.match(WordlifyParser.T__0)


                        pass
                    elif token in [WordlifyParser.FN, WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF, WordlifyParser.IMPORT]:
                        self.state = 166
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                            self.state = 163
                            self.block_instr()
                            pass
                        elif token in [WordlifyParser.FN]:
                            self.state = 164
                            self.fn_def()
                            pass
                        elif token in [WordlifyParser.IMPORT]:
                            self.state = 165
                            self.import_call()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 172
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 177
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.END_COMMENT:
                    self.state = 178
                    self.match(WordlifyParser.END_COMMENT)


                self.state = 181
                self.match(WordlifyParser.EOF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 185
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 182
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 187
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.FN) | (1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.IMPORT) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 235
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 233
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                            if la_ == 1:
                                self.state = 188
                                self.atom_instr()
                                self.state = 192
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 189
                                        _la = self._input.LA(1)
                                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                            self._errHandler.recoverInline(self)
                                        else:
                                            self._errHandler.reportMatch(self)
                                            self.consume() 
                                    self.state = 194
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

                                self.state = 196
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==WordlifyParser.T__0:
                                    self.state = 195
                                    self.match(WordlifyParser.T__0)


                                self.notifyErrorListeners("Missing semicolon")
                                self.state = 202
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 199
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 204
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 205
                                self.atom_instr()
                                self.state = 219 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 209
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 206
                                        self.match(WordlifyParser.WS)
                                        self.state = 211
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 212
                                    self.match(WordlifyParser.NL)
                                    self.state = 216
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 213
                                            self.match(WordlifyParser.WS) 
                                        self.state = 218
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

                                    self.state = 221 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 226
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                                    self.state = 223
                                    self.block_instr()
                                    pass
                                elif token in [WordlifyParser.FN]:
                                    self.state = 224
                                    self.fn_def()
                                    pass
                                elif token in [WordlifyParser.IMPORT]:
                                    self.state = 225
                                    self.import_call()
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                self.state = 229 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 228
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 231 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 237
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                    self.state = 253
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 238
                        self.atom_instr()
                        self.state = 242
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 239
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 244
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

                        self.state = 246
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==WordlifyParser.T__0:
                            self.state = 245
                            self.match(WordlifyParser.T__0)


                        pass
                    elif token in [WordlifyParser.FN, WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF, WordlifyParser.IMPORT]:
                        self.state = 251
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                            self.state = 248
                            self.block_instr()
                            pass
                        elif token in [WordlifyParser.FN]:
                            self.state = 249
                            self.fn_def()
                            pass
                        elif token in [WordlifyParser.IMPORT]:
                            self.state = 250
                            self.import_call()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 257
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 262
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.END_COMMENT:
                    self.state = 263
                    self.match(WordlifyParser.END_COMMENT)


                self.state = 266
                self.match(WordlifyParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FN(self):
            return self.getToken(WordlifyParser.FN, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def BEGIN(self):
            return self.getToken(WordlifyParser.BEGIN, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_def" ):
                listener.enterFn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_def" ):
                listener.exitFn_def(self)




    def fn_def(self):

        localctx = WordlifyParser.Fn_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fn_def)
        self._la = 0 # Token type
        try:
            self.state = 522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 269
                self.match(WordlifyParser.FN)
                self.state = 271 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 270
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 273 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 275
                self.match(WordlifyParser.ID)
                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 276
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 281
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 282
                self.match(WordlifyParser.L_PAREN)
                self.state = 286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 283
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ID:
                    self.state = 289
                    self.match(WordlifyParser.ID)
                    self.state = 293
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 290
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 295
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.T__1:
                        self.state = 296
                        self.match(WordlifyParser.T__1)
                        self.state = 300
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 297
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 302
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 303
                        self.match(WordlifyParser.ID)
                        self.state = 307
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 304
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 309
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 314
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 317
                self.match(WordlifyParser.R_PAREN)
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 318
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 323
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 324
                self.match(WordlifyParser.BEGIN)
                self.state = 326 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 325
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 328 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 370
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 368
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                            if la_ == 1:
                                self.state = 330
                                self.atom_instr()
                                self.state = 334
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 331
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 336
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 337
                                self.match(WordlifyParser.T__0)
                                self.state = 341
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 338
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 343
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 344
                                self.atom_instr()
                                self.state = 358 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 348
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 345
                                        self.match(WordlifyParser.WS)
                                        self.state = 350
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 351
                                    self.match(WordlifyParser.NL)
                                    self.state = 355
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 352
                                            self.match(WordlifyParser.WS) 
                                        self.state = 357
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                                    self.state = 360 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 362
                                self.block_instr()
                                self.state = 364 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 363
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 366 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 372
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

                    self.state = 384
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 373
                        self.atom_instr()
                        self.state = 377
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 374
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 379
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

                        self.state = 381
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==WordlifyParser.T__0:
                            self.state = 380
                            self.match(WordlifyParser.T__0)


                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 383
                        self.block_instr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 387 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 386
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 389 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break



                self.state = 393
                self.match(WordlifyParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 394
                self.match(WordlifyParser.FN)
                self.state = 396 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 395
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 398 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 400
                self.match(WordlifyParser.ID)
                self.state = 404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 401
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 407
                self.match(WordlifyParser.L_PAREN)
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 408
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 413
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ID:
                    self.state = 414
                    self.match(WordlifyParser.ID)
                    self.state = 418
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 415
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 420
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 437
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.T__1:
                        self.state = 421
                        self.match(WordlifyParser.T__1)
                        self.state = 425
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 422
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 427
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 428
                        self.match(WordlifyParser.ID)
                        self.state = 432
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 429
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 434
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 439
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 442
                self.match(WordlifyParser.R_PAREN)
                self.state = 446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 443
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 448
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 449
                self.match(WordlifyParser.BEGIN)
                self.state = 451 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 450
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 453 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 498
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 496
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                            if la_ == 1:
                                self.state = 455
                                self.atom_instr()
                                self.state = 459
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 456
                                        _la = self._input.LA(1)
                                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                            self._errHandler.recoverInline(self)
                                        else:
                                            self._errHandler.reportMatch(self)
                                            self.consume() 
                                    self.state = 461
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

                                self.state = 463
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==WordlifyParser.T__0:
                                    self.state = 462
                                    self.match(WordlifyParser.T__0)


                                self.notifyErrorListeners("Missing semicolon in function")
                                self.state = 469
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 466
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 471
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 472
                                self.atom_instr()
                                self.state = 486 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 476
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 473
                                        self.match(WordlifyParser.WS)
                                        self.state = 478
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 479
                                    self.match(WordlifyParser.NL)
                                    self.state = 483
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 480
                                            self.match(WordlifyParser.WS) 
                                        self.state = 485
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

                                    self.state = 488 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 490
                                self.block_instr()
                                self.state = 492 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 491
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 494 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 500
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

                    self.state = 512
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 501
                        self.atom_instr()
                        self.state = 505
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 502
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 507
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

                        self.state = 509
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==WordlifyParser.T__0:
                            self.state = 508
                            self.match(WordlifyParser.T__0)


                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 511
                        self.block_instr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 515 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 514
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 517 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break



                self.state = 521
                self.match(WordlifyParser.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_instr(self):
            return self.getTypedRuleContext(WordlifyParser.If_instrContext,0)


        def while_instr(self):
            return self.getTypedRuleContext(WordlifyParser.While_instrContext,0)


        def foreach(self):
            return self.getTypedRuleContext(WordlifyParser.ForeachContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_block_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_instr" ):
                listener.enterBlock_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_instr" ):
                listener.exitBlock_instr(self)




    def block_instr(self):

        localctx = WordlifyParser.Block_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block_instr)
        try:
            self.state = 527
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 524
                self.if_instr()
                pass
            elif token in [WordlifyParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 525
                self.while_instr()
                pass
            elif token in [WordlifyParser.FOREACH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 526
                self.foreach()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeachContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(WordlifyParser.FOREACH, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def IN(self):
            return self.getToken(WordlifyParser.IN, 0)

        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_foreach

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeach" ):
                listener.enterForeach(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeach" ):
                listener.exitForeach(self)




    def foreach(self):

        localctx = WordlifyParser.ForeachContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_foreach)
        self._la = 0 # Token type
        try:
            self.state = 738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 529
                self.match(WordlifyParser.FOREACH)
                self.state = 531 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 530
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 533 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 535
                self.match(WordlifyParser.ID)
                self.state = 537 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 536
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 539 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 541
                self.match(WordlifyParser.IN)
                self.state = 543 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 542
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 545 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 550
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.ID]:
                    self.state = 547
                    self.match(WordlifyParser.ID)
                    pass
                elif token in [WordlifyParser.ARGS]:
                    self.state = 548
                    self.args()
                    pass
                elif token in [WordlifyParser.T__3]:
                    self.state = 549
                    self.array()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 553 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 552
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 555 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 557
                self.match(WordlifyParser.DO)
                self.state = 559 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 558
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 561 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 603
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 601
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                            if la_ == 1:
                                self.state = 563
                                self.atom_instr()
                                self.state = 567
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 564
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 569
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 570
                                self.match(WordlifyParser.T__0)
                                self.state = 574
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 571
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 576
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 577
                                self.atom_instr()
                                self.state = 591 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 581
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 578
                                        self.match(WordlifyParser.WS)
                                        self.state = 583
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 584
                                    self.match(WordlifyParser.NL)
                                    self.state = 588
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 585
                                            self.match(WordlifyParser.WS) 
                                        self.state = 590
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                                    self.state = 593 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 595
                                self.block_instr()
                                self.state = 597 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 596
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 599 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 605
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                    self.state = 627
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 606
                        self.atom_instr()
                        self.state = 610
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 607
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 612
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                        self.state = 619
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 613
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 615 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 614
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 617 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 621
                        self.block_instr()
                        self.state = 623 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 622
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 625 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 631
                self.match(WordlifyParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 632
                self.match(WordlifyParser.FOREACH)
                self.state = 634 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 633
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 636 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 638
                self.match(WordlifyParser.ID)
                self.state = 640 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 639
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 642 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 644
                self.match(WordlifyParser.IN)
                self.state = 646 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 645
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 648 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 653
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.ID]:
                    self.state = 650
                    self.match(WordlifyParser.ID)
                    pass
                elif token in [WordlifyParser.ARGS]:
                    self.state = 651
                    self.args()
                    pass
                elif token in [WordlifyParser.T__3]:
                    self.state = 652
                    self.array()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 656 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 655
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 658 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 660
                self.match(WordlifyParser.DO)
                self.state = 662 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 661
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 664 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 709
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 707
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                            if la_ == 1:
                                self.state = 666
                                self.atom_instr()
                                self.state = 670
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 667
                                        _la = self._input.LA(1)
                                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                            self._errHandler.recoverInline(self)
                                        else:
                                            self._errHandler.reportMatch(self)
                                            self.consume() 
                                    self.state = 672
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

                                self.state = 674
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==WordlifyParser.T__0:
                                    self.state = 673
                                    self.match(WordlifyParser.T__0)


                                self.notifyErrorListeners("Missing semicolon in foreach loop")
                                self.state = 680
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 677
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 682
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 683
                                self.atom_instr()
                                self.state = 697 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 687
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 684
                                        self.match(WordlifyParser.WS)
                                        self.state = 689
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 690
                                    self.match(WordlifyParser.NL)
                                    self.state = 694
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 691
                                            self.match(WordlifyParser.WS) 
                                        self.state = 696
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

                                    self.state = 699 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 701
                                self.block_instr()
                                self.state = 703 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 702
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 705 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 711
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

                    self.state = 733
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 712
                        self.atom_instr()
                        self.state = 716
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 713
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 718
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

                        self.state = 725
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 719
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 721 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 720
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 723 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 727
                        self.block_instr()
                        self.state = 729 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 728
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 731 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 737
                self.match(WordlifyParser.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(WordlifyParser.WHILE, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_while_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_instr" ):
                listener.enterWhile_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_instr" ):
                listener.exitWhile_instr(self)




    def while_instr(self):

        localctx = WordlifyParser.While_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_while_instr)
        self._la = 0 # Token type
        try:
            self.state = 919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 740
                self.match(WordlifyParser.WHILE)
                self.state = 742 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 741
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 744 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 746
                self.cond()
                self.state = 748 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 747
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 750 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 752
                self.match(WordlifyParser.DO)
                self.state = 754 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 753
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 756 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 798
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 796
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                            if la_ == 1:
                                self.state = 758
                                self.atom_instr()
                                self.state = 762
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 759
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 764
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 765
                                self.match(WordlifyParser.T__0)
                                self.state = 769
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 766
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 771
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 772
                                self.atom_instr()
                                self.state = 786 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 776
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 773
                                        self.match(WordlifyParser.WS)
                                        self.state = 778
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 779
                                    self.match(WordlifyParser.NL)
                                    self.state = 783
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 780
                                            self.match(WordlifyParser.WS) 
                                        self.state = 785
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

                                    self.state = 788 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 790
                                self.block_instr()
                                self.state = 792 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 791
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 794 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 800
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

                    self.state = 822
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 801
                        self.atom_instr()
                        self.state = 805
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 802
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 807
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

                        self.state = 814
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 808
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 810 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 809
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 812 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 816
                        self.block_instr()
                        self.state = 818 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 817
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 820 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 826
                self.match(WordlifyParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 828
                self.match(WordlifyParser.WHILE)
                self.state = 830 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 829
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 832 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 834
                self.cond()
                self.state = 836 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 835
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 838 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 840
                self.match(WordlifyParser.DO)
                self.state = 842 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 841
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 844 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 889
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 887
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                            if la_ == 1:
                                self.state = 846
                                self.atom_instr()
                                self.state = 850
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 847
                                        _la = self._input.LA(1)
                                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                            self._errHandler.recoverInline(self)
                                        else:
                                            self._errHandler.reportMatch(self)
                                            self.consume() 
                                    self.state = 852
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

                                self.state = 854
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==WordlifyParser.T__0:
                                    self.state = 853
                                    self.match(WordlifyParser.T__0)


                                self.notifyErrorListeners("Missing semicolon in while loop")
                                self.state = 860
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 857
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 862
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 863
                                self.atom_instr()
                                self.state = 877 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 867
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 864
                                        self.match(WordlifyParser.WS)
                                        self.state = 869
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 870
                                    self.match(WordlifyParser.NL)
                                    self.state = 874
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 871
                                            self.match(WordlifyParser.WS) 
                                        self.state = 876
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

                                    self.state = 879 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 881
                                self.block_instr()
                                self.state = 883 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 882
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 885 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 891
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

                    self.state = 913
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 892
                        self.atom_instr()
                        self.state = 896
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 893
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 898
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

                        self.state = 905
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 899
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 901 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 900
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 903 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 907
                        self.block_instr()
                        self.state = 909 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 908
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 911 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 917
                self.match(WordlifyParser.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def else_if(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Else_ifContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Else_ifContext,i)


        def else_block(self):
            return self.getTypedRuleContext(WordlifyParser.Else_blockContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_if_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_instr" ):
                listener.enterIf_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_instr" ):
                listener.exitIf_instr(self)




    def if_instr(self):

        localctx = WordlifyParser.If_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_if_instr)
        self._la = 0 # Token type
        try:
            self.state = 947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 921
                self.if_cond()
                self.state = 922
                self.then()
                self.state = 926
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 923
                        self.else_if() 
                    self.state = 928
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ELSE:
                    self.state = 929
                    self.else_block()


                self.state = 932
                self.match(WordlifyParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 934
                self.if_cond()
                self.state = 935
                self.then()
                self.state = 939
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 936
                        self.else_if() 
                    self.state = 941
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ELSE:
                    self.state = 942
                    self.else_block()


                self.notifyErrorListeners("Missing 'end' at end of 'if' instruction")
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(WordlifyParser.IF, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_if_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_cond" ):
                listener.enterIf_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_cond" ):
                listener.exitIf_cond(self)




    def if_cond(self):

        localctx = WordlifyParser.If_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_if_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.match(WordlifyParser.IF)
            self.state = 951 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 950
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 953 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 955
            self.cond()
            self.state = 957 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 956
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 959 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEN(self):
            return self.getToken(WordlifyParser.THEN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_then

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThen" ):
                listener.enterThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThen" ):
                listener.exitThen(self)




    def then(self):

        localctx = WordlifyParser.ThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_then)
        self._la = 0 # Token type
        try:
            self.state = 1112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 961
                self.match(WordlifyParser.THEN)
                self.state = 963 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 962
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 965 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

                self.state = 1033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 1007
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1005
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                            if la_ == 1:
                                self.state = 967
                                self.atom_instr()
                                self.state = 971
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 968
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 973
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 974
                                self.match(WordlifyParser.T__0)
                                self.state = 978
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 975
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 980
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 981
                                self.atom_instr()
                                self.state = 995 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 985
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 982
                                        self.match(WordlifyParser.WS)
                                        self.state = 987
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 988
                                    self.match(WordlifyParser.NL)
                                    self.state = 992
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 989
                                            self.match(WordlifyParser.WS) 
                                        self.state = 994
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

                                    self.state = 997 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 999
                                self.block_instr()
                                self.state = 1001 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 1000
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 1003 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 1009
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

                    self.state = 1031
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 1010
                        self.atom_instr()
                        self.state = 1014
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1011
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 1016
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

                        self.state = 1023
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 1017
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 1019 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1018
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()

                                else:
                                    raise NoViableAltException(self)
                                self.state = 1021 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 1025
                        self.block_instr()
                        self.state = 1027 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1026
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1029 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1035
                self.match(WordlifyParser.THEN)
                self.state = 1037 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1036
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1039 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 1084
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1082
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                            if la_ == 1:
                                self.state = 1041
                                self.atom_instr()
                                self.state = 1045
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 1042
                                        _la = self._input.LA(1)
                                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                            self._errHandler.recoverInline(self)
                                        else:
                                            self._errHandler.reportMatch(self)
                                            self.consume() 
                                    self.state = 1047
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

                                self.state = 1049
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==WordlifyParser.T__0:
                                    self.state = 1048
                                    self.match(WordlifyParser.T__0)


                                self.notifyErrorListeners("Missing semicolon in if-instruction")
                                self.state = 1055
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 1052
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 1057
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 1058
                                self.atom_instr()
                                self.state = 1072 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 1062
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 1059
                                        self.match(WordlifyParser.WS)
                                        self.state = 1064
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 1065
                                    self.match(WordlifyParser.NL)
                                    self.state = 1069
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,190,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 1066
                                            self.match(WordlifyParser.WS) 
                                        self.state = 1071
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,190,self._ctx)

                                    self.state = 1074 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 1076
                                self.block_instr()
                                self.state = 1078 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 1077
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 1080 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 1086
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

                    self.state = 1108
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 1087
                        self.atom_instr()
                        self.state = 1091
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1088
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 1093
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

                        self.state = 1100
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 1094
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 1096 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1095
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()

                                else:
                                    raise NoViableAltException(self)
                                self.state = 1098 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 1102
                        self.block_instr()
                        self.state = 1104 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1103
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1106 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_else_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_if" ):
                listener.enterElse_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_if" ):
                listener.exitElse_if(self)




    def else_if(self):

        localctx = WordlifyParser.Else_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_else_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.match(WordlifyParser.ELSE)
            self.state = 1116 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1115
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1118 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 1120
            self.if_cond()
            self.state = 1121
            self.then()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_else_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_block" ):
                listener.enterElse_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_block" ):
                listener.exitElse_block(self)




    def else_block(self):

        localctx = WordlifyParser.Else_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_else_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            self.match(WordlifyParser.ELSE)
            self.state = 1125 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1124
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1127 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

            self.state = 1195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 1169
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1167
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                        if la_ == 1:
                            self.state = 1129
                            self.atom_instr()
                            self.state = 1133
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 1130
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 1135
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 1136
                            self.match(WordlifyParser.T__0)
                            self.state = 1140
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 1137
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 1142
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 1143
                            self.atom_instr()
                            self.state = 1157 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 1147
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 1144
                                    self.match(WordlifyParser.WS)
                                    self.state = 1149
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 1150
                                self.match(WordlifyParser.NL)
                                self.state = 1154
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,207,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 1151
                                        self.match(WordlifyParser.WS) 
                                    self.state = 1156
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,207,self._ctx)

                                self.state = 1159 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 1161
                            self.block_instr()
                            self.state = 1163 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 1162
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 1165 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 1171
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

                self.state = 1193
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 1172
                    self.atom_instr()
                    self.state = 1176
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1173
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 1178
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

                    self.state = 1185
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 1179
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 1181 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1180
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1183 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,213,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 1187
                    self.block_instr()
                    self.state = 1189 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1188
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1191 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,215,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cond1(self):
            return self.getTypedRuleContext(WordlifyParser.Cond1Context,0)


        def BIN_LOG_OP(self):
            return self.getToken(WordlifyParser.BIN_LOG_OP, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)




    def cond(self):

        localctx = WordlifyParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1197
            self.cond1()
            self.state = 1210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.state = 1199 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1198
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1201 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 1203
                self.match(WordlifyParser.BIN_LOG_OP)
                self.state = 1205 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1204
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1207 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 1209
                self.cond()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cond1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(WordlifyParser.NOT, 0)

        def cond1(self):
            return self.getTypedRuleContext(WordlifyParser.Cond1Context,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def single_cond(self):
            return self.getTypedRuleContext(WordlifyParser.Single_condContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_cond1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond1" ):
                listener.enterCond1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond1" ):
                listener.exitCond1(self)




    def cond1(self):

        localctx = WordlifyParser.Cond1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_cond1)
        self._la = 0 # Token type
        try:
            self.state = 1236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1212
                self.match(WordlifyParser.NOT)
                self.state = 1214 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1213
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1216 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 1218
                self.cond1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1219
                self.match(WordlifyParser.L_PAREN)
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1220
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1225
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1226
                self.cond()
                self.state = 1230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1227
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1232
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1233
                self.match(WordlifyParser.R_PAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1235
                self.single_cond()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def comparison(self):
            return self.getTypedRuleContext(WordlifyParser.ComparisonContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_single_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_cond" ):
                listener.enterSingle_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_cond" ):
                listener.exitSingle_cond(self)




    def single_cond(self):

        localctx = WordlifyParser.Single_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_single_cond)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.state = 1238
                self.fn_call()
                pass

            elif la_ == 2:
                self.state = 1239
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 3:
                self.state = 1240
                self.comparison()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def CMP_OP(self):
            return self.getToken(WordlifyParser.CMP_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = WordlifyParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1243
            self.expr()
            self.state = 1247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1244
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1249
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1250
            self.match(WordlifyParser.CMP_OP)
            self.state = 1254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1251
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1256
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1257
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def array_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Array_elemContext,0)


        def concat(self):
            return self.getTypedRuleContext(WordlifyParser.ConcatContext,0)


        def arith_expr(self):
            return self.getTypedRuleContext(WordlifyParser.Arith_exprContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = WordlifyParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_expr)
        try:
            self.state = 1268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1259
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1260
                self.match(WordlifyParser.STR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1261
                self.match(WordlifyParser.NUM)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1262
                self.match(WordlifyParser.ID)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1263
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1264
                self.array()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1265
                self.array_elem()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1266
                self.concat()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1267
                self.arith_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arith_expr1(self):
            return self.getTypedRuleContext(WordlifyParser.Arith_expr1Context,0)


        def ARITH_OP(self):
            return self.getToken(WordlifyParser.ARITH_OP, 0)

        def arith_expr(self):
            return self.getTypedRuleContext(WordlifyParser.Arith_exprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)




    def arith_expr(self):

        localctx = WordlifyParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.arith_expr1()
            self.state = 1285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.state = 1274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1271
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1277
                self.match(WordlifyParser.ARITH_OP)
                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1278
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1284
                self.arith_expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_expr1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def arith_expr(self):
            return self.getTypedRuleContext(WordlifyParser.Arith_exprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def arith_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Arith_elemContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_arith_expr1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr1" ):
                listener.enterArith_expr1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr1" ):
                listener.exitArith_expr1(self)




    def arith_expr1(self):

        localctx = WordlifyParser.Arith_expr1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_arith_expr1)
        self._la = 0 # Token type
        try:
            self.state = 1304
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.L_PAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1287
                self.match(WordlifyParser.L_PAREN)
                self.state = 1291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1288
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1293
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1294
                self.arith_expr()
                self.state = 1298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1295
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1300
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1301
                self.match(WordlifyParser.R_PAREN)
                pass
            elif token in [WordlifyParser.T__3, WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.LENGTH, WordlifyParser.BOOL, WordlifyParser.STR, WordlifyParser.ID, WordlifyParser.NUM]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1303
                self.arith_elem()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def array_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Array_elemContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_arith_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_elem" ):
                listener.enterArith_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_elem" ):
                listener.exitArith_elem(self)




    def arith_elem(self):

        localctx = WordlifyParser.Arith_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_arith_elem)
        try:
            self.state = 1313
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1306
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1307
                self.match(WordlifyParser.STR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1308
                self.match(WordlifyParser.NUM)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1309
                self.match(WordlifyParser.ID)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1310
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1311
                self.array()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1312
                self.array_elem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConcatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concat_elem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Concat_elemContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Concat_elemContext,i)


        def CONCAT_OP(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.CONCAT_OP)
            else:
                return self.getToken(WordlifyParser.CONCAT_OP, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_concat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcat" ):
                listener.enterConcat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcat" ):
                listener.exitConcat(self)




    def concat(self):

        localctx = WordlifyParser.ConcatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_concat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            self.concat_elem()
            self.state = 1330 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1319
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1316
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1321
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1322
                    self.match(WordlifyParser.CONCAT_OP)
                    self.state = 1326
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1323
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1328
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1329
                    self.concat_elem()

                else:
                    raise NoViableAltException(self)
                self.state = 1332 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Concat_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def arith_expr(self):
            return self.getTypedRuleContext(WordlifyParser.Arith_exprContext,0)


        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def array_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Array_elemContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_concat_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcat_elem" ):
                listener.enterConcat_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcat_elem" ):
                listener.exitConcat_elem(self)




    def concat_elem(self):

        localctx = WordlifyParser.Concat_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_concat_elem)
        try:
            self.state = 1342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1334
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1335
                self.match(WordlifyParser.STR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1336
                self.match(WordlifyParser.NUM)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1337
                self.match(WordlifyParser.ID)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1338
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1339
                self.arith_expr()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1340
                self.array()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1341
                self.array_elem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def basename(self):
            return self.getTypedRuleContext(WordlifyParser.BasenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def length(self):
            return self.getTypedRuleContext(WordlifyParser.LengthContext,0)


        def is_dir(self):
            return self.getTypedRuleContext(WordlifyParser.Is_dirContext,0)


        def is_file(self):
            return self.getTypedRuleContext(WordlifyParser.Is_fileContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_call" ):
                listener.enterFn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_call" ):
                listener.exitFn_call(self)




    def fn_call(self):

        localctx = WordlifyParser.Fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_fn_call)
        try:
            self.state = 1369
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1344
                self.own_fn_call()
                pass
            elif token in [WordlifyParser.EXIST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1345
                self.exist()
                pass
            elif token in [WordlifyParser.PRINT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1346
                self.print_instr()
                pass
            elif token in [WordlifyParser.RENAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1347
                self.rename()
                pass
            elif token in [WordlifyParser.BASENAME]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1348
                self.basename()
                pass
            elif token in [WordlifyParser.REMOVE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1349
                self.remove()
                pass
            elif token in [WordlifyParser.MOVE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1350
                self.move()
                pass
            elif token in [WordlifyParser.COPY]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1351
                self.copy()
                pass
            elif token in [WordlifyParser.DOWNLOAD]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1352
                self.download()
                pass
            elif token in [WordlifyParser.WRITE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1353
                self.write()
                pass
            elif token in [WordlifyParser.READ]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1354
                self.read()
                pass
            elif token in [WordlifyParser.WAIT]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1355
                self.wait_instr()
                pass
            elif token in [WordlifyParser.EXECUTE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1356
                self.execute()
                pass
            elif token in [WordlifyParser.GET_FILES]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1357
                self.get_files()
                pass
            elif token in [WordlifyParser.DATE_MODIFIED]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1358
                self.date_modified()
                pass
            elif token in [WordlifyParser.SIZE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1359
                self.size()
                pass
            elif token in [WordlifyParser.EXIT]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1360
                self.exit()
                pass
            elif token in [WordlifyParser.CREATE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1361
                self.create()
                pass
            elif token in [WordlifyParser.LENGTH]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1362
                self.length()
                pass
            elif token in [WordlifyParser.IS_DIR]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1363
                self.is_dir()
                pass
            elif token in [WordlifyParser.IS_FILE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1364
                self.is_file()
                pass
            elif token in [WordlifyParser.TIME]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1365
                self.match(WordlifyParser.TIME)
                pass
            elif token in [WordlifyParser.FILE]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1366
                self.match(WordlifyParser.FILE)
                pass
            elif token in [WordlifyParser.FOLDER]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1367
                self.match(WordlifyParser.FOLDER)
                pass
            elif token in [WordlifyParser.ARGS]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1368
                self.args()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def basename(self):
            return self.getTypedRuleContext(WordlifyParser.BasenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def array_append(self):
            return self.getTypedRuleContext(WordlifyParser.Array_appendContext,0)


        def assign(self):
            return self.getTypedRuleContext(WordlifyParser.AssignContext,0)


        def is_dir(self):
            return self.getTypedRuleContext(WordlifyParser.Is_dirContext,0)


        def is_file(self):
            return self.getTypedRuleContext(WordlifyParser.Is_fileContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_atom_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_instr" ):
                listener.enterAtom_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_instr" ):
                listener.exitAtom_instr(self)




    def atom_instr(self):

        localctx = WordlifyParser.Atom_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_atom_instr)
        try:
            self.state = 1397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1371
                self.own_fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1372
                self.exist()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1373
                self.print_instr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1374
                self.rename()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1375
                self.basename()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1376
                self.remove()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1377
                self.move()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1378
                self.copy()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1379
                self.download()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1380
                self.write()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1381
                self.read()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1382
                self.wait_instr()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1383
                self.execute()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1384
                self.get_files()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1385
                self.date_modified()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1386
                self.size()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1387
                self.exit()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1388
                self.create()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1389
                self.array_append()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1390
                self.assign()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1391
                self.is_dir()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1392
                self.is_file()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1393
                self.match(WordlifyParser.TIME)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1394
                self.match(WordlifyParser.FILE)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1395
                self.match(WordlifyParser.FOLDER)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1396
                self.args()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def array_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Array_elemContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)




    def assign(self):

        localctx = WordlifyParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_assign)
        self._la = 0 # Token type
        try:
            self.state = 1429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1401
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                if la_ == 1:
                    self.state = 1399
                    self.match(WordlifyParser.ID)
                    pass

                elif la_ == 2:
                    self.state = 1400
                    self.array_elem()
                    pass


                self.state = 1406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1403
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1408
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1409
                self.match(WordlifyParser.T__2)
                self.state = 1413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1410
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1415
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1416
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1419
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                if la_ == 1:
                    self.state = 1417
                    self.match(WordlifyParser.ID)
                    pass

                elif la_ == 2:
                    self.state = 1418
                    self.array_elem()
                    pass


                self.state = 1424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1421
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1426
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1427
                self.match(WordlifyParser.T__2)
                self.notifyErrorListeners("Missing value to assign to variable")
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_appendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def APPEND(self):
            return self.getToken(WordlifyParser.APPEND, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array_append

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_append" ):
                listener.enterArray_append(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_append" ):
                listener.exitArray_append(self)




    def array_append(self):

        localctx = WordlifyParser.Array_appendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_array_append)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1431
            self.match(WordlifyParser.ID)
            self.state = 1435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1432
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1437
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1438
            self.match(WordlifyParser.APPEND)
            self.state = 1442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1439
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1444
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1445
            self.expr()
            self.state = 1449
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,250,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1446
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 1451
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,250,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_elem" ):
                listener.enterArray_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_elem" ):
                listener.exitArray_elem(self)




    def array_elem(self):

        localctx = WordlifyParser.Array_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_array_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1454
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.state = 1452
                self.match(WordlifyParser.ID)
                pass
            elif token in [WordlifyParser.ARGS]:
                self.state = 1453
                self.args()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1456
            self.match(WordlifyParser.T__3)
            self.state = 1460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1457
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1462
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1463
            self.expr()
            self.state = 1467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1464
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1469
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1470
            self.match(WordlifyParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(WordlifyParser.IMPORT, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_import_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_call" ):
                listener.enterImport_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_call" ):
                listener.exitImport_call(self)




    def import_call(self):

        localctx = WordlifyParser.Import_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_import_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1472
            self.match(WordlifyParser.IMPORT)
            self.state = 1476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1473
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1478
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1479
            self.match(WordlifyParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Own_fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_own_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOwn_fn_call" ):
                listener.enterOwn_fn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOwn_fn_call" ):
                listener.exitOwn_fn_call(self)




    def own_fn_call(self):

        localctx = WordlifyParser.Own_fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_own_fn_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1481
            self.match(WordlifyParser.ID)
            self.state = 1485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1482
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1487
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1488
            self.match(WordlifyParser.L_PAREN)
            self.state = 1492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1489
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1494
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.T__3) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.LENGTH) | (1 << WordlifyParser.L_PAREN) | (1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 1495
                self.expr()
                self.state = 1499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1496
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1501
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.T__1:
                    self.state = 1502
                    self.match(WordlifyParser.T__1)
                    self.state = 1506
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1503
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1508
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1509
                    self.expr()
                    self.state = 1513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1510
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1515
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1520
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1523
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIST(self):
            return self.getToken(WordlifyParser.EXIST, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExist" ):
                listener.enterExist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExist" ):
                listener.exitExist(self)




    def exist(self):

        localctx = WordlifyParser.ExistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_exist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1525
            self.match(WordlifyParser.EXIST)
            self.state = 1529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1526
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1531
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1532
            self.match(WordlifyParser.L_PAREN)
            self.state = 1536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1533
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1538
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1539
            self.expr()
            self.state = 1543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1540
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1545
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1546
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS_FILE(self):
            return self.getToken(WordlifyParser.IS_FILE, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_is_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_file" ):
                listener.enterIs_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_file" ):
                listener.exitIs_file(self)




    def is_file(self):

        localctx = WordlifyParser.Is_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_is_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1548
            self.match(WordlifyParser.IS_FILE)
            self.state = 1552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1549
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1554
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1555
            self.match(WordlifyParser.L_PAREN)
            self.state = 1559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1556
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1561
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1562
            self.expr()
            self.state = 1566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1563
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1568
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1569
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_dirContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS_DIR(self):
            return self.getToken(WordlifyParser.IS_DIR, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_is_dir

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_dir" ):
                listener.enterIs_dir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_dir" ):
                listener.exitIs_dir(self)




    def is_dir(self):

        localctx = WordlifyParser.Is_dirContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_is_dir)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1571
            self.match(WordlifyParser.IS_DIR)
            self.state = 1575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1572
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1577
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1578
            self.match(WordlifyParser.L_PAREN)
            self.state = 1582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1579
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1584
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1585
            self.expr()
            self.state = 1589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1586
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1591
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1592
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(WordlifyParser.PRINT, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_print_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_instr" ):
                listener.enterPrint_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_instr" ):
                listener.exitPrint_instr(self)




    def print_instr(self):

        localctx = WordlifyParser.Print_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_print_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1594
            self.match(WordlifyParser.PRINT)
            self.state = 1598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1595
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1600
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1601
            self.match(WordlifyParser.L_PAREN)
            self.state = 1605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1602
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1607
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1608
            self.expr()
            self.state = 1612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1609
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1615
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(WordlifyParser.RENAME, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_rename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename" ):
                listener.enterRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename" ):
                listener.exitRename(self)




    def rename(self):

        localctx = WordlifyParser.RenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_rename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self.match(WordlifyParser.RENAME)
            self.state = 1621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1618
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1623
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1624
            self.match(WordlifyParser.L_PAREN)
            self.state = 1628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1625
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1630
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1631
            self.expr()
            self.state = 1635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1632
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1637
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1638
            self.match(WordlifyParser.T__1)
            self.state = 1642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1639
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1644
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1645
            self.expr()
            self.state = 1649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1646
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1651
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1652
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(WordlifyParser.REMOVE, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove" ):
                listener.enterRemove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove" ):
                listener.exitRemove(self)




    def remove(self):

        localctx = WordlifyParser.RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1654
            self.match(WordlifyParser.REMOVE)
            self.state = 1658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1655
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1660
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1661
            self.match(WordlifyParser.L_PAREN)
            self.state = 1665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1662
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1667
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1668
            self.expr()
            self.state = 1672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1669
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1674
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1675
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOVE(self):
            return self.getToken(WordlifyParser.MOVE, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)




    def move(self):

        localctx = WordlifyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1677
            self.match(WordlifyParser.MOVE)
            self.state = 1681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1678
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1683
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1684
            self.match(WordlifyParser.L_PAREN)
            self.state = 1688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1685
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1690
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1691
            self.expr()
            self.state = 1695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1692
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1697
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1698
            self.match(WordlifyParser.T__1)
            self.state = 1702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1699
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1704
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1705
            self.expr()
            self.state = 1709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1706
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1711
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1712
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(WordlifyParser.COPY, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_copy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy" ):
                listener.enterCopy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy" ):
                listener.exitCopy(self)




    def copy(self):

        localctx = WordlifyParser.CopyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_copy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1714
            self.match(WordlifyParser.COPY)
            self.state = 1718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1715
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1720
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1721
            self.match(WordlifyParser.L_PAREN)
            self.state = 1725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1722
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1727
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1728
            self.expr()
            self.state = 1732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1729
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1734
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1735
            self.match(WordlifyParser.T__1)
            self.state = 1739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1736
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1741
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1742
            self.expr()
            self.state = 1746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1743
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1748
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1749
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DownloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOWNLOAD(self):
            return self.getToken(WordlifyParser.DOWNLOAD, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_download

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDownload" ):
                listener.enterDownload(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDownload" ):
                listener.exitDownload(self)




    def download(self):

        localctx = WordlifyParser.DownloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_download)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1751
            self.match(WordlifyParser.DOWNLOAD)
            self.state = 1755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1752
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1757
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1758
            self.match(WordlifyParser.L_PAREN)
            self.state = 1762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1759
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1764
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1765
            self.expr()
            self.state = 1769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1766
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1771
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1772
            self.match(WordlifyParser.T__1)
            self.state = 1776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1773
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1778
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1779
            self.expr()
            self.state = 1783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1780
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1785
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1786
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(WordlifyParser.WRITE, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_write

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite" ):
                listener.enterWrite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite" ):
                listener.exitWrite(self)




    def write(self):

        localctx = WordlifyParser.WriteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_write)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1788
            self.match(WordlifyParser.WRITE)
            self.state = 1792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1789
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1794
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1795
            self.match(WordlifyParser.L_PAREN)
            self.state = 1799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1796
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1801
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1802
            self.expr()
            self.state = 1806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1803
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1808
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1809
            self.match(WordlifyParser.T__1)
            self.state = 1813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1810
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1815
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1816
            self.expr()
            self.state = 1820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1817
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1822
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1823
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(WordlifyParser.READ, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_read

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead" ):
                listener.enterRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead" ):
                listener.exitRead(self)




    def read(self):

        localctx = WordlifyParser.ReadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_read)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1825
            self.match(WordlifyParser.READ)
            self.state = 1829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1826
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1831
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1832
            self.match(WordlifyParser.L_PAREN)
            self.state = 1836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1833
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1838
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1839
            self.expr()
            self.state = 1843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1840
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1845
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1846
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wait_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(WordlifyParser.WAIT, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_wait_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_instr" ):
                listener.enterWait_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_instr" ):
                listener.exitWait_instr(self)




    def wait_instr(self):

        localctx = WordlifyParser.Wait_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_wait_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1848
            self.match(WordlifyParser.WAIT)
            self.state = 1852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1849
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1854
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1855
            self.match(WordlifyParser.L_PAREN)
            self.state = 1859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1856
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1861
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1862
            self.expr()
            self.state = 1866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1863
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1868
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1869
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(WordlifyParser.EXECUTE, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_execute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)




    def execute(self):

        localctx = WordlifyParser.ExecuteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_execute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1871
            self.match(WordlifyParser.EXECUTE)
            self.state = 1875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1872
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1877
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1878
            self.match(WordlifyParser.L_PAREN)
            self.state = 1882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1879
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1884
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1901
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,312,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1885
                    self.expr()
                    self.state = 1889
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1886
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1891
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1892
                    self.match(WordlifyParser.T__1)
                    self.state = 1896
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1893
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1898
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
             
                self.state = 1903
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,312,self._ctx)

            self.state = 1904
            self.expr()
            self.state = 1908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1905
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1910
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1911
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_filesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET_FILES(self):
            return self.getToken(WordlifyParser.GET_FILES, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_get_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_files" ):
                listener.enterGet_files(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_files" ):
                listener.exitGet_files(self)




    def get_files(self):

        localctx = WordlifyParser.Get_filesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_get_files)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1913
            self.match(WordlifyParser.GET_FILES)
            self.state = 1917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1914
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1919
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1920
            self.match(WordlifyParser.L_PAREN)
            self.state = 1924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1921
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1926
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1927
            self.expr()
            self.state = 1931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1928
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1933
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1934
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_modifiedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_MODIFIED(self):
            return self.getToken(WordlifyParser.DATE_MODIFIED, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_date_modified

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_modified" ):
                listener.enterDate_modified(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_modified" ):
                listener.exitDate_modified(self)




    def date_modified(self):

        localctx = WordlifyParser.Date_modifiedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_date_modified)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1936
            self.match(WordlifyParser.DATE_MODIFIED)
            self.state = 1940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1937
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1942
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1943
            self.match(WordlifyParser.L_PAREN)
            self.state = 1947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1944
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1949
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1950
            self.expr()
            self.state = 1954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1951
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1956
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1957
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIZE(self):
            return self.getToken(WordlifyParser.SIZE, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSize" ):
                listener.enterSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSize" ):
                listener.exitSize(self)




    def size(self):

        localctx = WordlifyParser.SizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1959
            self.match(WordlifyParser.SIZE)
            self.state = 1963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1960
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1965
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1966
            self.match(WordlifyParser.L_PAREN)
            self.state = 1970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1967
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1972
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1973
            self.expr()
            self.state = 1977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1974
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1979
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1980
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(WordlifyParser.EXIT, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit" ):
                listener.enterExit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit" ):
                listener.exitExit(self)




    def exit(self):

        localctx = WordlifyParser.ExitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_exit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1982
            self.match(WordlifyParser.EXIT)
            self.state = 1986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1983
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1988
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1989
            self.match(WordlifyParser.L_PAREN)
            self.state = 1993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1990
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1995
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1996
            self.expr()
            self.state = 2000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1997
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2002
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2003
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(WordlifyParser.CREATE, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate" ):
                listener.enterCreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate" ):
                listener.exitCreate(self)




    def create(self):

        localctx = WordlifyParser.CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2005
            self.match(WordlifyParser.CREATE)
            self.state = 2009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2006
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2011
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2012
            self.match(WordlifyParser.L_PAREN)
            self.state = 2016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2013
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2018
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2019
            self.expr()
            self.state = 2023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2020
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2025
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2026
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LENGTH(self):
            return self.getToken(WordlifyParser.LENGTH, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLength" ):
                listener.enterLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLength" ):
                listener.exitLength(self)




    def length(self):

        localctx = WordlifyParser.LengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_length)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2028
            self.match(WordlifyParser.LENGTH)
            self.state = 2032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2029
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2034
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2035
            self.match(WordlifyParser.L_PAREN)
            self.state = 2039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2036
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2041
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.state = 2042
                self.match(WordlifyParser.ID)
                pass
            elif token in [WordlifyParser.T__3]:
                self.state = 2043
                self.array()
                pass
            elif token in [WordlifyParser.ARGS]:
                self.state = 2044
                self.args()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2047
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2052
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2053
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BASENAME(self):
            return self.getToken(WordlifyParser.BASENAME, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_basename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasename" ):
                listener.enterBasename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasename" ):
                listener.exitBasename(self)




    def basename(self):

        localctx = WordlifyParser.BasenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_basename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2055
            self.match(WordlifyParser.BASENAME)
            self.state = 2059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2056
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2061
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2062
            self.match(WordlifyParser.L_PAREN)
            self.state = 2066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2063
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2068
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2069
            self.expr()
            self.state = 2073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2070
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2075
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2076
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARGS(self):
            return self.getToken(WordlifyParser.ARGS, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)




    def args(self):

        localctx = WordlifyParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_args)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2078
            self.match(WordlifyParser.ARGS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray" ):
                listener.enterArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray" ):
                listener.exitArray(self)




    def array(self):

        localctx = WordlifyParser.ArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2080
            self.match(WordlifyParser.T__3)
            self.state = 2084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2081
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2086
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 2087
                self.value_or_id()
                self.state = 2104
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,339,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2091
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 2088
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 2093
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2094
                        self.match(WordlifyParser.T__1)
                        self.state = 2098
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 2095
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 2100
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2101
                        self.value_or_id() 
                    self.state = 2106
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,339,self._ctx)

                self.state = 2110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2107
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2112
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2115
            self.match(WordlifyParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_or_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_value_or_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_or_id" ):
                listener.enterValue_or_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_or_id" ):
                listener.exitValue_or_id(self)




    def value_or_id(self):

        localctx = WordlifyParser.Value_or_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_value_or_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2117
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





