# Generated from Wordlify.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3:")
        buf.write("\u0be0\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\3\2\7\2`\n\2\f\2\16\2c\13\2\3\2\3\2\7\2g\n\2\f\2")
        buf.write("\16\2j\13\2\3\2\3\2\7\2n\n\2\f\2\16\2q\13\2\3\2\3\2\7")
        buf.write("\2u\n\2\f\2\16\2x\13\2\3\2\3\2\7\2|\n\2\f\2\16\2\177\13")
        buf.write("\2\6\2\u0081\n\2\r\2\16\2\u0082\3\2\3\2\3\2\5\2\u0088")
        buf.write("\n\2\3\2\6\2\u008b\n\2\r\2\16\2\u008c\7\2\u008f\n\2\f")
        buf.write("\2\16\2\u0092\13\2\3\2\3\2\7\2\u0096\n\2\f\2\16\2\u0099")
        buf.write("\13\2\3\2\5\2\u009c\n\2\3\2\3\2\3\2\5\2\u00a1\n\2\5\2")
        buf.write("\u00a3\n\2\5\2\u00a5\n\2\3\2\7\2\u00a8\n\2\f\2\16\2\u00ab")
        buf.write("\13\2\3\2\5\2\u00ae\n\2\3\2\3\2\3\3\3\3\6\3\u00b4\n\3")
        buf.write("\r\3\16\3\u00b5\3\3\3\3\7\3\u00ba\n\3\f\3\16\3\u00bd\13")
        buf.write("\3\3\3\3\3\7\3\u00c1\n\3\f\3\16\3\u00c4\13\3\3\3\3\3\7")
        buf.write("\3\u00c8\n\3\f\3\16\3\u00cb\13\3\3\3\3\3\7\3\u00cf\n\3")
        buf.write("\f\3\16\3\u00d2\13\3\3\3\3\3\7\3\u00d6\n\3\f\3\16\3\u00d9")
        buf.write("\13\3\7\3\u00db\n\3\f\3\16\3\u00de\13\3\5\3\u00e0\n\3")
        buf.write("\3\3\3\3\7\3\u00e4\n\3\f\3\16\3\u00e7\13\3\3\3\3\3\6\3")
        buf.write("\u00eb\n\3\r\3\16\3\u00ec\3\3\3\3\7\3\u00f1\n\3\f\3\16")
        buf.write("\3\u00f4\13\3\3\3\3\3\7\3\u00f8\n\3\f\3\16\3\u00fb\13")
        buf.write("\3\3\3\3\3\7\3\u00ff\n\3\f\3\16\3\u0102\13\3\3\3\3\3\7")
        buf.write("\3\u0106\n\3\f\3\16\3\u0109\13\3\6\3\u010b\n\3\r\3\16")
        buf.write("\3\u010c\3\3\3\3\6\3\u0111\n\3\r\3\16\3\u0112\7\3\u0115")
        buf.write("\n\3\f\3\16\3\u0118\13\3\3\3\3\3\7\3\u011c\n\3\f\3\16")
        buf.write("\3\u011f\13\3\3\3\5\3\u0122\n\3\3\3\5\3\u0125\n\3\3\3")
        buf.write("\6\3\u0128\n\3\r\3\16\3\u0129\5\3\u012c\n\3\3\3\3\3\3")
        buf.write("\3\6\3\u0131\n\3\r\3\16\3\u0132\3\3\3\3\7\3\u0137\n\3")
        buf.write("\f\3\16\3\u013a\13\3\3\3\3\3\3\3\7\3\u013f\n\3\f\3\16")
        buf.write("\3\u0142\13\3\3\3\3\3\7\3\u0146\n\3\f\3\16\3\u0149\13")
        buf.write("\3\3\3\3\3\7\3\u014d\n\3\f\3\16\3\u0150\13\3\7\3\u0152")
        buf.write("\n\3\f\3\16\3\u0155\13\3\5\3\u0157\n\3\3\3\3\3\7\3\u015b")
        buf.write("\n\3\f\3\16\3\u015e\13\3\3\3\3\3\6\3\u0162\n\3\r\3\16")
        buf.write("\3\u0163\3\3\3\3\7\3\u0168\n\3\f\3\16\3\u016b\13\3\3\3")
        buf.write("\3\3\7\3\u016f\n\3\f\3\16\3\u0172\13\3\3\3\3\3\7\3\u0176")
        buf.write("\n\3\f\3\16\3\u0179\13\3\3\3\3\3\7\3\u017d\n\3\f\3\16")
        buf.write("\3\u0180\13\3\6\3\u0182\n\3\r\3\16\3\u0183\3\3\3\3\6\3")
        buf.write("\u0188\n\3\r\3\16\3\u0189\7\3\u018c\n\3\f\3\16\3\u018f")
        buf.write("\13\3\3\3\3\3\7\3\u0193\n\3\f\3\16\3\u0196\13\3\3\3\5")
        buf.write("\3\u0199\n\3\3\3\5\3\u019c\n\3\3\3\6\3\u019f\n\3\r\3\16")
        buf.write("\3\u01a0\5\3\u01a3\n\3\3\3\3\3\3\3\6\3\u01a8\n\3\r\3\16")
        buf.write("\3\u01a9\3\3\3\3\7\3\u01ae\n\3\f\3\16\3\u01b1\13\3\3\3")
        buf.write("\3\3\7\3\u01b5\n\3\f\3\16\3\u01b8\13\3\3\3\3\3\7\3\u01bc")
        buf.write("\n\3\f\3\16\3\u01bf\13\3\3\3\3\3\7\3\u01c3\n\3\f\3\16")
        buf.write("\3\u01c6\13\3\3\3\3\3\7\3\u01ca\n\3\f\3\16\3\u01cd\13")
        buf.write("\3\7\3\u01cf\n\3\f\3\16\3\u01d2\13\3\5\3\u01d4\n\3\3\3")
        buf.write("\3\3\7\3\u01d8\n\3\f\3\16\3\u01db\13\3\3\3\3\3\6\3\u01df")
        buf.write("\n\3\r\3\16\3\u01e0\3\3\3\3\7\3\u01e5\n\3\f\3\16\3\u01e8")
        buf.write("\13\3\3\3\3\3\7\3\u01ec\n\3\f\3\16\3\u01ef\13\3\3\3\3")
        buf.write("\3\7\3\u01f3\n\3\f\3\16\3\u01f6\13\3\3\3\3\3\7\3\u01fa")
        buf.write("\n\3\f\3\16\3\u01fd\13\3\6\3\u01ff\n\3\r\3\16\3\u0200")
        buf.write("\3\3\3\3\6\3\u0205\n\3\r\3\16\3\u0206\7\3\u0209\n\3\f")
        buf.write("\3\16\3\u020c\13\3\3\3\3\3\7\3\u0210\n\3\f\3\16\3\u0213")
        buf.write("\13\3\3\3\5\3\u0216\n\3\3\3\5\3\u0219\n\3\3\3\6\3\u021c")
        buf.write("\n\3\r\3\16\3\u021d\5\3\u0220\n\3\3\3\3\3\3\3\6\3\u0225")
        buf.write("\n\3\r\3\16\3\u0226\3\3\3\3\7\3\u022b\n\3\f\3\16\3\u022e")
        buf.write("\13\3\3\3\3\3\3\3\7\3\u0233\n\3\f\3\16\3\u0236\13\3\3")
        buf.write("\3\3\3\7\3\u023a\n\3\f\3\16\3\u023d\13\3\3\3\3\3\7\3\u0241")
        buf.write("\n\3\f\3\16\3\u0244\13\3\7\3\u0246\n\3\f\3\16\3\u0249")
        buf.write("\13\3\5\3\u024b\n\3\3\3\7\3\u024e\n\3\f\3\16\3\u0251\13")
        buf.write("\3\3\3\3\3\6\3\u0255\n\3\r\3\16\3\u0256\3\3\3\3\7\3\u025b")
        buf.write("\n\3\f\3\16\3\u025e\13\3\3\3\3\3\7\3\u0262\n\3\f\3\16")
        buf.write("\3\u0265\13\3\3\3\3\3\7\3\u0269\n\3\f\3\16\3\u026c\13")
        buf.write("\3\3\3\3\3\7\3\u0270\n\3\f\3\16\3\u0273\13\3\6\3\u0275")
        buf.write("\n\3\r\3\16\3\u0276\3\3\3\3\6\3\u027b\n\3\r\3\16\3\u027c")
        buf.write("\7\3\u027f\n\3\f\3\16\3\u0282\13\3\3\3\3\3\7\3\u0286\n")
        buf.write("\3\f\3\16\3\u0289\13\3\3\3\5\3\u028c\n\3\3\3\5\3\u028f")
        buf.write("\n\3\3\3\6\3\u0292\n\3\r\3\16\3\u0293\5\3\u0296\n\3\3")
        buf.write("\3\5\3\u0299\n\3\3\4\3\4\3\4\5\4\u029e\n\4\3\5\3\5\6\5")
        buf.write("\u02a2\n\5\r\5\16\5\u02a3\3\5\3\5\6\5\u02a8\n\5\r\5\16")
        buf.write("\5\u02a9\3\5\3\5\6\5\u02ae\n\5\r\5\16\5\u02af\3\5\3\5")
        buf.write("\6\5\u02b4\n\5\r\5\16\5\u02b5\3\5\3\5\6\5\u02ba\n\5\r")
        buf.write("\5\16\5\u02bb\3\5\3\5\7\5\u02c0\n\5\f\5\16\5\u02c3\13")
        buf.write("\5\3\5\3\5\7\5\u02c7\n\5\f\5\16\5\u02ca\13\5\3\5\3\5\7")
        buf.write("\5\u02ce\n\5\f\5\16\5\u02d1\13\5\3\5\3\5\7\5\u02d5\n\5")
        buf.write("\f\5\16\5\u02d8\13\5\6\5\u02da\n\5\r\5\16\5\u02db\3\5")
        buf.write("\3\5\6\5\u02e0\n\5\r\5\16\5\u02e1\7\5\u02e4\n\5\f\5\16")
        buf.write("\5\u02e7\13\5\3\5\3\5\7\5\u02eb\n\5\f\5\16\5\u02ee\13")
        buf.write("\5\3\5\3\5\6\5\u02f2\n\5\r\5\16\5\u02f3\5\5\u02f6\n\5")
        buf.write("\3\5\3\5\6\5\u02fa\n\5\r\5\16\5\u02fb\5\5\u02fe\n\5\5")
        buf.write("\5\u0300\n\5\3\5\3\5\3\6\3\6\6\6\u0306\n\6\r\6\16\6\u0307")
        buf.write("\3\6\3\6\6\6\u030c\n\6\r\6\16\6\u030d\3\6\3\6\6\6\u0312")
        buf.write("\n\6\r\6\16\6\u0313\3\6\3\6\7\6\u0318\n\6\f\6\16\6\u031b")
        buf.write("\13\6\3\6\3\6\7\6\u031f\n\6\f\6\16\6\u0322\13\6\3\6\3")
        buf.write("\6\7\6\u0326\n\6\f\6\16\6\u0329\13\6\3\6\3\6\7\6\u032d")
        buf.write("\n\6\f\6\16\6\u0330\13\6\6\6\u0332\n\6\r\6\16\6\u0333")
        buf.write("\3\6\3\6\6\6\u0338\n\6\r\6\16\6\u0339\7\6\u033c\n\6\f")
        buf.write("\6\16\6\u033f\13\6\3\6\3\6\7\6\u0343\n\6\f\6\16\6\u0346")
        buf.write("\13\6\3\6\3\6\6\6\u034a\n\6\r\6\16\6\u034b\5\6\u034e\n")
        buf.write("\6\3\6\3\6\6\6\u0352\n\6\r\6\16\6\u0353\5\6\u0356\n\6")
        buf.write("\5\6\u0358\n\6\3\6\3\6\3\7\3\7\3\7\7\7\u035f\n\7\f\7\16")
        buf.write("\7\u0362\13\7\3\7\5\7\u0365\n\7\3\7\3\7\3\7\3\7\3\7\7")
        buf.write("\7\u036c\n\7\f\7\16\7\u036f\13\7\3\7\5\7\u0372\n\7\3\7")
        buf.write("\3\7\5\7\u0376\n\7\3\b\3\b\6\b\u037a\n\b\r\b\16\b\u037b")
        buf.write("\3\b\3\b\6\b\u0380\n\b\r\b\16\b\u0381\3\t\3\t\6\t\u0386")
        buf.write("\n\t\r\t\16\t\u0387\3\t\3\t\7\t\u038c\n\t\f\t\16\t\u038f")
        buf.write("\13\t\3\t\3\t\7\t\u0393\n\t\f\t\16\t\u0396\13\t\3\t\3")
        buf.write("\t\7\t\u039a\n\t\f\t\16\t\u039d\13\t\3\t\3\t\7\t\u03a1")
        buf.write("\n\t\f\t\16\t\u03a4\13\t\6\t\u03a6\n\t\r\t\16\t\u03a7")
        buf.write("\3\t\3\t\6\t\u03ac\n\t\r\t\16\t\u03ad\7\t\u03b0\n\t\f")
        buf.write("\t\16\t\u03b3\13\t\3\t\3\t\7\t\u03b7\n\t\f\t\16\t\u03ba")
        buf.write("\13\t\3\t\3\t\6\t\u03be\n\t\r\t\16\t\u03bf\5\t\u03c2\n")
        buf.write("\t\3\t\3\t\6\t\u03c6\n\t\r\t\16\t\u03c7\5\t\u03ca\n\t")
        buf.write("\5\t\u03cc\n\t\3\t\3\t\3\t\6\t\u03d1\n\t\r\t\16\t\u03d2")
        buf.write("\3\t\3\t\7\t\u03d7\n\t\f\t\16\t\u03da\13\t\3\t\3\t\7\t")
        buf.write("\u03de\n\t\f\t\16\t\u03e1\13\t\3\t\3\t\7\t\u03e5\n\t\f")
        buf.write("\t\16\t\u03e8\13\t\3\t\3\t\7\t\u03ec\n\t\f\t\16\t\u03ef")
        buf.write("\13\t\6\t\u03f1\n\t\r\t\16\t\u03f2\3\t\3\t\6\t\u03f7\n")
        buf.write("\t\r\t\16\t\u03f8\7\t\u03fb\n\t\f\t\16\t\u03fe\13\t\3")
        buf.write("\t\3\t\7\t\u0402\n\t\f\t\16\t\u0405\13\t\3\t\3\t\6\t\u0409")
        buf.write("\n\t\r\t\16\t\u040a\5\t\u040d\n\t\3\t\3\t\6\t\u0411\n")
        buf.write("\t\r\t\16\t\u0412\5\t\u0415\n\t\5\t\u0417\n\t\5\t\u0419")
        buf.write("\n\t\3\n\3\n\6\n\u041d\n\n\r\n\16\n\u041e\3\n\3\n\3\n")
        buf.write("\3\13\3\13\6\13\u0426\n\13\r\13\16\13\u0427\3\13\3\13")
        buf.write("\7\13\u042c\n\13\f\13\16\13\u042f\13\13\3\13\3\13\7\13")
        buf.write("\u0433\n\13\f\13\16\13\u0436\13\13\3\13\3\13\7\13\u043a")
        buf.write("\n\13\f\13\16\13\u043d\13\13\3\13\3\13\7\13\u0441\n\13")
        buf.write("\f\13\16\13\u0444\13\13\6\13\u0446\n\13\r\13\16\13\u0447")
        buf.write("\3\13\3\13\6\13\u044c\n\13\r\13\16\13\u044d\7\13\u0450")
        buf.write("\n\13\f\13\16\13\u0453\13\13\3\13\3\13\7\13\u0457\n\13")
        buf.write("\f\13\16\13\u045a\13\13\3\13\3\13\6\13\u045e\n\13\r\13")
        buf.write("\16\13\u045f\5\13\u0462\n\13\3\13\3\13\6\13\u0466\n\13")
        buf.write("\r\13\16\13\u0467\5\13\u046a\n\13\5\13\u046c\n\13\3\f")
        buf.write("\3\f\7\f\u0470\n\f\f\f\16\f\u0473\13\f\3\f\3\f\7\f\u0477")
        buf.write("\n\f\f\f\16\f\u047a\13\f\3\f\7\f\u047d\n\f\f\f\16\f\u0480")
        buf.write("\13\f\3\r\5\r\u0483\n\r\3\r\7\r\u0486\n\r\f\r\16\r\u0489")
        buf.write("\13\r\3\r\3\r\3\r\5\r\u048e\n\r\3\16\3\16\7\16\u0492\n")
        buf.write("\16\f\16\16\16\u0495\13\16\3\16\3\16\7\16\u0499\n\16\f")
        buf.write("\16\16\16\u049c\13\16\3\16\3\16\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\5\17\u04a9\n\17\3\20\3\20\7\20")
        buf.write("\u04ad\n\20\f\20\16\20\u04b0\13\20\3\20\3\20\7\20\u04b4")
        buf.write("\n\20\f\20\16\20\u04b7\13\20\3\20\6\20\u04ba\n\20\r\20")
        buf.write("\16\20\u04bb\3\21\3\21\7\21\u04c0\n\21\f\21\16\21\u04c3")
        buf.write("\13\21\3\21\3\21\7\21\u04c7\n\21\f\21\16\21\u04ca\13\21")
        buf.write("\3\21\6\21\u04cd\n\21\r\21\16\21\u04ce\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\5\22\u04ea\n\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u0506\n")
        buf.write("\23\3\24\3\24\5\24\u050a\n\24\3\24\7\24\u050d\n\24\f\24")
        buf.write("\16\24\u0510\13\24\3\24\3\24\7\24\u0514\n\24\f\24\16\24")
        buf.write("\u0517\13\24\3\24\3\24\3\25\3\25\7\25\u051d\n\25\f\25")
        buf.write("\16\25\u0520\13\25\3\25\3\25\7\25\u0524\n\25\f\25\16\25")
        buf.write("\u0527\13\25\3\25\3\25\7\25\u052b\n\25\f\25\16\25\u052e")
        buf.write("\13\25\3\26\3\26\5\26\u0532\n\26\3\26\3\26\7\26\u0536")
        buf.write("\n\26\f\26\16\26\u0539\13\26\3\26\3\26\7\26\u053d\n\26")
        buf.write("\f\26\16\26\u0540\13\26\3\26\3\26\3\27\3\27\7\27\u0546")
        buf.write("\n\27\f\27\16\27\u0549\13\27\3\27\3\27\3\30\3\30\7\30")
        buf.write("\u054f\n\30\f\30\16\30\u0552\13\30\3\30\3\30\7\30\u0556")
        buf.write("\n\30\f\30\16\30\u0559\13\30\3\30\3\30\7\30\u055d\n\30")
        buf.write("\f\30\16\30\u0560\13\30\3\30\3\30\7\30\u0564\n\30\f\30")
        buf.write("\16\30\u0567\13\30\3\30\3\30\7\30\u056b\n\30\f\30\16\30")
        buf.write("\u056e\13\30\7\30\u0570\n\30\f\30\16\30\u0573\13\30\5")
        buf.write("\30\u0575\n\30\3\30\3\30\3\30\7\30\u057a\n\30\f\30\16")
        buf.write("\30\u057d\13\30\3\30\3\30\7\30\u0581\n\30\f\30\16\30\u0584")
        buf.write("\13\30\3\30\3\30\7\30\u0588\n\30\f\30\16\30\u058b\13\30")
        buf.write("\3\30\3\30\7\30\u058f\n\30\f\30\16\30\u0592\13\30\3\30")
        buf.write("\3\30\7\30\u0596\n\30\f\30\16\30\u0599\13\30\7\30\u059b")
        buf.write("\n\30\f\30\16\30\u059e\13\30\5\30\u05a0\n\30\3\30\3\30")
        buf.write("\3\30\7\30\u05a5\n\30\f\30\16\30\u05a8\13\30\3\30\3\30")
        buf.write("\7\30\u05ac\n\30\f\30\16\30\u05af\13\30\3\30\3\30\7\30")
        buf.write("\u05b3\n\30\f\30\16\30\u05b6\13\30\3\30\3\30\7\30\u05ba")
        buf.write("\n\30\f\30\16\30\u05bd\13\30\3\30\3\30\7\30\u05c1\n\30")
        buf.write("\f\30\16\30\u05c4\13\30\7\30\u05c6\n\30\f\30\16\30\u05c9")
        buf.write("\13\30\5\30\u05cb\n\30\3\30\5\30\u05ce\n\30\3\31\3\31")
        buf.write("\7\31\u05d2\n\31\f\31\16\31\u05d5\13\31\3\31\3\31\7\31")
        buf.write("\u05d9\n\31\f\31\16\31\u05dc\13\31\3\31\3\31\7\31\u05e0")
        buf.write("\n\31\f\31\16\31\u05e3\13\31\3\31\3\31\3\31\3\31\7\31")
        buf.write("\u05e9\n\31\f\31\16\31\u05ec\13\31\3\31\3\31\7\31\u05f0")
        buf.write("\n\31\f\31\16\31\u05f3\13\31\3\31\3\31\7\31\u05f7\n\31")
        buf.write("\f\31\16\31\u05fa\13\31\3\31\3\31\3\31\3\31\7\31\u0600")
        buf.write("\n\31\f\31\16\31\u0603\13\31\3\31\3\31\7\31\u0607\n\31")
        buf.write("\f\31\16\31\u060a\13\31\3\31\3\31\3\31\3\31\3\31\7\31")
        buf.write("\u0611\n\31\f\31\16\31\u0614\13\31\3\31\3\31\7\31\u0618")
        buf.write("\n\31\f\31\16\31\u061b\13\31\3\31\3\31\7\31\u061f\n\31")
        buf.write("\f\31\16\31\u0622\13\31\5\31\u0624\n\31\3\32\3\32\7\32")
        buf.write("\u0628\n\32\f\32\16\32\u062b\13\32\3\32\3\32\7\32\u062f")
        buf.write("\n\32\f\32\16\32\u0632\13\32\3\32\3\32\7\32\u0636\n\32")
        buf.write("\f\32\16\32\u0639\13\32\3\32\3\32\3\32\3\32\7\32\u063f")
        buf.write("\n\32\f\32\16\32\u0642\13\32\3\32\3\32\7\32\u0646\n\32")
        buf.write("\f\32\16\32\u0649\13\32\3\32\3\32\7\32\u064d\n\32\f\32")
        buf.write("\16\32\u0650\13\32\3\32\3\32\3\32\3\32\7\32\u0656\n\32")
        buf.write("\f\32\16\32\u0659\13\32\3\32\3\32\7\32\u065d\n\32\f\32")
        buf.write("\16\32\u0660\13\32\3\32\3\32\3\32\3\32\3\32\7\32\u0667")
        buf.write("\n\32\f\32\16\32\u066a\13\32\3\32\3\32\7\32\u066e\n\32")
        buf.write("\f\32\16\32\u0671\13\32\3\32\3\32\7\32\u0675\n\32\f\32")
        buf.write("\16\32\u0678\13\32\5\32\u067a\n\32\3\33\3\33\7\33\u067e")
        buf.write("\n\33\f\33\16\33\u0681\13\33\3\33\3\33\7\33\u0685\n\33")
        buf.write("\f\33\16\33\u0688\13\33\3\33\3\33\7\33\u068c\n\33\f\33")
        buf.write("\16\33\u068f\13\33\3\33\3\33\3\33\3\33\7\33\u0695\n\33")
        buf.write("\f\33\16\33\u0698\13\33\3\33\3\33\7\33\u069c\n\33\f\33")
        buf.write("\16\33\u069f\13\33\3\33\3\33\7\33\u06a3\n\33\f\33\16\33")
        buf.write("\u06a6\13\33\3\33\3\33\3\33\3\33\7\33\u06ac\n\33\f\33")
        buf.write("\16\33\u06af\13\33\3\33\3\33\7\33\u06b3\n\33\f\33\16\33")
        buf.write("\u06b6\13\33\3\33\3\33\3\33\3\33\3\33\7\33\u06bd\n\33")
        buf.write("\f\33\16\33\u06c0\13\33\3\33\3\33\7\33\u06c4\n\33\f\33")
        buf.write("\16\33\u06c7\13\33\3\33\3\33\7\33\u06cb\n\33\f\33\16\33")
        buf.write("\u06ce\13\33\5\33\u06d0\n\33\3\34\3\34\7\34\u06d4\n\34")
        buf.write("\f\34\16\34\u06d7\13\34\3\34\3\34\7\34\u06db\n\34\f\34")
        buf.write("\16\34\u06de\13\34\3\34\3\34\7\34\u06e2\n\34\f\34\16\34")
        buf.write("\u06e5\13\34\3\34\3\34\3\34\3\34\7\34\u06eb\n\34\f\34")
        buf.write("\16\34\u06ee\13\34\3\34\3\34\7\34\u06f2\n\34\f\34\16\34")
        buf.write("\u06f5\13\34\3\34\3\34\7\34\u06f9\n\34\f\34\16\34\u06fc")
        buf.write("\13\34\3\34\3\34\3\34\3\34\7\34\u0702\n\34\f\34\16\34")
        buf.write("\u0705\13\34\3\34\3\34\7\34\u0709\n\34\f\34\16\34\u070c")
        buf.write("\13\34\3\34\3\34\3\34\3\34\3\34\7\34\u0713\n\34\f\34\16")
        buf.write("\34\u0716\13\34\3\34\3\34\7\34\u071a\n\34\f\34\16\34\u071d")
        buf.write("\13\34\3\34\3\34\7\34\u0721\n\34\f\34\16\34\u0724\13\34")
        buf.write("\5\34\u0726\n\34\3\35\3\35\7\35\u072a\n\35\f\35\16\35")
        buf.write("\u072d\13\35\3\35\3\35\7\35\u0731\n\35\f\35\16\35\u0734")
        buf.write("\13\35\3\35\3\35\7\35\u0738\n\35\f\35\16\35\u073b\13\35")
        buf.write("\3\35\3\35\7\35\u073f\n\35\f\35\16\35\u0742\13\35\3\35")
        buf.write("\3\35\7\35\u0746\n\35\f\35\16\35\u0749\13\35\3\35\3\35")
        buf.write("\3\36\3\36\7\36\u074f\n\36\f\36\16\36\u0752\13\36\3\36")
        buf.write("\3\36\7\36\u0756\n\36\f\36\16\36\u0759\13\36\3\36\3\36")
        buf.write("\7\36\u075d\n\36\f\36\16\36\u0760\13\36\3\36\3\36\3\36")
        buf.write("\3\36\7\36\u0766\n\36\f\36\16\36\u0769\13\36\3\36\3\36")
        buf.write("\7\36\u076d\n\36\f\36\16\36\u0770\13\36\3\36\3\36\7\36")
        buf.write("\u0774\n\36\f\36\16\36\u0777\13\36\3\36\3\36\3\36\3\36")
        buf.write("\7\36\u077d\n\36\f\36\16\36\u0780\13\36\3\36\3\36\7\36")
        buf.write("\u0784\n\36\f\36\16\36\u0787\13\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\7\36\u078e\n\36\f\36\16\36\u0791\13\36\3\36\3\36")
        buf.write("\7\36\u0795\n\36\f\36\16\36\u0798\13\36\3\36\3\36\7\36")
        buf.write("\u079c\n\36\f\36\16\36\u079f\13\36\5\36\u07a1\n\36\3\37")
        buf.write("\3\37\7\37\u07a5\n\37\f\37\16\37\u07a8\13\37\3\37\3\37")
        buf.write("\7\37\u07ac\n\37\f\37\16\37\u07af\13\37\3\37\3\37\7\37")
        buf.write("\u07b3\n\37\f\37\16\37\u07b6\13\37\3\37\3\37\7\37\u07ba")
        buf.write("\n\37\f\37\16\37\u07bd\13\37\3\37\3\37\7\37\u07c1\n\37")
        buf.write("\f\37\16\37\u07c4\13\37\3\37\3\37\3 \3 \7 \u07ca\n \f")
        buf.write(" \16 \u07cd\13 \3 \3 \7 \u07d1\n \f \16 \u07d4\13 \3 ")
        buf.write("\3 \7 \u07d8\n \f \16 \u07db\13 \3 \3 \7 \u07df\n \f ")
        buf.write("\16 \u07e2\13 \3 \3 \7 \u07e6\n \f \16 \u07e9\13 \3 \3")
        buf.write(" \3!\3!\7!\u07ef\n!\f!\16!\u07f2\13!\3!\3!\7!\u07f6\n")
        buf.write("!\f!\16!\u07f9\13!\3!\3!\7!\u07fd\n!\f!\16!\u0800\13!")
        buf.write("\3!\3!\7!\u0804\n!\f!\16!\u0807\13!\3!\3!\7!\u080b\n!")
        buf.write("\f!\16!\u080e\13!\3!\3!\3\"\3\"\7\"\u0814\n\"\f\"\16\"")
        buf.write("\u0817\13\"\3\"\3\"\7\"\u081b\n\"\f\"\16\"\u081e\13\"")
        buf.write("\3\"\3\"\7\"\u0822\n\"\f\"\16\"\u0825\13\"\3\"\3\"\7\"")
        buf.write("\u0829\n\"\f\"\16\"\u082c\13\"\3\"\3\"\7\"\u0830\n\"\f")
        buf.write("\"\16\"\u0833\13\"\3\"\3\"\3#\3#\7#\u0839\n#\f#\16#\u083c")
        buf.write("\13#\3#\3#\7#\u0840\n#\f#\16#\u0843\13#\3#\3#\7#\u0847")
        buf.write("\n#\f#\16#\u084a\13#\3#\3#\3#\3#\7#\u0850\n#\f#\16#\u0853")
        buf.write("\13#\3#\3#\7#\u0857\n#\f#\16#\u085a\13#\3#\3#\7#\u085e")
        buf.write("\n#\f#\16#\u0861\13#\3#\3#\3#\3#\7#\u0867\n#\f#\16#\u086a")
        buf.write("\13#\3#\3#\7#\u086e\n#\f#\16#\u0871\13#\3#\3#\3#\3#\3")
        buf.write("#\7#\u0878\n#\f#\16#\u087b\13#\3#\3#\7#\u087f\n#\f#\16")
        buf.write("#\u0882\13#\3#\3#\7#\u0886\n#\f#\16#\u0889\13#\5#\u088b")
        buf.write("\n#\3$\3$\7$\u088f\n$\f$\16$\u0892\13$\3$\3$\7$\u0896")
        buf.write("\n$\f$\16$\u0899\13$\3$\3$\7$\u089d\n$\f$\16$\u08a0\13")
        buf.write("$\3$\3$\3$\3$\7$\u08a6\n$\f$\16$\u08a9\13$\3$\3$\7$\u08ad")
        buf.write("\n$\f$\16$\u08b0\13$\3$\3$\7$\u08b4\n$\f$\16$\u08b7\13")
        buf.write("$\3$\3$\3$\3$\7$\u08bd\n$\f$\16$\u08c0\13$\3$\3$\7$\u08c4")
        buf.write("\n$\f$\16$\u08c7\13$\3$\3$\3$\3$\3$\7$\u08ce\n$\f$\16")
        buf.write("$\u08d1\13$\3$\3$\7$\u08d5\n$\f$\16$\u08d8\13$\3$\3$\7")
        buf.write("$\u08dc\n$\f$\16$\u08df\13$\5$\u08e1\n$\3%\3%\7%\u08e5")
        buf.write("\n%\f%\16%\u08e8\13%\3%\3%\7%\u08ec\n%\f%\16%\u08ef\13")
        buf.write("%\3%\3%\7%\u08f3\n%\f%\16%\u08f6\13%\3%\3%\7%\u08fa\n")
        buf.write("%\f%\16%\u08fd\13%\7%\u08ff\n%\f%\16%\u0902\13%\3%\3%")
        buf.write("\7%\u0906\n%\f%\16%\u0909\13%\3%\3%\3&\3&\7&\u090f\n&")
        buf.write("\f&\16&\u0912\13&\3&\3&\7&\u0916\n&\f&\16&\u0919\13&\3")
        buf.write("&\3&\7&\u091d\n&\f&\16&\u0920\13&\3&\3&\3&\3&\7&\u0926")
        buf.write("\n&\f&\16&\u0929\13&\3&\3&\7&\u092d\n&\f&\16&\u0930\13")
        buf.write("&\3&\3&\7&\u0934\n&\f&\16&\u0937\13&\3&\3&\3&\3&\7&\u093d")
        buf.write("\n&\f&\16&\u0940\13&\3&\3&\7&\u0944\n&\f&\16&\u0947\13")
        buf.write("&\3&\3&\3&\3&\3&\7&\u094e\n&\f&\16&\u0951\13&\3&\3&\7")
        buf.write("&\u0955\n&\f&\16&\u0958\13&\3&\3&\7&\u095c\n&\f&\16&\u095f")
        buf.write("\13&\5&\u0961\n&\3\'\3\'\7\'\u0965\n\'\f\'\16\'\u0968")
        buf.write("\13\'\3\'\3\'\7\'\u096c\n\'\f\'\16\'\u096f\13\'\3\'\3")
        buf.write("\'\7\'\u0973\n\'\f\'\16\'\u0976\13\'\3\'\3\'\3\'\3\'\7")
        buf.write("\'\u097c\n\'\f\'\16\'\u097f\13\'\3\'\3\'\7\'\u0983\n\'")
        buf.write("\f\'\16\'\u0986\13\'\3\'\3\'\7\'\u098a\n\'\f\'\16\'\u098d")
        buf.write("\13\'\3\'\3\'\3\'\3\'\7\'\u0993\n\'\f\'\16\'\u0996\13")
        buf.write("\'\3\'\3\'\7\'\u099a\n\'\f\'\16\'\u099d\13\'\3\'\3\'\3")
        buf.write("\'\3\'\3\'\7\'\u09a4\n\'\f\'\16\'\u09a7\13\'\3\'\3\'\7")
        buf.write("\'\u09ab\n\'\f\'\16\'\u09ae\13\'\3\'\3\'\7\'\u09b2\n\'")
        buf.write("\f\'\16\'\u09b5\13\'\5\'\u09b7\n\'\3(\3(\7(\u09bb\n(\f")
        buf.write("(\16(\u09be\13(\3(\3(\7(\u09c2\n(\f(\16(\u09c5\13(\3(")
        buf.write("\3(\7(\u09c9\n(\f(\16(\u09cc\13(\3(\3(\3(\3(\7(\u09d2")
        buf.write("\n(\f(\16(\u09d5\13(\3(\3(\7(\u09d9\n(\f(\16(\u09dc\13")
        buf.write("(\3(\3(\7(\u09e0\n(\f(\16(\u09e3\13(\3(\3(\3(\3(\7(\u09e9")
        buf.write("\n(\f(\16(\u09ec\13(\3(\3(\7(\u09f0\n(\f(\16(\u09f3\13")
        buf.write("(\3(\3(\3(\3(\3(\7(\u09fa\n(\f(\16(\u09fd\13(\3(\3(\7")
        buf.write("(\u0a01\n(\f(\16(\u0a04\13(\3(\3(\7(\u0a08\n(\f(\16(\u0a0b")
        buf.write("\13(\5(\u0a0d\n(\3)\3)\7)\u0a11\n)\f)\16)\u0a14\13)\3")
        buf.write(")\3)\7)\u0a18\n)\f)\16)\u0a1b\13)\3)\3)\7)\u0a1f\n)\f")
        buf.write(")\16)\u0a22\13)\3)\3)\3)\3)\7)\u0a28\n)\f)\16)\u0a2b\13")
        buf.write(")\3)\3)\7)\u0a2f\n)\f)\16)\u0a32\13)\3)\3)\7)\u0a36\n")
        buf.write(")\f)\16)\u0a39\13)\3)\3)\3)\3)\7)\u0a3f\n)\f)\16)\u0a42")
        buf.write("\13)\3)\3)\7)\u0a46\n)\f)\16)\u0a49\13)\3)\3)\3)\3)\3")
        buf.write(")\7)\u0a50\n)\f)\16)\u0a53\13)\3)\3)\7)\u0a57\n)\f)\16")
        buf.write(")\u0a5a\13)\3)\3)\7)\u0a5e\n)\f)\16)\u0a61\13)\5)\u0a63")
        buf.write("\n)\3*\3*\7*\u0a67\n*\f*\16*\u0a6a\13*\3*\3*\7*\u0a6e")
        buf.write("\n*\f*\16*\u0a71\13*\3*\3*\7*\u0a75\n*\f*\16*\u0a78\13")
        buf.write("*\3*\3*\3*\3*\7*\u0a7e\n*\f*\16*\u0a81\13*\3*\3*\7*\u0a85")
        buf.write("\n*\f*\16*\u0a88\13*\3*\3*\7*\u0a8c\n*\f*\16*\u0a8f\13")
        buf.write("*\3*\3*\3*\3*\7*\u0a95\n*\f*\16*\u0a98\13*\3*\3*\7*\u0a9c")
        buf.write("\n*\f*\16*\u0a9f\13*\3*\3*\3*\3*\3*\7*\u0aa6\n*\f*\16")
        buf.write("*\u0aa9\13*\3*\3*\7*\u0aad\n*\f*\16*\u0ab0\13*\3*\3*\7")
        buf.write("*\u0ab4\n*\f*\16*\u0ab7\13*\5*\u0ab9\n*\3+\3+\7+\u0abd")
        buf.write("\n+\f+\16+\u0ac0\13+\3+\3+\7+\u0ac4\n+\f+\16+\u0ac7\13")
        buf.write("+\3+\3+\3+\5+\u0acc\n+\3+\7+\u0acf\n+\f+\16+\u0ad2\13")
        buf.write("+\3+\3+\3+\7+\u0ad7\n+\f+\16+\u0ada\13+\3+\3+\7+\u0ade")
        buf.write("\n+\f+\16+\u0ae1\13+\3+\3+\3+\5+\u0ae6\n+\3+\7+\u0ae9")
        buf.write("\n+\f+\16+\u0aec\13+\3+\3+\3+\7+\u0af1\n+\f+\16+\u0af4")
        buf.write("\13+\3+\3+\7+\u0af8\n+\f+\16+\u0afb\13+\3+\3+\3+\5+\u0b00")
        buf.write("\n+\3+\3+\3+\7+\u0b05\n+\f+\16+\u0b08\13+\3+\3+\7+\u0b0c")
        buf.write("\n+\f+\16+\u0b0f\13+\3+\3+\3+\5+\u0b14\n+\3+\7+\u0b17")
        buf.write("\n+\f+\16+\u0b1a\13+\5+\u0b1c\n+\3,\3,\7,\u0b20\n,\f,")
        buf.write("\16,\u0b23\13,\3,\3,\7,\u0b27\n,\f,\16,\u0b2a\13,\3,\3")
        buf.write(",\7,\u0b2e\n,\f,\16,\u0b31\13,\3,\3,\3,\3,\7,\u0b37\n")
        buf.write(",\f,\16,\u0b3a\13,\3,\3,\7,\u0b3e\n,\f,\16,\u0b41\13,")
        buf.write("\3,\3,\7,\u0b45\n,\f,\16,\u0b48\13,\3,\3,\3,\3,\7,\u0b4e")
        buf.write("\n,\f,\16,\u0b51\13,\3,\3,\7,\u0b55\n,\f,\16,\u0b58\13")
        buf.write(",\3,\3,\3,\3,\3,\7,\u0b5f\n,\f,\16,\u0b62\13,\3,\3,\7")
        buf.write(",\u0b66\n,\f,\16,\u0b69\13,\3,\3,\7,\u0b6d\n,\f,\16,\u0b70")
        buf.write("\13,\5,\u0b72\n,\3-\3-\3.\3.\7.\u0b78\n.\f.\16.\u0b7b")
        buf.write("\13.\3.\3.\7.\u0b7f\n.\f.\16.\u0b82\13.\3.\3.\7.\u0b86")
        buf.write("\n.\f.\16.\u0b89\13.\3.\7.\u0b8c\n.\f.\16.\u0b8f\13.\3")
        buf.write(".\7.\u0b92\n.\f.\16.\u0b95\13.\5.\u0b97\n.\3.\3.\3.\3")
        buf.write(".\7.\u0b9d\n.\f.\16.\u0ba0\13.\3.\3.\7.\u0ba4\n.\f.\16")
        buf.write(".\u0ba7\13.\3.\7.\u0baa\n.\f.\16.\u0bad\13.\3.\7.\u0bb0")
        buf.write("\n.\f.\16.\u0bb3\13.\5.\u0bb5\n.\3.\3.\3.\7.\u0bba\n.")
        buf.write("\f.\16.\u0bbd\13.\3.\3.\7.\u0bc1\n.\f.\16.\u0bc4\13.\3")
        buf.write(".\3.\7.\u0bc8\n.\f.\16.\u0bcb\13.\3.\7.\u0bce\n.\f.\16")
        buf.write(".\u0bd1\13.\3.\7.\u0bd4\n.\f.\16.\u0bd7\13.\5.\u0bd9\n")
        buf.write(".\3.\5.\u0bdc\n.\3/\3/\3/\2\2\60\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\\2\4\3\2\678\3\2\63\66\2\u0dee\2a\3\2\2\2\4\u0298")
        buf.write("\3\2\2\2\6\u029d\3\2\2\2\b\u029f\3\2\2\2\n\u0303\3\2\2")
        buf.write("\2\f\u0375\3\2\2\2\16\u0377\3\2\2\2\20\u0418\3\2\2\2\22")
        buf.write("\u041a\3\2\2\2\24\u0423\3\2\2\2\26\u046d\3\2\2\2\30\u0482")
        buf.write("\3\2\2\2\32\u048f\3\2\2\2\34\u04a8\3\2\2\2\36\u04aa\3")
        buf.write("\2\2\2 \u04bd\3\2\2\2\"\u04e9\3\2\2\2$\u0505\3\2\2\2&")
        buf.write("\u0509\3\2\2\2(\u051a\3\2\2\2*\u0531\3\2\2\2,\u0543\3")
        buf.write("\2\2\2.\u05cd\3\2\2\2\60\u0623\3\2\2\2\62\u0679\3\2\2")
        buf.write("\2\64\u06cf\3\2\2\2\66\u0725\3\2\2\28\u0727\3\2\2\2:\u07a0")
        buf.write("\3\2\2\2<\u07a2\3\2\2\2>\u07c7\3\2\2\2@\u07ec\3\2\2\2")
        buf.write("B\u0811\3\2\2\2D\u088a\3\2\2\2F\u08e0\3\2\2\2H\u08e2\3")
        buf.write("\2\2\2J\u0960\3\2\2\2L\u09b6\3\2\2\2N\u0a0c\3\2\2\2P\u0a62")
        buf.write("\3\2\2\2R\u0ab8\3\2\2\2T\u0b1b\3\2\2\2V\u0b71\3\2\2\2")
        buf.write("X\u0b73\3\2\2\2Z\u0bdb\3\2\2\2\\\u0bdd\3\2\2\2^`\t\2\2")
        buf.write("\2_^\3\2\2\2`c\3\2\2\2a_\3\2\2\2ab\3\2\2\2b\u00a4\3\2")
        buf.write("\2\2ca\3\2\2\2dh\5$\23\2eg\t\2\2\2fe\3\2\2\2gj\3\2\2\2")
        buf.write("hf\3\2\2\2hi\3\2\2\2ik\3\2\2\2jh\3\2\2\2ko\7\3\2\2ln\t")
        buf.write("\2\2\2ml\3\2\2\2nq\3\2\2\2om\3\2\2\2op\3\2\2\2p\u008f")
        buf.write("\3\2\2\2qo\3\2\2\2r\u0080\5$\23\2su\7\67\2\2ts\3\2\2\2")
        buf.write("ux\3\2\2\2vt\3\2\2\2vw\3\2\2\2wy\3\2\2\2xv\3\2\2\2y}\7")
        buf.write("8\2\2z|\7\67\2\2{z\3\2\2\2|\177\3\2\2\2}{\3\2\2\2}~\3")
        buf.write("\2\2\2~\u0081\3\2\2\2\177}\3\2\2\2\u0080v\3\2\2\2\u0081")
        buf.write("\u0082\3\2\2\2\u0082\u0080\3\2\2\2\u0082\u0083\3\2\2\2")
        buf.write("\u0083\u008f\3\2\2\2\u0084\u0088\5\6\4\2\u0085\u0088\5")
        buf.write("\4\3\2\u0086\u0088\5,\27\2\u0087\u0084\3\2\2\2\u0087\u0085")
        buf.write("\3\2\2\2\u0087\u0086\3\2\2\2\u0088\u008a\3\2\2\2\u0089")
        buf.write("\u008b\t\2\2\2\u008a\u0089\3\2\2\2\u008b\u008c\3\2\2\2")
        buf.write("\u008c\u008a\3\2\2\2\u008c\u008d\3\2\2\2\u008d\u008f\3")
        buf.write("\2\2\2\u008ed\3\2\2\2\u008er\3\2\2\2\u008e\u0087\3\2\2")
        buf.write("\2\u008f\u0092\3\2\2\2\u0090\u008e\3\2\2\2\u0090\u0091")
        buf.write("\3\2\2\2\u0091\u00a2\3\2\2\2\u0092\u0090\3\2\2\2\u0093")
        buf.write("\u0097\5$\23\2\u0094\u0096\t\2\2\2\u0095\u0094\3\2\2\2")
        buf.write("\u0096\u0099\3\2\2\2\u0097\u0095\3\2\2\2\u0097\u0098\3")
        buf.write("\2\2\2\u0098\u009b\3\2\2\2\u0099\u0097\3\2\2\2\u009a\u009c")
        buf.write("\7\3\2\2\u009b\u009a\3\2\2\2\u009b\u009c\3\2\2\2\u009c")
        buf.write("\u00a3\3\2\2\2\u009d\u00a1\5\6\4\2\u009e\u00a1\5\4\3\2")
        buf.write("\u009f\u00a1\5,\27\2\u00a0\u009d\3\2\2\2\u00a0\u009e\3")
        buf.write("\2\2\2\u00a0\u009f\3\2\2\2\u00a1\u00a3\3\2\2\2\u00a2\u0093")
        buf.write("\3\2\2\2\u00a2\u00a0\3\2\2\2\u00a3\u00a5\3\2\2\2\u00a4")
        buf.write("\u0090\3\2\2\2\u00a4\u00a5\3\2\2\2\u00a5\u00a9\3\2\2\2")
        buf.write("\u00a6\u00a8\t\2\2\2\u00a7\u00a6\3\2\2\2\u00a8\u00ab\3")
        buf.write("\2\2\2\u00a9\u00a7\3\2\2\2\u00a9\u00aa\3\2\2\2\u00aa\u00ad")
        buf.write("\3\2\2\2\u00ab\u00a9\3\2\2\2\u00ac\u00ae\79\2\2\u00ad")
        buf.write("\u00ac\3\2\2\2\u00ad\u00ae\3\2\2\2\u00ae\u00af\3\2\2\2")
        buf.write("\u00af\u00b0\7\2\2\3\u00b0\3\3\2\2\2\u00b1\u00b3\7\n\2")
        buf.write("\2\u00b2\u00b4\t\2\2\2\u00b3\u00b2\3\2\2\2\u00b4\u00b5")
        buf.write("\3\2\2\2\u00b5\u00b3\3\2\2\2\u00b5\u00b6\3\2\2\2\u00b6")
        buf.write("\u00b7\3\2\2\2\u00b7\u00bb\7\65\2\2\u00b8\u00ba\t\2\2")
        buf.write("\2\u00b9\u00b8\3\2\2\2\u00ba\u00bd\3\2\2\2\u00bb\u00b9")
        buf.write("\3\2\2\2\u00bb\u00bc\3\2\2\2\u00bc\u00be\3\2\2\2\u00bd")
        buf.write("\u00bb\3\2\2\2\u00be\u00c2\7\4\2\2\u00bf\u00c1\t\2\2\2")
        buf.write("\u00c0\u00bf\3\2\2\2\u00c1\u00c4\3\2\2\2\u00c2\u00c0\3")
        buf.write("\2\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00df\3\2\2\2\u00c4\u00c2")
        buf.write("\3\2\2\2\u00c5\u00c9\7\65\2\2\u00c6\u00c8\t\2\2\2\u00c7")
        buf.write("\u00c6\3\2\2\2\u00c8\u00cb\3\2\2\2\u00c9\u00c7\3\2\2\2")
        buf.write("\u00c9\u00ca\3\2\2\2\u00ca\u00dc\3\2\2\2\u00cb\u00c9\3")
        buf.write("\2\2\2\u00cc\u00d0\7\5\2\2\u00cd\u00cf\t\2\2\2\u00ce\u00cd")
        buf.write("\3\2\2\2\u00cf\u00d2\3\2\2\2\u00d0\u00ce\3\2\2\2\u00d0")
        buf.write("\u00d1\3\2\2\2\u00d1\u00d3\3\2\2\2\u00d2\u00d0\3\2\2\2")
        buf.write("\u00d3\u00d7\7\65\2\2\u00d4\u00d6\t\2\2\2\u00d5\u00d4")
        buf.write("\3\2\2\2\u00d6\u00d9\3\2\2\2\u00d7\u00d5\3\2\2\2\u00d7")
        buf.write("\u00d8\3\2\2\2\u00d8\u00db\3\2\2\2\u00d9\u00d7\3\2\2\2")
        buf.write("\u00da\u00cc\3\2\2\2\u00db\u00de\3\2\2\2\u00dc\u00da\3")
        buf.write("\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\u00e0\3\2\2\2\u00de\u00dc")
        buf.write("\3\2\2\2\u00df\u00c5\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0")
        buf.write("\u00e1\3\2\2\2\u00e1\u00e5\7\6\2\2\u00e2\u00e4\t\2\2\2")
        buf.write("\u00e3\u00e2\3\2\2\2\u00e4\u00e7\3\2\2\2\u00e5\u00e3\3")
        buf.write("\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00e8\3\2\2\2\u00e7\u00e5")
        buf.write("\3\2\2\2\u00e8\u00ea\7\22\2\2\u00e9\u00eb\t\2\2\2\u00ea")
        buf.write("\u00e9\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00ea\3\2\2\2")
        buf.write("\u00ec\u00ed\3\2\2\2\u00ed\u012b\3\2\2\2\u00ee\u00f2\5")
        buf.write("$\23\2\u00ef\u00f1\t\2\2\2\u00f0\u00ef\3\2\2\2\u00f1\u00f4")
        buf.write("\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3")
        buf.write("\u00f5\3\2\2\2\u00f4\u00f2\3\2\2\2\u00f5\u00f9\7\3\2\2")
        buf.write("\u00f6\u00f8\t\2\2\2\u00f7\u00f6\3\2\2\2\u00f8\u00fb\3")
        buf.write("\2\2\2\u00f9\u00f7\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\u0115")
        buf.write("\3\2\2\2\u00fb\u00f9\3\2\2\2\u00fc\u010a\5$\23\2\u00fd")
        buf.write("\u00ff\7\67\2\2\u00fe\u00fd\3\2\2\2\u00ff\u0102\3\2\2")
        buf.write("\2\u0100\u00fe\3\2\2\2\u0100\u0101\3\2\2\2\u0101\u0103")
        buf.write("\3\2\2\2\u0102\u0100\3\2\2\2\u0103\u0107\78\2\2\u0104")
        buf.write("\u0106\7\67\2\2\u0105\u0104\3\2\2\2\u0106\u0109\3\2\2")
        buf.write("\2\u0107\u0105\3\2\2\2\u0107\u0108\3\2\2\2\u0108\u010b")
        buf.write("\3\2\2\2\u0109\u0107\3\2\2\2\u010a\u0100\3\2\2\2\u010b")
        buf.write("\u010c\3\2\2\2\u010c\u010a\3\2\2\2\u010c\u010d\3\2\2\2")
        buf.write("\u010d\u0115\3\2\2\2\u010e\u0110\5\6\4\2\u010f\u0111\t")
        buf.write("\2\2\2\u0110\u010f\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0110")
        buf.write("\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u0115\3\2\2\2\u0114")
        buf.write("\u00ee\3\2\2\2\u0114\u00fc\3\2\2\2\u0114\u010e\3\2\2\2")
        buf.write("\u0115\u0118\3\2\2\2\u0116\u0114\3\2\2\2\u0116\u0117\3")
        buf.write("\2\2\2\u0117\u0124\3\2\2\2\u0118\u0116\3\2\2\2\u0119\u011d")
        buf.write("\5$\23\2\u011a\u011c\t\2\2\2\u011b\u011a\3\2\2\2\u011c")
        buf.write("\u011f\3\2\2\2\u011d\u011b\3\2\2\2\u011d\u011e\3\2\2\2")
        buf.write("\u011e\u0121\3\2\2\2\u011f\u011d\3\2\2\2\u0120\u0122\7")
        buf.write("\3\2\2\u0121\u0120\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0125")
        buf.write("\3\2\2\2\u0123\u0125\5\6\4\2\u0124\u0119\3\2\2\2\u0124")
        buf.write("\u0123\3\2\2\2\u0125\u0127\3\2\2\2\u0126\u0128\t\2\2\2")
        buf.write("\u0127\u0126\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u0127\3")
        buf.write("\2\2\2\u0129\u012a\3\2\2\2\u012a\u012c\3\2\2\2\u012b\u0116")
        buf.write("\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012d\3\2\2\2\u012d")
        buf.write("\u0299\7\23\2\2\u012e\u0130\7\n\2\2\u012f\u0131\t\2\2")
        buf.write("\2\u0130\u012f\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0130")
        buf.write("\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0134\3\2\2\2\u0134")
        buf.write("\u0138\7\65\2\2\u0135\u0137\t\2\2\2\u0136\u0135\3\2\2")
        buf.write("\2\u0137\u013a\3\2\2\2\u0138\u0136\3\2\2\2\u0138\u0139")
        buf.write("\3\2\2\2\u0139\u013b\3\2\2\2\u013a\u0138\3\2\2\2\u013b")
        buf.write("\u0156\b\3\1\2\u013c\u0140\7\65\2\2\u013d\u013f\t\2\2")
        buf.write("\2\u013e\u013d\3\2\2\2\u013f\u0142\3\2\2\2\u0140\u013e")
        buf.write("\3\2\2\2\u0140\u0141\3\2\2\2\u0141\u0153\3\2\2\2\u0142")
        buf.write("\u0140\3\2\2\2\u0143\u0147\7\5\2\2\u0144\u0146\t\2\2\2")
        buf.write("\u0145\u0144\3\2\2\2\u0146\u0149\3\2\2\2\u0147\u0145\3")
        buf.write("\2\2\2\u0147\u0148\3\2\2\2\u0148\u014a\3\2\2\2\u0149\u0147")
        buf.write("\3\2\2\2\u014a\u014e\7\65\2\2\u014b\u014d\t\2\2\2\u014c")
        buf.write("\u014b\3\2\2\2\u014d\u0150\3\2\2\2\u014e\u014c\3\2\2\2")
        buf.write("\u014e\u014f\3\2\2\2\u014f\u0152\3\2\2\2\u0150\u014e\3")
        buf.write("\2\2\2\u0151\u0143\3\2\2\2\u0152\u0155\3\2\2\2\u0153\u0151")
        buf.write("\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u0157\3\2\2\2\u0155")
        buf.write("\u0153\3\2\2\2\u0156\u013c\3\2\2\2\u0156\u0157\3\2\2\2")
        buf.write("\u0157\u0158\3\2\2\2\u0158\u015c\7\6\2\2\u0159\u015b\t")
        buf.write("\2\2\2\u015a\u0159\3\2\2\2\u015b\u015e\3\2\2\2\u015c\u015a")
        buf.write("\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u015f\3\2\2\2\u015e")
        buf.write("\u015c\3\2\2\2\u015f\u0161\7\22\2\2\u0160\u0162\t\2\2")
        buf.write("\2\u0161\u0160\3\2\2\2\u0162\u0163\3\2\2\2\u0163\u0161")
        buf.write("\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u01a2\3\2\2\2\u0165")
        buf.write("\u0169\5$\23\2\u0166\u0168\t\2\2\2\u0167\u0166\3\2\2\2")
        buf.write("\u0168\u016b\3\2\2\2\u0169\u0167\3\2\2\2\u0169\u016a\3")
        buf.write("\2\2\2\u016a\u016c\3\2\2\2\u016b\u0169\3\2\2\2\u016c\u0170")
        buf.write("\7\3\2\2\u016d\u016f\t\2\2\2\u016e\u016d\3\2\2\2\u016f")
        buf.write("\u0172\3\2\2\2\u0170\u016e\3\2\2\2\u0170\u0171\3\2\2\2")
        buf.write("\u0171\u018c\3\2\2\2\u0172\u0170\3\2\2\2\u0173\u0181\5")
        buf.write("$\23\2\u0174\u0176\7\67\2\2\u0175\u0174\3\2\2\2\u0176")
        buf.write("\u0179\3\2\2\2\u0177\u0175\3\2\2\2\u0177\u0178\3\2\2\2")
        buf.write("\u0178\u017a\3\2\2\2\u0179\u0177\3\2\2\2\u017a\u017e\7")
        buf.write("8\2\2\u017b\u017d\7\67\2\2\u017c\u017b\3\2\2\2\u017d\u0180")
        buf.write("\3\2\2\2\u017e\u017c\3\2\2\2\u017e\u017f\3\2\2\2\u017f")
        buf.write("\u0182\3\2\2\2\u0180\u017e\3\2\2\2\u0181\u0177\3\2\2\2")
        buf.write("\u0182\u0183\3\2\2\2\u0183\u0181\3\2\2\2\u0183\u0184\3")
        buf.write("\2\2\2\u0184\u018c\3\2\2\2\u0185\u0187\5\6\4\2\u0186\u0188")
        buf.write("\t\2\2\2\u0187\u0186\3\2\2\2\u0188\u0189\3\2\2\2\u0189")
        buf.write("\u0187\3\2\2\2\u0189\u018a\3\2\2\2\u018a\u018c\3\2\2\2")
        buf.write("\u018b\u0165\3\2\2\2\u018b\u0173\3\2\2\2\u018b\u0185\3")
        buf.write("\2\2\2\u018c\u018f\3\2\2\2\u018d\u018b\3\2\2\2\u018d\u018e")
        buf.write("\3\2\2\2\u018e\u019b\3\2\2\2\u018f\u018d\3\2\2\2\u0190")
        buf.write("\u0194\5$\23\2\u0191\u0193\t\2\2\2\u0192\u0191\3\2\2\2")
        buf.write("\u0193\u0196\3\2\2\2\u0194\u0192\3\2\2\2\u0194\u0195\3")
        buf.write("\2\2\2\u0195\u0198\3\2\2\2\u0196\u0194\3\2\2\2\u0197\u0199")
        buf.write("\7\3\2\2\u0198\u0197\3\2\2\2\u0198\u0199\3\2\2\2\u0199")
        buf.write("\u019c\3\2\2\2\u019a\u019c\5\6\4\2\u019b\u0190\3\2\2\2")
        buf.write("\u019b\u019a\3\2\2\2\u019c\u019e\3\2\2\2\u019d\u019f\t")
        buf.write("\2\2\2\u019e\u019d\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u019e")
        buf.write("\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a3\3\2\2\2\u01a2")
        buf.write("\u018d\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a4\3\2\2\2")
        buf.write("\u01a4\u0299\7\23\2\2\u01a5\u01a7\7\n\2\2\u01a6\u01a8")
        buf.write("\t\2\2\2\u01a7\u01a6\3\2\2\2\u01a8\u01a9\3\2\2\2\u01a9")
        buf.write("\u01a7\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa\u01ab\3\2\2\2")
        buf.write("\u01ab\u01af\7\65\2\2\u01ac\u01ae\t\2\2\2\u01ad\u01ac")
        buf.write("\3\2\2\2\u01ae\u01b1\3\2\2\2\u01af\u01ad\3\2\2\2\u01af")
        buf.write("\u01b0\3\2\2\2\u01b0\u01b2\3\2\2\2\u01b1\u01af\3\2\2\2")
        buf.write("\u01b2\u01b6\7\4\2\2\u01b3\u01b5\t\2\2\2\u01b4\u01b3\3")
        buf.write("\2\2\2\u01b5\u01b8\3\2\2\2\u01b6\u01b4\3\2\2\2\u01b6\u01b7")
        buf.write("\3\2\2\2\u01b7\u01d3\3\2\2\2\u01b8\u01b6\3\2\2\2\u01b9")
        buf.write("\u01bd\7\65\2\2\u01ba\u01bc\t\2\2\2\u01bb\u01ba\3\2\2")
        buf.write("\2\u01bc\u01bf\3\2\2\2\u01bd\u01bb\3\2\2\2\u01bd\u01be")
        buf.write("\3\2\2\2\u01be\u01d0\3\2\2\2\u01bf\u01bd\3\2\2\2\u01c0")
        buf.write("\u01c4\7\5\2\2\u01c1\u01c3\t\2\2\2\u01c2\u01c1\3\2\2\2")
        buf.write("\u01c3\u01c6\3\2\2\2\u01c4\u01c2\3\2\2\2\u01c4\u01c5\3")
        buf.write("\2\2\2\u01c5\u01c7\3\2\2\2\u01c6\u01c4\3\2\2\2\u01c7\u01cb")
        buf.write("\7\65\2\2\u01c8\u01ca\t\2\2\2\u01c9\u01c8\3\2\2\2\u01ca")
        buf.write("\u01cd\3\2\2\2\u01cb\u01c9\3\2\2\2\u01cb\u01cc\3\2\2\2")
        buf.write("\u01cc\u01cf\3\2\2\2\u01cd\u01cb\3\2\2\2\u01ce\u01c0\3")
        buf.write("\2\2\2\u01cf\u01d2\3\2\2\2\u01d0\u01ce\3\2\2\2\u01d0\u01d1")
        buf.write("\3\2\2\2\u01d1\u01d4\3\2\2\2\u01d2\u01d0\3\2\2\2\u01d3")
        buf.write("\u01b9\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\u01d5\3\2\2\2")
        buf.write("\u01d5\u01d9\b\3\1\2\u01d6\u01d8\t\2\2\2\u01d7\u01d6\3")
        buf.write("\2\2\2\u01d8\u01db\3\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da")
        buf.write("\3\2\2\2\u01da\u01dc\3\2\2\2\u01db\u01d9\3\2\2\2\u01dc")
        buf.write("\u01de\7\22\2\2\u01dd\u01df\t\2\2\2\u01de\u01dd\3\2\2")
        buf.write("\2\u01df\u01e0\3\2\2\2\u01e0\u01de\3\2\2\2\u01e0\u01e1")
        buf.write("\3\2\2\2\u01e1\u021f\3\2\2\2\u01e2\u01e6\5$\23\2\u01e3")
        buf.write("\u01e5\t\2\2\2\u01e4\u01e3\3\2\2\2\u01e5\u01e8\3\2\2\2")
        buf.write("\u01e6\u01e4\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7\u01e9\3")
        buf.write("\2\2\2\u01e8\u01e6\3\2\2\2\u01e9\u01ed\7\3\2\2\u01ea\u01ec")
        buf.write("\t\2\2\2\u01eb\u01ea\3\2\2\2\u01ec\u01ef\3\2\2\2\u01ed")
        buf.write("\u01eb\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee\u0209\3\2\2\2")
        buf.write("\u01ef\u01ed\3\2\2\2\u01f0\u01fe\5$\23\2\u01f1\u01f3\7")
        buf.write("\67\2\2\u01f2\u01f1\3\2\2\2\u01f3\u01f6\3\2\2\2\u01f4")
        buf.write("\u01f2\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f7\3\2\2\2")
        buf.write("\u01f6\u01f4\3\2\2\2\u01f7\u01fb\78\2\2\u01f8\u01fa\7")
        buf.write("\67\2\2\u01f9\u01f8\3\2\2\2\u01fa\u01fd\3\2\2\2\u01fb")
        buf.write("\u01f9\3\2\2\2\u01fb\u01fc\3\2\2\2\u01fc\u01ff\3\2\2\2")
        buf.write("\u01fd\u01fb\3\2\2\2\u01fe\u01f4\3\2\2\2\u01ff\u0200\3")
        buf.write("\2\2\2\u0200\u01fe\3\2\2\2\u0200\u0201\3\2\2\2\u0201\u0209")
        buf.write("\3\2\2\2\u0202\u0204\5\6\4\2\u0203\u0205\t\2\2\2\u0204")
        buf.write("\u0203\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u0204\3\2\2\2")
        buf.write("\u0206\u0207\3\2\2\2\u0207\u0209\3\2\2\2\u0208\u01e2\3")
        buf.write("\2\2\2\u0208\u01f0\3\2\2\2\u0208\u0202\3\2\2\2\u0209\u020c")
        buf.write("\3\2\2\2\u020a\u0208\3\2\2\2\u020a\u020b\3\2\2\2\u020b")
        buf.write("\u0218\3\2\2\2\u020c\u020a\3\2\2\2\u020d\u0211\5$\23\2")
        buf.write("\u020e\u0210\t\2\2\2\u020f\u020e\3\2\2\2\u0210\u0213\3")
        buf.write("\2\2\2\u0211\u020f\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u0215")
        buf.write("\3\2\2\2\u0213\u0211\3\2\2\2\u0214\u0216\7\3\2\2\u0215")
        buf.write("\u0214\3\2\2\2\u0215\u0216\3\2\2\2\u0216\u0219\3\2\2\2")
        buf.write("\u0217\u0219\5\6\4\2\u0218\u020d\3\2\2\2\u0218\u0217\3")
        buf.write("\2\2\2\u0219\u021b\3\2\2\2\u021a\u021c\t\2\2\2\u021b\u021a")
        buf.write("\3\2\2\2\u021c\u021d\3\2\2\2\u021d\u021b\3\2\2\2\u021d")
        buf.write("\u021e\3\2\2\2\u021e\u0220\3\2\2\2\u021f\u020a\3\2\2\2")
        buf.write("\u021f\u0220\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u0299\7")
        buf.write("\23\2\2\u0222\u0224\7\n\2\2\u0223\u0225\t\2\2\2\u0224")
        buf.write("\u0223\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u0224\3\2\2\2")
        buf.write("\u0226\u0227\3\2\2\2\u0227\u0228\3\2\2\2\u0228\u022c\7")
        buf.write("\65\2\2\u0229\u022b\t\2\2\2\u022a\u0229\3\2\2\2\u022b")
        buf.write("\u022e\3\2\2\2\u022c\u022a\3\2\2\2\u022c\u022d\3\2\2\2")
        buf.write("\u022d\u022f\3\2\2\2\u022e\u022c\3\2\2\2\u022f\u024a\b")
        buf.write("\3\1\2\u0230\u0234\7\65\2\2\u0231\u0233\t\2\2\2\u0232")
        buf.write("\u0231\3\2\2\2\u0233\u0236\3\2\2\2\u0234\u0232\3\2\2\2")
        buf.write("\u0234\u0235\3\2\2\2\u0235\u0247\3\2\2\2\u0236\u0234\3")
        buf.write("\2\2\2\u0237\u023b\7\5\2\2\u0238\u023a\t\2\2\2\u0239\u0238")
        buf.write("\3\2\2\2\u023a\u023d\3\2\2\2\u023b\u0239\3\2\2\2\u023b")
        buf.write("\u023c\3\2\2\2\u023c\u023e\3\2\2\2\u023d\u023b\3\2\2\2")
        buf.write("\u023e\u0242\7\65\2\2\u023f\u0241\t\2\2\2\u0240\u023f")
        buf.write("\3\2\2\2\u0241\u0244\3\2\2\2\u0242\u0240\3\2\2\2\u0242")
        buf.write("\u0243\3\2\2\2\u0243\u0246\3\2\2\2\u0244\u0242\3\2\2\2")
        buf.write("\u0245\u0237\3\2\2\2\u0246\u0249\3\2\2\2\u0247\u0245\3")
        buf.write("\2\2\2\u0247\u0248\3\2\2\2\u0248\u024b\3\2\2\2\u0249\u0247")
        buf.write("\3\2\2\2\u024a\u0230\3\2\2\2\u024a\u024b\3\2\2\2\u024b")
        buf.write("\u024f\3\2\2\2\u024c\u024e\t\2\2\2\u024d\u024c\3\2\2\2")
        buf.write("\u024e\u0251\3\2\2\2\u024f\u024d\3\2\2\2\u024f\u0250\3")
        buf.write("\2\2\2\u0250\u0252\3\2\2\2\u0251\u024f\3\2\2\2\u0252\u0254")
        buf.write("\7\22\2\2\u0253\u0255\t\2\2\2\u0254\u0253\3\2\2\2\u0255")
        buf.write("\u0256\3\2\2\2\u0256\u0254\3\2\2\2\u0256\u0257\3\2\2\2")
        buf.write("\u0257\u0295\3\2\2\2\u0258\u025c\5$\23\2\u0259\u025b\t")
        buf.write("\2\2\2\u025a\u0259\3\2\2\2\u025b\u025e\3\2\2\2\u025c\u025a")
        buf.write("\3\2\2\2\u025c\u025d\3\2\2\2\u025d\u025f\3\2\2\2\u025e")
        buf.write("\u025c\3\2\2\2\u025f\u0263\7\3\2\2\u0260\u0262\t\2\2\2")
        buf.write("\u0261\u0260\3\2\2\2\u0262\u0265\3\2\2\2\u0263\u0261\3")
        buf.write("\2\2\2\u0263\u0264\3\2\2\2\u0264\u027f\3\2\2\2\u0265\u0263")
        buf.write("\3\2\2\2\u0266\u0274\5$\23\2\u0267\u0269\7\67\2\2\u0268")
        buf.write("\u0267\3\2\2\2\u0269\u026c\3\2\2\2\u026a\u0268\3\2\2\2")
        buf.write("\u026a\u026b\3\2\2\2\u026b\u026d\3\2\2\2\u026c\u026a\3")
        buf.write("\2\2\2\u026d\u0271\78\2\2\u026e\u0270\7\67\2\2\u026f\u026e")
        buf.write("\3\2\2\2\u0270\u0273\3\2\2\2\u0271\u026f\3\2\2\2\u0271")
        buf.write("\u0272\3\2\2\2\u0272\u0275\3\2\2\2\u0273\u0271\3\2\2\2")
        buf.write("\u0274\u026a\3\2\2\2\u0275\u0276\3\2\2\2\u0276\u0274\3")
        buf.write("\2\2\2\u0276\u0277\3\2\2\2\u0277\u027f\3\2\2\2\u0278\u027a")
        buf.write("\5\6\4\2\u0279\u027b\t\2\2\2\u027a\u0279\3\2\2\2\u027b")
        buf.write("\u027c\3\2\2\2\u027c\u027a\3\2\2\2\u027c\u027d\3\2\2\2")
        buf.write("\u027d\u027f\3\2\2\2\u027e\u0258\3\2\2\2\u027e\u0266\3")
        buf.write("\2\2\2\u027e\u0278\3\2\2\2\u027f\u0282\3\2\2\2\u0280\u027e")
        buf.write("\3\2\2\2\u0280\u0281\3\2\2\2\u0281\u028e\3\2\2\2\u0282")
        buf.write("\u0280\3\2\2\2\u0283\u0287\5$\23\2\u0284\u0286\t\2\2\2")
        buf.write("\u0285\u0284\3\2\2\2\u0286\u0289\3\2\2\2\u0287\u0285\3")
        buf.write("\2\2\2\u0287\u0288\3\2\2\2\u0288\u028b\3\2\2\2\u0289\u0287")
        buf.write("\3\2\2\2\u028a\u028c\7\3\2\2\u028b\u028a\3\2\2\2\u028b")
        buf.write("\u028c\3\2\2\2\u028c\u028f\3\2\2\2\u028d\u028f\5\6\4\2")
        buf.write("\u028e\u0283\3\2\2\2\u028e\u028d\3\2\2\2\u028f\u0291\3")
        buf.write("\2\2\2\u0290\u0292\t\2\2\2\u0291\u0290\3\2\2\2\u0292\u0293")
        buf.write("\3\2\2\2\u0293\u0291\3\2\2\2\u0293\u0294\3\2\2\2\u0294")
        buf.write("\u0296\3\2\2\2\u0295\u0280\3\2\2\2\u0295\u0296\3\2\2\2")
        buf.write("\u0296\u0297\3\2\2\2\u0297\u0299\7\23\2\2\u0298\u00b1")
        buf.write("\3\2\2\2\u0298\u012e\3\2\2\2\u0298\u01a5\3\2\2\2\u0298")
        buf.write("\u0222\3\2\2\2\u0299\5\3\2\2\2\u029a\u029e\5\f\7\2\u029b")
        buf.write("\u029e\5\n\6\2\u029c\u029e\5\b\5\2\u029d\u029a\3\2\2\2")
        buf.write("\u029d\u029b\3\2\2\2\u029d\u029c\3\2\2\2\u029e\7\3\2\2")
        buf.write("\2\u029f\u02a1\7\f\2\2\u02a0\u02a2\t\2\2\2\u02a1\u02a0")
        buf.write("\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3\u02a1\3\2\2\2\u02a3")
        buf.write("\u02a4\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5\u02a7\7\65\2")
        buf.write("\2\u02a6\u02a8\t\2\2\2\u02a7\u02a6\3\2\2\2\u02a8\u02a9")
        buf.write("\3\2\2\2\u02a9\u02a7\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa")
        buf.write("\u02ab\3\2\2\2\u02ab\u02ad\7\r\2\2\u02ac\u02ae\t\2\2\2")
        buf.write("\u02ad\u02ac\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02ad\3")
        buf.write("\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1\u02b3")
        buf.write("\7\65\2\2\u02b2\u02b4\t\2\2\2\u02b3\u02b2\3\2\2\2\u02b4")
        buf.write("\u02b5\3\2\2\2\u02b5\u02b3\3\2\2\2\u02b5\u02b6\3\2\2\2")
        buf.write("\u02b6\u02b7\3\2\2\2\u02b7\u02b9\7\16\2\2\u02b8\u02ba")
        buf.write("\t\2\2\2\u02b9\u02b8\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb")
        buf.write("\u02b9\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc\u02ff\3\2\2\2")
        buf.write("\u02bd\u02c1\5$\23\2\u02be\u02c0\t\2\2\2\u02bf\u02be\3")
        buf.write("\2\2\2\u02c0\u02c3\3\2\2\2\u02c1\u02bf\3\2\2\2\u02c1\u02c2")
        buf.write("\3\2\2\2\u02c2\u02c4\3\2\2\2\u02c3\u02c1\3\2\2\2\u02c4")
        buf.write("\u02c8\7\3\2\2\u02c5\u02c7\t\2\2\2\u02c6\u02c5\3\2\2\2")
        buf.write("\u02c7\u02ca\3\2\2\2\u02c8\u02c6\3\2\2\2\u02c8\u02c9\3")
        buf.write("\2\2\2\u02c9\u02e4\3\2\2\2\u02ca\u02c8\3\2\2\2\u02cb\u02d9")
        buf.write("\5$\23\2\u02cc\u02ce\7\67\2\2\u02cd\u02cc\3\2\2\2\u02ce")
        buf.write("\u02d1\3\2\2\2\u02cf\u02cd\3\2\2\2\u02cf\u02d0\3\2\2\2")
        buf.write("\u02d0\u02d2\3\2\2\2\u02d1\u02cf\3\2\2\2\u02d2\u02d6\7")
        buf.write("8\2\2\u02d3\u02d5\7\67\2\2\u02d4\u02d3\3\2\2\2\u02d5\u02d8")
        buf.write("\3\2\2\2\u02d6\u02d4\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7")
        buf.write("\u02da\3\2\2\2\u02d8\u02d6\3\2\2\2\u02d9\u02cf\3\2\2\2")
        buf.write("\u02da\u02db\3\2\2\2\u02db\u02d9\3\2\2\2\u02db\u02dc\3")
        buf.write("\2\2\2\u02dc\u02e4\3\2\2\2\u02dd\u02df\5\6\4\2\u02de\u02e0")
        buf.write("\t\2\2\2\u02df\u02de\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1")
        buf.write("\u02df\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02e4\3\2\2\2")
        buf.write("\u02e3\u02bd\3\2\2\2\u02e3\u02cb\3\2\2\2\u02e3\u02dd\3")
        buf.write("\2\2\2\u02e4\u02e7\3\2\2\2\u02e5\u02e3\3\2\2\2\u02e5\u02e6")
        buf.write("\3\2\2\2\u02e6\u02fd\3\2\2\2\u02e7\u02e5\3\2\2\2\u02e8")
        buf.write("\u02ec\5$\23\2\u02e9\u02eb\t\2\2\2\u02ea\u02e9\3\2\2\2")
        buf.write("\u02eb\u02ee\3\2\2\2\u02ec\u02ea\3\2\2\2\u02ec\u02ed\3")
        buf.write("\2\2\2\u02ed\u02f5\3\2\2\2\u02ee\u02ec\3\2\2\2\u02ef\u02f6")
        buf.write("\7\3\2\2\u02f0\u02f2\t\2\2\2\u02f1\u02f0\3\2\2\2\u02f2")
        buf.write("\u02f3\3\2\2\2\u02f3\u02f1\3\2\2\2\u02f3\u02f4\3\2\2\2")
        buf.write("\u02f4\u02f6\3\2\2\2\u02f5\u02ef\3\2\2\2\u02f5\u02f1\3")
        buf.write("\2\2\2\u02f6\u02fe\3\2\2\2\u02f7\u02f9\5\6\4\2\u02f8\u02fa")
        buf.write("\t\2\2\2\u02f9\u02f8\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb")
        buf.write("\u02f9\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc\u02fe\3\2\2\2")
        buf.write("\u02fd\u02e8\3\2\2\2\u02fd\u02f7\3\2\2\2\u02fe\u0300\3")
        buf.write("\2\2\2\u02ff\u02e5\3\2\2\2\u02ff\u0300\3\2\2\2\u0300\u0301")
        buf.write("\3\2\2\2\u0301\u0302\7\23\2\2\u0302\t\3\2\2\2\u0303\u0305")
        buf.write("\7\13\2\2\u0304\u0306\t\2\2\2\u0305\u0304\3\2\2\2\u0306")
        buf.write("\u0307\3\2\2\2\u0307\u0305\3\2\2\2\u0307\u0308\3\2\2\2")
        buf.write("\u0308\u0309\3\2\2\2\u0309\u030b\5\26\f\2\u030a\u030c")
        buf.write("\t\2\2\2\u030b\u030a\3\2\2\2\u030c\u030d\3\2\2\2\u030d")
        buf.write("\u030b\3\2\2\2\u030d\u030e\3\2\2\2\u030e\u030f\3\2\2\2")
        buf.write("\u030f\u0311\7\16\2\2\u0310\u0312\t\2\2\2\u0311\u0310")
        buf.write("\3\2\2\2\u0312\u0313\3\2\2\2\u0313\u0311\3\2\2\2\u0313")
        buf.write("\u0314\3\2\2\2\u0314\u0357\3\2\2\2\u0315\u0319\5$\23\2")
        buf.write("\u0316\u0318\t\2\2\2\u0317\u0316\3\2\2\2\u0318\u031b\3")
        buf.write("\2\2\2\u0319\u0317\3\2\2\2\u0319\u031a\3\2\2\2\u031a\u031c")
        buf.write("\3\2\2\2\u031b\u0319\3\2\2\2\u031c\u0320\7\3\2\2\u031d")
        buf.write("\u031f\t\2\2\2\u031e\u031d\3\2\2\2\u031f\u0322\3\2\2\2")
        buf.write("\u0320\u031e\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u033c\3")
        buf.write("\2\2\2\u0322\u0320\3\2\2\2\u0323\u0331\5$\23\2\u0324\u0326")
        buf.write("\7\67\2\2\u0325\u0324\3\2\2\2\u0326\u0329\3\2\2\2\u0327")
        buf.write("\u0325\3\2\2\2\u0327\u0328\3\2\2\2\u0328\u032a\3\2\2\2")
        buf.write("\u0329\u0327\3\2\2\2\u032a\u032e\78\2\2\u032b\u032d\7")
        buf.write("\67\2\2\u032c\u032b\3\2\2\2\u032d\u0330\3\2\2\2\u032e")
        buf.write("\u032c\3\2\2\2\u032e\u032f\3\2\2\2\u032f\u0332\3\2\2\2")
        buf.write("\u0330\u032e\3\2\2\2\u0331\u0327\3\2\2\2\u0332\u0333\3")
        buf.write("\2\2\2\u0333\u0331\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u033c")
        buf.write("\3\2\2\2\u0335\u0337\5\6\4\2\u0336\u0338\t\2\2\2\u0337")
        buf.write("\u0336\3\2\2\2\u0338\u0339\3\2\2\2\u0339\u0337\3\2\2\2")
        buf.write("\u0339\u033a\3\2\2\2\u033a\u033c\3\2\2\2\u033b\u0315\3")
        buf.write("\2\2\2\u033b\u0323\3\2\2\2\u033b\u0335\3\2\2\2\u033c\u033f")
        buf.write("\3\2\2\2\u033d\u033b\3\2\2\2\u033d\u033e\3\2\2\2\u033e")
        buf.write("\u0355\3\2\2\2\u033f\u033d\3\2\2\2\u0340\u0344\5$\23\2")
        buf.write("\u0341\u0343\t\2\2\2\u0342\u0341\3\2\2\2\u0343\u0346\3")
        buf.write("\2\2\2\u0344\u0342\3\2\2\2\u0344\u0345\3\2\2\2\u0345\u034d")
        buf.write("\3\2\2\2\u0346\u0344\3\2\2\2\u0347\u034e\7\3\2\2\u0348")
        buf.write("\u034a\t\2\2\2\u0349\u0348\3\2\2\2\u034a\u034b\3\2\2\2")
        buf.write("\u034b\u0349\3\2\2\2\u034b\u034c\3\2\2\2\u034c\u034e\3")
        buf.write("\2\2\2\u034d\u0347\3\2\2\2\u034d\u0349\3\2\2\2\u034e\u0356")
        buf.write("\3\2\2\2\u034f\u0351\5\6\4\2\u0350\u0352\t\2\2\2\u0351")
        buf.write("\u0350\3\2\2\2\u0352\u0353\3\2\2\2\u0353\u0351\3\2\2\2")
        buf.write("\u0353\u0354\3\2\2\2\u0354\u0356\3\2\2\2\u0355\u0340\3")
        buf.write("\2\2\2\u0355\u034f\3\2\2\2\u0356\u0358\3\2\2\2\u0357\u033d")
        buf.write("\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u0359\3\2\2\2\u0359")
        buf.write("\u035a\7\23\2\2\u035a\13\3\2\2\2\u035b\u035c\5\16\b\2")
        buf.write("\u035c\u0360\5\20\t\2\u035d\u035f\5\22\n\2\u035e\u035d")
        buf.write("\3\2\2\2\u035f\u0362\3\2\2\2\u0360\u035e\3\2\2\2\u0360")
        buf.write("\u0361\3\2\2\2\u0361\u0364\3\2\2\2\u0362\u0360\3\2\2\2")
        buf.write("\u0363\u0365\5\24\13\2\u0364\u0363\3\2\2\2\u0364\u0365")
        buf.write("\3\2\2\2\u0365\u0366\3\2\2\2\u0366\u0367\7\23\2\2\u0367")
        buf.write("\u0376\3\2\2\2\u0368\u0369\5\16\b\2\u0369\u036d\5\20\t")
        buf.write("\2\u036a\u036c\5\22\n\2\u036b\u036a\3\2\2\2\u036c\u036f")
        buf.write("\3\2\2\2\u036d\u036b\3\2\2\2\u036d\u036e\3\2\2\2\u036e")
        buf.write("\u0371\3\2\2\2\u036f\u036d\3\2\2\2\u0370\u0372\5\24\13")
        buf.write("\2\u0371\u0370\3\2\2\2\u0371\u0372\3\2\2\2\u0372\u0373")
        buf.write("\3\2\2\2\u0373\u0374\b\7\1\2\u0374\u0376\3\2\2\2\u0375")
        buf.write("\u035b\3\2\2\2\u0375\u0368\3\2\2\2\u0376\r\3\2\2\2\u0377")
        buf.write("\u0379\7\17\2\2\u0378\u037a\t\2\2\2\u0379\u0378\3\2\2")
        buf.write("\2\u037a\u037b\3\2\2\2\u037b\u0379\3\2\2\2\u037b\u037c")
        buf.write("\3\2\2\2\u037c\u037d\3\2\2\2\u037d\u037f\5\26\f\2\u037e")
        buf.write("\u0380\t\2\2\2\u037f\u037e\3\2\2\2\u0380\u0381\3\2\2\2")
        buf.write("\u0381\u037f\3\2\2\2\u0381\u0382\3\2\2\2\u0382\17\3\2")
        buf.write("\2\2\u0383\u0385\7\20\2\2\u0384\u0386\t\2\2\2\u0385\u0384")
        buf.write("\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u0385\3\2\2\2\u0387")
        buf.write("\u0388\3\2\2\2\u0388\u03cb\3\2\2\2\u0389\u038d\5$\23\2")
        buf.write("\u038a\u038c\t\2\2\2\u038b\u038a\3\2\2\2\u038c\u038f\3")
        buf.write("\2\2\2\u038d\u038b\3\2\2\2\u038d\u038e\3\2\2\2\u038e\u0390")
        buf.write("\3\2\2\2\u038f\u038d\3\2\2\2\u0390\u0394\7\3\2\2\u0391")
        buf.write("\u0393\t\2\2\2\u0392\u0391\3\2\2\2\u0393\u0396\3\2\2\2")
        buf.write("\u0394\u0392\3\2\2\2\u0394\u0395\3\2\2\2\u0395\u03b0\3")
        buf.write("\2\2\2\u0396\u0394\3\2\2\2\u0397\u03a5\5$\23\2\u0398\u039a")
        buf.write("\7\67\2\2\u0399\u0398\3\2\2\2\u039a\u039d\3\2\2\2\u039b")
        buf.write("\u0399\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039e\3\2\2\2")
        buf.write("\u039d\u039b\3\2\2\2\u039e\u03a2\78\2\2\u039f\u03a1\7")
        buf.write("\67\2\2\u03a0\u039f\3\2\2\2\u03a1\u03a4\3\2\2\2\u03a2")
        buf.write("\u03a0\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a6\3\2\2\2")
        buf.write("\u03a4\u03a2\3\2\2\2\u03a5\u039b\3\2\2\2\u03a6\u03a7\3")
        buf.write("\2\2\2\u03a7\u03a5\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03b0")
        buf.write("\3\2\2\2\u03a9\u03ab\5\6\4\2\u03aa\u03ac\t\2\2\2\u03ab")
        buf.write("\u03aa\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03ab\3\2\2\2")
        buf.write("\u03ad\u03ae\3\2\2\2\u03ae\u03b0\3\2\2\2\u03af\u0389\3")
        buf.write("\2\2\2\u03af\u0397\3\2\2\2\u03af\u03a9\3\2\2\2\u03b0\u03b3")
        buf.write("\3\2\2\2\u03b1\u03af\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2")
        buf.write("\u03c9\3\2\2\2\u03b3\u03b1\3\2\2\2\u03b4\u03b8\5$\23\2")
        buf.write("\u03b5\u03b7\t\2\2\2\u03b6\u03b5\3\2\2\2\u03b7\u03ba\3")
        buf.write("\2\2\2\u03b8\u03b6\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03c1")
        buf.write("\3\2\2\2\u03ba\u03b8\3\2\2\2\u03bb\u03c2\7\3\2\2\u03bc")
        buf.write("\u03be\t\2\2\2\u03bd\u03bc\3\2\2\2\u03be\u03bf\3\2\2\2")
        buf.write("\u03bf\u03bd\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\u03c2\3")
        buf.write("\2\2\2\u03c1\u03bb\3\2\2\2\u03c1\u03bd\3\2\2\2\u03c2\u03ca")
        buf.write("\3\2\2\2\u03c3\u03c5\5\6\4\2\u03c4\u03c6\t\2\2\2\u03c5")
        buf.write("\u03c4\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03c5\3\2\2\2")
        buf.write("\u03c7\u03c8\3\2\2\2\u03c8\u03ca\3\2\2\2\u03c9\u03b4\3")
        buf.write("\2\2\2\u03c9\u03c3\3\2\2\2\u03ca\u03cc\3\2\2\2\u03cb\u03b1")
        buf.write("\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u0419\3\2\2\2\u03cd")
        buf.write("\u03ce\7\16\2\2\u03ce\u03d0\b\t\1\2\u03cf\u03d1\t\2\2")
        buf.write("\2\u03d0\u03cf\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d0")
        buf.write("\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u0416\3\2\2\2\u03d4")
        buf.write("\u03d8\5$\23\2\u03d5\u03d7\t\2\2\2\u03d6\u03d5\3\2\2\2")
        buf.write("\u03d7\u03da\3\2\2\2\u03d8\u03d6\3\2\2\2\u03d8\u03d9\3")
        buf.write("\2\2\2\u03d9\u03db\3\2\2\2\u03da\u03d8\3\2\2\2\u03db\u03df")
        buf.write("\7\3\2\2\u03dc\u03de\t\2\2\2\u03dd\u03dc\3\2\2\2\u03de")
        buf.write("\u03e1\3\2\2\2\u03df\u03dd\3\2\2\2\u03df\u03e0\3\2\2\2")
        buf.write("\u03e0\u03fb\3\2\2\2\u03e1\u03df\3\2\2\2\u03e2\u03f0\5")
        buf.write("$\23\2\u03e3\u03e5\7\67\2\2\u03e4\u03e3\3\2\2\2\u03e5")
        buf.write("\u03e8\3\2\2\2\u03e6\u03e4\3\2\2\2\u03e6\u03e7\3\2\2\2")
        buf.write("\u03e7\u03e9\3\2\2\2\u03e8\u03e6\3\2\2\2\u03e9\u03ed\7")
        buf.write("8\2\2\u03ea\u03ec\7\67\2\2\u03eb\u03ea\3\2\2\2\u03ec\u03ef")
        buf.write("\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee")
        buf.write("\u03f1\3\2\2\2\u03ef\u03ed\3\2\2\2\u03f0\u03e6\3\2\2\2")
        buf.write("\u03f1\u03f2\3\2\2\2\u03f2\u03f0\3\2\2\2\u03f2\u03f3\3")
        buf.write("\2\2\2\u03f3\u03fb\3\2\2\2\u03f4\u03f6\5\6\4\2\u03f5\u03f7")
        buf.write("\t\2\2\2\u03f6\u03f5\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8")
        buf.write("\u03f6\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9\u03fb\3\2\2\2")
        buf.write("\u03fa\u03d4\3\2\2\2\u03fa\u03e2\3\2\2\2\u03fa\u03f4\3")
        buf.write("\2\2\2\u03fb\u03fe\3\2\2\2\u03fc\u03fa\3\2\2\2\u03fc\u03fd")
        buf.write("\3\2\2\2\u03fd\u0414\3\2\2\2\u03fe\u03fc\3\2\2\2\u03ff")
        buf.write("\u0403\5$\23\2\u0400\u0402\t\2\2\2\u0401\u0400\3\2\2\2")
        buf.write("\u0402\u0405\3\2\2\2\u0403\u0401\3\2\2\2\u0403\u0404\3")
        buf.write("\2\2\2\u0404\u040c\3\2\2\2\u0405\u0403\3\2\2\2\u0406\u040d")
        buf.write("\7\3\2\2\u0407\u0409\t\2\2\2\u0408\u0407\3\2\2\2\u0409")
        buf.write("\u040a\3\2\2\2\u040a\u0408\3\2\2\2\u040a\u040b\3\2\2\2")
        buf.write("\u040b\u040d\3\2\2\2\u040c\u0406\3\2\2\2\u040c\u0408\3")
        buf.write("\2\2\2\u040d\u0415\3\2\2\2\u040e\u0410\5\6\4\2\u040f\u0411")
        buf.write("\t\2\2\2\u0410\u040f\3\2\2\2\u0411\u0412\3\2\2\2\u0412")
        buf.write("\u0410\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0415\3\2\2\2")
        buf.write("\u0414\u03ff\3\2\2\2\u0414\u040e\3\2\2\2\u0415\u0417\3")
        buf.write("\2\2\2\u0416\u03fc\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u0419")
        buf.write("\3\2\2\2\u0418\u0383\3\2\2\2\u0418\u03cd\3\2\2\2\u0419")
        buf.write("\21\3\2\2\2\u041a\u041c\7\21\2\2\u041b\u041d\t\2\2\2\u041c")
        buf.write("\u041b\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u041c\3\2\2\2")
        buf.write("\u041e\u041f\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u0421\5")
        buf.write("\16\b\2\u0421\u0422\5\20\t\2\u0422\23\3\2\2\2\u0423\u0425")
        buf.write("\7\21\2\2\u0424\u0426\t\2\2\2\u0425\u0424\3\2\2\2\u0426")
        buf.write("\u0427\3\2\2\2\u0427\u0425\3\2\2\2\u0427\u0428\3\2\2\2")
        buf.write("\u0428\u046b\3\2\2\2\u0429\u042d\5$\23\2\u042a\u042c\t")
        buf.write("\2\2\2\u042b\u042a\3\2\2\2\u042c\u042f\3\2\2\2\u042d\u042b")
        buf.write("\3\2\2\2\u042d\u042e\3\2\2\2\u042e\u0430\3\2\2\2\u042f")
        buf.write("\u042d\3\2\2\2\u0430\u0434\7\3\2\2\u0431\u0433\t\2\2\2")
        buf.write("\u0432\u0431\3\2\2\2\u0433\u0436\3\2\2\2\u0434\u0432\3")
        buf.write("\2\2\2\u0434\u0435\3\2\2\2\u0435\u0450\3\2\2\2\u0436\u0434")
        buf.write("\3\2\2\2\u0437\u0445\5$\23\2\u0438\u043a\7\67\2\2\u0439")
        buf.write("\u0438\3\2\2\2\u043a\u043d\3\2\2\2\u043b\u0439\3\2\2\2")
        buf.write("\u043b\u043c\3\2\2\2\u043c\u043e\3\2\2\2\u043d\u043b\3")
        buf.write("\2\2\2\u043e\u0442\78\2\2\u043f\u0441\7\67\2\2\u0440\u043f")
        buf.write("\3\2\2\2\u0441\u0444\3\2\2\2\u0442\u0440\3\2\2\2\u0442")
        buf.write("\u0443\3\2\2\2\u0443\u0446\3\2\2\2\u0444\u0442\3\2\2\2")
        buf.write("\u0445\u043b\3\2\2\2\u0446\u0447\3\2\2\2\u0447\u0445\3")
        buf.write("\2\2\2\u0447\u0448\3\2\2\2\u0448\u0450\3\2\2\2\u0449\u044b")
        buf.write("\5\6\4\2\u044a\u044c\t\2\2\2\u044b\u044a\3\2\2\2\u044c")
        buf.write("\u044d\3\2\2\2\u044d\u044b\3\2\2\2\u044d\u044e\3\2\2\2")
        buf.write("\u044e\u0450\3\2\2\2\u044f\u0429\3\2\2\2\u044f\u0437\3")
        buf.write("\2\2\2\u044f\u0449\3\2\2\2\u0450\u0453\3\2\2\2\u0451\u044f")
        buf.write("\3\2\2\2\u0451\u0452\3\2\2\2\u0452\u0469\3\2\2\2\u0453")
        buf.write("\u0451\3\2\2\2\u0454\u0458\5$\23\2\u0455\u0457\t\2\2\2")
        buf.write("\u0456\u0455\3\2\2\2\u0457\u045a\3\2\2\2\u0458\u0456\3")
        buf.write("\2\2\2\u0458\u0459\3\2\2\2\u0459\u0461\3\2\2\2\u045a\u0458")
        buf.write("\3\2\2\2\u045b\u0462\7\3\2\2\u045c\u045e\t\2\2\2\u045d")
        buf.write("\u045c\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u045d\3\2\2\2")
        buf.write("\u045f\u0460\3\2\2\2\u0460\u0462\3\2\2\2\u0461\u045b\3")
        buf.write("\2\2\2\u0461\u045d\3\2\2\2\u0462\u046a\3\2\2\2\u0463\u0465")
        buf.write("\5\6\4\2\u0464\u0466\t\2\2\2\u0465\u0464\3\2\2\2\u0466")
        buf.write("\u0467\3\2\2\2\u0467\u0465\3\2\2\2\u0467\u0468\3\2\2\2")
        buf.write("\u0468\u046a\3\2\2\2\u0469\u0454\3\2\2\2\u0469\u0463\3")
        buf.write("\2\2\2\u046a\u046c\3\2\2\2\u046b\u0451\3\2\2\2\u046b\u046c")
        buf.write("\3\2\2\2\u046c\25\3\2\2\2\u046d\u047e\5\30\r\2\u046e\u0470")
        buf.write("\t\2\2\2\u046f\u046e\3\2\2\2\u0470\u0473\3\2\2\2\u0471")
        buf.write("\u046f\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0474\3\2\2\2")
        buf.write("\u0473\u0471\3\2\2\2\u0474\u0478\7\61\2\2\u0475\u0477")
        buf.write("\t\2\2\2\u0476\u0475\3\2\2\2\u0477\u047a\3\2\2\2\u0478")
        buf.write("\u0476\3\2\2\2\u0478\u0479\3\2\2\2\u0479\u047b\3\2\2\2")
        buf.write("\u047a\u0478\3\2\2\2\u047b\u047d\5\30\r\2\u047c\u0471")
        buf.write("\3\2\2\2\u047d\u0480\3\2\2\2\u047e\u047c\3\2\2\2\u047e")
        buf.write("\u047f\3\2\2\2\u047f\27\3\2\2\2\u0480\u047e\3\2\2\2\u0481")
        buf.write("\u0483\7\62\2\2\u0482\u0481\3\2\2\2\u0482\u0483\3\2\2")
        buf.write("\2\u0483\u0487\3\2\2\2\u0484\u0486\t\2\2\2\u0485\u0484")
        buf.write("\3\2\2\2\u0486\u0489\3\2\2\2\u0487\u0485\3\2\2\2\u0487")
        buf.write("\u0488\3\2\2\2\u0488\u048d\3\2\2\2\u0489\u0487\3\2\2\2")
        buf.write("\u048a\u048e\5\"\22\2\u048b\u048e\7\63\2\2\u048c\u048e")
        buf.write("\5\32\16\2\u048d\u048a\3\2\2\2\u048d\u048b\3\2\2\2\u048d")
        buf.write("\u048c\3\2\2\2\u048e\31\3\2\2\2\u048f\u0493\5\34\17\2")
        buf.write("\u0490\u0492\t\2\2\2\u0491\u0490\3\2\2\2\u0492\u0495\3")
        buf.write("\2\2\2\u0493\u0491\3\2\2\2\u0493\u0494\3\2\2\2\u0494\u0496")
        buf.write("\3\2\2\2\u0495\u0493\3\2\2\2\u0496\u049a\7.\2\2\u0497")
        buf.write("\u0499\t\2\2\2\u0498\u0497\3\2\2\2\u0499\u049c\3\2\2\2")
        buf.write("\u049a\u0498\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u049d\3")
        buf.write("\2\2\2\u049c\u049a\3\2\2\2\u049d\u049e\5\34\17\2\u049e")
        buf.write("\33\3\2\2\2\u049f\u04a9\5\"\22\2\u04a0\u04a9\7\64\2\2")
        buf.write("\u04a1\u04a9\7\66\2\2\u04a2\u04a9\7\65\2\2\u04a3\u04a9")
        buf.write("\7\63\2\2\u04a4\u04a9\5\36\20\2\u04a5\u04a9\5Z.\2\u04a6")
        buf.write("\u04a9\5*\26\2\u04a7\u04a9\5 \21\2\u04a8\u049f\3\2\2\2")
        buf.write("\u04a8\u04a0\3\2\2\2\u04a8\u04a1\3\2\2\2\u04a8\u04a2\3")
        buf.write("\2\2\2\u04a8\u04a3\3\2\2\2\u04a8\u04a4\3\2\2\2\u04a8\u04a5")
        buf.write("\3\2\2\2\u04a8\u04a6\3\2\2\2\u04a8\u04a7\3\2\2\2\u04a9")
        buf.write("\35\3\2\2\2\u04aa\u04b9\5\\/\2\u04ab\u04ad\t\2\2\2\u04ac")
        buf.write("\u04ab\3\2\2\2\u04ad\u04b0\3\2\2\2\u04ae\u04ac\3\2\2\2")
        buf.write("\u04ae\u04af\3\2\2\2\u04af\u04b1\3\2\2\2\u04b0\u04ae\3")
        buf.write("\2\2\2\u04b1\u04b5\7/\2\2\u04b2\u04b4\t\2\2\2\u04b3\u04b2")
        buf.write("\3\2\2\2\u04b4\u04b7\3\2\2\2\u04b5\u04b3\3\2\2\2\u04b5")
        buf.write("\u04b6\3\2\2\2\u04b6\u04b8\3\2\2\2\u04b7\u04b5\3\2\2\2")
        buf.write("\u04b8\u04ba\5\\/\2\u04b9\u04ae\3\2\2\2\u04ba\u04bb\3")
        buf.write("\2\2\2\u04bb\u04b9\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\37")
        buf.write("\3\2\2\2\u04bd\u04cc\5\\/\2\u04be\u04c0\t\2\2\2\u04bf")
        buf.write("\u04be\3\2\2\2\u04c0\u04c3\3\2\2\2\u04c1\u04bf\3\2\2\2")
        buf.write("\u04c1\u04c2\3\2\2\2\u04c2\u04c4\3\2\2\2\u04c3\u04c1\3")
        buf.write("\2\2\2\u04c4\u04c8\7\60\2\2\u04c5\u04c7\t\2\2\2\u04c6")
        buf.write("\u04c5\3\2\2\2\u04c7\u04ca\3\2\2\2\u04c8\u04c6\3\2\2\2")
        buf.write("\u04c8\u04c9\3\2\2\2\u04c9\u04cb\3\2\2\2\u04ca\u04c8\3")
        buf.write("\2\2\2\u04cb\u04cd\5\\/\2\u04cc\u04c1\3\2\2\2\u04cd\u04ce")
        buf.write("\3\2\2\2\u04ce\u04cc\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf")
        buf.write("!\3\2\2\2\u04d0\u04ea\5.\30\2\u04d1\u04ea\5\60\31\2\u04d2")
        buf.write("\u04ea\5\66\34\2\u04d3\u04ea\58\35\2\u04d4\u04ea\5V,\2")
        buf.write("\u04d5\u04ea\5:\36\2\u04d6\u04ea\5<\37\2\u04d7\u04ea\5")
        buf.write("> \2\u04d8\u04ea\5@!\2\u04d9\u04ea\5B\"\2\u04da\u04ea")
        buf.write("\5D#\2\u04db\u04ea\5F$\2\u04dc\u04ea\5H%\2\u04dd\u04ea")
        buf.write("\5J&\2\u04de\u04ea\5L\'\2\u04df\u04ea\5N(\2\u04e0\u04ea")
        buf.write("\5P)\2\u04e1\u04ea\5R*\2\u04e2\u04ea\5T+\2\u04e3\u04ea")
        buf.write("\5\64\33\2\u04e4\u04ea\5\62\32\2\u04e5\u04ea\7!\2\2\u04e6")
        buf.write("\u04ea\7&\2\2\u04e7\u04ea\7\'\2\2\u04e8\u04ea\5X-\2\u04e9")
        buf.write("\u04d0\3\2\2\2\u04e9\u04d1\3\2\2\2\u04e9\u04d2\3\2\2\2")
        buf.write("\u04e9\u04d3\3\2\2\2\u04e9\u04d4\3\2\2\2\u04e9\u04d5\3")
        buf.write("\2\2\2\u04e9\u04d6\3\2\2\2\u04e9\u04d7\3\2\2\2\u04e9\u04d8")
        buf.write("\3\2\2\2\u04e9\u04d9\3\2\2\2\u04e9\u04da\3\2\2\2\u04e9")
        buf.write("\u04db\3\2\2\2\u04e9\u04dc\3\2\2\2\u04e9\u04dd\3\2\2\2")
        buf.write("\u04e9\u04de\3\2\2\2\u04e9\u04df\3\2\2\2\u04e9\u04e0\3")
        buf.write("\2\2\2\u04e9\u04e1\3\2\2\2\u04e9\u04e2\3\2\2\2\u04e9\u04e3")
        buf.write("\3\2\2\2\u04e9\u04e4\3\2\2\2\u04e9\u04e5\3\2\2\2\u04e9")
        buf.write("\u04e6\3\2\2\2\u04e9\u04e7\3\2\2\2\u04e9\u04e8\3\2\2\2")
        buf.write("\u04ea#\3\2\2\2\u04eb\u0506\5.\30\2\u04ec\u0506\5\60\31")
        buf.write("\2\u04ed\u0506\5\66\34\2\u04ee\u0506\58\35\2\u04ef\u0506")
        buf.write("\5V,\2\u04f0\u0506\5:\36\2\u04f1\u0506\5<\37\2\u04f2\u0506")
        buf.write("\5> \2\u04f3\u0506\5@!\2\u04f4\u0506\5B\"\2\u04f5\u0506")
        buf.write("\5D#\2\u04f6\u0506\5F$\2\u04f7\u0506\5H%\2\u04f8\u0506")
        buf.write("\5J&\2\u04f9\u0506\5L\'\2\u04fa\u0506\5N(\2\u04fb\u0506")
        buf.write("\5P)\2\u04fc\u0506\5R*\2\u04fd\u0506\5(\25\2\u04fe\u0506")
        buf.write("\5&\24\2\u04ff\u0506\5\64\33\2\u0500\u0506\5\62\32\2\u0501")
        buf.write("\u0506\7!\2\2\u0502\u0506\7&\2\2\u0503\u0506\7\'\2\2\u0504")
        buf.write("\u0506\5X-\2\u0505\u04eb\3\2\2\2\u0505\u04ec\3\2\2\2\u0505")
        buf.write("\u04ed\3\2\2\2\u0505\u04ee\3\2\2\2\u0505\u04ef\3\2\2\2")
        buf.write("\u0505\u04f0\3\2\2\2\u0505\u04f1\3\2\2\2\u0505\u04f2\3")
        buf.write("\2\2\2\u0505\u04f3\3\2\2\2\u0505\u04f4\3\2\2\2\u0505\u04f5")
        buf.write("\3\2\2\2\u0505\u04f6\3\2\2\2\u0505\u04f7\3\2\2\2\u0505")
        buf.write("\u04f8\3\2\2\2\u0505\u04f9\3\2\2\2\u0505\u04fa\3\2\2\2")
        buf.write("\u0505\u04fb\3\2\2\2\u0505\u04fc\3\2\2\2\u0505\u04fd\3")
        buf.write("\2\2\2\u0505\u04fe\3\2\2\2\u0505\u04ff\3\2\2\2\u0505\u0500")
        buf.write("\3\2\2\2\u0505\u0501\3\2\2\2\u0505\u0502\3\2\2\2\u0505")
        buf.write("\u0503\3\2\2\2\u0505\u0504\3\2\2\2\u0506%\3\2\2\2\u0507")
        buf.write("\u050a\7\65\2\2\u0508\u050a\5*\26\2\u0509\u0507\3\2\2")
        buf.write("\2\u0509\u0508\3\2\2\2\u050a\u050e\3\2\2\2\u050b\u050d")
        buf.write("\t\2\2\2\u050c\u050b\3\2\2\2\u050d\u0510\3\2\2\2\u050e")
        buf.write("\u050c\3\2\2\2\u050e\u050f\3\2\2\2\u050f\u0511\3\2\2\2")
        buf.write("\u0510\u050e\3\2\2\2\u0511\u0515\7\7\2\2\u0512\u0514\t")
        buf.write("\2\2\2\u0513\u0512\3\2\2\2\u0514\u0517\3\2\2\2\u0515\u0513")
        buf.write("\3\2\2\2\u0515\u0516\3\2\2\2\u0516\u0518\3\2\2\2\u0517")
        buf.write("\u0515\3\2\2\2\u0518\u0519\5\34\17\2\u0519\'\3\2\2\2\u051a")
        buf.write("\u051e\7\65\2\2\u051b\u051d\t\2\2\2\u051c\u051b\3\2\2")
        buf.write("\2\u051d\u0520\3\2\2\2\u051e\u051c\3\2\2\2\u051e\u051f")
        buf.write("\3\2\2\2\u051f\u0521\3\2\2\2\u0520\u051e\3\2\2\2\u0521")
        buf.write("\u0525\7-\2\2\u0522\u0524\t\2\2\2\u0523\u0522\3\2\2\2")
        buf.write("\u0524\u0527\3\2\2\2\u0525\u0523\3\2\2\2\u0525\u0526\3")
        buf.write("\2\2\2\u0526\u0528\3\2\2\2\u0527\u0525\3\2\2\2\u0528\u052c")
        buf.write("\5\34\17\2\u0529\u052b\t\2\2\2\u052a\u0529\3\2\2\2\u052b")
        buf.write("\u052e\3\2\2\2\u052c\u052a\3\2\2\2\u052c\u052d\3\2\2\2")
        buf.write("\u052d)\3\2\2\2\u052e\u052c\3\2\2\2\u052f\u0532\7\65\2")
        buf.write("\2\u0530\u0532\5X-\2\u0531\u052f\3\2\2\2\u0531\u0530\3")
        buf.write("\2\2\2\u0532\u0533\3\2\2\2\u0533\u0537\7\b\2\2\u0534\u0536")
        buf.write("\t\2\2\2\u0535\u0534\3\2\2\2\u0536\u0539\3\2\2\2\u0537")
        buf.write("\u0535\3\2\2\2\u0537\u0538\3\2\2\2\u0538\u053a\3\2\2\2")
        buf.write("\u0539\u0537\3\2\2\2\u053a\u053e\5\34\17\2\u053b\u053d")
        buf.write("\t\2\2\2\u053c\u053b\3\2\2\2\u053d\u0540\3\2\2\2\u053e")
        buf.write("\u053c\3\2\2\2\u053e\u053f\3\2\2\2\u053f\u0541\3\2\2\2")
        buf.write("\u0540\u053e\3\2\2\2\u0541\u0542\7\t\2\2\u0542+\3\2\2")
        buf.write("\2\u0543\u0547\7\25\2\2\u0544\u0546\t\2\2\2\u0545\u0544")
        buf.write("\3\2\2\2\u0546\u0549\3\2\2\2\u0547\u0545\3\2\2\2\u0547")
        buf.write("\u0548\3\2\2\2\u0548\u054a\3\2\2\2\u0549\u0547\3\2\2\2")
        buf.write("\u054a\u054b\7\65\2\2\u054b-\3\2\2\2\u054c\u0550\7\65")
        buf.write("\2\2\u054d\u054f\t\2\2\2\u054e\u054d\3\2\2\2\u054f\u0552")
        buf.write("\3\2\2\2\u0550\u054e\3\2\2\2\u0550\u0551\3\2\2\2\u0551")
        buf.write("\u0553\3\2\2\2\u0552\u0550\3\2\2\2\u0553\u0557\7\4\2\2")
        buf.write("\u0554\u0556\t\2\2\2\u0555\u0554\3\2\2\2\u0556\u0559\3")
        buf.write("\2\2\2\u0557\u0555\3\2\2\2\u0557\u0558\3\2\2\2\u0558\u0574")
        buf.write("\3\2\2\2\u0559\u0557\3\2\2\2\u055a\u055e\5\34\17\2\u055b")
        buf.write("\u055d\t\2\2\2\u055c\u055b\3\2\2\2\u055d\u0560\3\2\2\2")
        buf.write("\u055e\u055c\3\2\2\2\u055e\u055f\3\2\2\2\u055f\u0571\3")
        buf.write("\2\2\2\u0560\u055e\3\2\2\2\u0561\u0565\7\5\2\2\u0562\u0564")
        buf.write("\t\2\2\2\u0563\u0562\3\2\2\2\u0564\u0567\3\2\2\2\u0565")
        buf.write("\u0563\3\2\2\2\u0565\u0566\3\2\2\2\u0566\u0568\3\2\2\2")
        buf.write("\u0567\u0565\3\2\2\2\u0568\u056c\5\34\17\2\u0569\u056b")
        buf.write("\t\2\2\2\u056a\u0569\3\2\2\2\u056b\u056e\3\2\2\2\u056c")
        buf.write("\u056a\3\2\2\2\u056c\u056d\3\2\2\2\u056d\u0570\3\2\2\2")
        buf.write("\u056e\u056c\3\2\2\2\u056f\u0561\3\2\2\2\u0570\u0573\3")
        buf.write("\2\2\2\u0571\u056f\3\2\2\2\u0571\u0572\3\2\2\2\u0572\u0575")
        buf.write("\3\2\2\2\u0573\u0571\3\2\2\2\u0574\u055a\3\2\2\2\u0574")
        buf.write("\u0575\3\2\2\2\u0575\u0576\3\2\2\2\u0576\u05ce\7\6\2\2")
        buf.write("\u0577\u057b\7\65\2\2\u0578\u057a\t\2\2\2\u0579\u0578")
        buf.write("\3\2\2\2\u057a\u057d\3\2\2\2\u057b\u0579\3\2\2\2\u057b")
        buf.write("\u057c\3\2\2\2\u057c\u057e\3\2\2\2\u057d\u057b\3\2\2\2")
        buf.write("\u057e\u0582\b\30\1\2\u057f\u0581\t\2\2\2\u0580\u057f")
        buf.write("\3\2\2\2\u0581\u0584\3\2\2\2\u0582\u0580\3\2\2\2\u0582")
        buf.write("\u0583\3\2\2\2\u0583\u059f\3\2\2\2\u0584\u0582\3\2\2\2")
        buf.write("\u0585\u0589\5\34\17\2\u0586\u0588\t\2\2\2\u0587\u0586")
        buf.write("\3\2\2\2\u0588\u058b\3\2\2\2\u0589\u0587\3\2\2\2\u0589")
        buf.write("\u058a\3\2\2\2\u058a\u059c\3\2\2\2\u058b\u0589\3\2\2\2")
        buf.write("\u058c\u0590\7\5\2\2\u058d\u058f\t\2\2\2\u058e\u058d\3")
        buf.write("\2\2\2\u058f\u0592\3\2\2\2\u0590\u058e\3\2\2\2\u0590\u0591")
        buf.write("\3\2\2\2\u0591\u0593\3\2\2\2\u0592\u0590\3\2\2\2\u0593")
        buf.write("\u0597\5\34\17\2\u0594\u0596\t\2\2\2\u0595\u0594\3\2\2")
        buf.write("\2\u0596\u0599\3\2\2\2\u0597\u0595\3\2\2\2\u0597\u0598")
        buf.write("\3\2\2\2\u0598\u059b\3\2\2\2\u0599\u0597\3\2\2\2\u059a")
        buf.write("\u058c\3\2\2\2\u059b\u059e\3\2\2\2\u059c\u059a\3\2\2\2")
        buf.write("\u059c\u059d\3\2\2\2\u059d\u05a0\3\2\2\2\u059e\u059c\3")
        buf.write("\2\2\2\u059f\u0585\3\2\2\2\u059f\u05a0\3\2\2\2\u05a0\u05a1")
        buf.write("\3\2\2\2\u05a1\u05ce\7\6\2\2\u05a2\u05a6\7\65\2\2\u05a3")
        buf.write("\u05a5\t\2\2\2\u05a4\u05a3\3\2\2\2\u05a5\u05a8\3\2\2\2")
        buf.write("\u05a6\u05a4\3\2\2\2\u05a6\u05a7\3\2\2\2\u05a7\u05a9\3")
        buf.write("\2\2\2\u05a8\u05a6\3\2\2\2\u05a9\u05ad\7\4\2\2\u05aa\u05ac")
        buf.write("\t\2\2\2\u05ab\u05aa\3\2\2\2\u05ac\u05af\3\2\2\2\u05ad")
        buf.write("\u05ab\3\2\2\2\u05ad\u05ae\3\2\2\2\u05ae\u05ca\3\2\2\2")
        buf.write("\u05af\u05ad\3\2\2\2\u05b0\u05b4\5\34\17\2\u05b1\u05b3")
        buf.write("\t\2\2\2\u05b2\u05b1\3\2\2\2\u05b3\u05b6\3\2\2\2\u05b4")
        buf.write("\u05b2\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5\u05c7\3\2\2\2")
        buf.write("\u05b6\u05b4\3\2\2\2\u05b7\u05bb\7\5\2\2\u05b8\u05ba\t")
        buf.write("\2\2\2\u05b9\u05b8\3\2\2\2\u05ba\u05bd\3\2\2\2\u05bb\u05b9")
        buf.write("\3\2\2\2\u05bb\u05bc\3\2\2\2\u05bc\u05be\3\2\2\2\u05bd")
        buf.write("\u05bb\3\2\2\2\u05be\u05c2\5\34\17\2\u05bf\u05c1\t\2\2")
        buf.write("\2\u05c0\u05bf\3\2\2\2\u05c1\u05c4\3\2\2\2\u05c2\u05c0")
        buf.write("\3\2\2\2\u05c2\u05c3\3\2\2\2\u05c3\u05c6\3\2\2\2\u05c4")
        buf.write("\u05c2\3\2\2\2\u05c5\u05b7\3\2\2\2\u05c6\u05c9\3\2\2\2")
        buf.write("\u05c7\u05c5\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05cb\3")
        buf.write("\2\2\2\u05c9\u05c7\3\2\2\2\u05ca\u05b0\3\2\2\2\u05ca\u05cb")
        buf.write("\3\2\2\2\u05cb\u05cc\3\2\2\2\u05cc\u05ce\b\30\1\2\u05cd")
        buf.write("\u054c\3\2\2\2\u05cd\u0577\3\2\2\2\u05cd\u05a2\3\2\2\2")
        buf.write("\u05ce/\3\2\2\2\u05cf\u05d3\7\26\2\2\u05d0\u05d2\t\2\2")
        buf.write("\2\u05d1\u05d0\3\2\2\2\u05d2\u05d5\3\2\2\2\u05d3\u05d1")
        buf.write("\3\2\2\2\u05d3\u05d4\3\2\2\2\u05d4\u05d6\3\2\2\2\u05d5")
        buf.write("\u05d3\3\2\2\2\u05d6\u05da\7\4\2\2\u05d7\u05d9\t\2\2\2")
        buf.write("\u05d8\u05d7\3\2\2\2\u05d9\u05dc\3\2\2\2\u05da\u05d8\3")
        buf.write("\2\2\2\u05da\u05db\3\2\2\2\u05db\u05dd\3\2\2\2\u05dc\u05da")
        buf.write("\3\2\2\2\u05dd\u05e1\5\34\17\2\u05de\u05e0\t\2\2\2\u05df")
        buf.write("\u05de\3\2\2\2\u05e0\u05e3\3\2\2\2\u05e1\u05df\3\2\2\2")
        buf.write("\u05e1\u05e2\3\2\2\2\u05e2\u05e4\3\2\2\2\u05e3\u05e1\3")
        buf.write("\2\2\2\u05e4\u05e5\7\6\2\2\u05e5\u0624\3\2\2\2\u05e6\u05ea")
        buf.write("\7\26\2\2\u05e7\u05e9\t\2\2\2\u05e8\u05e7\3\2\2\2\u05e9")
        buf.write("\u05ec\3\2\2\2\u05ea\u05e8\3\2\2\2\u05ea\u05eb\3\2\2\2")
        buf.write("\u05eb\u05ed\3\2\2\2\u05ec\u05ea\3\2\2\2\u05ed\u05f1\b")
        buf.write("\31\1\2\u05ee\u05f0\t\2\2\2\u05ef\u05ee\3\2\2\2\u05f0")
        buf.write("\u05f3\3\2\2\2\u05f1\u05ef\3\2\2\2\u05f1\u05f2\3\2\2\2")
        buf.write("\u05f2\u05f4\3\2\2\2\u05f3\u05f1\3\2\2\2\u05f4\u05f8\5")
        buf.write("\34\17\2\u05f5\u05f7\t\2\2\2\u05f6\u05f5\3\2\2\2\u05f7")
        buf.write("\u05fa\3\2\2\2\u05f8\u05f6\3\2\2\2\u05f8\u05f9\3\2\2\2")
        buf.write("\u05f9\u05fb\3\2\2\2\u05fa\u05f8\3\2\2\2\u05fb\u05fc\7")
        buf.write("\6\2\2\u05fc\u0624\3\2\2\2\u05fd\u0601\7\26\2\2\u05fe")
        buf.write("\u0600\t\2\2\2\u05ff\u05fe\3\2\2\2\u0600\u0603\3\2\2\2")
        buf.write("\u0601\u05ff\3\2\2\2\u0601\u0602\3\2\2\2\u0602\u0604\3")
        buf.write("\2\2\2\u0603\u0601\3\2\2\2\u0604\u0608\7\4\2\2\u0605\u0607")
        buf.write("\t\2\2\2\u0606\u0605\3\2\2\2\u0607\u060a\3\2\2\2\u0608")
        buf.write("\u0606\3\2\2\2\u0608\u0609\3\2\2\2\u0609\u060b\3\2\2\2")
        buf.write("\u060a\u0608\3\2\2\2\u060b\u060c\5\34\17\2\u060c\u060d")
        buf.write("\b\31\1\2\u060d\u0624\3\2\2\2\u060e\u0612\7\26\2\2\u060f")
        buf.write("\u0611\t\2\2\2\u0610\u060f\3\2\2\2\u0611\u0614\3\2\2\2")
        buf.write("\u0612\u0610\3\2\2\2\u0612\u0613\3\2\2\2\u0613\u0615\3")
        buf.write("\2\2\2\u0614\u0612\3\2\2\2\u0615\u0619\b\31\1\2\u0616")
        buf.write("\u0618\t\2\2\2\u0617\u0616\3\2\2\2\u0618\u061b\3\2\2\2")
        buf.write("\u0619\u0617\3\2\2\2\u0619\u061a\3\2\2\2\u061a\u061c\3")
        buf.write("\2\2\2\u061b\u0619\3\2\2\2\u061c\u0620\5\34\17\2\u061d")
        buf.write("\u061f\t\2\2\2\u061e\u061d\3\2\2\2\u061f\u0622\3\2\2\2")
        buf.write("\u0620\u061e\3\2\2\2\u0620\u0621\3\2\2\2\u0621\u0624\3")
        buf.write("\2\2\2\u0622\u0620\3\2\2\2\u0623\u05cf\3\2\2\2\u0623\u05e6")
        buf.write("\3\2\2\2\u0623\u05fd\3\2\2\2\u0623\u060e\3\2\2\2\u0624")
        buf.write("\61\3\2\2\2\u0625\u0629\7%\2\2\u0626\u0628\t\2\2\2\u0627")
        buf.write("\u0626\3\2\2\2\u0628\u062b\3\2\2\2\u0629\u0627\3\2\2\2")
        buf.write("\u0629\u062a\3\2\2\2\u062a\u062c\3\2\2\2\u062b\u0629\3")
        buf.write("\2\2\2\u062c\u0630\7\4\2\2\u062d\u062f\t\2\2\2\u062e\u062d")
        buf.write("\3\2\2\2\u062f\u0632\3\2\2\2\u0630\u062e\3\2\2\2\u0630")
        buf.write("\u0631\3\2\2\2\u0631\u0633\3\2\2\2\u0632\u0630\3\2\2\2")
        buf.write("\u0633\u0637\5\34\17\2\u0634\u0636\t\2\2\2\u0635\u0634")
        buf.write("\3\2\2\2\u0636\u0639\3\2\2\2\u0637\u0635\3\2\2\2\u0637")
        buf.write("\u0638\3\2\2\2\u0638\u063a\3\2\2\2\u0639\u0637\3\2\2\2")
        buf.write("\u063a\u063b\7\6\2\2\u063b\u067a\3\2\2\2\u063c\u0640\7")
        buf.write("%\2\2\u063d\u063f\t\2\2\2\u063e\u063d\3\2\2\2\u063f\u0642")
        buf.write("\3\2\2\2\u0640\u063e\3\2\2\2\u0640\u0641\3\2\2\2\u0641")
        buf.write("\u0643\3\2\2\2\u0642\u0640\3\2\2\2\u0643\u0647\b\32\1")
        buf.write("\2\u0644\u0646\t\2\2\2\u0645\u0644\3\2\2\2\u0646\u0649")
        buf.write("\3\2\2\2\u0647\u0645\3\2\2\2\u0647\u0648\3\2\2\2\u0648")
        buf.write("\u064a\3\2\2\2\u0649\u0647\3\2\2\2\u064a\u064e\5\34\17")
        buf.write("\2\u064b\u064d\t\2\2\2\u064c\u064b\3\2\2\2\u064d\u0650")
        buf.write("\3\2\2\2\u064e\u064c\3\2\2\2\u064e\u064f\3\2\2\2\u064f")
        buf.write("\u0651\3\2\2\2\u0650\u064e\3\2\2\2\u0651\u0652\7\6\2\2")
        buf.write("\u0652\u067a\3\2\2\2\u0653\u0657\7%\2\2\u0654\u0656\t")
        buf.write("\2\2\2\u0655\u0654\3\2\2\2\u0656\u0659\3\2\2\2\u0657\u0655")
        buf.write("\3\2\2\2\u0657\u0658\3\2\2\2\u0658\u065a\3\2\2\2\u0659")
        buf.write("\u0657\3\2\2\2\u065a\u065e\7\4\2\2\u065b\u065d\t\2\2\2")
        buf.write("\u065c\u065b\3\2\2\2\u065d\u0660\3\2\2\2\u065e\u065c\3")
        buf.write("\2\2\2\u065e\u065f\3\2\2\2\u065f\u0661\3\2\2\2\u0660\u065e")
        buf.write("\3\2\2\2\u0661\u0662\5\34\17\2\u0662\u0663\b\32\1\2\u0663")
        buf.write("\u067a\3\2\2\2\u0664\u0668\7%\2\2\u0665\u0667\t\2\2\2")
        buf.write("\u0666\u0665\3\2\2\2\u0667\u066a\3\2\2\2\u0668\u0666\3")
        buf.write("\2\2\2\u0668\u0669\3\2\2\2\u0669\u066b\3\2\2\2\u066a\u0668")
        buf.write("\3\2\2\2\u066b\u066f\b\32\1\2\u066c\u066e\t\2\2\2\u066d")
        buf.write("\u066c\3\2\2\2\u066e\u0671\3\2\2\2\u066f\u066d\3\2\2\2")
        buf.write("\u066f\u0670\3\2\2\2\u0670\u0672\3\2\2\2\u0671\u066f\3")
        buf.write("\2\2\2\u0672\u0676\5\34\17\2\u0673\u0675\t\2\2\2\u0674")
        buf.write("\u0673\3\2\2\2\u0675\u0678\3\2\2\2\u0676\u0674\3\2\2\2")
        buf.write("\u0676\u0677\3\2\2\2\u0677\u067a\3\2\2\2\u0678\u0676\3")
        buf.write("\2\2\2\u0679\u0625\3\2\2\2\u0679\u063c\3\2\2\2\u0679\u0653")
        buf.write("\3\2\2\2\u0679\u0664\3\2\2\2\u067a\63\3\2\2\2\u067b\u067f")
        buf.write("\7$\2\2\u067c\u067e\t\2\2\2\u067d\u067c\3\2\2\2\u067e")
        buf.write("\u0681\3\2\2\2\u067f\u067d\3\2\2\2\u067f\u0680\3\2\2\2")
        buf.write("\u0680\u0682\3\2\2\2\u0681\u067f\3\2\2\2\u0682\u0686\7")
        buf.write("\4\2\2\u0683\u0685\t\2\2\2\u0684\u0683\3\2\2\2\u0685\u0688")
        buf.write("\3\2\2\2\u0686\u0684\3\2\2\2\u0686\u0687\3\2\2\2\u0687")
        buf.write("\u0689\3\2\2\2\u0688\u0686\3\2\2\2\u0689\u068d\5\34\17")
        buf.write("\2\u068a\u068c\t\2\2\2\u068b\u068a\3\2\2\2\u068c\u068f")
        buf.write("\3\2\2\2\u068d\u068b\3\2\2\2\u068d\u068e\3\2\2\2\u068e")
        buf.write("\u0690\3\2\2\2\u068f\u068d\3\2\2\2\u0690\u0691\7\6\2\2")
        buf.write("\u0691\u06d0\3\2\2\2\u0692\u0696\7$\2\2\u0693\u0695\t")
        buf.write("\2\2\2\u0694\u0693\3\2\2\2\u0695\u0698\3\2\2\2\u0696\u0694")
        buf.write("\3\2\2\2\u0696\u0697\3\2\2\2\u0697\u0699\3\2\2\2\u0698")
        buf.write("\u0696\3\2\2\2\u0699\u069d\b\33\1\2\u069a\u069c\t\2\2")
        buf.write("\2\u069b\u069a\3\2\2\2\u069c\u069f\3\2\2\2\u069d\u069b")
        buf.write("\3\2\2\2\u069d\u069e\3\2\2\2\u069e\u06a0\3\2\2\2\u069f")
        buf.write("\u069d\3\2\2\2\u06a0\u06a4\5\34\17\2\u06a1\u06a3\t\2\2")
        buf.write("\2\u06a2\u06a1\3\2\2\2\u06a3\u06a6\3\2\2\2\u06a4\u06a2")
        buf.write("\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5\u06a7\3\2\2\2\u06a6")
        buf.write("\u06a4\3\2\2\2\u06a7\u06a8\7\6\2\2\u06a8\u06d0\3\2\2\2")
        buf.write("\u06a9\u06ad\7$\2\2\u06aa\u06ac\t\2\2\2\u06ab\u06aa\3")
        buf.write("\2\2\2\u06ac\u06af\3\2\2\2\u06ad\u06ab\3\2\2\2\u06ad\u06ae")
        buf.write("\3\2\2\2\u06ae\u06b0\3\2\2\2\u06af\u06ad\3\2\2\2\u06b0")
        buf.write("\u06b4\7\4\2\2\u06b1\u06b3\t\2\2\2\u06b2\u06b1\3\2\2\2")
        buf.write("\u06b3\u06b6\3\2\2\2\u06b4\u06b2\3\2\2\2\u06b4\u06b5\3")
        buf.write("\2\2\2\u06b5\u06b7\3\2\2\2\u06b6\u06b4\3\2\2\2\u06b7\u06b8")
        buf.write("\5\34\17\2\u06b8\u06b9\b\33\1\2\u06b9\u06d0\3\2\2\2\u06ba")
        buf.write("\u06be\7$\2\2\u06bb\u06bd\t\2\2\2\u06bc\u06bb\3\2\2\2")
        buf.write("\u06bd\u06c0\3\2\2\2\u06be\u06bc\3\2\2\2\u06be\u06bf\3")
        buf.write("\2\2\2\u06bf\u06c1\3\2\2\2\u06c0\u06be\3\2\2\2\u06c1\u06c5")
        buf.write("\b\33\1\2\u06c2\u06c4\t\2\2\2\u06c3\u06c2\3\2\2\2\u06c4")
        buf.write("\u06c7\3\2\2\2\u06c5\u06c3\3\2\2\2\u06c5\u06c6\3\2\2\2")
        buf.write("\u06c6\u06c8\3\2\2\2\u06c7\u06c5\3\2\2\2\u06c8\u06cc\5")
        buf.write("\34\17\2\u06c9\u06cb\t\2\2\2\u06ca\u06c9\3\2\2\2\u06cb")
        buf.write("\u06ce\3\2\2\2\u06cc\u06ca\3\2\2\2\u06cc\u06cd\3\2\2\2")
        buf.write("\u06cd\u06d0\3\2\2\2\u06ce\u06cc\3\2\2\2\u06cf\u067b\3")
        buf.write("\2\2\2\u06cf\u0692\3\2\2\2\u06cf\u06a9\3\2\2\2\u06cf\u06ba")
        buf.write("\3\2\2\2\u06d0\65\3\2\2\2\u06d1\u06d5\7\27\2\2\u06d2\u06d4")
        buf.write("\t\2\2\2\u06d3\u06d2\3\2\2\2\u06d4\u06d7\3\2\2\2\u06d5")
        buf.write("\u06d3\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d6\u06d8\3\2\2\2")
        buf.write("\u06d7\u06d5\3\2\2\2\u06d8\u06dc\7\4\2\2\u06d9\u06db\t")
        buf.write("\2\2\2\u06da\u06d9\3\2\2\2\u06db\u06de\3\2\2\2\u06dc\u06da")
        buf.write("\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd\u06df\3\2\2\2\u06de")
        buf.write("\u06dc\3\2\2\2\u06df\u06e3\5\34\17\2\u06e0\u06e2\t\2\2")
        buf.write("\2\u06e1\u06e0\3\2\2\2\u06e2\u06e5\3\2\2\2\u06e3\u06e1")
        buf.write("\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4\u06e6\3\2\2\2\u06e5")
        buf.write("\u06e3\3\2\2\2\u06e6\u06e7\7\6\2\2\u06e7\u0726\3\2\2\2")
        buf.write("\u06e8\u06ec\7\27\2\2\u06e9\u06eb\t\2\2\2\u06ea\u06e9")
        buf.write("\3\2\2\2\u06eb\u06ee\3\2\2\2\u06ec\u06ea\3\2\2\2\u06ec")
        buf.write("\u06ed\3\2\2\2\u06ed\u06ef\3\2\2\2\u06ee\u06ec\3\2\2\2")
        buf.write("\u06ef\u06f3\b\34\1\2\u06f0\u06f2\t\2\2\2\u06f1\u06f0")
        buf.write("\3\2\2\2\u06f2\u06f5\3\2\2\2\u06f3\u06f1\3\2\2\2\u06f3")
        buf.write("\u06f4\3\2\2\2\u06f4\u06f6\3\2\2\2\u06f5\u06f3\3\2\2\2")
        buf.write("\u06f6\u06fa\5\34\17\2\u06f7\u06f9\t\2\2\2\u06f8\u06f7")
        buf.write("\3\2\2\2\u06f9\u06fc\3\2\2\2\u06fa\u06f8\3\2\2\2\u06fa")
        buf.write("\u06fb\3\2\2\2\u06fb\u06fd\3\2\2\2\u06fc\u06fa\3\2\2\2")
        buf.write("\u06fd\u06fe\7\6\2\2\u06fe\u0726\3\2\2\2\u06ff\u0703\7")
        buf.write("\27\2\2\u0700\u0702\t\2\2\2\u0701\u0700\3\2\2\2\u0702")
        buf.write("\u0705\3\2\2\2\u0703\u0701\3\2\2\2\u0703\u0704\3\2\2\2")
        buf.write("\u0704\u0706\3\2\2\2\u0705\u0703\3\2\2\2\u0706\u070a\7")
        buf.write("\4\2\2\u0707\u0709\t\2\2\2\u0708\u0707\3\2\2\2\u0709\u070c")
        buf.write("\3\2\2\2\u070a\u0708\3\2\2\2\u070a\u070b\3\2\2\2\u070b")
        buf.write("\u070d\3\2\2\2\u070c\u070a\3\2\2\2\u070d\u070e\5\34\17")
        buf.write("\2\u070e\u070f\b\34\1\2\u070f\u0726\3\2\2\2\u0710\u0714")
        buf.write("\7\27\2\2\u0711\u0713\t\2\2\2\u0712\u0711\3\2\2\2\u0713")
        buf.write("\u0716\3\2\2\2\u0714\u0712\3\2\2\2\u0714\u0715\3\2\2\2")
        buf.write("\u0715\u0717\3\2\2\2\u0716\u0714\3\2\2\2\u0717\u071b\b")
        buf.write("\34\1\2\u0718\u071a\t\2\2\2\u0719\u0718\3\2\2\2\u071a")
        buf.write("\u071d\3\2\2\2\u071b\u0719\3\2\2\2\u071b\u071c\3\2\2\2")
        buf.write("\u071c\u071e\3\2\2\2\u071d\u071b\3\2\2\2\u071e\u0722\5")
        buf.write("\34\17\2\u071f\u0721\t\2\2\2\u0720\u071f\3\2\2\2\u0721")
        buf.write("\u0724\3\2\2\2\u0722\u0720\3\2\2\2\u0722\u0723\3\2\2\2")
        buf.write("\u0723\u0726\3\2\2\2\u0724\u0722\3\2\2\2\u0725\u06d1\3")
        buf.write("\2\2\2\u0725\u06e8\3\2\2\2\u0725\u06ff\3\2\2\2\u0725\u0710")
        buf.write("\3\2\2\2\u0726\67\3\2\2\2\u0727\u072b\7\30\2\2\u0728\u072a")
        buf.write("\t\2\2\2\u0729\u0728\3\2\2\2\u072a\u072d\3\2\2\2\u072b")
        buf.write("\u0729\3\2\2\2\u072b\u072c\3\2\2\2\u072c\u072e\3\2\2\2")
        buf.write("\u072d\u072b\3\2\2\2\u072e\u0732\7\4\2\2\u072f\u0731\t")
        buf.write("\2\2\2\u0730\u072f\3\2\2\2\u0731\u0734\3\2\2\2\u0732\u0730")
        buf.write("\3\2\2\2\u0732\u0733\3\2\2\2\u0733\u0735\3\2\2\2\u0734")
        buf.write("\u0732\3\2\2\2\u0735\u0739\5\34\17\2\u0736\u0738\t\2\2")
        buf.write("\2\u0737\u0736\3\2\2\2\u0738\u073b\3\2\2\2\u0739\u0737")
        buf.write("\3\2\2\2\u0739\u073a\3\2\2\2\u073a\u073c\3\2\2\2\u073b")
        buf.write("\u0739\3\2\2\2\u073c\u0740\7\5\2\2\u073d\u073f\t\2\2\2")
        buf.write("\u073e\u073d\3\2\2\2\u073f\u0742\3\2\2\2\u0740\u073e\3")
        buf.write("\2\2\2\u0740\u0741\3\2\2\2\u0741\u0743\3\2\2\2\u0742\u0740")
        buf.write("\3\2\2\2\u0743\u0747\5\34\17\2\u0744\u0746\t\2\2\2\u0745")
        buf.write("\u0744\3\2\2\2\u0746\u0749\3\2\2\2\u0747\u0745\3\2\2\2")
        buf.write("\u0747\u0748\3\2\2\2\u0748\u074a\3\2\2\2\u0749\u0747\3")
        buf.write("\2\2\2\u074a\u074b\7\6\2\2\u074b9\3\2\2\2\u074c\u0750")
        buf.write("\7\31\2\2\u074d\u074f\t\2\2\2\u074e\u074d\3\2\2\2\u074f")
        buf.write("\u0752\3\2\2\2\u0750\u074e\3\2\2\2\u0750\u0751\3\2\2\2")
        buf.write("\u0751\u0753\3\2\2\2\u0752\u0750\3\2\2\2\u0753\u0757\7")
        buf.write("\4\2\2\u0754\u0756\t\2\2\2\u0755\u0754\3\2\2\2\u0756\u0759")
        buf.write("\3\2\2\2\u0757\u0755\3\2\2\2\u0757\u0758\3\2\2\2\u0758")
        buf.write("\u075a\3\2\2\2\u0759\u0757\3\2\2\2\u075a\u075e\5\34\17")
        buf.write("\2\u075b\u075d\t\2\2\2\u075c\u075b\3\2\2\2\u075d\u0760")
        buf.write("\3\2\2\2\u075e\u075c\3\2\2\2\u075e\u075f\3\2\2\2\u075f")
        buf.write("\u0761\3\2\2\2\u0760\u075e\3\2\2\2\u0761\u0762\7\6\2\2")
        buf.write("\u0762\u07a1\3\2\2\2\u0763\u0767\7\31\2\2\u0764\u0766")
        buf.write("\t\2\2\2\u0765\u0764\3\2\2\2\u0766\u0769\3\2\2\2\u0767")
        buf.write("\u0765\3\2\2\2\u0767\u0768\3\2\2\2\u0768\u076a\3\2\2\2")
        buf.write("\u0769\u0767\3\2\2\2\u076a\u076e\b\36\1\2\u076b\u076d")
        buf.write("\t\2\2\2\u076c\u076b\3\2\2\2\u076d\u0770\3\2\2\2\u076e")
        buf.write("\u076c\3\2\2\2\u076e\u076f\3\2\2\2\u076f\u0771\3\2\2\2")
        buf.write("\u0770\u076e\3\2\2\2\u0771\u0775\5\34\17\2\u0772\u0774")
        buf.write("\t\2\2\2\u0773\u0772\3\2\2\2\u0774\u0777\3\2\2\2\u0775")
        buf.write("\u0773\3\2\2\2\u0775\u0776\3\2\2\2\u0776\u0778\3\2\2\2")
        buf.write("\u0777\u0775\3\2\2\2\u0778\u0779\7\6\2\2\u0779\u07a1\3")
        buf.write("\2\2\2\u077a\u077e\7\31\2\2\u077b\u077d\t\2\2\2\u077c")
        buf.write("\u077b\3\2\2\2\u077d\u0780\3\2\2\2\u077e\u077c\3\2\2\2")
        buf.write("\u077e\u077f\3\2\2\2\u077f\u0781\3\2\2\2\u0780\u077e\3")
        buf.write("\2\2\2\u0781\u0785\7\4\2\2\u0782\u0784\t\2\2\2\u0783\u0782")
        buf.write("\3\2\2\2\u0784\u0787\3\2\2\2\u0785\u0783\3\2\2\2\u0785")
        buf.write("\u0786\3\2\2\2\u0786\u0788\3\2\2\2\u0787\u0785\3\2\2\2")
        buf.write("\u0788\u0789\5\34\17\2\u0789\u078a\b\36\1\2\u078a\u07a1")
        buf.write("\3\2\2\2\u078b\u078f\7\31\2\2\u078c\u078e\t\2\2\2\u078d")
        buf.write("\u078c\3\2\2\2\u078e\u0791\3\2\2\2\u078f\u078d\3\2\2\2")
        buf.write("\u078f\u0790\3\2\2\2\u0790\u0792\3\2\2\2\u0791\u078f\3")
        buf.write("\2\2\2\u0792\u0796\b\36\1\2\u0793\u0795\t\2\2\2\u0794")
        buf.write("\u0793\3\2\2\2\u0795\u0798\3\2\2\2\u0796\u0794\3\2\2\2")
        buf.write("\u0796\u0797\3\2\2\2\u0797\u0799\3\2\2\2\u0798\u0796\3")
        buf.write("\2\2\2\u0799\u079d\5\34\17\2\u079a\u079c\t\2\2\2\u079b")
        buf.write("\u079a\3\2\2\2\u079c\u079f\3\2\2\2\u079d\u079b\3\2\2\2")
        buf.write("\u079d\u079e\3\2\2\2\u079e\u07a1\3\2\2\2\u079f\u079d\3")
        buf.write("\2\2\2\u07a0\u074c\3\2\2\2\u07a0\u0763\3\2\2\2\u07a0\u077a")
        buf.write("\3\2\2\2\u07a0\u078b\3\2\2\2\u07a1;\3\2\2\2\u07a2\u07a6")
        buf.write("\7\32\2\2\u07a3\u07a5\t\2\2\2\u07a4\u07a3\3\2\2\2\u07a5")
        buf.write("\u07a8\3\2\2\2\u07a6\u07a4\3\2\2\2\u07a6\u07a7\3\2\2\2")
        buf.write("\u07a7\u07a9\3\2\2\2\u07a8\u07a6\3\2\2\2\u07a9\u07ad\7")
        buf.write("\4\2\2\u07aa\u07ac\t\2\2\2\u07ab\u07aa\3\2\2\2\u07ac\u07af")
        buf.write("\3\2\2\2\u07ad\u07ab\3\2\2\2\u07ad\u07ae\3\2\2\2\u07ae")
        buf.write("\u07b0\3\2\2\2\u07af\u07ad\3\2\2\2\u07b0\u07b4\5\34\17")
        buf.write("\2\u07b1\u07b3\t\2\2\2\u07b2\u07b1\3\2\2\2\u07b3\u07b6")
        buf.write("\3\2\2\2\u07b4\u07b2\3\2\2\2\u07b4\u07b5\3\2\2\2\u07b5")
        buf.write("\u07b7\3\2\2\2\u07b6\u07b4\3\2\2\2\u07b7\u07bb\7\5\2\2")
        buf.write("\u07b8\u07ba\t\2\2\2\u07b9\u07b8\3\2\2\2\u07ba\u07bd\3")
        buf.write("\2\2\2\u07bb\u07b9\3\2\2\2\u07bb\u07bc\3\2\2\2\u07bc\u07be")
        buf.write("\3\2\2\2\u07bd\u07bb\3\2\2\2\u07be\u07c2\5\34\17\2\u07bf")
        buf.write("\u07c1\t\2\2\2\u07c0\u07bf\3\2\2\2\u07c1\u07c4\3\2\2\2")
        buf.write("\u07c2\u07c0\3\2\2\2\u07c2\u07c3\3\2\2\2\u07c3\u07c5\3")
        buf.write("\2\2\2\u07c4\u07c2\3\2\2\2\u07c5\u07c6\7\6\2\2\u07c6=")
        buf.write("\3\2\2\2\u07c7\u07cb\7\33\2\2\u07c8\u07ca\t\2\2\2\u07c9")
        buf.write("\u07c8\3\2\2\2\u07ca\u07cd\3\2\2\2\u07cb\u07c9\3\2\2\2")
        buf.write("\u07cb\u07cc\3\2\2\2\u07cc\u07ce\3\2\2\2\u07cd\u07cb\3")
        buf.write("\2\2\2\u07ce\u07d2\7\4\2\2\u07cf\u07d1\t\2\2\2\u07d0\u07cf")
        buf.write("\3\2\2\2\u07d1\u07d4\3\2\2\2\u07d2\u07d0\3\2\2\2\u07d2")
        buf.write("\u07d3\3\2\2\2\u07d3\u07d5\3\2\2\2\u07d4\u07d2\3\2\2\2")
        buf.write("\u07d5\u07d9\5\34\17\2\u07d6\u07d8\t\2\2\2\u07d7\u07d6")
        buf.write("\3\2\2\2\u07d8\u07db\3\2\2\2\u07d9\u07d7\3\2\2\2\u07d9")
        buf.write("\u07da\3\2\2\2\u07da\u07dc\3\2\2\2\u07db\u07d9\3\2\2\2")
        buf.write("\u07dc\u07e0\7\5\2\2\u07dd\u07df\t\2\2\2\u07de\u07dd\3")
        buf.write("\2\2\2\u07df\u07e2\3\2\2\2\u07e0\u07de\3\2\2\2\u07e0\u07e1")
        buf.write("\3\2\2\2\u07e1\u07e3\3\2\2\2\u07e2\u07e0\3\2\2\2\u07e3")
        buf.write("\u07e7\5\34\17\2\u07e4\u07e6\t\2\2\2\u07e5\u07e4\3\2\2")
        buf.write("\2\u07e6\u07e9\3\2\2\2\u07e7\u07e5\3\2\2\2\u07e7\u07e8")
        buf.write("\3\2\2\2\u07e8\u07ea\3\2\2\2\u07e9\u07e7\3\2\2\2\u07ea")
        buf.write("\u07eb\7\6\2\2\u07eb?\3\2\2\2\u07ec\u07f0\7\34\2\2\u07ed")
        buf.write("\u07ef\t\2\2\2\u07ee\u07ed\3\2\2\2\u07ef\u07f2\3\2\2\2")
        buf.write("\u07f0\u07ee\3\2\2\2\u07f0\u07f1\3\2\2\2\u07f1\u07f3\3")
        buf.write("\2\2\2\u07f2\u07f0\3\2\2\2\u07f3\u07f7\7\4\2\2\u07f4\u07f6")
        buf.write("\t\2\2\2\u07f5\u07f4\3\2\2\2\u07f6\u07f9\3\2\2\2\u07f7")
        buf.write("\u07f5\3\2\2\2\u07f7\u07f8\3\2\2\2\u07f8\u07fa\3\2\2\2")
        buf.write("\u07f9\u07f7\3\2\2\2\u07fa\u07fe\5\34\17\2\u07fb\u07fd")
        buf.write("\t\2\2\2\u07fc\u07fb\3\2\2\2\u07fd\u0800\3\2\2\2\u07fe")
        buf.write("\u07fc\3\2\2\2\u07fe\u07ff\3\2\2\2\u07ff\u0801\3\2\2\2")
        buf.write("\u0800\u07fe\3\2\2\2\u0801\u0805\7\5\2\2\u0802\u0804\t")
        buf.write("\2\2\2\u0803\u0802\3\2\2\2\u0804\u0807\3\2\2\2\u0805\u0803")
        buf.write("\3\2\2\2\u0805\u0806\3\2\2\2\u0806\u0808\3\2\2\2\u0807")
        buf.write("\u0805\3\2\2\2\u0808\u080c\5\34\17\2\u0809\u080b\t\2\2")
        buf.write("\2\u080a\u0809\3\2\2\2\u080b\u080e\3\2\2\2\u080c\u080a")
        buf.write("\3\2\2\2\u080c\u080d\3\2\2\2\u080d\u080f\3\2\2\2\u080e")
        buf.write("\u080c\3\2\2\2\u080f\u0810\7\6\2\2\u0810A\3\2\2\2\u0811")
        buf.write("\u0815\7\35\2\2\u0812\u0814\t\2\2\2\u0813\u0812\3\2\2")
        buf.write("\2\u0814\u0817\3\2\2\2\u0815\u0813\3\2\2\2\u0815\u0816")
        buf.write("\3\2\2\2\u0816\u0818\3\2\2\2\u0817\u0815\3\2\2\2\u0818")
        buf.write("\u081c\7\4\2\2\u0819\u081b\t\2\2\2\u081a\u0819\3\2\2\2")
        buf.write("\u081b\u081e\3\2\2\2\u081c\u081a\3\2\2\2\u081c\u081d\3")
        buf.write("\2\2\2\u081d\u081f\3\2\2\2\u081e\u081c\3\2\2\2\u081f\u0823")
        buf.write("\5\34\17\2\u0820\u0822\t\2\2\2\u0821\u0820\3\2\2\2\u0822")
        buf.write("\u0825\3\2\2\2\u0823\u0821\3\2\2\2\u0823\u0824\3\2\2\2")
        buf.write("\u0824\u0826\3\2\2\2\u0825\u0823\3\2\2\2\u0826\u082a\7")
        buf.write("\5\2\2\u0827\u0829\t\2\2\2\u0828\u0827\3\2\2\2\u0829\u082c")
        buf.write("\3\2\2\2\u082a\u0828\3\2\2\2\u082a\u082b\3\2\2\2\u082b")
        buf.write("\u082d\3\2\2\2\u082c\u082a\3\2\2\2\u082d\u0831\5\34\17")
        buf.write("\2\u082e\u0830\t\2\2\2\u082f\u082e\3\2\2\2\u0830\u0833")
        buf.write("\3\2\2\2\u0831\u082f\3\2\2\2\u0831\u0832\3\2\2\2\u0832")
        buf.write("\u0834\3\2\2\2\u0833\u0831\3\2\2\2\u0834\u0835\7\6\2\2")
        buf.write("\u0835C\3\2\2\2\u0836\u083a\7*\2\2\u0837\u0839\t\2\2\2")
        buf.write("\u0838\u0837\3\2\2\2\u0839\u083c\3\2\2\2\u083a\u0838\3")
        buf.write("\2\2\2\u083a\u083b\3\2\2\2\u083b\u083d\3\2\2\2\u083c\u083a")
        buf.write("\3\2\2\2\u083d\u0841\7\4\2\2\u083e\u0840\t\2\2\2\u083f")
        buf.write("\u083e\3\2\2\2\u0840\u0843\3\2\2\2\u0841\u083f\3\2\2\2")
        buf.write("\u0841\u0842\3\2\2\2\u0842\u0844\3\2\2\2\u0843\u0841\3")
        buf.write("\2\2\2\u0844\u0848\5\34\17\2\u0845\u0847\t\2\2\2\u0846")
        buf.write("\u0845\3\2\2\2\u0847\u084a\3\2\2\2\u0848\u0846\3\2\2\2")
        buf.write("\u0848\u0849\3\2\2\2\u0849\u084b\3\2\2\2\u084a\u0848\3")
        buf.write("\2\2\2\u084b\u084c\7\6\2\2\u084c\u088b\3\2\2\2\u084d\u0851")
        buf.write("\7*\2\2\u084e\u0850\t\2\2\2\u084f\u084e\3\2\2\2\u0850")
        buf.write("\u0853\3\2\2\2\u0851\u084f\3\2\2\2\u0851\u0852\3\2\2\2")
        buf.write("\u0852\u0854\3\2\2\2\u0853\u0851\3\2\2\2\u0854\u0858\b")
        buf.write("#\1\2\u0855\u0857\t\2\2\2\u0856\u0855\3\2\2\2\u0857\u085a")
        buf.write("\3\2\2\2\u0858\u0856\3\2\2\2\u0858\u0859\3\2\2\2\u0859")
        buf.write("\u085b\3\2\2\2\u085a\u0858\3\2\2\2\u085b\u085f\5\34\17")
        buf.write("\2\u085c\u085e\t\2\2\2\u085d\u085c\3\2\2\2\u085e\u0861")
        buf.write("\3\2\2\2\u085f\u085d\3\2\2\2\u085f\u0860\3\2\2\2\u0860")
        buf.write("\u0862\3\2\2\2\u0861\u085f\3\2\2\2\u0862\u0863\7\6\2\2")
        buf.write("\u0863\u088b\3\2\2\2\u0864\u0868\7*\2\2\u0865\u0867\t")
        buf.write("\2\2\2\u0866\u0865\3\2\2\2\u0867\u086a\3\2\2\2\u0868\u0866")
        buf.write("\3\2\2\2\u0868\u0869\3\2\2\2\u0869\u086b\3\2\2\2\u086a")
        buf.write("\u0868\3\2\2\2\u086b\u086f\7\4\2\2\u086c\u086e\t\2\2\2")
        buf.write("\u086d\u086c\3\2\2\2\u086e\u0871\3\2\2\2\u086f\u086d\3")
        buf.write("\2\2\2\u086f\u0870\3\2\2\2\u0870\u0872\3\2\2\2\u0871\u086f")
        buf.write("\3\2\2\2\u0872\u0873\5\34\17\2\u0873\u0874\b#\1\2\u0874")
        buf.write("\u088b\3\2\2\2\u0875\u0879\7*\2\2\u0876\u0878\t\2\2\2")
        buf.write("\u0877\u0876\3\2\2\2\u0878\u087b\3\2\2\2\u0879\u0877\3")
        buf.write("\2\2\2\u0879\u087a\3\2\2\2\u087a\u087c\3\2\2\2\u087b\u0879")
        buf.write("\3\2\2\2\u087c\u0880\b#\1\2\u087d\u087f\t\2\2\2\u087e")
        buf.write("\u087d\3\2\2\2\u087f\u0882\3\2\2\2\u0880\u087e\3\2\2\2")
        buf.write("\u0880\u0881\3\2\2\2\u0881\u0883\3\2\2\2\u0882\u0880\3")
        buf.write("\2\2\2\u0883\u0887\5\34\17\2\u0884\u0886\t\2\2\2\u0885")
        buf.write("\u0884\3\2\2\2\u0886\u0889\3\2\2\2\u0887\u0885\3\2\2\2")
        buf.write("\u0887\u0888\3\2\2\2\u0888\u088b\3\2\2\2\u0889\u0887\3")
        buf.write("\2\2\2\u088a\u0836\3\2\2\2\u088a\u084d\3\2\2\2\u088a\u0864")
        buf.write("\3\2\2\2\u088a\u0875\3\2\2\2\u088bE\3\2\2\2\u088c\u0890")
        buf.write("\7\36\2\2\u088d\u088f\t\2\2\2\u088e\u088d\3\2\2\2\u088f")
        buf.write("\u0892\3\2\2\2\u0890\u088e\3\2\2\2\u0890\u0891\3\2\2\2")
        buf.write("\u0891\u0893\3\2\2\2\u0892\u0890\3\2\2\2\u0893\u0897\7")
        buf.write("\4\2\2\u0894\u0896\t\2\2\2\u0895\u0894\3\2\2\2\u0896\u0899")
        buf.write("\3\2\2\2\u0897\u0895\3\2\2\2\u0897\u0898\3\2\2\2\u0898")
        buf.write("\u089a\3\2\2\2\u0899\u0897\3\2\2\2\u089a\u089e\5\34\17")
        buf.write("\2\u089b\u089d\t\2\2\2\u089c\u089b\3\2\2\2\u089d\u08a0")
        buf.write("\3\2\2\2\u089e\u089c\3\2\2\2\u089e\u089f\3\2\2\2\u089f")
        buf.write("\u08a1\3\2\2\2\u08a0\u089e\3\2\2\2\u08a1\u08a2\7\6\2\2")
        buf.write("\u08a2\u08e1\3\2\2\2\u08a3\u08a7\7\36\2\2\u08a4\u08a6")
        buf.write("\t\2\2\2\u08a5\u08a4\3\2\2\2\u08a6\u08a9\3\2\2\2\u08a7")
        buf.write("\u08a5\3\2\2\2\u08a7\u08a8\3\2\2\2\u08a8\u08aa\3\2\2\2")
        buf.write("\u08a9\u08a7\3\2\2\2\u08aa\u08ae\b$\1\2\u08ab\u08ad\t")
        buf.write("\2\2\2\u08ac\u08ab\3\2\2\2\u08ad\u08b0\3\2\2\2\u08ae\u08ac")
        buf.write("\3\2\2\2\u08ae\u08af\3\2\2\2\u08af\u08b1\3\2\2\2\u08b0")
        buf.write("\u08ae\3\2\2\2\u08b1\u08b5\5\34\17\2\u08b2\u08b4\t\2\2")
        buf.write("\2\u08b3\u08b2\3\2\2\2\u08b4\u08b7\3\2\2\2\u08b5\u08b3")
        buf.write("\3\2\2\2\u08b5\u08b6\3\2\2\2\u08b6\u08b8\3\2\2\2\u08b7")
        buf.write("\u08b5\3\2\2\2\u08b8\u08b9\7\6\2\2\u08b9\u08e1\3\2\2\2")
        buf.write("\u08ba\u08be\7\36\2\2\u08bb\u08bd\t\2\2\2\u08bc\u08bb")
        buf.write("\3\2\2\2\u08bd\u08c0\3\2\2\2\u08be\u08bc\3\2\2\2\u08be")
        buf.write("\u08bf\3\2\2\2\u08bf\u08c1\3\2\2\2\u08c0\u08be\3\2\2\2")
        buf.write("\u08c1\u08c5\7\4\2\2\u08c2\u08c4\t\2\2\2\u08c3\u08c2\3")
        buf.write("\2\2\2\u08c4\u08c7\3\2\2\2\u08c5\u08c3\3\2\2\2\u08c5\u08c6")
        buf.write("\3\2\2\2\u08c6\u08c8\3\2\2\2\u08c7\u08c5\3\2\2\2\u08c8")
        buf.write("\u08c9\5\34\17\2\u08c9\u08ca\b$\1\2\u08ca\u08e1\3\2\2")
        buf.write("\2\u08cb\u08cf\7\36\2\2\u08cc\u08ce\t\2\2\2\u08cd\u08cc")
        buf.write("\3\2\2\2\u08ce\u08d1\3\2\2\2\u08cf\u08cd\3\2\2\2\u08cf")
        buf.write("\u08d0\3\2\2\2\u08d0\u08d2\3\2\2\2\u08d1\u08cf\3\2\2\2")
        buf.write("\u08d2\u08d6\b$\1\2\u08d3\u08d5\t\2\2\2\u08d4\u08d3\3")
        buf.write("\2\2\2\u08d5\u08d8\3\2\2\2\u08d6\u08d4\3\2\2\2\u08d6\u08d7")
        buf.write("\3\2\2\2\u08d7\u08d9\3\2\2\2\u08d8\u08d6\3\2\2\2\u08d9")
        buf.write("\u08dd\5\34\17\2\u08da\u08dc\t\2\2\2\u08db\u08da\3\2\2")
        buf.write("\2\u08dc\u08df\3\2\2\2\u08dd\u08db\3\2\2\2\u08dd\u08de")
        buf.write("\3\2\2\2\u08de\u08e1\3\2\2\2\u08df\u08dd\3\2\2\2\u08e0")
        buf.write("\u088c\3\2\2\2\u08e0\u08a3\3\2\2\2\u08e0\u08ba\3\2\2\2")
        buf.write("\u08e0\u08cb\3\2\2\2\u08e1G\3\2\2\2\u08e2\u08e6\7\37\2")
        buf.write("\2\u08e3\u08e5\t\2\2\2\u08e4\u08e3\3\2\2\2\u08e5\u08e8")
        buf.write("\3\2\2\2\u08e6\u08e4\3\2\2\2\u08e6\u08e7\3\2\2\2\u08e7")
        buf.write("\u08e9\3\2\2\2\u08e8\u08e6\3\2\2\2\u08e9\u08ed\7\4\2\2")
        buf.write("\u08ea\u08ec\t\2\2\2\u08eb\u08ea\3\2\2\2\u08ec\u08ef\3")
        buf.write("\2\2\2\u08ed\u08eb\3\2\2\2\u08ed\u08ee\3\2\2\2\u08ee\u0900")
        buf.write("\3\2\2\2\u08ef\u08ed\3\2\2\2\u08f0\u08f4\5\34\17\2\u08f1")
        buf.write("\u08f3\t\2\2\2\u08f2\u08f1\3\2\2\2\u08f3\u08f6\3\2\2\2")
        buf.write("\u08f4\u08f2\3\2\2\2\u08f4\u08f5\3\2\2\2\u08f5\u08f7\3")
        buf.write("\2\2\2\u08f6\u08f4\3\2\2\2\u08f7\u08fb\7\5\2\2\u08f8\u08fa")
        buf.write("\t\2\2\2\u08f9\u08f8\3\2\2\2\u08fa\u08fd\3\2\2\2\u08fb")
        buf.write("\u08f9\3\2\2\2\u08fb\u08fc\3\2\2\2\u08fc\u08ff\3\2\2\2")
        buf.write("\u08fd\u08fb\3\2\2\2\u08fe\u08f0\3\2\2\2\u08ff\u0902\3")
        buf.write("\2\2\2\u0900\u08fe\3\2\2\2\u0900\u0901\3\2\2\2\u0901\u0903")
        buf.write("\3\2\2\2\u0902\u0900\3\2\2\2\u0903\u0907\5\34\17\2\u0904")
        buf.write("\u0906\t\2\2\2\u0905\u0904\3\2\2\2\u0906\u0909\3\2\2\2")
        buf.write("\u0907\u0905\3\2\2\2\u0907\u0908\3\2\2\2\u0908\u090a\3")
        buf.write("\2\2\2\u0909\u0907\3\2\2\2\u090a\u090b\7\6\2\2\u090bI")
        buf.write("\3\2\2\2\u090c\u0910\7\"\2\2\u090d\u090f\t\2\2\2\u090e")
        buf.write("\u090d\3\2\2\2\u090f\u0912\3\2\2\2\u0910\u090e\3\2\2\2")
        buf.write("\u0910\u0911\3\2\2\2\u0911\u0913\3\2\2\2\u0912\u0910\3")
        buf.write("\2\2\2\u0913\u0917\7\4\2\2\u0914\u0916\t\2\2\2\u0915\u0914")
        buf.write("\3\2\2\2\u0916\u0919\3\2\2\2\u0917\u0915\3\2\2\2\u0917")
        buf.write("\u0918\3\2\2\2\u0918\u091a\3\2\2\2\u0919\u0917\3\2\2\2")
        buf.write("\u091a\u091e\5\34\17\2\u091b\u091d\t\2\2\2\u091c\u091b")
        buf.write("\3\2\2\2\u091d\u0920\3\2\2\2\u091e\u091c\3\2\2\2\u091e")
        buf.write("\u091f\3\2\2\2\u091f\u0921\3\2\2\2\u0920\u091e\3\2\2\2")
        buf.write("\u0921\u0922\7\6\2\2\u0922\u0961\3\2\2\2\u0923\u0927\7")
        buf.write("\"\2\2\u0924\u0926\t\2\2\2\u0925\u0924\3\2\2\2\u0926\u0929")
        buf.write("\3\2\2\2\u0927\u0925\3\2\2\2\u0927\u0928\3\2\2\2\u0928")
        buf.write("\u092a\3\2\2\2\u0929\u0927\3\2\2\2\u092a\u092e\b&\1\2")
        buf.write("\u092b\u092d\t\2\2\2\u092c\u092b\3\2\2\2\u092d\u0930\3")
        buf.write("\2\2\2\u092e\u092c\3\2\2\2\u092e\u092f\3\2\2\2\u092f\u0931")
        buf.write("\3\2\2\2\u0930\u092e\3\2\2\2\u0931\u0935\5\34\17\2\u0932")
        buf.write("\u0934\t\2\2\2\u0933\u0932\3\2\2\2\u0934\u0937\3\2\2\2")
        buf.write("\u0935\u0933\3\2\2\2\u0935\u0936\3\2\2\2\u0936\u0938\3")
        buf.write("\2\2\2\u0937\u0935\3\2\2\2\u0938\u0939\7\6\2\2\u0939\u0961")
        buf.write("\3\2\2\2\u093a\u093e\7\"\2\2\u093b\u093d\t\2\2\2\u093c")
        buf.write("\u093b\3\2\2\2\u093d\u0940\3\2\2\2\u093e\u093c\3\2\2\2")
        buf.write("\u093e\u093f\3\2\2\2\u093f\u0941\3\2\2\2\u0940\u093e\3")
        buf.write("\2\2\2\u0941\u0945\7\4\2\2\u0942\u0944\t\2\2\2\u0943\u0942")
        buf.write("\3\2\2\2\u0944\u0947\3\2\2\2\u0945\u0943\3\2\2\2\u0945")
        buf.write("\u0946\3\2\2\2\u0946\u0948\3\2\2\2\u0947\u0945\3\2\2\2")
        buf.write("\u0948\u0949\5\34\17\2\u0949\u094a\b&\1\2\u094a\u0961")
        buf.write("\3\2\2\2\u094b\u094f\7\"\2\2\u094c\u094e\t\2\2\2\u094d")
        buf.write("\u094c\3\2\2\2\u094e\u0951\3\2\2\2\u094f\u094d\3\2\2\2")
        buf.write("\u094f\u0950\3\2\2\2\u0950\u0952\3\2\2\2\u0951\u094f\3")
        buf.write("\2\2\2\u0952\u0956\b&\1\2\u0953\u0955\t\2\2\2\u0954\u0953")
        buf.write("\3\2\2\2\u0955\u0958\3\2\2\2\u0956\u0954\3\2\2\2\u0956")
        buf.write("\u0957\3\2\2\2\u0957\u0959\3\2\2\2\u0958\u0956\3\2\2\2")
        buf.write("\u0959\u095d\5\34\17\2\u095a\u095c\t\2\2\2\u095b\u095a")
        buf.write("\3\2\2\2\u095c\u095f\3\2\2\2\u095d\u095b\3\2\2\2\u095d")
        buf.write("\u095e\3\2\2\2\u095e\u0961\3\2\2\2\u095f\u095d\3\2\2\2")
        buf.write("\u0960\u090c\3\2\2\2\u0960\u0923\3\2\2\2\u0960\u093a\3")
        buf.write("\2\2\2\u0960\u094b\3\2\2\2\u0961K\3\2\2\2\u0962\u0966")
        buf.write("\7#\2\2\u0963\u0965\t\2\2\2\u0964\u0963\3\2\2\2\u0965")
        buf.write("\u0968\3\2\2\2\u0966\u0964\3\2\2\2\u0966\u0967\3\2\2\2")
        buf.write("\u0967\u0969\3\2\2\2\u0968\u0966\3\2\2\2\u0969\u096d\7")
        buf.write("\4\2\2\u096a\u096c\t\2\2\2\u096b\u096a\3\2\2\2\u096c\u096f")
        buf.write("\3\2\2\2\u096d\u096b\3\2\2\2\u096d\u096e\3\2\2\2\u096e")
        buf.write("\u0970\3\2\2\2\u096f\u096d\3\2\2\2\u0970\u0974\5\34\17")
        buf.write("\2\u0971\u0973\t\2\2\2\u0972\u0971\3\2\2\2\u0973\u0976")
        buf.write("\3\2\2\2\u0974\u0972\3\2\2\2\u0974\u0975\3\2\2\2\u0975")
        buf.write("\u0977\3\2\2\2\u0976\u0974\3\2\2\2\u0977\u0978\7\6\2\2")
        buf.write("\u0978\u09b7\3\2\2\2\u0979\u097d\7#\2\2\u097a\u097c\t")
        buf.write("\2\2\2\u097b\u097a\3\2\2\2\u097c\u097f\3\2\2\2\u097d\u097b")
        buf.write("\3\2\2\2\u097d\u097e\3\2\2\2\u097e\u0980\3\2\2\2\u097f")
        buf.write("\u097d\3\2\2\2\u0980\u0984\b\'\1\2\u0981\u0983\t\2\2\2")
        buf.write("\u0982\u0981\3\2\2\2\u0983\u0986\3\2\2\2\u0984\u0982\3")
        buf.write("\2\2\2\u0984\u0985\3\2\2\2\u0985\u0987\3\2\2\2\u0986\u0984")
        buf.write("\3\2\2\2\u0987\u098b\5\34\17\2\u0988\u098a\t\2\2\2\u0989")
        buf.write("\u0988\3\2\2\2\u098a\u098d\3\2\2\2\u098b\u0989\3\2\2\2")
        buf.write("\u098b\u098c\3\2\2\2\u098c\u098e\3\2\2\2\u098d\u098b\3")
        buf.write("\2\2\2\u098e\u098f\7\6\2\2\u098f\u09b7\3\2\2\2\u0990\u0994")
        buf.write("\7#\2\2\u0991\u0993\t\2\2\2\u0992\u0991\3\2\2\2\u0993")
        buf.write("\u0996\3\2\2\2\u0994\u0992\3\2\2\2\u0994\u0995\3\2\2\2")
        buf.write("\u0995\u0997\3\2\2\2\u0996\u0994\3\2\2\2\u0997\u099b\7")
        buf.write("\4\2\2\u0998\u099a\t\2\2\2\u0999\u0998\3\2\2\2\u099a\u099d")
        buf.write("\3\2\2\2\u099b\u0999\3\2\2\2\u099b\u099c\3\2\2\2\u099c")
        buf.write("\u099e\3\2\2\2\u099d\u099b\3\2\2\2\u099e\u099f\5\34\17")
        buf.write("\2\u099f\u09a0\b\'\1\2\u09a0\u09b7\3\2\2\2\u09a1\u09a5")
        buf.write("\7#\2\2\u09a2\u09a4\t\2\2\2\u09a3\u09a2\3\2\2\2\u09a4")
        buf.write("\u09a7\3\2\2\2\u09a5\u09a3\3\2\2\2\u09a5\u09a6\3\2\2\2")
        buf.write("\u09a6\u09a8\3\2\2\2\u09a7\u09a5\3\2\2\2\u09a8\u09ac\b")
        buf.write("\'\1\2\u09a9\u09ab\t\2\2\2\u09aa\u09a9\3\2\2\2\u09ab\u09ae")
        buf.write("\3\2\2\2\u09ac\u09aa\3\2\2\2\u09ac\u09ad\3\2\2\2\u09ad")
        buf.write("\u09af\3\2\2\2\u09ae\u09ac\3\2\2\2\u09af\u09b3\5\34\17")
        buf.write("\2\u09b0\u09b2\t\2\2\2\u09b1\u09b0\3\2\2\2\u09b2\u09b5")
        buf.write("\3\2\2\2\u09b3\u09b1\3\2\2\2\u09b3\u09b4\3\2\2\2\u09b4")
        buf.write("\u09b7\3\2\2\2\u09b5\u09b3\3\2\2\2\u09b6\u0962\3\2\2\2")
        buf.write("\u09b6\u0979\3\2\2\2\u09b6\u0990\3\2\2\2\u09b6\u09a1\3")
        buf.write("\2\2\2\u09b7M\3\2\2\2\u09b8\u09bc\7)\2\2\u09b9\u09bb\t")
        buf.write("\2\2\2\u09ba\u09b9\3\2\2\2\u09bb\u09be\3\2\2\2\u09bc\u09ba")
        buf.write("\3\2\2\2\u09bc\u09bd\3\2\2\2\u09bd\u09bf\3\2\2\2\u09be")
        buf.write("\u09bc\3\2\2\2\u09bf\u09c3\7\4\2\2\u09c0\u09c2\t\2\2\2")
        buf.write("\u09c1\u09c0\3\2\2\2\u09c2\u09c5\3\2\2\2\u09c3\u09c1\3")
        buf.write("\2\2\2\u09c3\u09c4\3\2\2\2\u09c4\u09c6\3\2\2\2\u09c5\u09c3")
        buf.write("\3\2\2\2\u09c6\u09ca\5\34\17\2\u09c7\u09c9\t\2\2\2\u09c8")
        buf.write("\u09c7\3\2\2\2\u09c9\u09cc\3\2\2\2\u09ca\u09c8\3\2\2\2")
        buf.write("\u09ca\u09cb\3\2\2\2\u09cb\u09cd\3\2\2\2\u09cc\u09ca\3")
        buf.write("\2\2\2\u09cd\u09ce\7\6\2\2\u09ce\u0a0d\3\2\2\2\u09cf\u09d3")
        buf.write("\7)\2\2\u09d0\u09d2\t\2\2\2\u09d1\u09d0\3\2\2\2\u09d2")
        buf.write("\u09d5\3\2\2\2\u09d3\u09d1\3\2\2\2\u09d3\u09d4\3\2\2\2")
        buf.write("\u09d4\u09d6\3\2\2\2\u09d5\u09d3\3\2\2\2\u09d6\u09da\b")
        buf.write("(\1\2\u09d7\u09d9\t\2\2\2\u09d8\u09d7\3\2\2\2\u09d9\u09dc")
        buf.write("\3\2\2\2\u09da\u09d8\3\2\2\2\u09da\u09db\3\2\2\2\u09db")
        buf.write("\u09dd\3\2\2\2\u09dc\u09da\3\2\2\2\u09dd\u09e1\5\34\17")
        buf.write("\2\u09de\u09e0\t\2\2\2\u09df\u09de\3\2\2\2\u09e0\u09e3")
        buf.write("\3\2\2\2\u09e1\u09df\3\2\2\2\u09e1\u09e2\3\2\2\2\u09e2")
        buf.write("\u09e4\3\2\2\2\u09e3\u09e1\3\2\2\2\u09e4\u09e5\7\6\2\2")
        buf.write("\u09e5\u0a0d\3\2\2\2\u09e6\u09ea\7)\2\2\u09e7\u09e9\t")
        buf.write("\2\2\2\u09e8\u09e7\3\2\2\2\u09e9\u09ec\3\2\2\2\u09ea\u09e8")
        buf.write("\3\2\2\2\u09ea\u09eb\3\2\2\2\u09eb\u09ed\3\2\2\2\u09ec")
        buf.write("\u09ea\3\2\2\2\u09ed\u09f1\7\4\2\2\u09ee\u09f0\t\2\2\2")
        buf.write("\u09ef\u09ee\3\2\2\2\u09f0\u09f3\3\2\2\2\u09f1\u09ef\3")
        buf.write("\2\2\2\u09f1\u09f2\3\2\2\2\u09f2\u09f4\3\2\2\2\u09f3\u09f1")
        buf.write("\3\2\2\2\u09f4\u09f5\5\34\17\2\u09f5\u09f6\b(\1\2\u09f6")
        buf.write("\u0a0d\3\2\2\2\u09f7\u09fb\7)\2\2\u09f8\u09fa\t\2\2\2")
        buf.write("\u09f9\u09f8\3\2\2\2\u09fa\u09fd\3\2\2\2\u09fb\u09f9\3")
        buf.write("\2\2\2\u09fb\u09fc\3\2\2\2\u09fc\u09fe\3\2\2\2\u09fd\u09fb")
        buf.write("\3\2\2\2\u09fe\u0a02\b(\1\2\u09ff\u0a01\t\2\2\2\u0a00")
        buf.write("\u09ff\3\2\2\2\u0a01\u0a04\3\2\2\2\u0a02\u0a00\3\2\2\2")
        buf.write("\u0a02\u0a03\3\2\2\2\u0a03\u0a05\3\2\2\2\u0a04\u0a02\3")
        buf.write("\2\2\2\u0a05\u0a09\5\34\17\2\u0a06\u0a08\t\2\2\2\u0a07")
        buf.write("\u0a06\3\2\2\2\u0a08\u0a0b\3\2\2\2\u0a09\u0a07\3\2\2\2")
        buf.write("\u0a09\u0a0a\3\2\2\2\u0a0a\u0a0d\3\2\2\2\u0a0b\u0a09\3")
        buf.write("\2\2\2\u0a0c\u09b8\3\2\2\2\u0a0c\u09cf\3\2\2\2\u0a0c\u09e6")
        buf.write("\3\2\2\2\u0a0c\u09f7\3\2\2\2\u0a0dO\3\2\2\2\u0a0e\u0a12")
        buf.write("\7 \2\2\u0a0f\u0a11\t\2\2\2\u0a10\u0a0f\3\2\2\2\u0a11")
        buf.write("\u0a14\3\2\2\2\u0a12\u0a10\3\2\2\2\u0a12\u0a13\3\2\2\2")
        buf.write("\u0a13\u0a15\3\2\2\2\u0a14\u0a12\3\2\2\2\u0a15\u0a19\7")
        buf.write("\4\2\2\u0a16\u0a18\t\2\2\2\u0a17\u0a16\3\2\2\2\u0a18\u0a1b")
        buf.write("\3\2\2\2\u0a19\u0a17\3\2\2\2\u0a19\u0a1a\3\2\2\2\u0a1a")
        buf.write("\u0a1c\3\2\2\2\u0a1b\u0a19\3\2\2\2\u0a1c\u0a20\5\34\17")
        buf.write("\2\u0a1d\u0a1f\t\2\2\2\u0a1e\u0a1d\3\2\2\2\u0a1f\u0a22")
        buf.write("\3\2\2\2\u0a20\u0a1e\3\2\2\2\u0a20\u0a21\3\2\2\2\u0a21")
        buf.write("\u0a23\3\2\2\2\u0a22\u0a20\3\2\2\2\u0a23\u0a24\7\6\2\2")
        buf.write("\u0a24\u0a63\3\2\2\2\u0a25\u0a29\7 \2\2\u0a26\u0a28\t")
        buf.write("\2\2\2\u0a27\u0a26\3\2\2\2\u0a28\u0a2b\3\2\2\2\u0a29\u0a27")
        buf.write("\3\2\2\2\u0a29\u0a2a\3\2\2\2\u0a2a\u0a2c\3\2\2\2\u0a2b")
        buf.write("\u0a29\3\2\2\2\u0a2c\u0a30\b)\1\2\u0a2d\u0a2f\t\2\2\2")
        buf.write("\u0a2e\u0a2d\3\2\2\2\u0a2f\u0a32\3\2\2\2\u0a30\u0a2e\3")
        buf.write("\2\2\2\u0a30\u0a31\3\2\2\2\u0a31\u0a33\3\2\2\2\u0a32\u0a30")
        buf.write("\3\2\2\2\u0a33\u0a37\5\34\17\2\u0a34\u0a36\t\2\2\2\u0a35")
        buf.write("\u0a34\3\2\2\2\u0a36\u0a39\3\2\2\2\u0a37\u0a35\3\2\2\2")
        buf.write("\u0a37\u0a38\3\2\2\2\u0a38\u0a3a\3\2\2\2\u0a39\u0a37\3")
        buf.write("\2\2\2\u0a3a\u0a3b\7\6\2\2\u0a3b\u0a63\3\2\2\2\u0a3c\u0a40")
        buf.write("\7 \2\2\u0a3d\u0a3f\t\2\2\2\u0a3e\u0a3d\3\2\2\2\u0a3f")
        buf.write("\u0a42\3\2\2\2\u0a40\u0a3e\3\2\2\2\u0a40\u0a41\3\2\2\2")
        buf.write("\u0a41\u0a43\3\2\2\2\u0a42\u0a40\3\2\2\2\u0a43\u0a47\7")
        buf.write("\4\2\2\u0a44\u0a46\t\2\2\2\u0a45\u0a44\3\2\2\2\u0a46\u0a49")
        buf.write("\3\2\2\2\u0a47\u0a45\3\2\2\2\u0a47\u0a48\3\2\2\2\u0a48")
        buf.write("\u0a4a\3\2\2\2\u0a49\u0a47\3\2\2\2\u0a4a\u0a4b\5\34\17")
        buf.write("\2\u0a4b\u0a4c\b)\1\2\u0a4c\u0a63\3\2\2\2\u0a4d\u0a51")
        buf.write("\7 \2\2\u0a4e\u0a50\t\2\2\2\u0a4f\u0a4e\3\2\2\2\u0a50")
        buf.write("\u0a53\3\2\2\2\u0a51\u0a4f\3\2\2\2\u0a51\u0a52\3\2\2\2")
        buf.write("\u0a52\u0a54\3\2\2\2\u0a53\u0a51\3\2\2\2\u0a54\u0a58\b")
        buf.write(")\1\2\u0a55\u0a57\t\2\2\2\u0a56\u0a55\3\2\2\2\u0a57\u0a5a")
        buf.write("\3\2\2\2\u0a58\u0a56\3\2\2\2\u0a58\u0a59\3\2\2\2\u0a59")
        buf.write("\u0a5b\3\2\2\2\u0a5a\u0a58\3\2\2\2\u0a5b\u0a5f\5\34\17")
        buf.write("\2\u0a5c\u0a5e\t\2\2\2\u0a5d\u0a5c\3\2\2\2\u0a5e\u0a61")
        buf.write("\3\2\2\2\u0a5f\u0a5d\3\2\2\2\u0a5f\u0a60\3\2\2\2\u0a60")
        buf.write("\u0a63\3\2\2\2\u0a61\u0a5f\3\2\2\2\u0a62\u0a0e\3\2\2\2")
        buf.write("\u0a62\u0a25\3\2\2\2\u0a62\u0a3c\3\2\2\2\u0a62\u0a4d\3")
        buf.write("\2\2\2\u0a63Q\3\2\2\2\u0a64\u0a68\7+\2\2\u0a65\u0a67\t")
        buf.write("\2\2\2\u0a66\u0a65\3\2\2\2\u0a67\u0a6a\3\2\2\2\u0a68\u0a66")
        buf.write("\3\2\2\2\u0a68\u0a69\3\2\2\2\u0a69\u0a6b\3\2\2\2\u0a6a")
        buf.write("\u0a68\3\2\2\2\u0a6b\u0a6f\7\4\2\2\u0a6c\u0a6e\t\2\2\2")
        buf.write("\u0a6d\u0a6c\3\2\2\2\u0a6e\u0a71\3\2\2\2\u0a6f\u0a6d\3")
        buf.write("\2\2\2\u0a6f\u0a70\3\2\2\2\u0a70\u0a72\3\2\2\2\u0a71\u0a6f")
        buf.write("\3\2\2\2\u0a72\u0a76\5\34\17\2\u0a73\u0a75\t\2\2\2\u0a74")
        buf.write("\u0a73\3\2\2\2\u0a75\u0a78\3\2\2\2\u0a76\u0a74\3\2\2\2")
        buf.write("\u0a76\u0a77\3\2\2\2\u0a77\u0a79\3\2\2\2\u0a78\u0a76\3")
        buf.write("\2\2\2\u0a79\u0a7a\7\6\2\2\u0a7a\u0ab9\3\2\2\2\u0a7b\u0a7f")
        buf.write("\7+\2\2\u0a7c\u0a7e\t\2\2\2\u0a7d\u0a7c\3\2\2\2\u0a7e")
        buf.write("\u0a81\3\2\2\2\u0a7f\u0a7d\3\2\2\2\u0a7f\u0a80\3\2\2\2")
        buf.write("\u0a80\u0a82\3\2\2\2\u0a81\u0a7f\3\2\2\2\u0a82\u0a86\b")
        buf.write("*\1\2\u0a83\u0a85\t\2\2\2\u0a84\u0a83\3\2\2\2\u0a85\u0a88")
        buf.write("\3\2\2\2\u0a86\u0a84\3\2\2\2\u0a86\u0a87\3\2\2\2\u0a87")
        buf.write("\u0a89\3\2\2\2\u0a88\u0a86\3\2\2\2\u0a89\u0a8d\5\34\17")
        buf.write("\2\u0a8a\u0a8c\t\2\2\2\u0a8b\u0a8a\3\2\2\2\u0a8c\u0a8f")
        buf.write("\3\2\2\2\u0a8d\u0a8b\3\2\2\2\u0a8d\u0a8e\3\2\2\2\u0a8e")
        buf.write("\u0a90\3\2\2\2\u0a8f\u0a8d\3\2\2\2\u0a90\u0a91\7\6\2\2")
        buf.write("\u0a91\u0ab9\3\2\2\2\u0a92\u0a96\7+\2\2\u0a93\u0a95\t")
        buf.write("\2\2\2\u0a94\u0a93\3\2\2\2\u0a95\u0a98\3\2\2\2\u0a96\u0a94")
        buf.write("\3\2\2\2\u0a96\u0a97\3\2\2\2\u0a97\u0a99\3\2\2\2\u0a98")
        buf.write("\u0a96\3\2\2\2\u0a99\u0a9d\7\4\2\2\u0a9a\u0a9c\t\2\2\2")
        buf.write("\u0a9b\u0a9a\3\2\2\2\u0a9c\u0a9f\3\2\2\2\u0a9d\u0a9b\3")
        buf.write("\2\2\2\u0a9d\u0a9e\3\2\2\2\u0a9e\u0aa0\3\2\2\2\u0a9f\u0a9d")
        buf.write("\3\2\2\2\u0aa0\u0aa1\5\34\17\2\u0aa1\u0aa2\b*\1\2\u0aa2")
        buf.write("\u0ab9\3\2\2\2\u0aa3\u0aa7\7+\2\2\u0aa4\u0aa6\t\2\2\2")
        buf.write("\u0aa5\u0aa4\3\2\2\2\u0aa6\u0aa9\3\2\2\2\u0aa7\u0aa5\3")
        buf.write("\2\2\2\u0aa7\u0aa8\3\2\2\2\u0aa8\u0aaa\3\2\2\2\u0aa9\u0aa7")
        buf.write("\3\2\2\2\u0aaa\u0aae\b*\1\2\u0aab\u0aad\t\2\2\2\u0aac")
        buf.write("\u0aab\3\2\2\2\u0aad\u0ab0\3\2\2\2\u0aae\u0aac\3\2\2\2")
        buf.write("\u0aae\u0aaf\3\2\2\2\u0aaf\u0ab1\3\2\2\2\u0ab0\u0aae\3")
        buf.write("\2\2\2\u0ab1\u0ab5\5\34\17\2\u0ab2\u0ab4\t\2\2\2\u0ab3")
        buf.write("\u0ab2\3\2\2\2\u0ab4\u0ab7\3\2\2\2\u0ab5\u0ab3\3\2\2\2")
        buf.write("\u0ab5\u0ab6\3\2\2\2\u0ab6\u0ab9\3\2\2\2\u0ab7\u0ab5\3")
        buf.write("\2\2\2\u0ab8\u0a64\3\2\2\2\u0ab8\u0a7b\3\2\2\2\u0ab8\u0a92")
        buf.write("\3\2\2\2\u0ab8\u0aa3\3\2\2\2\u0ab9S\3\2\2\2\u0aba\u0abe")
        buf.write("\7,\2\2\u0abb\u0abd\t\2\2\2\u0abc\u0abb\3\2\2\2\u0abd")
        buf.write("\u0ac0\3\2\2\2\u0abe\u0abc\3\2\2\2\u0abe\u0abf\3\2\2\2")
        buf.write("\u0abf\u0ac1\3\2\2\2\u0ac0\u0abe\3\2\2\2\u0ac1\u0ac5\7")
        buf.write("\4\2\2\u0ac2\u0ac4\t\2\2\2\u0ac3\u0ac2\3\2\2\2\u0ac4\u0ac7")
        buf.write("\3\2\2\2\u0ac5\u0ac3\3\2\2\2\u0ac5\u0ac6\3\2\2\2\u0ac6")
        buf.write("\u0acb\3\2\2\2\u0ac7\u0ac5\3\2\2\2\u0ac8\u0acc\7\65\2")
        buf.write("\2\u0ac9\u0acc\5Z.\2\u0aca\u0acc\5X-\2\u0acb\u0ac8\3\2")
        buf.write("\2\2\u0acb\u0ac9\3\2\2\2\u0acb\u0aca\3\2\2\2\u0acc\u0ad0")
        buf.write("\3\2\2\2\u0acd\u0acf\t\2\2\2\u0ace\u0acd\3\2\2\2\u0acf")
        buf.write("\u0ad2\3\2\2\2\u0ad0\u0ace\3\2\2\2\u0ad0\u0ad1\3\2\2\2")
        buf.write("\u0ad1\u0ad3\3\2\2\2\u0ad2\u0ad0\3\2\2\2\u0ad3\u0b1c\7")
        buf.write("\6\2\2\u0ad4\u0ad8\7,\2\2\u0ad5\u0ad7\t\2\2\2\u0ad6\u0ad5")
        buf.write("\3\2\2\2\u0ad7\u0ada\3\2\2\2\u0ad8\u0ad6\3\2\2\2\u0ad8")
        buf.write("\u0ad9\3\2\2\2\u0ad9\u0adb\3\2\2\2\u0ada\u0ad8\3\2\2\2")
        buf.write("\u0adb\u0adf\b+\1\2\u0adc\u0ade\t\2\2\2\u0add\u0adc\3")
        buf.write("\2\2\2\u0ade\u0ae1\3\2\2\2\u0adf\u0add\3\2\2\2\u0adf\u0ae0")
        buf.write("\3\2\2\2\u0ae0\u0ae5\3\2\2\2\u0ae1\u0adf\3\2\2\2\u0ae2")
        buf.write("\u0ae6\7\65\2\2\u0ae3\u0ae6\5Z.\2\u0ae4\u0ae6\5X-\2\u0ae5")
        buf.write("\u0ae2\3\2\2\2\u0ae5\u0ae3\3\2\2\2\u0ae5\u0ae4\3\2\2\2")
        buf.write("\u0ae6\u0aea\3\2\2\2\u0ae7\u0ae9\t\2\2\2\u0ae8\u0ae7\3")
        buf.write("\2\2\2\u0ae9\u0aec\3\2\2\2\u0aea\u0ae8\3\2\2\2\u0aea\u0aeb")
        buf.write("\3\2\2\2\u0aeb\u0aed\3\2\2\2\u0aec\u0aea\3\2\2\2\u0aed")
        buf.write("\u0b1c\7\6\2\2\u0aee\u0af2\7,\2\2\u0aef\u0af1\t\2\2\2")
        buf.write("\u0af0\u0aef\3\2\2\2\u0af1\u0af4\3\2\2\2\u0af2\u0af0\3")
        buf.write("\2\2\2\u0af2\u0af3\3\2\2\2\u0af3\u0af5\3\2\2\2\u0af4\u0af2")
        buf.write("\3\2\2\2\u0af5\u0af9\7\4\2\2\u0af6\u0af8\t\2\2\2\u0af7")
        buf.write("\u0af6\3\2\2\2\u0af8\u0afb\3\2\2\2\u0af9\u0af7\3\2\2\2")
        buf.write("\u0af9\u0afa\3\2\2\2\u0afa\u0aff\3\2\2\2\u0afb\u0af9\3")
        buf.write("\2\2\2\u0afc\u0b00\7\65\2\2\u0afd\u0b00\5Z.\2\u0afe\u0b00")
        buf.write("\5X-\2\u0aff\u0afc\3\2\2\2\u0aff\u0afd\3\2\2\2\u0aff\u0afe")
        buf.write("\3\2\2\2\u0b00\u0b01\3\2\2\2\u0b01\u0b1c\b+\1\2\u0b02")
        buf.write("\u0b06\7,\2\2\u0b03\u0b05\t\2\2\2\u0b04\u0b03\3\2\2\2")
        buf.write("\u0b05\u0b08\3\2\2\2\u0b06\u0b04\3\2\2\2\u0b06\u0b07\3")
        buf.write("\2\2\2\u0b07\u0b09\3\2\2\2\u0b08\u0b06\3\2\2\2\u0b09\u0b0d")
        buf.write("\b+\1\2\u0b0a\u0b0c\t\2\2\2\u0b0b\u0b0a\3\2\2\2\u0b0c")
        buf.write("\u0b0f\3\2\2\2\u0b0d\u0b0b\3\2\2\2\u0b0d\u0b0e\3\2\2\2")
        buf.write("\u0b0e\u0b13\3\2\2\2\u0b0f\u0b0d\3\2\2\2\u0b10\u0b14\7")
        buf.write("\65\2\2\u0b11\u0b14\5Z.\2\u0b12\u0b14\5X-\2\u0b13\u0b10")
        buf.write("\3\2\2\2\u0b13\u0b11\3\2\2\2\u0b13\u0b12\3\2\2\2\u0b14")
        buf.write("\u0b18\3\2\2\2\u0b15\u0b17\t\2\2\2\u0b16\u0b15\3\2\2\2")
        buf.write("\u0b17\u0b1a\3\2\2\2\u0b18\u0b16\3\2\2\2\u0b18\u0b19\3")
        buf.write("\2\2\2\u0b19\u0b1c\3\2\2\2\u0b1a\u0b18\3\2\2\2\u0b1b\u0aba")
        buf.write("\3\2\2\2\u0b1b\u0ad4\3\2\2\2\u0b1b\u0aee\3\2\2\2\u0b1b")
        buf.write("\u0b02\3\2\2\2\u0b1cU\3\2\2\2\u0b1d\u0b21\7\24\2\2\u0b1e")
        buf.write("\u0b20\t\2\2\2\u0b1f\u0b1e\3\2\2\2\u0b20\u0b23\3\2\2\2")
        buf.write("\u0b21\u0b1f\3\2\2\2\u0b21\u0b22\3\2\2\2\u0b22\u0b24\3")
        buf.write("\2\2\2\u0b23\u0b21\3\2\2\2\u0b24\u0b28\7\4\2\2\u0b25\u0b27")
        buf.write("\t\2\2\2\u0b26\u0b25\3\2\2\2\u0b27\u0b2a\3\2\2\2\u0b28")
        buf.write("\u0b26\3\2\2\2\u0b28\u0b29\3\2\2\2\u0b29\u0b2b\3\2\2\2")
        buf.write("\u0b2a\u0b28\3\2\2\2\u0b2b\u0b2f\5\34\17\2\u0b2c\u0b2e")
        buf.write("\t\2\2\2\u0b2d\u0b2c\3\2\2\2\u0b2e\u0b31\3\2\2\2\u0b2f")
        buf.write("\u0b2d\3\2\2\2\u0b2f\u0b30\3\2\2\2\u0b30\u0b32\3\2\2\2")
        buf.write("\u0b31\u0b2f\3\2\2\2\u0b32\u0b33\7\6\2\2\u0b33\u0b72\3")
        buf.write("\2\2\2\u0b34\u0b38\7\24\2\2\u0b35\u0b37\t\2\2\2\u0b36")
        buf.write("\u0b35\3\2\2\2\u0b37\u0b3a\3\2\2\2\u0b38\u0b36\3\2\2\2")
        buf.write("\u0b38\u0b39\3\2\2\2\u0b39\u0b3b\3\2\2\2\u0b3a\u0b38\3")
        buf.write("\2\2\2\u0b3b\u0b3f\b,\1\2\u0b3c\u0b3e\t\2\2\2\u0b3d\u0b3c")
        buf.write("\3\2\2\2\u0b3e\u0b41\3\2\2\2\u0b3f\u0b3d\3\2\2\2\u0b3f")
        buf.write("\u0b40\3\2\2\2\u0b40\u0b42\3\2\2\2\u0b41\u0b3f\3\2\2\2")
        buf.write("\u0b42\u0b46\5\34\17\2\u0b43\u0b45\t\2\2\2\u0b44\u0b43")
        buf.write("\3\2\2\2\u0b45\u0b48\3\2\2\2\u0b46\u0b44\3\2\2\2\u0b46")
        buf.write("\u0b47\3\2\2\2\u0b47\u0b49\3\2\2\2\u0b48\u0b46\3\2\2\2")
        buf.write("\u0b49\u0b4a\7\6\2\2\u0b4a\u0b72\3\2\2\2\u0b4b\u0b4f\7")
        buf.write("\24\2\2\u0b4c\u0b4e\t\2\2\2\u0b4d\u0b4c\3\2\2\2\u0b4e")
        buf.write("\u0b51\3\2\2\2\u0b4f\u0b4d\3\2\2\2\u0b4f\u0b50\3\2\2\2")
        buf.write("\u0b50\u0b52\3\2\2\2\u0b51\u0b4f\3\2\2\2\u0b52\u0b56\7")
        buf.write("\4\2\2\u0b53\u0b55\t\2\2\2\u0b54\u0b53\3\2\2\2\u0b55\u0b58")
        buf.write("\3\2\2\2\u0b56\u0b54\3\2\2\2\u0b56\u0b57\3\2\2\2\u0b57")
        buf.write("\u0b59\3\2\2\2\u0b58\u0b56\3\2\2\2\u0b59\u0b5a\5\34\17")
        buf.write("\2\u0b5a\u0b5b\b,\1\2\u0b5b\u0b72\3\2\2\2\u0b5c\u0b60")
        buf.write("\7\24\2\2\u0b5d\u0b5f\t\2\2\2\u0b5e\u0b5d\3\2\2\2\u0b5f")
        buf.write("\u0b62\3\2\2\2\u0b60\u0b5e\3\2\2\2\u0b60\u0b61\3\2\2\2")
        buf.write("\u0b61\u0b63\3\2\2\2\u0b62\u0b60\3\2\2\2\u0b63\u0b67\b")
        buf.write(",\1\2\u0b64\u0b66\t\2\2\2\u0b65\u0b64\3\2\2\2\u0b66\u0b69")
        buf.write("\3\2\2\2\u0b67\u0b65\3\2\2\2\u0b67\u0b68\3\2\2\2\u0b68")
        buf.write("\u0b6a\3\2\2\2\u0b69\u0b67\3\2\2\2\u0b6a\u0b6e\5\34\17")
        buf.write("\2\u0b6b\u0b6d\t\2\2\2\u0b6c\u0b6b\3\2\2\2\u0b6d\u0b70")
        buf.write("\3\2\2\2\u0b6e\u0b6c\3\2\2\2\u0b6e\u0b6f\3\2\2\2\u0b6f")
        buf.write("\u0b72\3\2\2\2\u0b70\u0b6e\3\2\2\2\u0b71\u0b1d\3\2\2\2")
        buf.write("\u0b71\u0b34\3\2\2\2\u0b71\u0b4b\3\2\2\2\u0b71\u0b5c\3")
        buf.write("\2\2\2\u0b72W\3\2\2\2\u0b73\u0b74\7(\2\2\u0b74Y\3\2\2")
        buf.write("\2\u0b75\u0b79\7\b\2\2\u0b76\u0b78\t\2\2\2\u0b77\u0b76")
        buf.write("\3\2\2\2\u0b78\u0b7b\3\2\2\2\u0b79\u0b77\3\2\2\2\u0b79")
        buf.write("\u0b7a\3\2\2\2\u0b7a\u0b96\3\2\2\2\u0b7b\u0b79\3\2\2\2")
        buf.write("\u0b7c\u0b8d\5\\/\2\u0b7d\u0b7f\t\2\2\2\u0b7e\u0b7d\3")
        buf.write("\2\2\2\u0b7f\u0b82\3\2\2\2\u0b80\u0b7e\3\2\2\2\u0b80\u0b81")
        buf.write("\3\2\2\2\u0b81\u0b83\3\2\2\2\u0b82\u0b80\3\2\2\2\u0b83")
        buf.write("\u0b87\7\5\2\2\u0b84\u0b86\t\2\2\2\u0b85\u0b84\3\2\2\2")
        buf.write("\u0b86\u0b89\3\2\2\2\u0b87\u0b85\3\2\2\2\u0b87\u0b88\3")
        buf.write("\2\2\2\u0b88\u0b8a\3\2\2\2\u0b89\u0b87\3\2\2\2\u0b8a\u0b8c")
        buf.write("\5\\/\2\u0b8b\u0b80\3\2\2\2\u0b8c\u0b8f\3\2\2\2\u0b8d")
        buf.write("\u0b8b\3\2\2\2\u0b8d\u0b8e\3\2\2\2\u0b8e\u0b93\3\2\2\2")
        buf.write("\u0b8f\u0b8d\3\2\2\2\u0b90\u0b92\t\2\2\2\u0b91\u0b90\3")
        buf.write("\2\2\2\u0b92\u0b95\3\2\2\2\u0b93\u0b91\3\2\2\2\u0b93\u0b94")
        buf.write("\3\2\2\2\u0b94\u0b97\3\2\2\2\u0b95\u0b93\3\2\2\2\u0b96")
        buf.write("\u0b7c\3\2\2\2\u0b96\u0b97\3\2\2\2\u0b97\u0b98\3\2\2\2")
        buf.write("\u0b98\u0bdc\7\t\2\2\u0b99\u0bb4\b.\1\2\u0b9a\u0bab\5")
        buf.write("\\/\2\u0b9b\u0b9d\t\2\2\2\u0b9c\u0b9b\3\2\2\2\u0b9d\u0ba0")
        buf.write("\3\2\2\2\u0b9e\u0b9c\3\2\2\2\u0b9e\u0b9f\3\2\2\2\u0b9f")
        buf.write("\u0ba1\3\2\2\2\u0ba0\u0b9e\3\2\2\2\u0ba1\u0ba5\7\5\2\2")
        buf.write("\u0ba2\u0ba4\t\2\2\2\u0ba3\u0ba2\3\2\2\2\u0ba4\u0ba7\3")
        buf.write("\2\2\2\u0ba5\u0ba3\3\2\2\2\u0ba5\u0ba6\3\2\2\2\u0ba6\u0ba8")
        buf.write("\3\2\2\2\u0ba7\u0ba5\3\2\2\2\u0ba8\u0baa\5\\/\2\u0ba9")
        buf.write("\u0b9e\3\2\2\2\u0baa\u0bad\3\2\2\2\u0bab\u0ba9\3\2\2\2")
        buf.write("\u0bab\u0bac\3\2\2\2\u0bac\u0bb1\3\2\2\2\u0bad\u0bab\3")
        buf.write("\2\2\2\u0bae\u0bb0\t\2\2\2\u0baf\u0bae\3\2\2\2\u0bb0\u0bb3")
        buf.write("\3\2\2\2\u0bb1\u0baf\3\2\2\2\u0bb1\u0bb2\3\2\2\2\u0bb2")
        buf.write("\u0bb5\3\2\2\2\u0bb3\u0bb1\3\2\2\2\u0bb4\u0b9a\3\2\2\2")
        buf.write("\u0bb4\u0bb5\3\2\2\2\u0bb5\u0bb6\3\2\2\2\u0bb6\u0bdc\7")
        buf.write("\t\2\2\u0bb7\u0bbb\7\b\2\2\u0bb8\u0bba\t\2\2\2\u0bb9\u0bb8")
        buf.write("\3\2\2\2\u0bba\u0bbd\3\2\2\2\u0bbb\u0bb9\3\2\2\2\u0bbb")
        buf.write("\u0bbc\3\2\2\2\u0bbc\u0bd8\3\2\2\2\u0bbd\u0bbb\3\2\2\2")
        buf.write("\u0bbe\u0bcf\5\\/\2\u0bbf\u0bc1\t\2\2\2\u0bc0\u0bbf\3")
        buf.write("\2\2\2\u0bc1\u0bc4\3\2\2\2\u0bc2\u0bc0\3\2\2\2\u0bc2\u0bc3")
        buf.write("\3\2\2\2\u0bc3\u0bc5\3\2\2\2\u0bc4\u0bc2\3\2\2\2\u0bc5")
        buf.write("\u0bc9\7\5\2\2\u0bc6\u0bc8\t\2\2\2\u0bc7\u0bc6\3\2\2\2")
        buf.write("\u0bc8\u0bcb\3\2\2\2\u0bc9\u0bc7\3\2\2\2\u0bc9\u0bca\3")
        buf.write("\2\2\2\u0bca\u0bcc\3\2\2\2\u0bcb\u0bc9\3\2\2\2\u0bcc\u0bce")
        buf.write("\5\\/\2\u0bcd\u0bc2\3\2\2\2\u0bce\u0bd1\3\2\2\2\u0bcf")
        buf.write("\u0bcd\3\2\2\2\u0bcf\u0bd0\3\2\2\2\u0bd0\u0bd5\3\2\2\2")
        buf.write("\u0bd1\u0bcf\3\2\2\2\u0bd2\u0bd4\t\2\2\2\u0bd3\u0bd2\3")
        buf.write("\2\2\2\u0bd4\u0bd7\3\2\2\2\u0bd5\u0bd3\3\2\2\2\u0bd5\u0bd6")
        buf.write("\3\2\2\2\u0bd6\u0bd9\3\2\2\2\u0bd7\u0bd5\3\2\2\2\u0bd8")
        buf.write("\u0bbe\3\2\2\2\u0bd8\u0bd9\3\2\2\2\u0bd9\u0bda\3\2\2\2")
        buf.write("\u0bda\u0bdc\b.\1\2\u0bdb\u0b75\3\2\2\2\u0bdb\u0b99\3")
        buf.write("\2\2\2\u0bdb\u0bb7\3\2\2\2\u0bdc[\3\2\2\2\u0bdd\u0bde")
        buf.write("\t\3\2\2\u0bde]\3\2\2\2\u01d7ahov}\u0082\u0087\u008c\u008e")
        buf.write("\u0090\u0097\u009b\u00a0\u00a2\u00a4\u00a9\u00ad\u00b5")
        buf.write("\u00bb\u00c2\u00c9\u00d0\u00d7\u00dc\u00df\u00e5\u00ec")
        buf.write("\u00f2\u00f9\u0100\u0107\u010c\u0112\u0114\u0116\u011d")
        buf.write("\u0121\u0124\u0129\u012b\u0132\u0138\u0140\u0147\u014e")
        buf.write("\u0153\u0156\u015c\u0163\u0169\u0170\u0177\u017e\u0183")
        buf.write("\u0189\u018b\u018d\u0194\u0198\u019b\u01a0\u01a2\u01a9")
        buf.write("\u01af\u01b6\u01bd\u01c4\u01cb\u01d0\u01d3\u01d9\u01e0")
        buf.write("\u01e6\u01ed\u01f4\u01fb\u0200\u0206\u0208\u020a\u0211")
        buf.write("\u0215\u0218\u021d\u021f\u0226\u022c\u0234\u023b\u0242")
        buf.write("\u0247\u024a\u024f\u0256\u025c\u0263\u026a\u0271\u0276")
        buf.write("\u027c\u027e\u0280\u0287\u028b\u028e\u0293\u0295\u0298")
        buf.write("\u029d\u02a3\u02a9\u02af\u02b5\u02bb\u02c1\u02c8\u02cf")
        buf.write("\u02d6\u02db\u02e1\u02e3\u02e5\u02ec\u02f3\u02f5\u02fb")
        buf.write("\u02fd\u02ff\u0307\u030d\u0313\u0319\u0320\u0327\u032e")
        buf.write("\u0333\u0339\u033b\u033d\u0344\u034b\u034d\u0353\u0355")
        buf.write("\u0357\u0360\u0364\u036d\u0371\u0375\u037b\u0381\u0387")
        buf.write("\u038d\u0394\u039b\u03a2\u03a7\u03ad\u03af\u03b1\u03b8")
        buf.write("\u03bf\u03c1\u03c7\u03c9\u03cb\u03d2\u03d8\u03df\u03e6")
        buf.write("\u03ed\u03f2\u03f8\u03fa\u03fc\u0403\u040a\u040c\u0412")
        buf.write("\u0414\u0416\u0418\u041e\u0427\u042d\u0434\u043b\u0442")
        buf.write("\u0447\u044d\u044f\u0451\u0458\u045f\u0461\u0467\u0469")
        buf.write("\u046b\u0471\u0478\u047e\u0482\u0487\u048d\u0493\u049a")
        buf.write("\u04a8\u04ae\u04b5\u04bb\u04c1\u04c8\u04ce\u04e9\u0505")
        buf.write("\u0509\u050e\u0515\u051e\u0525\u052c\u0531\u0537\u053e")
        buf.write("\u0547\u0550\u0557\u055e\u0565\u056c\u0571\u0574\u057b")
        buf.write("\u0582\u0589\u0590\u0597\u059c\u059f\u05a6\u05ad\u05b4")
        buf.write("\u05bb\u05c2\u05c7\u05ca\u05cd\u05d3\u05da\u05e1\u05ea")
        buf.write("\u05f1\u05f8\u0601\u0608\u0612\u0619\u0620\u0623\u0629")
        buf.write("\u0630\u0637\u0640\u0647\u064e\u0657\u065e\u0668\u066f")
        buf.write("\u0676\u0679\u067f\u0686\u068d\u0696\u069d\u06a4\u06ad")
        buf.write("\u06b4\u06be\u06c5\u06cc\u06cf\u06d5\u06dc\u06e3\u06ec")
        buf.write("\u06f3\u06fa\u0703\u070a\u0714\u071b\u0722\u0725\u072b")
        buf.write("\u0732\u0739\u0740\u0747\u0750\u0757\u075e\u0767\u076e")
        buf.write("\u0775\u077e\u0785\u078f\u0796\u079d\u07a0\u07a6\u07ad")
        buf.write("\u07b4\u07bb\u07c2\u07cb\u07d2\u07d9\u07e0\u07e7\u07f0")
        buf.write("\u07f7\u07fe\u0805\u080c\u0815\u081c\u0823\u082a\u0831")
        buf.write("\u083a\u0841\u0848\u0851\u0858\u085f\u0868\u086f\u0879")
        buf.write("\u0880\u0887\u088a\u0890\u0897\u089e\u08a7\u08ae\u08b5")
        buf.write("\u08be\u08c5\u08cf\u08d6\u08dd\u08e0\u08e6\u08ed\u08f4")
        buf.write("\u08fb\u0900\u0907\u0910\u0917\u091e\u0927\u092e\u0935")
        buf.write("\u093e\u0945\u094f\u0956\u095d\u0960\u0966\u096d\u0974")
        buf.write("\u097d\u0984\u098b\u0994\u099b\u09a5\u09ac\u09b3\u09b6")
        buf.write("\u09bc\u09c3\u09ca\u09d3\u09da\u09e1\u09ea\u09f1\u09fb")
        buf.write("\u0a02\u0a09\u0a0c\u0a12\u0a19\u0a20\u0a29\u0a30\u0a37")
        buf.write("\u0a40\u0a47\u0a51\u0a58\u0a5f\u0a62\u0a68\u0a6f\u0a76")
        buf.write("\u0a7f\u0a86\u0a8d\u0a96\u0a9d\u0aa7\u0aae\u0ab5\u0ab8")
        buf.write("\u0abe\u0ac5\u0acb\u0ad0\u0ad8\u0adf\u0ae5\u0aea\u0af2")
        buf.write("\u0af9\u0aff\u0b06\u0b0d\u0b13\u0b18\u0b1b\u0b21\u0b28")
        buf.write("\u0b2f\u0b38\u0b3f\u0b46\u0b4f\u0b56\u0b60\u0b67\u0b6e")
        buf.write("\u0b71\u0b79\u0b80\u0b87\u0b8d\u0b93\u0b96\u0b9e\u0ba5")
        buf.write("\u0bab\u0bb1\u0bb4\u0bbb\u0bc2\u0bc9\u0bcf\u0bd5\u0bd8")
        buf.write("\u0bdb")
        return buf.getvalue()


class WordlifyParser ( Parser ):

    grammarFileName = "Wordlify.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'('", "','", "')'", "'='", "'['", 
                     "']'", "'fn'", "'while'", "'foreach'", "'in'", "'do'", 
                     "'if'", "'then'", "'else'", "'begin'", "'end'", "'baseName'", 
                     "'use'", "'exist'", "'print'", "'rename'", "'remove'", 
                     "'move'", "'copy'", "'download'", "'write'", "'wait'", 
                     "'execute'", "'exit'", "'time'", "'getFiles'", "'dateModified'", 
                     "'isDir'", "'isFile'", "'file'", "'folder'", "'args'", 
                     "'size'", "'read'", "'create'", "'length'", "'<-'", 
                     "<INVALID>", "<INVALID>", "'.'", "<INVALID>", "'not'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "FN", "WHILE", "FOREACH", "IN", "DO", "IF", "THEN", 
                      "ELSE", "BEGIN", "END", "BASENAME", "IMPORT", "EXIST", 
                      "PRINT", "RENAME", "REMOVE", "MOVE", "COPY", "DOWNLOAD", 
                      "WRITE", "WAIT", "EXECUTE", "EXIT", "TIME", "GET_FILES", 
                      "DATE_MODIFIED", "IS_DIR", "IS_FILE", "FILE", "FOLDER", 
                      "ARGS", "SIZE", "READ", "CREATE", "LENGTH", "APPEND", 
                      "CMP_OP", "ARITH_OP", "CONCAT_OP", "BIN_LOG_OP", "NOT", 
                      "BOOL", "STR", "ID", "NUM", "WS", "NL", "END_COMMENT", 
                      "ERROR_CHAR" ]

    RULE_program = 0
    RULE_fn_def = 1
    RULE_block_instr = 2
    RULE_foreach = 3
    RULE_while_instr = 4
    RULE_if_instr = 5
    RULE_if_cond = 6
    RULE_then = 7
    RULE_else_if = 8
    RULE_else_block = 9
    RULE_cond = 10
    RULE_single_cond = 11
    RULE_comparison = 12
    RULE_expr = 13
    RULE_arith_expr = 14
    RULE_concat = 15
    RULE_fn_call = 16
    RULE_atom_instr = 17
    RULE_assign = 18
    RULE_array_append = 19
    RULE_array_elem = 20
    RULE_import_call = 21
    RULE_own_fn_call = 22
    RULE_exist = 23
    RULE_is_file = 24
    RULE_is_dir = 25
    RULE_print_instr = 26
    RULE_rename = 27
    RULE_remove = 28
    RULE_move = 29
    RULE_copy = 30
    RULE_download = 31
    RULE_write = 32
    RULE_read = 33
    RULE_wait_instr = 34
    RULE_execute = 35
    RULE_get_files = 36
    RULE_date_modified = 37
    RULE_size = 38
    RULE_exit = 39
    RULE_create = 40
    RULE_length = 41
    RULE_basename = 42
    RULE_args = 43
    RULE_array = 44
    RULE_value_or_id = 45

    ruleNames =  [ "program", "fn_def", "block_instr", "foreach", "while_instr", 
                   "if_instr", "if_cond", "then", "else_if", "else_block", 
                   "cond", "single_cond", "comparison", "expr", "arith_expr", 
                   "concat", "fn_call", "atom_instr", "assign", "array_append", 
                   "array_elem", "import_call", "own_fn_call", "exist", 
                   "is_file", "is_dir", "print_instr", "rename", "remove", 
                   "move", "copy", "download", "write", "read", "wait_instr", 
                   "execute", "get_files", "date_modified", "size", "exit", 
                   "create", "length", "basename", "args", "array", "value_or_id" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    FN=8
    WHILE=9
    FOREACH=10
    IN=11
    DO=12
    IF=13
    THEN=14
    ELSE=15
    BEGIN=16
    END=17
    BASENAME=18
    IMPORT=19
    EXIST=20
    PRINT=21
    RENAME=22
    REMOVE=23
    MOVE=24
    COPY=25
    DOWNLOAD=26
    WRITE=27
    WAIT=28
    EXECUTE=29
    EXIT=30
    TIME=31
    GET_FILES=32
    DATE_MODIFIED=33
    IS_DIR=34
    IS_FILE=35
    FILE=36
    FOLDER=37
    ARGS=38
    SIZE=39
    READ=40
    CREATE=41
    LENGTH=42
    APPEND=43
    CMP_OP=44
    ARITH_OP=45
    CONCAT_OP=46
    BIN_LOG_OP=47
    NOT=48
    BOOL=49
    STR=50
    ID=51
    NUM=52
    WS=53
    NL=54
    END_COMMENT=55
    ERROR_CHAR=56

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(WordlifyParser.EOF, 0)

        def END_COMMENT(self):
            return self.getToken(WordlifyParser.END_COMMENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def fn_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Fn_defContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Fn_defContext,i)


        def import_call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Import_callContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Import_callContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = WordlifyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 95
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 92
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 97
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.FN) | (1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.IMPORT) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 142
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 140
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                        if la_ == 1:
                            self.state = 98
                            self.atom_instr()
                            self.state = 102
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 99
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 104
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 105
                            self.match(WordlifyParser.T__0)
                            self.state = 109
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 106
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 111
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 112
                            self.atom_instr()
                            self.state = 126 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 116
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 113
                                    self.match(WordlifyParser.WS)
                                    self.state = 118
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 119
                                self.match(WordlifyParser.NL)
                                self.state = 123
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 120
                                        self.match(WordlifyParser.WS) 
                                    self.state = 125
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                                self.state = 128 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 133
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                                self.state = 130
                                self.block_instr()
                                pass
                            elif token in [WordlifyParser.FN]:
                                self.state = 131
                                self.fn_def()
                                pass
                            elif token in [WordlifyParser.IMPORT]:
                                self.state = 132
                                self.import_call()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 136 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 135
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 138 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 144
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                self.state = 160
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 145
                    self.atom_instr()
                    self.state = 149
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 146
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 151
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                    self.state = 153
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==WordlifyParser.T__0:
                        self.state = 152
                        self.match(WordlifyParser.T__0)


                    pass
                elif token in [WordlifyParser.FN, WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF, WordlifyParser.IMPORT]:
                    self.state = 158
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 155
                        self.block_instr()
                        pass
                    elif token in [WordlifyParser.FN]:
                        self.state = 156
                        self.fn_def()
                        pass
                    elif token in [WordlifyParser.IMPORT]:
                        self.state = 157
                        self.import_call()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 164
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 169
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.END_COMMENT:
                self.state = 170
                self.match(WordlifyParser.END_COMMENT)


            self.state = 173
            self.match(WordlifyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FN(self):
            return self.getToken(WordlifyParser.FN, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def BEGIN(self):
            return self.getToken(WordlifyParser.BEGIN, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_def" ):
                listener.enterFn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_def" ):
                listener.exitFn_def(self)




    def fn_def(self):

        localctx = WordlifyParser.Fn_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fn_def)
        self._la = 0 # Token type
        try:
            self.state = 662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 175
                self.match(WordlifyParser.FN)
                self.state = 177 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 176
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 179 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 181
                self.match(WordlifyParser.ID)
                self.state = 185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 182
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 187
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 188
                self.match(WordlifyParser.T__1)
                self.state = 192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 189
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 194
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ID:
                    self.state = 195
                    self.match(WordlifyParser.ID)
                    self.state = 199
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 196
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 201
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 218
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.T__2:
                        self.state = 202
                        self.match(WordlifyParser.T__2)
                        self.state = 206
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 203
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 208
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 209
                        self.match(WordlifyParser.ID)
                        self.state = 213
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 210
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 215
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 220
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 223
                self.match(WordlifyParser.T__3)
                self.state = 227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 224
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 229
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 230
                self.match(WordlifyParser.BEGIN)
                self.state = 232 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 231
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 234 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 276
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 274
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                            if la_ == 1:
                                self.state = 236
                                self.atom_instr()
                                self.state = 240
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 237
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 242
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 243
                                self.match(WordlifyParser.T__0)
                                self.state = 247
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 244
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 249
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 250
                                self.atom_instr()
                                self.state = 264 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 254
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 251
                                        self.match(WordlifyParser.WS)
                                        self.state = 256
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 257
                                    self.match(WordlifyParser.NL)
                                    self.state = 261
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 258
                                            self.match(WordlifyParser.WS) 
                                        self.state = 263
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                                    self.state = 266 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 268
                                self.block_instr()
                                self.state = 270 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 269
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 272 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 278
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                    self.state = 290
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 279
                        self.atom_instr()
                        self.state = 283
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 280
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 285
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                        self.state = 287
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==WordlifyParser.T__0:
                            self.state = 286
                            self.match(WordlifyParser.T__0)


                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 289
                        self.block_instr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 293 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 292
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 295 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break



                self.state = 299
                self.match(WordlifyParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 300
                self.match(WordlifyParser.FN)
                self.state = 302 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 301
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 304 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 306
                self.match(WordlifyParser.ID)
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 307
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.notifyErrorListeners("Missing opening paranthesis")
                self.state = 340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ID:
                    self.state = 314
                    self.match(WordlifyParser.ID)
                    self.state = 318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 315
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 320
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 337
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.T__2:
                        self.state = 321
                        self.match(WordlifyParser.T__2)
                        self.state = 325
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 322
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 327
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 328
                        self.match(WordlifyParser.ID)
                        self.state = 332
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 329
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 334
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 339
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 342
                self.match(WordlifyParser.T__3)
                self.state = 346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 343
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 348
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 349
                self.match(WordlifyParser.BEGIN)
                self.state = 351 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 350
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 353 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 395
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 393
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                            if la_ == 1:
                                self.state = 355
                                self.atom_instr()
                                self.state = 359
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 356
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 361
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 362
                                self.match(WordlifyParser.T__0)
                                self.state = 366
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 363
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 368
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 369
                                self.atom_instr()
                                self.state = 383 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 373
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 370
                                        self.match(WordlifyParser.WS)
                                        self.state = 375
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 376
                                    self.match(WordlifyParser.NL)
                                    self.state = 380
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 377
                                            self.match(WordlifyParser.WS) 
                                        self.state = 382
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

                                    self.state = 385 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 387
                                self.block_instr()
                                self.state = 389 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 388
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 391 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 397
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

                    self.state = 409
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 398
                        self.atom_instr()
                        self.state = 402
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 399
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 404
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

                        self.state = 406
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==WordlifyParser.T__0:
                            self.state = 405
                            self.match(WordlifyParser.T__0)


                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 408
                        self.block_instr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 412 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 411
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 414 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break



                self.state = 418
                self.match(WordlifyParser.END)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 419
                self.match(WordlifyParser.FN)
                self.state = 421 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 420
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 423 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 425
                self.match(WordlifyParser.ID)
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 426
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 431
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 432
                self.match(WordlifyParser.T__1)
                self.state = 436
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 433
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 438
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ID:
                    self.state = 439
                    self.match(WordlifyParser.ID)
                    self.state = 443
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 440
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 445
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

                    self.state = 462
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.T__2:
                        self.state = 446
                        self.match(WordlifyParser.T__2)
                        self.state = 450
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 447
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 452
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 453
                        self.match(WordlifyParser.ID)
                        self.state = 457
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 454
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 459
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

                        self.state = 464
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.notifyErrorListeners("Missing closing paranthesis")
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 468
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 473
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 474
                self.match(WordlifyParser.BEGIN)
                self.state = 476 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 475
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 478 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 520
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 518
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                            if la_ == 1:
                                self.state = 480
                                self.atom_instr()
                                self.state = 484
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 481
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 486
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 487
                                self.match(WordlifyParser.T__0)
                                self.state = 491
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 488
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 493
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 494
                                self.atom_instr()
                                self.state = 508 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 498
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 495
                                        self.match(WordlifyParser.WS)
                                        self.state = 500
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 501
                                    self.match(WordlifyParser.NL)
                                    self.state = 505
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 502
                                            self.match(WordlifyParser.WS) 
                                        self.state = 507
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

                                    self.state = 510 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 512
                                self.block_instr()
                                self.state = 514 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 513
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 516 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 522
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                    self.state = 534
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 523
                        self.atom_instr()
                        self.state = 527
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 524
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 529
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

                        self.state = 531
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==WordlifyParser.T__0:
                            self.state = 530
                            self.match(WordlifyParser.T__0)


                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 533
                        self.block_instr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 537 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 536
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 539 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break



                self.state = 543
                self.match(WordlifyParser.END)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 544
                self.match(WordlifyParser.FN)
                self.state = 546 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 545
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 548 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 550
                self.match(WordlifyParser.ID)
                self.state = 554
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 551
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 556
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

                self.notifyErrorListeners("Missing paranthesis")
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ID:
                    self.state = 558
                    self.match(WordlifyParser.ID)
                    self.state = 562
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,87,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 559
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 564
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

                    self.state = 581
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.T__2:
                        self.state = 565
                        self.match(WordlifyParser.T__2)
                        self.state = 569
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 566
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 571
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 572
                        self.match(WordlifyParser.ID)
                        self.state = 576
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 573
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 578
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                        self.state = 583
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 586
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 592
                self.match(WordlifyParser.BEGIN)
                self.state = 594 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 593
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 596 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 638
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 636
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                            if la_ == 1:
                                self.state = 598
                                self.atom_instr()
                                self.state = 602
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 599
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 604
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 605
                                self.match(WordlifyParser.T__0)
                                self.state = 609
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 606
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 611
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 612
                                self.atom_instr()
                                self.state = 626 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 616
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 613
                                        self.match(WordlifyParser.WS)
                                        self.state = 618
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 619
                                    self.match(WordlifyParser.NL)
                                    self.state = 623
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 620
                                            self.match(WordlifyParser.WS) 
                                        self.state = 625
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

                                    self.state = 628 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 630
                                self.block_instr()
                                self.state = 632 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 631
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 634 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 640
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

                    self.state = 652
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 641
                        self.atom_instr()
                        self.state = 645
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 642
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 647
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

                        self.state = 649
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==WordlifyParser.T__0:
                            self.state = 648
                            self.match(WordlifyParser.T__0)


                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 651
                        self.block_instr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 655 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 654
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 657 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break



                self.state = 661
                self.match(WordlifyParser.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_instr(self):
            return self.getTypedRuleContext(WordlifyParser.If_instrContext,0)


        def while_instr(self):
            return self.getTypedRuleContext(WordlifyParser.While_instrContext,0)


        def foreach(self):
            return self.getTypedRuleContext(WordlifyParser.ForeachContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_block_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_instr" ):
                listener.enterBlock_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_instr" ):
                listener.exitBlock_instr(self)




    def block_instr(self):

        localctx = WordlifyParser.Block_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block_instr)
        try:
            self.state = 667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 664
                self.if_instr()
                pass
            elif token in [WordlifyParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 665
                self.while_instr()
                pass
            elif token in [WordlifyParser.FOREACH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 666
                self.foreach()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeachContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(WordlifyParser.FOREACH, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def IN(self):
            return self.getToken(WordlifyParser.IN, 0)

        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_foreach

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeach" ):
                listener.enterForeach(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeach" ):
                listener.exitForeach(self)




    def foreach(self):

        localctx = WordlifyParser.ForeachContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_foreach)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(WordlifyParser.FOREACH)
            self.state = 671 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 670
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 673 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 675
            self.match(WordlifyParser.ID)
            self.state = 677 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 676
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 679 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 681
            self.match(WordlifyParser.IN)
            self.state = 683 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 682
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 685 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 687
            self.match(WordlifyParser.ID)
            self.state = 689 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 688
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 691 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 693
            self.match(WordlifyParser.DO)
            self.state = 695 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 694
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 697 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 739
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,121,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 737
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                        if la_ == 1:
                            self.state = 699
                            self.atom_instr()
                            self.state = 703
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 700
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 705
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 706
                            self.match(WordlifyParser.T__0)
                            self.state = 710
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 707
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 712
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 713
                            self.atom_instr()
                            self.state = 727 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 717
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 714
                                    self.match(WordlifyParser.WS)
                                    self.state = 719
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 720
                                self.match(WordlifyParser.NL)
                                self.state = 724
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 721
                                        self.match(WordlifyParser.WS) 
                                    self.state = 726
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

                                self.state = 729 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 731
                            self.block_instr()
                            self.state = 733 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 732
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 735 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 741
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,121,self._ctx)

                self.state = 763
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 742
                    self.atom_instr()
                    self.state = 746
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 743
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 748
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

                    self.state = 755
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 749
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 751 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 750
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 753 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 757
                    self.block_instr()
                    self.state = 759 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 758
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 761 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 767
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(WordlifyParser.WHILE, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_while_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_instr" ):
                listener.enterWhile_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_instr" ):
                listener.exitWhile_instr(self)




    def while_instr(self):

        localctx = WordlifyParser.While_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_while_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.match(WordlifyParser.WHILE)
            self.state = 771 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 770
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 773 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

            self.state = 775
            self.cond()
            self.state = 777 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 776
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 779 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 781
            self.match(WordlifyParser.DO)
            self.state = 783 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 782
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 785 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 827
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 825
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                        if la_ == 1:
                            self.state = 787
                            self.atom_instr()
                            self.state = 791
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 788
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 793
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 794
                            self.match(WordlifyParser.T__0)
                            self.state = 798
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 795
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 800
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 801
                            self.atom_instr()
                            self.state = 815 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 805
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 802
                                    self.match(WordlifyParser.WS)
                                    self.state = 807
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 808
                                self.match(WordlifyParser.NL)
                                self.state = 812
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 809
                                        self.match(WordlifyParser.WS) 
                                    self.state = 814
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

                                self.state = 817 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 819
                            self.block_instr()
                            self.state = 821 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 820
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 823 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 829
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

                self.state = 851
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 830
                    self.atom_instr()
                    self.state = 834
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 831
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 836
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

                    self.state = 843
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 837
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 839 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 838
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 841 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 845
                    self.block_instr()
                    self.state = 847 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 846
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 849 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 855
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def else_if(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Else_ifContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Else_ifContext,i)


        def else_block(self):
            return self.getTypedRuleContext(WordlifyParser.Else_blockContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_if_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_instr" ):
                listener.enterIf_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_instr" ):
                listener.exitIf_instr(self)




    def if_instr(self):

        localctx = WordlifyParser.If_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_if_instr)
        self._la = 0 # Token type
        try:
            self.state = 883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 857
                self.if_cond()
                self.state = 858
                self.then()
                self.state = 862
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 859
                        self.else_if() 
                    self.state = 864
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

                self.state = 866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ELSE:
                    self.state = 865
                    self.else_block()


                self.state = 868
                self.match(WordlifyParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 870
                self.if_cond()
                self.state = 871
                self.then()
                self.state = 875
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 872
                        self.else_if() 
                    self.state = 877
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

                self.state = 879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ELSE:
                    self.state = 878
                    self.else_block()


                self.notifyErrorListeners("Missing 'end' at end of 'if' instruction")
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(WordlifyParser.IF, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_if_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_cond" ):
                listener.enterIf_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_cond" ):
                listener.exitIf_cond(self)




    def if_cond(self):

        localctx = WordlifyParser.If_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_if_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.match(WordlifyParser.IF)
            self.state = 887 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 886
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 889 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

            self.state = 891
            self.cond()
            self.state = 893 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 892
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 895 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEN(self):
            return self.getToken(WordlifyParser.THEN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_then

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThen" ):
                listener.enterThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThen" ):
                listener.exitThen(self)




    def then(self):

        localctx = WordlifyParser.ThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_then)
        self._la = 0 # Token type
        try:
            self.state = 1046
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.THEN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 897
                self.match(WordlifyParser.THEN)
                self.state = 899 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 898
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 901 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 943
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,160,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 941
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                            if la_ == 1:
                                self.state = 903
                                self.atom_instr()
                                self.state = 907
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 904
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 909
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 910
                                self.match(WordlifyParser.T__0)
                                self.state = 914
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 911
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 916
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 917
                                self.atom_instr()
                                self.state = 931 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 921
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 918
                                        self.match(WordlifyParser.WS)
                                        self.state = 923
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 924
                                    self.match(WordlifyParser.NL)
                                    self.state = 928
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 925
                                            self.match(WordlifyParser.WS) 
                                        self.state = 930
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

                                    self.state = 933 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 935
                                self.block_instr()
                                self.state = 937 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 936
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 939 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 945
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,160,self._ctx)

                    self.state = 967
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 946
                        self.atom_instr()
                        self.state = 950
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 947
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 952
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

                        self.state = 959
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 953
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 955 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 954
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()

                                else:
                                    raise NoViableAltException(self)
                                self.state = 957 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 961
                        self.block_instr()
                        self.state = 963 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 962
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()

                            else:
                                raise NoViableAltException(self)
                            self.state = 965 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [WordlifyParser.DO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 971
                self.match(WordlifyParser.DO)
                self.notifyErrorListeners("Should be 'then' instead of 'do'")
                self.state = 974 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 973
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 976 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

                self.state = 1044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 1018
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1016
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
                            if la_ == 1:
                                self.state = 978
                                self.atom_instr()
                                self.state = 982
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 979
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 984
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 985
                                self.match(WordlifyParser.T__0)
                                self.state = 989
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 986
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 991
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 992
                                self.atom_instr()
                                self.state = 1006 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 996
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 993
                                        self.match(WordlifyParser.WS)
                                        self.state = 998
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 999
                                    self.match(WordlifyParser.NL)
                                    self.state = 1003
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 1000
                                            self.match(WordlifyParser.WS) 
                                        self.state = 1005
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

                                    self.state = 1008 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 1010
                                self.block_instr()
                                self.state = 1012 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 1011
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 1014 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 1020
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

                    self.state = 1042
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 1021
                        self.atom_instr()
                        self.state = 1025
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1022
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 1027
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

                        self.state = 1034
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 1028
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 1030 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1029
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()

                                else:
                                    raise NoViableAltException(self)
                                self.state = 1032 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 1036
                        self.block_instr()
                        self.state = 1038 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1037
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1040 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_else_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_if" ):
                listener.enterElse_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_if" ):
                listener.exitElse_if(self)




    def else_if(self):

        localctx = WordlifyParser.Else_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_else_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(WordlifyParser.ELSE)
            self.state = 1050 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1049
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1052 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 1054
            self.if_cond()
            self.state = 1055
            self.then()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_else_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_block" ):
                listener.enterElse_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_block" ):
                listener.exitElse_block(self)




    def else_block(self):

        localctx = WordlifyParser.Else_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_else_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self.match(WordlifyParser.ELSE)
            self.state = 1059 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1058
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1061 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

            self.state = 1129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 1103
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,192,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1101
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                        if la_ == 1:
                            self.state = 1063
                            self.atom_instr()
                            self.state = 1067
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 1064
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 1069
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 1070
                            self.match(WordlifyParser.T__0)
                            self.state = 1074
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 1071
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 1076
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 1077
                            self.atom_instr()
                            self.state = 1091 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 1081
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 1078
                                    self.match(WordlifyParser.WS)
                                    self.state = 1083
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 1084
                                self.match(WordlifyParser.NL)
                                self.state = 1088
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,188,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 1085
                                        self.match(WordlifyParser.WS) 
                                    self.state = 1090
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,188,self._ctx)

                                self.state = 1093 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 1095
                            self.block_instr()
                            self.state = 1097 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 1096
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 1099 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 1105
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,192,self._ctx)

                self.state = 1127
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 1106
                    self.atom_instr()
                    self.state = 1110
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,193,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1107
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 1112
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

                    self.state = 1119
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 1113
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 1115 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1114
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1117 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 1121
                    self.block_instr()
                    self.state = 1123 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1122
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1125 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Single_condContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Single_condContext,i)


        def BIN_LOG_OP(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.BIN_LOG_OP)
            else:
                return self.getToken(WordlifyParser.BIN_LOG_OP, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)




    def cond(self):

        localctx = WordlifyParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.single_cond()
            self.state = 1148
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,201,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1135
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1132
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1137
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1138
                    self.match(WordlifyParser.BIN_LOG_OP)
                    self.state = 1142
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,200,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1139
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 1144
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,200,self._ctx)

                    self.state = 1145
                    self.single_cond() 
                self.state = 1150
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def comparison(self):
            return self.getTypedRuleContext(WordlifyParser.ComparisonContext,0)


        def NOT(self):
            return self.getToken(WordlifyParser.NOT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_single_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_cond" ):
                listener.enterSingle_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_cond" ):
                listener.exitSingle_cond(self)




    def single_cond(self):

        localctx = WordlifyParser.Single_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_single_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.NOT:
                self.state = 1151
                self.match(WordlifyParser.NOT)


            self.state = 1157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1154
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1159
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1163
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 1160
                self.fn_call()
                pass

            elif la_ == 2:
                self.state = 1161
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 3:
                self.state = 1162
                self.comparison()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def CMP_OP(self):
            return self.getToken(WordlifyParser.CMP_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = WordlifyParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1165
            self.expr()
            self.state = 1169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1166
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1172
            self.match(WordlifyParser.CMP_OP)
            self.state = 1176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1173
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1179
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def arith_expr(self):
            return self.getTypedRuleContext(WordlifyParser.Arith_exprContext,0)


        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def array_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Array_elemContext,0)


        def concat(self):
            return self.getTypedRuleContext(WordlifyParser.ConcatContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = WordlifyParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_expr)
        try:
            self.state = 1190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1181
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1182
                self.match(WordlifyParser.STR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1183
                self.match(WordlifyParser.NUM)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1184
                self.match(WordlifyParser.ID)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1185
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1186
                self.arith_expr()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1187
                self.array()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1188
                self.array_elem()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1189
                self.concat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def ARITH_OP(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ARITH_OP)
            else:
                return self.getToken(WordlifyParser.ARITH_OP, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)




    def arith_expr(self):

        localctx = WordlifyParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.value_or_id()
            self.state = 1207 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1196
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1193
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1198
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1199
                    self.match(WordlifyParser.ARITH_OP)
                    self.state = 1203
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1200
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1205
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1206
                    self.value_or_id()

                else:
                    raise NoViableAltException(self)
                self.state = 1209 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,210,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConcatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def CONCAT_OP(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.CONCAT_OP)
            else:
                return self.getToken(WordlifyParser.CONCAT_OP, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_concat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcat" ):
                listener.enterConcat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcat" ):
                listener.exitConcat(self)




    def concat(self):

        localctx = WordlifyParser.ConcatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_concat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.value_or_id()
            self.state = 1226 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1215
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1212
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1217
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1218
                    self.match(WordlifyParser.CONCAT_OP)
                    self.state = 1222
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1219
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1224
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1225
                    self.value_or_id()

                else:
                    raise NoViableAltException(self)
                self.state = 1228 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,213,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def basename(self):
            return self.getTypedRuleContext(WordlifyParser.BasenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def length(self):
            return self.getTypedRuleContext(WordlifyParser.LengthContext,0)


        def is_dir(self):
            return self.getTypedRuleContext(WordlifyParser.Is_dirContext,0)


        def is_file(self):
            return self.getTypedRuleContext(WordlifyParser.Is_fileContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_call" ):
                listener.enterFn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_call" ):
                listener.exitFn_call(self)




    def fn_call(self):

        localctx = WordlifyParser.Fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_fn_call)
        try:
            self.state = 1255
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1230
                self.own_fn_call()
                pass
            elif token in [WordlifyParser.EXIST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1231
                self.exist()
                pass
            elif token in [WordlifyParser.PRINT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1232
                self.print_instr()
                pass
            elif token in [WordlifyParser.RENAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1233
                self.rename()
                pass
            elif token in [WordlifyParser.BASENAME]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1234
                self.basename()
                pass
            elif token in [WordlifyParser.REMOVE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1235
                self.remove()
                pass
            elif token in [WordlifyParser.MOVE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1236
                self.move()
                pass
            elif token in [WordlifyParser.COPY]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1237
                self.copy()
                pass
            elif token in [WordlifyParser.DOWNLOAD]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1238
                self.download()
                pass
            elif token in [WordlifyParser.WRITE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1239
                self.write()
                pass
            elif token in [WordlifyParser.READ]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1240
                self.read()
                pass
            elif token in [WordlifyParser.WAIT]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1241
                self.wait_instr()
                pass
            elif token in [WordlifyParser.EXECUTE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1242
                self.execute()
                pass
            elif token in [WordlifyParser.GET_FILES]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1243
                self.get_files()
                pass
            elif token in [WordlifyParser.DATE_MODIFIED]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1244
                self.date_modified()
                pass
            elif token in [WordlifyParser.SIZE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1245
                self.size()
                pass
            elif token in [WordlifyParser.EXIT]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1246
                self.exit()
                pass
            elif token in [WordlifyParser.CREATE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1247
                self.create()
                pass
            elif token in [WordlifyParser.LENGTH]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1248
                self.length()
                pass
            elif token in [WordlifyParser.IS_DIR]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1249
                self.is_dir()
                pass
            elif token in [WordlifyParser.IS_FILE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1250
                self.is_file()
                pass
            elif token in [WordlifyParser.TIME]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1251
                self.match(WordlifyParser.TIME)
                pass
            elif token in [WordlifyParser.FILE]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1252
                self.match(WordlifyParser.FILE)
                pass
            elif token in [WordlifyParser.FOLDER]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1253
                self.match(WordlifyParser.FOLDER)
                pass
            elif token in [WordlifyParser.ARGS]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1254
                self.args()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def basename(self):
            return self.getTypedRuleContext(WordlifyParser.BasenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def array_append(self):
            return self.getTypedRuleContext(WordlifyParser.Array_appendContext,0)


        def assign(self):
            return self.getTypedRuleContext(WordlifyParser.AssignContext,0)


        def is_dir(self):
            return self.getTypedRuleContext(WordlifyParser.Is_dirContext,0)


        def is_file(self):
            return self.getTypedRuleContext(WordlifyParser.Is_fileContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_atom_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_instr" ):
                listener.enterAtom_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_instr" ):
                listener.exitAtom_instr(self)




    def atom_instr(self):

        localctx = WordlifyParser.Atom_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_atom_instr)
        try:
            self.state = 1283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1257
                self.own_fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1258
                self.exist()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1259
                self.print_instr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1260
                self.rename()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1261
                self.basename()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1262
                self.remove()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1263
                self.move()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1264
                self.copy()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1265
                self.download()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1266
                self.write()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1267
                self.read()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1268
                self.wait_instr()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1269
                self.execute()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1270
                self.get_files()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1271
                self.date_modified()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1272
                self.size()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1273
                self.exit()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1274
                self.create()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1275
                self.array_append()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1276
                self.assign()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1277
                self.is_dir()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1278
                self.is_file()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1279
                self.match(WordlifyParser.TIME)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1280
                self.match(WordlifyParser.FILE)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1281
                self.match(WordlifyParser.FOLDER)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1282
                self.args()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def array_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Array_elemContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)




    def assign(self):

        localctx = WordlifyParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.state = 1285
                self.match(WordlifyParser.ID)
                pass

            elif la_ == 2:
                self.state = 1286
                self.array_elem()
                pass


            self.state = 1292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1289
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1294
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1295
            self.match(WordlifyParser.T__4)
            self.state = 1299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1296
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1301
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1302
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_appendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def APPEND(self):
            return self.getToken(WordlifyParser.APPEND, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array_append

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_append" ):
                listener.enterArray_append(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_append" ):
                listener.exitArray_append(self)




    def array_append(self):

        localctx = WordlifyParser.Array_appendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_array_append)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1304
            self.match(WordlifyParser.ID)
            self.state = 1308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1305
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1310
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1311
            self.match(WordlifyParser.APPEND)
            self.state = 1315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1312
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1317
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1318
            self.expr()
            self.state = 1322
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1319
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 1324
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_elem" ):
                listener.enterArray_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_elem" ):
                listener.exitArray_elem(self)




    def array_elem(self):

        localctx = WordlifyParser.Array_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_array_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.state = 1325
                self.match(WordlifyParser.ID)
                pass
            elif token in [WordlifyParser.ARGS]:
                self.state = 1326
                self.args()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1329
            self.match(WordlifyParser.T__5)
            self.state = 1333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1330
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1335
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1336
            self.expr()
            self.state = 1340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1337
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1343
            self.match(WordlifyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(WordlifyParser.IMPORT, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_import_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_call" ):
                listener.enterImport_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_call" ):
                listener.exitImport_call(self)




    def import_call(self):

        localctx = WordlifyParser.Import_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_import_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1345
            self.match(WordlifyParser.IMPORT)
            self.state = 1349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1346
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1351
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1352
            self.match(WordlifyParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Own_fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_own_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOwn_fn_call" ):
                listener.enterOwn_fn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOwn_fn_call" ):
                listener.exitOwn_fn_call(self)




    def own_fn_call(self):

        localctx = WordlifyParser.Own_fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_own_fn_call)
        self._la = 0 # Token type
        try:
            self.state = 1483
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1354
                self.match(WordlifyParser.ID)
                self.state = 1358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1355
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1360
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1361
                self.match(WordlifyParser.T__1)
                self.state = 1365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1362
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1367
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.T__5) | (1 << WordlifyParser.T__6) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.LENGTH) | (1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                    self.state = 1368
                    self.expr()
                    self.state = 1372
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1369
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1374
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1391
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.T__2:
                        self.state = 1375
                        self.match(WordlifyParser.T__2)
                        self.state = 1379
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 1376
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1381
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1382
                        self.expr()
                        self.state = 1386
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 1383
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1388
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1393
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1396
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1397
                self.match(WordlifyParser.ID)
                self.state = 1401
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1398
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 1403
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

                self.notifyErrorListeners("Missing opening paranthesis")
                self.state = 1408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1405
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1410
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.T__5) | (1 << WordlifyParser.T__6) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.LENGTH) | (1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                    self.state = 1411
                    self.expr()
                    self.state = 1415
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1412
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1417
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1434
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.T__2:
                        self.state = 1418
                        self.match(WordlifyParser.T__2)
                        self.state = 1422
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 1419
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1424
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1425
                        self.expr()
                        self.state = 1429
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 1426
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1431
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1436
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1439
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1440
                self.match(WordlifyParser.ID)
                self.state = 1444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1441
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1446
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1447
                self.match(WordlifyParser.T__1)
                self.state = 1451
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,241,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1448
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 1453
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,241,self._ctx)

                self.state = 1480
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
                if la_ == 1:
                    self.state = 1454
                    self.expr()
                    self.state = 1458
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1455
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 1460
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

                    self.state = 1477
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,245,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1461
                            self.match(WordlifyParser.T__2)
                            self.state = 1465
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 1462
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 1467
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 1468
                            self.expr()
                            self.state = 1472
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,244,self._ctx)
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt==1:
                                    self.state = 1469
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume() 
                                self.state = 1474
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,244,self._ctx)
                     
                        self.state = 1479
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,245,self._ctx)



                self.notifyErrorListeners("Missing closing paranthesis")
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIST(self):
            return self.getToken(WordlifyParser.EXIST, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExist" ):
                listener.enterExist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExist" ):
                listener.exitExist(self)




    def exist(self):

        localctx = WordlifyParser.ExistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_exist)
        self._la = 0 # Token type
        try:
            self.state = 1569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1485
                self.match(WordlifyParser.EXIST)
                self.state = 1489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1486
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1492
                self.match(WordlifyParser.T__1)
                self.state = 1496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1493
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1499
                self.expr()
                self.state = 1503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1500
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1505
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1506
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1508
                self.match(WordlifyParser.EXIST)
                self.state = 1512
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,251,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1509
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 1514
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,251,self._ctx)

                self.notifyErrorListeners("Missing opening paranthesis")
                self.state = 1519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1516
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1522
                self.expr()
                self.state = 1526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1523
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1528
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1529
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1531
                self.match(WordlifyParser.EXIST)
                self.state = 1535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1532
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1537
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1538
                self.match(WordlifyParser.T__1)
                self.state = 1542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1539
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1544
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1545
                self.expr()
                self.notifyErrorListeners("Missing closing paranthesis")
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1548
                self.match(WordlifyParser.EXIST)
                self.state = 1552
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,256,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1549
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 1554
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

                self.notifyErrorListeners("Missing paranthesis")
                self.state = 1559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1556
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1562
                self.expr()
                self.state = 1566
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,258,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1563
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 1568
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,258,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS_FILE(self):
            return self.getToken(WordlifyParser.IS_FILE, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_is_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_file" ):
                listener.enterIs_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_file" ):
                listener.exitIs_file(self)




    def is_file(self):

        localctx = WordlifyParser.Is_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_is_file)
        self._la = 0 # Token type
        try:
            self.state = 1655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1571
                self.match(WordlifyParser.IS_FILE)
                self.state = 1575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1572
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1577
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1578
                self.match(WordlifyParser.T__1)
                self.state = 1582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1579
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1584
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1585
                self.expr()
                self.state = 1589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1586
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1592
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1594
                self.match(WordlifyParser.IS_FILE)
                self.state = 1598
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,263,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1595
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 1600
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,263,self._ctx)

                self.notifyErrorListeners("Missing opening paranthesis")
                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1602
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1607
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1608
                self.expr()
                self.state = 1612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1609
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1614
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1615
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1617
                self.match(WordlifyParser.IS_FILE)
                self.state = 1621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1618
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1623
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1624
                self.match(WordlifyParser.T__1)
                self.state = 1628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1625
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1630
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1631
                self.expr()
                self.notifyErrorListeners("Missing closing paranthesis")
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1634
                self.match(WordlifyParser.IS_FILE)
                self.state = 1638
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,268,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1635
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 1640
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,268,self._ctx)

                self.notifyErrorListeners("Missing paranthesis")
                self.state = 1645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1642
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1647
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1648
                self.expr()
                self.state = 1652
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,270,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1649
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 1654
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,270,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_dirContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS_DIR(self):
            return self.getToken(WordlifyParser.IS_DIR, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_is_dir

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_dir" ):
                listener.enterIs_dir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_dir" ):
                listener.exitIs_dir(self)




    def is_dir(self):

        localctx = WordlifyParser.Is_dirContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_is_dir)
        self._la = 0 # Token type
        try:
            self.state = 1741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1657
                self.match(WordlifyParser.IS_DIR)
                self.state = 1661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1658
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1664
                self.match(WordlifyParser.T__1)
                self.state = 1668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1665
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1670
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1671
                self.expr()
                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1672
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1677
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1678
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1680
                self.match(WordlifyParser.IS_DIR)
                self.state = 1684
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,275,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1681
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 1686
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,275,self._ctx)

                self.notifyErrorListeners("Missing opening paranthesis")
                self.state = 1691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1688
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1693
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1694
                self.expr()
                self.state = 1698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1695
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1700
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1701
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1703
                self.match(WordlifyParser.IS_DIR)
                self.state = 1707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1704
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1709
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1710
                self.match(WordlifyParser.T__1)
                self.state = 1714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1711
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1716
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1717
                self.expr()
                self.notifyErrorListeners("Missing closing paranthesis")
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1720
                self.match(WordlifyParser.IS_DIR)
                self.state = 1724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,280,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1721
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 1726
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,280,self._ctx)

                self.notifyErrorListeners("Missing paranthesis")
                self.state = 1731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1728
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1733
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1734
                self.expr()
                self.state = 1738
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,282,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1735
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 1740
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,282,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(WordlifyParser.PRINT, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_print_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_instr" ):
                listener.enterPrint_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_instr" ):
                listener.exitPrint_instr(self)




    def print_instr(self):

        localctx = WordlifyParser.Print_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_print_instr)
        self._la = 0 # Token type
        try:
            self.state = 1827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1743
                self.match(WordlifyParser.PRINT)
                self.state = 1747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1744
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1749
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1750
                self.match(WordlifyParser.T__1)
                self.state = 1754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1751
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1757
                self.expr()
                self.state = 1761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1758
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1763
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1764
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1766
                self.match(WordlifyParser.PRINT)
                self.state = 1770
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,287,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1767
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 1772
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,287,self._ctx)

                self.notifyErrorListeners("Missing opening paranthesis")
                self.state = 1777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1774
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1780
                self.expr()
                self.state = 1784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1781
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1786
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1787
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1789
                self.match(WordlifyParser.PRINT)
                self.state = 1793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1790
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1795
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1796
                self.match(WordlifyParser.T__1)
                self.state = 1800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1797
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1802
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1803
                self.expr()
                self.notifyErrorListeners("Missing closing paranthesis")
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1806
                self.match(WordlifyParser.PRINT)
                self.state = 1810
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,292,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1807
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 1812
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,292,self._ctx)

                self.notifyErrorListeners("Print: Missing paranthesis")
                self.state = 1817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1814
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1819
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1820
                self.expr()
                self.state = 1824
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,294,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1821
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 1826
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,294,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(WordlifyParser.RENAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_rename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename" ):
                listener.enterRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename" ):
                listener.exitRename(self)




    def rename(self):

        localctx = WordlifyParser.RenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_rename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1829
            self.match(WordlifyParser.RENAME)
            self.state = 1833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1830
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1835
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1836
            self.match(WordlifyParser.T__1)
            self.state = 1840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1837
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1842
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1843
            self.expr()
            self.state = 1847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1844
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1849
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1850
            self.match(WordlifyParser.T__2)
            self.state = 1854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1851
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1856
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1857
            self.expr()
            self.state = 1861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1858
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1863
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1864
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(WordlifyParser.REMOVE, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove" ):
                listener.enterRemove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove" ):
                listener.exitRemove(self)




    def remove(self):

        localctx = WordlifyParser.RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_remove)
        self._la = 0 # Token type
        try:
            self.state = 1950
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1866
                self.match(WordlifyParser.REMOVE)
                self.state = 1870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1867
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1872
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1873
                self.match(WordlifyParser.T__1)
                self.state = 1877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1874
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1879
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1880
                self.expr()
                self.state = 1884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1881
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1886
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1887
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1889
                self.match(WordlifyParser.REMOVE)
                self.state = 1893
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,304,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1890
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 1895
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,304,self._ctx)

                self.notifyErrorListeners("Missing opening paranthesis")
                self.state = 1900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1897
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1903
                self.expr()
                self.state = 1907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1904
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1909
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1910
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1912
                self.match(WordlifyParser.REMOVE)
                self.state = 1916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1913
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1918
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1919
                self.match(WordlifyParser.T__1)
                self.state = 1923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1920
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1925
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1926
                self.expr()
                self.notifyErrorListeners("Missing closing paranthesis")
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1929
                self.match(WordlifyParser.REMOVE)
                self.state = 1933
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,309,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1930
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 1935
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,309,self._ctx)

                self.notifyErrorListeners("Missing paranthesis")
                self.state = 1940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1937
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1942
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1943
                self.expr()
                self.state = 1947
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,311,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1944
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 1949
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,311,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOVE(self):
            return self.getToken(WordlifyParser.MOVE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)




    def move(self):

        localctx = WordlifyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1952
            self.match(WordlifyParser.MOVE)
            self.state = 1956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1953
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1958
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1959
            self.match(WordlifyParser.T__1)
            self.state = 1963
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1960
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1965
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1966
            self.expr()
            self.state = 1970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1967
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1972
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1973
            self.match(WordlifyParser.T__2)
            self.state = 1977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1974
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1979
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1980
            self.expr()
            self.state = 1984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1981
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1986
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1987
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(WordlifyParser.COPY, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_copy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy" ):
                listener.enterCopy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy" ):
                listener.exitCopy(self)




    def copy(self):

        localctx = WordlifyParser.CopyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_copy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1989
            self.match(WordlifyParser.COPY)
            self.state = 1993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1990
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1995
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1996
            self.match(WordlifyParser.T__1)
            self.state = 2000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1997
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2002
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2003
            self.expr()
            self.state = 2007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2004
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2009
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2010
            self.match(WordlifyParser.T__2)
            self.state = 2014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2011
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2016
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2017
            self.expr()
            self.state = 2021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2018
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2023
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2024
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DownloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOWNLOAD(self):
            return self.getToken(WordlifyParser.DOWNLOAD, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_download

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDownload" ):
                listener.enterDownload(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDownload" ):
                listener.exitDownload(self)




    def download(self):

        localctx = WordlifyParser.DownloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_download)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026
            self.match(WordlifyParser.DOWNLOAD)
            self.state = 2030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2027
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2032
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2033
            self.match(WordlifyParser.T__1)
            self.state = 2037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2034
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2039
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2040
            self.expr()
            self.state = 2044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2041
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2046
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2047
            self.match(WordlifyParser.T__2)
            self.state = 2051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2048
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2053
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2054
            self.expr()
            self.state = 2058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2055
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2060
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2061
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(WordlifyParser.WRITE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_write

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite" ):
                listener.enterWrite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite" ):
                listener.exitWrite(self)




    def write(self):

        localctx = WordlifyParser.WriteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_write)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2063
            self.match(WordlifyParser.WRITE)
            self.state = 2067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2064
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2069
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2070
            self.match(WordlifyParser.T__1)
            self.state = 2074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2071
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2076
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2077
            self.expr()
            self.state = 2081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2078
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2083
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2084
            self.match(WordlifyParser.T__2)
            self.state = 2088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2085
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2090
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2091
            self.expr()
            self.state = 2095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2092
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2097
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2098
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(WordlifyParser.READ, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_read

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead" ):
                listener.enterRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead" ):
                listener.exitRead(self)




    def read(self):

        localctx = WordlifyParser.ReadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_read)
        self._la = 0 # Token type
        try:
            self.state = 2184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2100
                self.match(WordlifyParser.READ)
                self.state = 2104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2101
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2106
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2107
                self.match(WordlifyParser.T__1)
                self.state = 2111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2108
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2113
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2114
                self.expr()
                self.state = 2118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2115
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2120
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2121
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2123
                self.match(WordlifyParser.READ)
                self.state = 2127
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,336,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2124
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2129
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,336,self._ctx)

                self.notifyErrorListeners("Missing opening paranthesis")
                self.state = 2134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2131
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2136
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2137
                self.expr()
                self.state = 2141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2138
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2143
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2144
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2146
                self.match(WordlifyParser.READ)
                self.state = 2150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2147
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2152
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2153
                self.match(WordlifyParser.T__1)
                self.state = 2157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2154
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2159
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2160
                self.expr()
                self.notifyErrorListeners("Missing closing paranthesis")
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2163
                self.match(WordlifyParser.READ)
                self.state = 2167
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,341,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2164
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2169
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,341,self._ctx)

                self.notifyErrorListeners("Missing paranthesis")
                self.state = 2174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2171
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2176
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2177
                self.expr()
                self.state = 2181
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,343,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2178
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2183
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,343,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wait_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(WordlifyParser.WAIT, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_wait_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_instr" ):
                listener.enterWait_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_instr" ):
                listener.exitWait_instr(self)




    def wait_instr(self):

        localctx = WordlifyParser.Wait_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_wait_instr)
        self._la = 0 # Token type
        try:
            self.state = 2270
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,356,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2186
                self.match(WordlifyParser.WAIT)
                self.state = 2190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2187
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2192
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2193
                self.match(WordlifyParser.T__1)
                self.state = 2197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2194
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2199
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2200
                self.expr()
                self.state = 2204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2201
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2206
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2207
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2209
                self.match(WordlifyParser.WAIT)
                self.state = 2213
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,348,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2210
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2215
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,348,self._ctx)

                self.notifyErrorListeners("Missing opening paranthesis")
                self.state = 2220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2217
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2222
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2223
                self.expr()
                self.state = 2227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2224
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2229
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2230
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2232
                self.match(WordlifyParser.WAIT)
                self.state = 2236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2233
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2238
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2239
                self.match(WordlifyParser.T__1)
                self.state = 2243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2240
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2245
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2246
                self.expr()
                self.notifyErrorListeners("Missing closing paranthesis")
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2249
                self.match(WordlifyParser.WAIT)
                self.state = 2253
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,353,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2250
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2255
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,353,self._ctx)

                self.notifyErrorListeners("Missing paranthesis")
                self.state = 2260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2257
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2262
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2263
                self.expr()
                self.state = 2267
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,355,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2264
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2269
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,355,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(WordlifyParser.EXECUTE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_execute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)




    def execute(self):

        localctx = WordlifyParser.ExecuteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_execute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2272
            self.match(WordlifyParser.EXECUTE)
            self.state = 2276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2273
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2279
            self.match(WordlifyParser.T__1)
            self.state = 2283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2280
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2285
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2302
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,361,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2286
                    self.expr()
                    self.state = 2290
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 2287
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2292
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2293
                    self.match(WordlifyParser.T__2)
                    self.state = 2297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 2294
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2299
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
             
                self.state = 2304
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,361,self._ctx)

            self.state = 2305
            self.expr()
            self.state = 2309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2306
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2311
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2312
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_filesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET_FILES(self):
            return self.getToken(WordlifyParser.GET_FILES, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_get_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_files" ):
                listener.enterGet_files(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_files" ):
                listener.exitGet_files(self)




    def get_files(self):

        localctx = WordlifyParser.Get_filesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_get_files)
        self._la = 0 # Token type
        try:
            self.state = 2398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,374,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2314
                self.match(WordlifyParser.GET_FILES)
                self.state = 2318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2315
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2320
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2321
                self.match(WordlifyParser.T__1)
                self.state = 2325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2322
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2327
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2328
                self.expr()
                self.state = 2332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2329
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2334
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2335
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2337
                self.match(WordlifyParser.GET_FILES)
                self.state = 2341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,366,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2338
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2343
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,366,self._ctx)

                self.notifyErrorListeners("Missing opening paranthesis")
                self.state = 2348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2345
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2351
                self.expr()
                self.state = 2355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2352
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2357
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2358
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2360
                self.match(WordlifyParser.GET_FILES)
                self.state = 2364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2361
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2366
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2367
                self.match(WordlifyParser.T__1)
                self.state = 2371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2368
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2373
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2374
                self.expr()
                self.notifyErrorListeners("Missing closing paranthesis")
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2377
                self.match(WordlifyParser.GET_FILES)
                self.state = 2381
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,371,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2378
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2383
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,371,self._ctx)

                self.notifyErrorListeners("Missing paranthesis")
                self.state = 2388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2385
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2390
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2391
                self.expr()
                self.state = 2395
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,373,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2392
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2397
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,373,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_modifiedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_MODIFIED(self):
            return self.getToken(WordlifyParser.DATE_MODIFIED, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_date_modified

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_modified" ):
                listener.enterDate_modified(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_modified" ):
                listener.exitDate_modified(self)




    def date_modified(self):

        localctx = WordlifyParser.Date_modifiedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_date_modified)
        self._la = 0 # Token type
        try:
            self.state = 2484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2400
                self.match(WordlifyParser.DATE_MODIFIED)
                self.state = 2404
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2401
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2407
                self.match(WordlifyParser.T__1)
                self.state = 2411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2408
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2413
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2414
                self.expr()
                self.state = 2418
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2415
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2420
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2421
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2423
                self.match(WordlifyParser.DATE_MODIFIED)
                self.state = 2427
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,378,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2424
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2429
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,378,self._ctx)

                self.notifyErrorListeners("Missing opening paranthesis")
                self.state = 2434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2431
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2437
                self.expr()
                self.state = 2441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2438
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2444
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2446
                self.match(WordlifyParser.DATE_MODIFIED)
                self.state = 2450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2447
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2452
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2453
                self.match(WordlifyParser.T__1)
                self.state = 2457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2454
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2459
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2460
                self.expr()
                self.notifyErrorListeners("Missing closing paranthesis")
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2463
                self.match(WordlifyParser.DATE_MODIFIED)
                self.state = 2467
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,383,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2464
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2469
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,383,self._ctx)

                self.notifyErrorListeners("Missing paranthesis")
                self.state = 2474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2471
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2476
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2477
                self.expr()
                self.state = 2481
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,385,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2478
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2483
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,385,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIZE(self):
            return self.getToken(WordlifyParser.SIZE, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSize" ):
                listener.enterSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSize" ):
                listener.exitSize(self)




    def size(self):

        localctx = WordlifyParser.SizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_size)
        self._la = 0 # Token type
        try:
            self.state = 2570
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2486
                self.match(WordlifyParser.SIZE)
                self.state = 2490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2487
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2492
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2493
                self.match(WordlifyParser.T__1)
                self.state = 2497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2494
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2499
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2500
                self.expr()
                self.state = 2504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2501
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2506
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2507
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2509
                self.match(WordlifyParser.SIZE)
                self.state = 2513
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,390,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2510
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2515
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,390,self._ctx)

                self.notifyErrorListeners("Missing opening paranthesis")
                self.state = 2520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2517
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2522
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2523
                self.expr()
                self.state = 2527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2524
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2529
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2530
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2532
                self.match(WordlifyParser.SIZE)
                self.state = 2536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2533
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2539
                self.match(WordlifyParser.T__1)
                self.state = 2543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2540
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2546
                self.expr()
                self.notifyErrorListeners("Missing closing paranthesis")
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2549
                self.match(WordlifyParser.SIZE)
                self.state = 2553
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,395,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2550
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2555
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,395,self._ctx)

                self.notifyErrorListeners("Missing paranthesis")
                self.state = 2560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2557
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2562
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2563
                self.expr()
                self.state = 2567
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,397,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2564
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2569
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,397,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(WordlifyParser.EXIT, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit" ):
                listener.enterExit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit" ):
                listener.exitExit(self)




    def exit(self):

        localctx = WordlifyParser.ExitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_exit)
        self._la = 0 # Token type
        try:
            self.state = 2656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2572
                self.match(WordlifyParser.EXIT)
                self.state = 2576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2573
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2578
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2579
                self.match(WordlifyParser.T__1)
                self.state = 2583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2580
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2585
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2586
                self.expr()
                self.state = 2590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2587
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2592
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2593
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2595
                self.match(WordlifyParser.EXIT)
                self.state = 2599
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,402,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2596
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2601
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,402,self._ctx)

                self.notifyErrorListeners("Missing opening paranthesis")
                self.state = 2606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2603
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2608
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2609
                self.expr()
                self.state = 2613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2610
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2616
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2618
                self.match(WordlifyParser.EXIT)
                self.state = 2622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2619
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2624
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2625
                self.match(WordlifyParser.T__1)
                self.state = 2629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2626
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2631
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2632
                self.expr()
                self.notifyErrorListeners("Missing closing paranthesis")
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2635
                self.match(WordlifyParser.EXIT)
                self.state = 2639
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,407,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2636
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2641
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,407,self._ctx)

                self.notifyErrorListeners("Missing paranthesis")
                self.state = 2646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2643
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2648
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2649
                self.expr()
                self.state = 2653
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,409,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2650
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2655
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,409,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(WordlifyParser.CREATE, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate" ):
                listener.enterCreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate" ):
                listener.exitCreate(self)




    def create(self):

        localctx = WordlifyParser.CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_create)
        self._la = 0 # Token type
        try:
            self.state = 2742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2658
                self.match(WordlifyParser.CREATE)
                self.state = 2662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2659
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2664
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2665
                self.match(WordlifyParser.T__1)
                self.state = 2669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2666
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2671
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2672
                self.expr()
                self.state = 2676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2673
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2678
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2679
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2681
                self.match(WordlifyParser.CREATE)
                self.state = 2685
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,414,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2682
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2687
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,414,self._ctx)

                self.notifyErrorListeners("Missing opening paranthesis")
                self.state = 2692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2689
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2694
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2695
                self.expr()
                self.state = 2699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2696
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2701
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2702
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2704
                self.match(WordlifyParser.CREATE)
                self.state = 2708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2705
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2710
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2711
                self.match(WordlifyParser.T__1)
                self.state = 2715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2712
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2718
                self.expr()
                self.notifyErrorListeners("Missing closing paranthesis")
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2721
                self.match(WordlifyParser.CREATE)
                self.state = 2725
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,419,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2722
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2727
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,419,self._ctx)

                self.notifyErrorListeners("Missing paranthesis")
                self.state = 2732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2729
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2734
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2735
                self.expr()
                self.state = 2739
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,421,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2736
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2741
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,421,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LENGTH(self):
            return self.getToken(WordlifyParser.LENGTH, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLength" ):
                listener.enterLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLength" ):
                listener.exitLength(self)




    def length(self):

        localctx = WordlifyParser.LengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_length)
        self._la = 0 # Token type
        try:
            self.state = 2841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2744
                self.match(WordlifyParser.LENGTH)
                self.state = 2748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2745
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2751
                self.match(WordlifyParser.T__1)
                self.state = 2755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2752
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2757
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,425,self._ctx)
                if la_ == 1:
                    self.state = 2758
                    self.match(WordlifyParser.ID)
                    pass

                elif la_ == 2:
                    self.state = 2759
                    self.array()
                    pass

                elif la_ == 3:
                    self.state = 2760
                    self.args()
                    pass


                self.state = 2766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2763
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2768
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2769
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2770
                self.match(WordlifyParser.LENGTH)
                self.state = 2774
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,427,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2771
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2776
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,427,self._ctx)

                self.notifyErrorListeners("Missing opening paranthesis")
                self.state = 2781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2778
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2783
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2787
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,429,self._ctx)
                if la_ == 1:
                    self.state = 2784
                    self.match(WordlifyParser.ID)
                    pass

                elif la_ == 2:
                    self.state = 2785
                    self.array()
                    pass

                elif la_ == 3:
                    self.state = 2786
                    self.args()
                    pass


                self.state = 2792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2789
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2794
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2795
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2796
                self.match(WordlifyParser.LENGTH)
                self.state = 2800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2797
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2802
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2803
                self.match(WordlifyParser.T__1)
                self.state = 2807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2804
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2813
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,433,self._ctx)
                if la_ == 1:
                    self.state = 2810
                    self.match(WordlifyParser.ID)
                    pass

                elif la_ == 2:
                    self.state = 2811
                    self.array()
                    pass

                elif la_ == 3:
                    self.state = 2812
                    self.args()
                    pass


                self.notifyErrorListeners("Missing closing paranthesis")
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2816
                self.match(WordlifyParser.LENGTH)
                self.state = 2820
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,434,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2817
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2822
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,434,self._ctx)

                self.notifyErrorListeners("Missing paranthesis")
                self.state = 2827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2824
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2829
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2833
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
                if la_ == 1:
                    self.state = 2830
                    self.match(WordlifyParser.ID)
                    pass

                elif la_ == 2:
                    self.state = 2831
                    self.array()
                    pass

                elif la_ == 3:
                    self.state = 2832
                    self.args()
                    pass


                self.state = 2838
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,437,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2835
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2840
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,437,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BASENAME(self):
            return self.getToken(WordlifyParser.BASENAME, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_basename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasename" ):
                listener.enterBasename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasename" ):
                listener.exitBasename(self)




    def basename(self):

        localctx = WordlifyParser.BasenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_basename)
        self._la = 0 # Token type
        try:
            self.state = 2927
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,450,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2843
                self.match(WordlifyParser.BASENAME)
                self.state = 2847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2844
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2849
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2850
                self.match(WordlifyParser.T__1)
                self.state = 2854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2851
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2856
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2857
                self.expr()
                self.state = 2861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2858
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2863
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2864
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2866
                self.match(WordlifyParser.BASENAME)
                self.state = 2870
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,442,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2867
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2872
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,442,self._ctx)

                self.notifyErrorListeners("Missing opening paranthesis")
                self.state = 2877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2874
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2879
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2880
                self.expr()
                self.state = 2884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2881
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2886
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2887
                self.match(WordlifyParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2889
                self.match(WordlifyParser.BASENAME)
                self.state = 2893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2890
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2895
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2896
                self.match(WordlifyParser.T__1)
                self.state = 2900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2897
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2903
                self.expr()
                self.notifyErrorListeners("Missing closing paranthesis")
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2906
                self.match(WordlifyParser.BASENAME)
                self.state = 2910
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,447,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2907
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2912
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,447,self._ctx)

                self.notifyErrorListeners("Missing paranthesis")
                self.state = 2917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2914
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2919
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2920
                self.expr()
                self.state = 2924
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,449,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2921
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 2926
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,449,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARGS(self):
            return self.getToken(WordlifyParser.ARGS, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)




    def args(self):

        localctx = WordlifyParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_args)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2929
            self.match(WordlifyParser.ARGS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray" ):
                listener.enterArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray" ):
                listener.exitArray(self)




    def array(self):

        localctx = WordlifyParser.ArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_array)
        self._la = 0 # Token type
        try:
            self.state = 3033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,468,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2931
                self.match(WordlifyParser.T__5)
                self.state = 2935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2932
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2937
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                    self.state = 2938
                    self.value_or_id()
                    self.state = 2955
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,454,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2942
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 2939
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 2944
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 2945
                            self.match(WordlifyParser.T__2)
                            self.state = 2949
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 2946
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 2951
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 2952
                            self.value_or_id() 
                        self.state = 2957
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,454,self._ctx)

                    self.state = 2961
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 2958
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2963
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2966
                self.match(WordlifyParser.T__6)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.notifyErrorListeners("Missing opening square paranthesis")
                self.state = 2994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                    self.state = 2968
                    self.value_or_id()
                    self.state = 2985
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,459,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2972
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 2969
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 2974
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 2975
                            self.match(WordlifyParser.T__2)
                            self.state = 2979
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 2976
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 2981
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 2982
                            self.value_or_id() 
                        self.state = 2987
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,459,self._ctx)

                    self.state = 2991
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 2988
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2993
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2996
                self.match(WordlifyParser.T__6)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2997
                self.match(WordlifyParser.T__5)
                self.state = 3001
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,462,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2998
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 3003
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,462,self._ctx)

                self.state = 3030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                    self.state = 3004
                    self.value_or_id()
                    self.state = 3021
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,465,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3008
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 3005
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 3010
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 3011
                            self.match(WordlifyParser.T__2)
                            self.state = 3015
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 3012
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 3017
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 3018
                            self.value_or_id() 
                        self.state = 3023
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,465,self._ctx)

                    self.state = 3027
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,466,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3024
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 3029
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,466,self._ctx)



                self.notifyErrorListeners("Missing closing square paranthesis")
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_or_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_value_or_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_or_id" ):
                listener.enterValue_or_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_or_id" ):
                listener.exitValue_or_id(self)




    def value_or_id(self):

        localctx = WordlifyParser.Value_or_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_value_or_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3035
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





