# Generated from Wordlify.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3:")
        buf.write("\u065d\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\3\2\7\2`\n\2\f\2\16\2c\13\2\3\2\3\2\7\2g\n\2\f\2")
        buf.write("\16\2j\13\2\3\2\3\2\7\2n\n\2\f\2\16\2q\13\2\3\2\3\2\7")
        buf.write("\2u\n\2\f\2\16\2x\13\2\3\2\3\2\7\2|\n\2\f\2\16\2\177\13")
        buf.write("\2\6\2\u0081\n\2\r\2\16\2\u0082\3\2\3\2\3\2\5\2\u0088")
        buf.write("\n\2\3\2\6\2\u008b\n\2\r\2\16\2\u008c\7\2\u008f\n\2\f")
        buf.write("\2\16\2\u0092\13\2\3\2\3\2\7\2\u0096\n\2\f\2\16\2\u0099")
        buf.write("\13\2\3\2\5\2\u009c\n\2\3\2\3\2\3\2\5\2\u00a1\n\2\5\2")
        buf.write("\u00a3\n\2\5\2\u00a5\n\2\3\2\7\2\u00a8\n\2\f\2\16\2\u00ab")
        buf.write("\13\2\3\2\5\2\u00ae\n\2\3\2\3\2\3\3\3\3\6\3\u00b4\n\3")
        buf.write("\r\3\16\3\u00b5\3\3\3\3\7\3\u00ba\n\3\f\3\16\3\u00bd\13")
        buf.write("\3\3\3\3\3\7\3\u00c1\n\3\f\3\16\3\u00c4\13\3\3\3\3\3\7")
        buf.write("\3\u00c8\n\3\f\3\16\3\u00cb\13\3\3\3\3\3\7\3\u00cf\n\3")
        buf.write("\f\3\16\3\u00d2\13\3\3\3\3\3\7\3\u00d6\n\3\f\3\16\3\u00d9")
        buf.write("\13\3\7\3\u00db\n\3\f\3\16\3\u00de\13\3\5\3\u00e0\n\3")
        buf.write("\3\3\3\3\7\3\u00e4\n\3\f\3\16\3\u00e7\13\3\3\3\3\3\6\3")
        buf.write("\u00eb\n\3\r\3\16\3\u00ec\3\3\3\3\7\3\u00f1\n\3\f\3\16")
        buf.write("\3\u00f4\13\3\3\3\3\3\7\3\u00f8\n\3\f\3\16\3\u00fb\13")
        buf.write("\3\3\3\3\3\7\3\u00ff\n\3\f\3\16\3\u0102\13\3\3\3\3\3\7")
        buf.write("\3\u0106\n\3\f\3\16\3\u0109\13\3\6\3\u010b\n\3\r\3\16")
        buf.write("\3\u010c\3\3\3\3\6\3\u0111\n\3\r\3\16\3\u0112\7\3\u0115")
        buf.write("\n\3\f\3\16\3\u0118\13\3\3\3\3\3\7\3\u011c\n\3\f\3\16")
        buf.write("\3\u011f\13\3\3\3\5\3\u0122\n\3\3\3\5\3\u0125\n\3\3\3")
        buf.write("\6\3\u0128\n\3\r\3\16\3\u0129\5\3\u012c\n\3\3\3\3\3\3")
        buf.write("\4\3\4\3\4\5\4\u0133\n\4\3\5\3\5\6\5\u0137\n\5\r\5\16")
        buf.write("\5\u0138\3\5\3\5\6\5\u013d\n\5\r\5\16\5\u013e\3\5\3\5")
        buf.write("\6\5\u0143\n\5\r\5\16\5\u0144\3\5\3\5\6\5\u0149\n\5\r")
        buf.write("\5\16\5\u014a\3\5\3\5\6\5\u014f\n\5\r\5\16\5\u0150\3\5")
        buf.write("\3\5\7\5\u0155\n\5\f\5\16\5\u0158\13\5\3\5\3\5\7\5\u015c")
        buf.write("\n\5\f\5\16\5\u015f\13\5\3\5\3\5\7\5\u0163\n\5\f\5\16")
        buf.write("\5\u0166\13\5\3\5\3\5\7\5\u016a\n\5\f\5\16\5\u016d\13")
        buf.write("\5\6\5\u016f\n\5\r\5\16\5\u0170\3\5\3\5\6\5\u0175\n\5")
        buf.write("\r\5\16\5\u0176\7\5\u0179\n\5\f\5\16\5\u017c\13\5\3\5")
        buf.write("\3\5\7\5\u0180\n\5\f\5\16\5\u0183\13\5\3\5\3\5\6\5\u0187")
        buf.write("\n\5\r\5\16\5\u0188\5\5\u018b\n\5\3\5\3\5\6\5\u018f\n")
        buf.write("\5\r\5\16\5\u0190\5\5\u0193\n\5\5\5\u0195\n\5\3\5\3\5")
        buf.write("\3\6\3\6\6\6\u019b\n\6\r\6\16\6\u019c\3\6\3\6\6\6\u01a1")
        buf.write("\n\6\r\6\16\6\u01a2\3\6\3\6\6\6\u01a7\n\6\r\6\16\6\u01a8")
        buf.write("\3\6\3\6\7\6\u01ad\n\6\f\6\16\6\u01b0\13\6\3\6\3\6\7\6")
        buf.write("\u01b4\n\6\f\6\16\6\u01b7\13\6\3\6\3\6\7\6\u01bb\n\6\f")
        buf.write("\6\16\6\u01be\13\6\3\6\3\6\7\6\u01c2\n\6\f\6\16\6\u01c5")
        buf.write("\13\6\6\6\u01c7\n\6\r\6\16\6\u01c8\3\6\3\6\6\6\u01cd\n")
        buf.write("\6\r\6\16\6\u01ce\7\6\u01d1\n\6\f\6\16\6\u01d4\13\6\3")
        buf.write("\6\3\6\7\6\u01d8\n\6\f\6\16\6\u01db\13\6\3\6\3\6\6\6\u01df")
        buf.write("\n\6\r\6\16\6\u01e0\5\6\u01e3\n\6\3\6\3\6\6\6\u01e7\n")
        buf.write("\6\r\6\16\6\u01e8\5\6\u01eb\n\6\5\6\u01ed\n\6\3\6\3\6")
        buf.write("\3\7\3\7\3\7\7\7\u01f4\n\7\f\7\16\7\u01f7\13\7\3\7\5\7")
        buf.write("\u01fa\n\7\3\7\3\7\3\7\3\7\3\7\7\7\u0201\n\7\f\7\16\7")
        buf.write("\u0204\13\7\3\7\5\7\u0207\n\7\3\7\3\7\5\7\u020b\n\7\3")
        buf.write("\b\3\b\6\b\u020f\n\b\r\b\16\b\u0210\3\b\3\b\6\b\u0215")
        buf.write("\n\b\r\b\16\b\u0216\3\t\3\t\6\t\u021b\n\t\r\t\16\t\u021c")
        buf.write("\3\t\3\t\7\t\u0221\n\t\f\t\16\t\u0224\13\t\3\t\3\t\7\t")
        buf.write("\u0228\n\t\f\t\16\t\u022b\13\t\3\t\3\t\7\t\u022f\n\t\f")
        buf.write("\t\16\t\u0232\13\t\3\t\3\t\7\t\u0236\n\t\f\t\16\t\u0239")
        buf.write("\13\t\6\t\u023b\n\t\r\t\16\t\u023c\3\t\3\t\6\t\u0241\n")
        buf.write("\t\r\t\16\t\u0242\7\t\u0245\n\t\f\t\16\t\u0248\13\t\3")
        buf.write("\t\3\t\7\t\u024c\n\t\f\t\16\t\u024f\13\t\3\t\3\t\6\t\u0253")
        buf.write("\n\t\r\t\16\t\u0254\5\t\u0257\n\t\3\t\3\t\6\t\u025b\n")
        buf.write("\t\r\t\16\t\u025c\5\t\u025f\n\t\5\t\u0261\n\t\3\t\3\t")
        buf.write("\3\t\6\t\u0266\n\t\r\t\16\t\u0267\3\t\3\t\7\t\u026c\n")
        buf.write("\t\f\t\16\t\u026f\13\t\3\t\3\t\7\t\u0273\n\t\f\t\16\t")
        buf.write("\u0276\13\t\3\t\3\t\7\t\u027a\n\t\f\t\16\t\u027d\13\t")
        buf.write("\3\t\3\t\7\t\u0281\n\t\f\t\16\t\u0284\13\t\6\t\u0286\n")
        buf.write("\t\r\t\16\t\u0287\3\t\3\t\6\t\u028c\n\t\r\t\16\t\u028d")
        buf.write("\7\t\u0290\n\t\f\t\16\t\u0293\13\t\3\t\3\t\7\t\u0297\n")
        buf.write("\t\f\t\16\t\u029a\13\t\3\t\3\t\6\t\u029e\n\t\r\t\16\t")
        buf.write("\u029f\5\t\u02a2\n\t\3\t\3\t\6\t\u02a6\n\t\r\t\16\t\u02a7")
        buf.write("\5\t\u02aa\n\t\5\t\u02ac\n\t\5\t\u02ae\n\t\3\n\3\n\6\n")
        buf.write("\u02b2\n\n\r\n\16\n\u02b3\3\n\3\n\3\n\3\13\3\13\6\13\u02bb")
        buf.write("\n\13\r\13\16\13\u02bc\3\13\3\13\7\13\u02c1\n\13\f\13")
        buf.write("\16\13\u02c4\13\13\3\13\3\13\7\13\u02c8\n\13\f\13\16\13")
        buf.write("\u02cb\13\13\3\13\3\13\7\13\u02cf\n\13\f\13\16\13\u02d2")
        buf.write("\13\13\3\13\3\13\7\13\u02d6\n\13\f\13\16\13\u02d9\13\13")
        buf.write("\6\13\u02db\n\13\r\13\16\13\u02dc\3\13\3\13\6\13\u02e1")
        buf.write("\n\13\r\13\16\13\u02e2\7\13\u02e5\n\13\f\13\16\13\u02e8")
        buf.write("\13\13\3\13\3\13\7\13\u02ec\n\13\f\13\16\13\u02ef\13\13")
        buf.write("\3\13\3\13\6\13\u02f3\n\13\r\13\16\13\u02f4\5\13\u02f7")
        buf.write("\n\13\3\13\3\13\6\13\u02fb\n\13\r\13\16\13\u02fc\5\13")
        buf.write("\u02ff\n\13\5\13\u0301\n\13\3\f\3\f\6\f\u0305\n\f\r\f")
        buf.write("\16\f\u0306\3\f\3\f\6\f\u030b\n\f\r\f\16\f\u030c\3\f\7")
        buf.write("\f\u0310\n\f\f\f\16\f\u0313\13\f\3\r\3\r\6\r\u0317\n\r")
        buf.write("\r\r\16\r\u0318\5\r\u031b\n\r\3\r\3\r\3\r\5\r\u0320\n")
        buf.write("\r\3\16\3\16\7\16\u0324\n\16\f\16\16\16\u0327\13\16\3")
        buf.write("\16\3\16\7\16\u032b\n\16\f\16\16\16\u032e\13\16\3\16\3")
        buf.write("\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17")
        buf.write("\u033b\n\17\3\20\3\20\7\20\u033f\n\20\f\20\16\20\u0342")
        buf.write("\13\20\3\20\3\20\7\20\u0346\n\20\f\20\16\20\u0349\13\20")
        buf.write("\3\20\6\20\u034c\n\20\r\20\16\20\u034d\3\21\3\21\7\21")
        buf.write("\u0352\n\21\f\21\16\21\u0355\13\21\3\21\3\21\7\21\u0359")
        buf.write("\n\21\f\21\16\21\u035c\13\21\3\21\6\21\u035f\n\21\r\21")
        buf.write("\16\21\u0360\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u037c\n\22\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\5\23\u0398\n\23\3\24\3\24\5\24\u039c\n")
        buf.write("\24\3\24\7\24\u039f\n\24\f\24\16\24\u03a2\13\24\3\24\3")
        buf.write("\24\7\24\u03a6\n\24\f\24\16\24\u03a9\13\24\3\24\3\24\3")
        buf.write("\25\3\25\7\25\u03af\n\25\f\25\16\25\u03b2\13\25\3\25\3")
        buf.write("\25\7\25\u03b6\n\25\f\25\16\25\u03b9\13\25\3\25\3\25\7")
        buf.write("\25\u03bd\n\25\f\25\16\25\u03c0\13\25\3\26\3\26\5\26\u03c4")
        buf.write("\n\26\3\26\3\26\7\26\u03c8\n\26\f\26\16\26\u03cb\13\26")
        buf.write("\3\26\3\26\7\26\u03cf\n\26\f\26\16\26\u03d2\13\26\3\26")
        buf.write("\3\26\3\27\3\27\7\27\u03d8\n\27\f\27\16\27\u03db\13\27")
        buf.write("\3\27\3\27\3\30\3\30\7\30\u03e1\n\30\f\30\16\30\u03e4")
        buf.write("\13\30\3\30\3\30\7\30\u03e8\n\30\f\30\16\30\u03eb\13\30")
        buf.write("\3\30\3\30\7\30\u03ef\n\30\f\30\16\30\u03f2\13\30\3\30")
        buf.write("\3\30\7\30\u03f6\n\30\f\30\16\30\u03f9\13\30\3\30\3\30")
        buf.write("\7\30\u03fd\n\30\f\30\16\30\u0400\13\30\7\30\u0402\n\30")
        buf.write("\f\30\16\30\u0405\13\30\5\30\u0407\n\30\3\30\3\30\3\31")
        buf.write("\3\31\7\31\u040d\n\31\f\31\16\31\u0410\13\31\3\31\3\31")
        buf.write("\7\31\u0414\n\31\f\31\16\31\u0417\13\31\3\31\3\31\7\31")
        buf.write("\u041b\n\31\f\31\16\31\u041e\13\31\3\31\3\31\3\32\3\32")
        buf.write("\7\32\u0424\n\32\f\32\16\32\u0427\13\32\3\32\3\32\7\32")
        buf.write("\u042b\n\32\f\32\16\32\u042e\13\32\3\32\3\32\7\32\u0432")
        buf.write("\n\32\f\32\16\32\u0435\13\32\3\32\3\32\3\33\3\33\7\33")
        buf.write("\u043b\n\33\f\33\16\33\u043e\13\33\3\33\3\33\7\33\u0442")
        buf.write("\n\33\f\33\16\33\u0445\13\33\3\33\3\33\7\33\u0449\n\33")
        buf.write("\f\33\16\33\u044c\13\33\3\33\3\33\3\34\3\34\7\34\u0452")
        buf.write("\n\34\f\34\16\34\u0455\13\34\3\34\3\34\7\34\u0459\n\34")
        buf.write("\f\34\16\34\u045c\13\34\3\34\3\34\7\34\u0460\n\34\f\34")
        buf.write("\16\34\u0463\13\34\3\34\3\34\3\35\3\35\7\35\u0469\n\35")
        buf.write("\f\35\16\35\u046c\13\35\3\35\3\35\7\35\u0470\n\35\f\35")
        buf.write("\16\35\u0473\13\35\3\35\3\35\7\35\u0477\n\35\f\35\16\35")
        buf.write("\u047a\13\35\3\35\3\35\7\35\u047e\n\35\f\35\16\35\u0481")
        buf.write("\13\35\3\35\3\35\7\35\u0485\n\35\f\35\16\35\u0488\13\35")
        buf.write("\3\35\3\35\3\36\3\36\7\36\u048e\n\36\f\36\16\36\u0491")
        buf.write("\13\36\3\36\3\36\7\36\u0495\n\36\f\36\16\36\u0498\13\36")
        buf.write("\3\36\3\36\7\36\u049c\n\36\f\36\16\36\u049f\13\36\3\36")
        buf.write("\3\36\3\37\3\37\7\37\u04a5\n\37\f\37\16\37\u04a8\13\37")
        buf.write("\3\37\3\37\7\37\u04ac\n\37\f\37\16\37\u04af\13\37\3\37")
        buf.write("\3\37\7\37\u04b3\n\37\f\37\16\37\u04b6\13\37\3\37\3\37")
        buf.write("\7\37\u04ba\n\37\f\37\16\37\u04bd\13\37\3\37\3\37\7\37")
        buf.write("\u04c1\n\37\f\37\16\37\u04c4\13\37\3\37\3\37\3 \3 \7 ")
        buf.write("\u04ca\n \f \16 \u04cd\13 \3 \3 \7 \u04d1\n \f \16 \u04d4")
        buf.write("\13 \3 \3 \7 \u04d8\n \f \16 \u04db\13 \3 \3 \7 \u04df")
        buf.write("\n \f \16 \u04e2\13 \3 \3 \7 \u04e6\n \f \16 \u04e9\13")
        buf.write(" \3 \3 \3!\3!\7!\u04ef\n!\f!\16!\u04f2\13!\3!\3!\7!\u04f6")
        buf.write("\n!\f!\16!\u04f9\13!\3!\3!\7!\u04fd\n!\f!\16!\u0500\13")
        buf.write("!\3!\3!\7!\u0504\n!\f!\16!\u0507\13!\3!\3!\7!\u050b\n")
        buf.write("!\f!\16!\u050e\13!\3!\3!\3\"\3\"\7\"\u0514\n\"\f\"\16")
        buf.write("\"\u0517\13\"\3\"\3\"\7\"\u051b\n\"\f\"\16\"\u051e\13")
        buf.write("\"\3\"\3\"\7\"\u0522\n\"\f\"\16\"\u0525\13\"\3\"\3\"\7")
        buf.write("\"\u0529\n\"\f\"\16\"\u052c\13\"\3\"\3\"\7\"\u0530\n\"")
        buf.write("\f\"\16\"\u0533\13\"\3\"\3\"\3#\3#\7#\u0539\n#\f#\16#")
        buf.write("\u053c\13#\3#\3#\7#\u0540\n#\f#\16#\u0543\13#\3#\3#\7")
        buf.write("#\u0547\n#\f#\16#\u054a\13#\3#\3#\3$\3$\7$\u0550\n$\f")
        buf.write("$\16$\u0553\13$\3$\3$\7$\u0557\n$\f$\16$\u055a\13$\3$")
        buf.write("\3$\7$\u055e\n$\f$\16$\u0561\13$\3$\3$\3%\3%\7%\u0567")
        buf.write("\n%\f%\16%\u056a\13%\3%\3%\7%\u056e\n%\f%\16%\u0571\13")
        buf.write("%\3%\3%\7%\u0575\n%\f%\16%\u0578\13%\3%\3%\7%\u057c\n")
        buf.write("%\f%\16%\u057f\13%\7%\u0581\n%\f%\16%\u0584\13%\3%\3%")
        buf.write("\7%\u0588\n%\f%\16%\u058b\13%\3%\3%\3&\3&\7&\u0591\n&")
        buf.write("\f&\16&\u0594\13&\3&\3&\7&\u0598\n&\f&\16&\u059b\13&\3")
        buf.write("&\3&\7&\u059f\n&\f&\16&\u05a2\13&\3&\3&\3\'\3\'\7\'\u05a8")
        buf.write("\n\'\f\'\16\'\u05ab\13\'\3\'\3\'\7\'\u05af\n\'\f\'\16")
        buf.write("\'\u05b2\13\'\3\'\3\'\7\'\u05b6\n\'\f\'\16\'\u05b9\13")
        buf.write("\'\3\'\3\'\3(\3(\7(\u05bf\n(\f(\16(\u05c2\13(\3(\3(\7")
        buf.write("(\u05c6\n(\f(\16(\u05c9\13(\3(\3(\7(\u05cd\n(\f(\16(\u05d0")
        buf.write("\13(\3(\3(\3)\3)\7)\u05d6\n)\f)\16)\u05d9\13)\3)\3)\7")
        buf.write(")\u05dd\n)\f)\16)\u05e0\13)\3)\3)\7)\u05e4\n)\f)\16)\u05e7")
        buf.write("\13)\3)\3)\3*\3*\7*\u05ed\n*\f*\16*\u05f0\13*\3*\3*\7")
        buf.write("*\u05f4\n*\f*\16*\u05f7\13*\3*\3*\7*\u05fb\n*\f*\16*\u05fe")
        buf.write("\13*\3*\3*\3+\3+\7+\u0604\n+\f+\16+\u0607\13+\3+\3+\7")
        buf.write("+\u060b\n+\f+\16+\u060e\13+\3+\3+\3+\5+\u0613\n+\3+\7")
        buf.write("+\u0616\n+\f+\16+\u0619\13+\3+\3+\3,\3,\7,\u061f\n,\f")
        buf.write(",\16,\u0622\13,\3,\3,\7,\u0626\n,\f,\16,\u0629\13,\3,")
        buf.write("\3,\7,\u062d\n,\f,\16,\u0630\13,\3,\3,\3-\3-\3.\3.\7.")
        buf.write("\u0638\n.\f.\16.\u063b\13.\3.\3.\7.\u063f\n.\f.\16.\u0642")
        buf.write("\13.\3.\3.\7.\u0646\n.\f.\16.\u0649\13.\3.\7.\u064c\n")
        buf.write(".\f.\16.\u064f\13.\3.\7.\u0652\n.\f.\16.\u0655\13.\5.")
        buf.write("\u0657\n.\3.\3.\3/\3/\3/\2\2\60\2\4\6\b\n\f\16\20\22\24")
        buf.write("\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVX")
        buf.write("Z\\\2\4\3\2\678\3\2\63\66\2\u0765\2a\3\2\2\2\4\u00b1\3")
        buf.write("\2\2\2\6\u0132\3\2\2\2\b\u0134\3\2\2\2\n\u0198\3\2\2\2")
        buf.write("\f\u020a\3\2\2\2\16\u020c\3\2\2\2\20\u02ad\3\2\2\2\22")
        buf.write("\u02af\3\2\2\2\24\u02b8\3\2\2\2\26\u0302\3\2\2\2\30\u031a")
        buf.write("\3\2\2\2\32\u0321\3\2\2\2\34\u033a\3\2\2\2\36\u033c\3")
        buf.write("\2\2\2 \u034f\3\2\2\2\"\u037b\3\2\2\2$\u0397\3\2\2\2&")
        buf.write("\u039b\3\2\2\2(\u03ac\3\2\2\2*\u03c3\3\2\2\2,\u03d5\3")
        buf.write("\2\2\2.\u03de\3\2\2\2\60\u040a\3\2\2\2\62\u0421\3\2\2")
        buf.write("\2\64\u0438\3\2\2\2\66\u044f\3\2\2\28\u0466\3\2\2\2:\u048b")
        buf.write("\3\2\2\2<\u04a2\3\2\2\2>\u04c7\3\2\2\2@\u04ec\3\2\2\2")
        buf.write("B\u0511\3\2\2\2D\u0536\3\2\2\2F\u054d\3\2\2\2H\u0564\3")
        buf.write("\2\2\2J\u058e\3\2\2\2L\u05a5\3\2\2\2N\u05bc\3\2\2\2P\u05d3")
        buf.write("\3\2\2\2R\u05ea\3\2\2\2T\u0601\3\2\2\2V\u061c\3\2\2\2")
        buf.write("X\u0633\3\2\2\2Z\u0635\3\2\2\2\\\u065a\3\2\2\2^`\t\2\2")
        buf.write("\2_^\3\2\2\2`c\3\2\2\2a_\3\2\2\2ab\3\2\2\2b\u00a4\3\2")
        buf.write("\2\2ca\3\2\2\2dh\5$\23\2eg\t\2\2\2fe\3\2\2\2gj\3\2\2\2")
        buf.write("hf\3\2\2\2hi\3\2\2\2ik\3\2\2\2jh\3\2\2\2ko\7\3\2\2ln\t")
        buf.write("\2\2\2ml\3\2\2\2nq\3\2\2\2om\3\2\2\2op\3\2\2\2p\u008f")
        buf.write("\3\2\2\2qo\3\2\2\2r\u0080\5$\23\2su\7\67\2\2ts\3\2\2\2")
        buf.write("ux\3\2\2\2vt\3\2\2\2vw\3\2\2\2wy\3\2\2\2xv\3\2\2\2y}\7")
        buf.write("8\2\2z|\7\67\2\2{z\3\2\2\2|\177\3\2\2\2}{\3\2\2\2}~\3")
        buf.write("\2\2\2~\u0081\3\2\2\2\177}\3\2\2\2\u0080v\3\2\2\2\u0081")
        buf.write("\u0082\3\2\2\2\u0082\u0080\3\2\2\2\u0082\u0083\3\2\2\2")
        buf.write("\u0083\u008f\3\2\2\2\u0084\u0088\5\6\4\2\u0085\u0088\5")
        buf.write("\4\3\2\u0086\u0088\5,\27\2\u0087\u0084\3\2\2\2\u0087\u0085")
        buf.write("\3\2\2\2\u0087\u0086\3\2\2\2\u0088\u008a\3\2\2\2\u0089")
        buf.write("\u008b\t\2\2\2\u008a\u0089\3\2\2\2\u008b\u008c\3\2\2\2")
        buf.write("\u008c\u008a\3\2\2\2\u008c\u008d\3\2\2\2\u008d\u008f\3")
        buf.write("\2\2\2\u008ed\3\2\2\2\u008er\3\2\2\2\u008e\u0087\3\2\2")
        buf.write("\2\u008f\u0092\3\2\2\2\u0090\u008e\3\2\2\2\u0090\u0091")
        buf.write("\3\2\2\2\u0091\u00a2\3\2\2\2\u0092\u0090\3\2\2\2\u0093")
        buf.write("\u0097\5$\23\2\u0094\u0096\t\2\2\2\u0095\u0094\3\2\2\2")
        buf.write("\u0096\u0099\3\2\2\2\u0097\u0095\3\2\2\2\u0097\u0098\3")
        buf.write("\2\2\2\u0098\u009b\3\2\2\2\u0099\u0097\3\2\2\2\u009a\u009c")
        buf.write("\7\3\2\2\u009b\u009a\3\2\2\2\u009b\u009c\3\2\2\2\u009c")
        buf.write("\u00a3\3\2\2\2\u009d\u00a1\5\6\4\2\u009e\u00a1\5\4\3\2")
        buf.write("\u009f\u00a1\5,\27\2\u00a0\u009d\3\2\2\2\u00a0\u009e\3")
        buf.write("\2\2\2\u00a0\u009f\3\2\2\2\u00a1\u00a3\3\2\2\2\u00a2\u0093")
        buf.write("\3\2\2\2\u00a2\u00a0\3\2\2\2\u00a3\u00a5\3\2\2\2\u00a4")
        buf.write("\u0090\3\2\2\2\u00a4\u00a5\3\2\2\2\u00a5\u00a9\3\2\2\2")
        buf.write("\u00a6\u00a8\t\2\2\2\u00a7\u00a6\3\2\2\2\u00a8\u00ab\3")
        buf.write("\2\2\2\u00a9\u00a7\3\2\2\2\u00a9\u00aa\3\2\2\2\u00aa\u00ad")
        buf.write("\3\2\2\2\u00ab\u00a9\3\2\2\2\u00ac\u00ae\79\2\2\u00ad")
        buf.write("\u00ac\3\2\2\2\u00ad\u00ae\3\2\2\2\u00ae\u00af\3\2\2\2")
        buf.write("\u00af\u00b0\7\2\2\3\u00b0\3\3\2\2\2\u00b1\u00b3\7\n\2")
        buf.write("\2\u00b2\u00b4\t\2\2\2\u00b3\u00b2\3\2\2\2\u00b4\u00b5")
        buf.write("\3\2\2\2\u00b5\u00b3\3\2\2\2\u00b5\u00b6\3\2\2\2\u00b6")
        buf.write("\u00b7\3\2\2\2\u00b7\u00bb\7\65\2\2\u00b8\u00ba\t\2\2")
        buf.write("\2\u00b9\u00b8\3\2\2\2\u00ba\u00bd\3\2\2\2\u00bb\u00b9")
        buf.write("\3\2\2\2\u00bb\u00bc\3\2\2\2\u00bc\u00be\3\2\2\2\u00bd")
        buf.write("\u00bb\3\2\2\2\u00be\u00c2\7\4\2\2\u00bf\u00c1\t\2\2\2")
        buf.write("\u00c0\u00bf\3\2\2\2\u00c1\u00c4\3\2\2\2\u00c2\u00c0\3")
        buf.write("\2\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00df\3\2\2\2\u00c4\u00c2")
        buf.write("\3\2\2\2\u00c5\u00c9\7\65\2\2\u00c6\u00c8\t\2\2\2\u00c7")
        buf.write("\u00c6\3\2\2\2\u00c8\u00cb\3\2\2\2\u00c9\u00c7\3\2\2\2")
        buf.write("\u00c9\u00ca\3\2\2\2\u00ca\u00dc\3\2\2\2\u00cb\u00c9\3")
        buf.write("\2\2\2\u00cc\u00d0\7\5\2\2\u00cd\u00cf\t\2\2\2\u00ce\u00cd")
        buf.write("\3\2\2\2\u00cf\u00d2\3\2\2\2\u00d0\u00ce\3\2\2\2\u00d0")
        buf.write("\u00d1\3\2\2\2\u00d1\u00d3\3\2\2\2\u00d2\u00d0\3\2\2\2")
        buf.write("\u00d3\u00d7\7\65\2\2\u00d4\u00d6\t\2\2\2\u00d5\u00d4")
        buf.write("\3\2\2\2\u00d6\u00d9\3\2\2\2\u00d7\u00d5\3\2\2\2\u00d7")
        buf.write("\u00d8\3\2\2\2\u00d8\u00db\3\2\2\2\u00d9\u00d7\3\2\2\2")
        buf.write("\u00da\u00cc\3\2\2\2\u00db\u00de\3\2\2\2\u00dc\u00da\3")
        buf.write("\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\u00e0\3\2\2\2\u00de\u00dc")
        buf.write("\3\2\2\2\u00df\u00c5\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0")
        buf.write("\u00e1\3\2\2\2\u00e1\u00e5\7\6\2\2\u00e2\u00e4\t\2\2\2")
        buf.write("\u00e3\u00e2\3\2\2\2\u00e4\u00e7\3\2\2\2\u00e5\u00e3\3")
        buf.write("\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00e8\3\2\2\2\u00e7\u00e5")
        buf.write("\3\2\2\2\u00e8\u00ea\7\22\2\2\u00e9\u00eb\t\2\2\2\u00ea")
        buf.write("\u00e9\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00ea\3\2\2\2")
        buf.write("\u00ec\u00ed\3\2\2\2\u00ed\u012b\3\2\2\2\u00ee\u00f2\5")
        buf.write("$\23\2\u00ef\u00f1\t\2\2\2\u00f0\u00ef\3\2\2\2\u00f1\u00f4")
        buf.write("\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3")
        buf.write("\u00f5\3\2\2\2\u00f4\u00f2\3\2\2\2\u00f5\u00f9\7\3\2\2")
        buf.write("\u00f6\u00f8\t\2\2\2\u00f7\u00f6\3\2\2\2\u00f8\u00fb\3")
        buf.write("\2\2\2\u00f9\u00f7\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\u0115")
        buf.write("\3\2\2\2\u00fb\u00f9\3\2\2\2\u00fc\u010a\5$\23\2\u00fd")
        buf.write("\u00ff\7\67\2\2\u00fe\u00fd\3\2\2\2\u00ff\u0102\3\2\2")
        buf.write("\2\u0100\u00fe\3\2\2\2\u0100\u0101\3\2\2\2\u0101\u0103")
        buf.write("\3\2\2\2\u0102\u0100\3\2\2\2\u0103\u0107\78\2\2\u0104")
        buf.write("\u0106\7\67\2\2\u0105\u0104\3\2\2\2\u0106\u0109\3\2\2")
        buf.write("\2\u0107\u0105\3\2\2\2\u0107\u0108\3\2\2\2\u0108\u010b")
        buf.write("\3\2\2\2\u0109\u0107\3\2\2\2\u010a\u0100\3\2\2\2\u010b")
        buf.write("\u010c\3\2\2\2\u010c\u010a\3\2\2\2\u010c\u010d\3\2\2\2")
        buf.write("\u010d\u0115\3\2\2\2\u010e\u0110\5\6\4\2\u010f\u0111\t")
        buf.write("\2\2\2\u0110\u010f\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0110")
        buf.write("\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u0115\3\2\2\2\u0114")
        buf.write("\u00ee\3\2\2\2\u0114\u00fc\3\2\2\2\u0114\u010e\3\2\2\2")
        buf.write("\u0115\u0118\3\2\2\2\u0116\u0114\3\2\2\2\u0116\u0117\3")
        buf.write("\2\2\2\u0117\u0124\3\2\2\2\u0118\u0116\3\2\2\2\u0119\u011d")
        buf.write("\5$\23\2\u011a\u011c\t\2\2\2\u011b\u011a\3\2\2\2\u011c")
        buf.write("\u011f\3\2\2\2\u011d\u011b\3\2\2\2\u011d\u011e\3\2\2\2")
        buf.write("\u011e\u0121\3\2\2\2\u011f\u011d\3\2\2\2\u0120\u0122\7")
        buf.write("\3\2\2\u0121\u0120\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0125")
        buf.write("\3\2\2\2\u0123\u0125\5\6\4\2\u0124\u0119\3\2\2\2\u0124")
        buf.write("\u0123\3\2\2\2\u0125\u0127\3\2\2\2\u0126\u0128\t\2\2\2")
        buf.write("\u0127\u0126\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u0127\3")
        buf.write("\2\2\2\u0129\u012a\3\2\2\2\u012a\u012c\3\2\2\2\u012b\u0116")
        buf.write("\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012d\3\2\2\2\u012d")
        buf.write("\u012e\7\23\2\2\u012e\5\3\2\2\2\u012f\u0133\5\f\7\2\u0130")
        buf.write("\u0133\5\n\6\2\u0131\u0133\5\b\5\2\u0132\u012f\3\2\2\2")
        buf.write("\u0132\u0130\3\2\2\2\u0132\u0131\3\2\2\2\u0133\7\3\2\2")
        buf.write("\2\u0134\u0136\7\f\2\2\u0135\u0137\t\2\2\2\u0136\u0135")
        buf.write("\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u0136\3\2\2\2\u0138")
        buf.write("\u0139\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u013c\7\65\2")
        buf.write("\2\u013b\u013d\t\2\2\2\u013c\u013b\3\2\2\2\u013d\u013e")
        buf.write("\3\2\2\2\u013e\u013c\3\2\2\2\u013e\u013f\3\2\2\2\u013f")
        buf.write("\u0140\3\2\2\2\u0140\u0142\7\r\2\2\u0141\u0143\t\2\2\2")
        buf.write("\u0142\u0141\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0142\3")
        buf.write("\2\2\2\u0144\u0145\3\2\2\2\u0145\u0146\3\2\2\2\u0146\u0148")
        buf.write("\7\65\2\2\u0147\u0149\t\2\2\2\u0148\u0147\3\2\2\2\u0149")
        buf.write("\u014a\3\2\2\2\u014a\u0148\3\2\2\2\u014a\u014b\3\2\2\2")
        buf.write("\u014b\u014c\3\2\2\2\u014c\u014e\7\16\2\2\u014d\u014f")
        buf.write("\t\2\2\2\u014e\u014d\3\2\2\2\u014f\u0150\3\2\2\2\u0150")
        buf.write("\u014e\3\2\2\2\u0150\u0151\3\2\2\2\u0151\u0194\3\2\2\2")
        buf.write("\u0152\u0156\5$\23\2\u0153\u0155\t\2\2\2\u0154\u0153\3")
        buf.write("\2\2\2\u0155\u0158\3\2\2\2\u0156\u0154\3\2\2\2\u0156\u0157")
        buf.write("\3\2\2\2\u0157\u0159\3\2\2\2\u0158\u0156\3\2\2\2\u0159")
        buf.write("\u015d\7\3\2\2\u015a\u015c\t\2\2\2\u015b\u015a\3\2\2\2")
        buf.write("\u015c\u015f\3\2\2\2\u015d\u015b\3\2\2\2\u015d\u015e\3")
        buf.write("\2\2\2\u015e\u0179\3\2\2\2\u015f\u015d\3\2\2\2\u0160\u016e")
        buf.write("\5$\23\2\u0161\u0163\7\67\2\2\u0162\u0161\3\2\2\2\u0163")
        buf.write("\u0166\3\2\2\2\u0164\u0162\3\2\2\2\u0164\u0165\3\2\2\2")
        buf.write("\u0165\u0167\3\2\2\2\u0166\u0164\3\2\2\2\u0167\u016b\7")
        buf.write("8\2\2\u0168\u016a\7\67\2\2\u0169\u0168\3\2\2\2\u016a\u016d")
        buf.write("\3\2\2\2\u016b\u0169\3\2\2\2\u016b\u016c\3\2\2\2\u016c")
        buf.write("\u016f\3\2\2\2\u016d\u016b\3\2\2\2\u016e\u0164\3\2\2\2")
        buf.write("\u016f\u0170\3\2\2\2\u0170\u016e\3\2\2\2\u0170\u0171\3")
        buf.write("\2\2\2\u0171\u0179\3\2\2\2\u0172\u0174\5\6\4\2\u0173\u0175")
        buf.write("\t\2\2\2\u0174\u0173\3\2\2\2\u0175\u0176\3\2\2\2\u0176")
        buf.write("\u0174\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u0179\3\2\2\2")
        buf.write("\u0178\u0152\3\2\2\2\u0178\u0160\3\2\2\2\u0178\u0172\3")
        buf.write("\2\2\2\u0179\u017c\3\2\2\2\u017a\u0178\3\2\2\2\u017a\u017b")
        buf.write("\3\2\2\2\u017b\u0192\3\2\2\2\u017c\u017a\3\2\2\2\u017d")
        buf.write("\u0181\5$\23\2\u017e\u0180\t\2\2\2\u017f\u017e\3\2\2\2")
        buf.write("\u0180\u0183\3\2\2\2\u0181\u017f\3\2\2\2\u0181\u0182\3")
        buf.write("\2\2\2\u0182\u018a\3\2\2\2\u0183\u0181\3\2\2\2\u0184\u018b")
        buf.write("\7\3\2\2\u0185\u0187\t\2\2\2\u0186\u0185\3\2\2\2\u0187")
        buf.write("\u0188\3\2\2\2\u0188\u0186\3\2\2\2\u0188\u0189\3\2\2\2")
        buf.write("\u0189\u018b\3\2\2\2\u018a\u0184\3\2\2\2\u018a\u0186\3")
        buf.write("\2\2\2\u018b\u0193\3\2\2\2\u018c\u018e\5\6\4\2\u018d\u018f")
        buf.write("\t\2\2\2\u018e\u018d\3\2\2\2\u018f\u0190\3\2\2\2\u0190")
        buf.write("\u018e\3\2\2\2\u0190\u0191\3\2\2\2\u0191\u0193\3\2\2\2")
        buf.write("\u0192\u017d\3\2\2\2\u0192\u018c\3\2\2\2\u0193\u0195\3")
        buf.write("\2\2\2\u0194\u017a\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u0196")
        buf.write("\3\2\2\2\u0196\u0197\7\23\2\2\u0197\t\3\2\2\2\u0198\u019a")
        buf.write("\7\13\2\2\u0199\u019b\t\2\2\2\u019a\u0199\3\2\2\2\u019b")
        buf.write("\u019c\3\2\2\2\u019c\u019a\3\2\2\2\u019c\u019d\3\2\2\2")
        buf.write("\u019d\u019e\3\2\2\2\u019e\u01a0\5\26\f\2\u019f\u01a1")
        buf.write("\t\2\2\2\u01a0\u019f\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2")
        buf.write("\u01a0\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a4\3\2\2\2")
        buf.write("\u01a4\u01a6\7\16\2\2\u01a5\u01a7\t\2\2\2\u01a6\u01a5")
        buf.write("\3\2\2\2\u01a7\u01a8\3\2\2\2\u01a8\u01a6\3\2\2\2\u01a8")
        buf.write("\u01a9\3\2\2\2\u01a9\u01ec\3\2\2\2\u01aa\u01ae\5$\23\2")
        buf.write("\u01ab\u01ad\t\2\2\2\u01ac\u01ab\3\2\2\2\u01ad\u01b0\3")
        buf.write("\2\2\2\u01ae\u01ac\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b1")
        buf.write("\3\2\2\2\u01b0\u01ae\3\2\2\2\u01b1\u01b5\7\3\2\2\u01b2")
        buf.write("\u01b4\t\2\2\2\u01b3\u01b2\3\2\2\2\u01b4\u01b7\3\2\2\2")
        buf.write("\u01b5\u01b3\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01d1\3")
        buf.write("\2\2\2\u01b7\u01b5\3\2\2\2\u01b8\u01c6\5$\23\2\u01b9\u01bb")
        buf.write("\7\67\2\2\u01ba\u01b9\3\2\2\2\u01bb\u01be\3\2\2\2\u01bc")
        buf.write("\u01ba\3\2\2\2\u01bc\u01bd\3\2\2\2\u01bd\u01bf\3\2\2\2")
        buf.write("\u01be\u01bc\3\2\2\2\u01bf\u01c3\78\2\2\u01c0\u01c2\7")
        buf.write("\67\2\2\u01c1\u01c0\3\2\2\2\u01c2\u01c5\3\2\2\2\u01c3")
        buf.write("\u01c1\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01c7\3\2\2\2")
        buf.write("\u01c5\u01c3\3\2\2\2\u01c6\u01bc\3\2\2\2\u01c7\u01c8\3")
        buf.write("\2\2\2\u01c8\u01c6\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01d1")
        buf.write("\3\2\2\2\u01ca\u01cc\5\6\4\2\u01cb\u01cd\t\2\2\2\u01cc")
        buf.write("\u01cb\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce\u01cc\3\2\2\2")
        buf.write("\u01ce\u01cf\3\2\2\2\u01cf\u01d1\3\2\2\2\u01d0\u01aa\3")
        buf.write("\2\2\2\u01d0\u01b8\3\2\2\2\u01d0\u01ca\3\2\2\2\u01d1\u01d4")
        buf.write("\3\2\2\2\u01d2\u01d0\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3")
        buf.write("\u01ea\3\2\2\2\u01d4\u01d2\3\2\2\2\u01d5\u01d9\5$\23\2")
        buf.write("\u01d6\u01d8\t\2\2\2\u01d7\u01d6\3\2\2\2\u01d8\u01db\3")
        buf.write("\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\u01e2")
        buf.write("\3\2\2\2\u01db\u01d9\3\2\2\2\u01dc\u01e3\7\3\2\2\u01dd")
        buf.write("\u01df\t\2\2\2\u01de\u01dd\3\2\2\2\u01df\u01e0\3\2\2\2")
        buf.write("\u01e0\u01de\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1\u01e3\3")
        buf.write("\2\2\2\u01e2\u01dc\3\2\2\2\u01e2\u01de\3\2\2\2\u01e3\u01eb")
        buf.write("\3\2\2\2\u01e4\u01e6\5\6\4\2\u01e5\u01e7\t\2\2\2\u01e6")
        buf.write("\u01e5\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\u01e6\3\2\2\2")
        buf.write("\u01e8\u01e9\3\2\2\2\u01e9\u01eb\3\2\2\2\u01ea\u01d5\3")
        buf.write("\2\2\2\u01ea\u01e4\3\2\2\2\u01eb\u01ed\3\2\2\2\u01ec\u01d2")
        buf.write("\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee")
        buf.write("\u01ef\7\23\2\2\u01ef\13\3\2\2\2\u01f0\u01f1\5\16\b\2")
        buf.write("\u01f1\u01f5\5\20\t\2\u01f2\u01f4\5\22\n\2\u01f3\u01f2")
        buf.write("\3\2\2\2\u01f4\u01f7\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f5")
        buf.write("\u01f6\3\2\2\2\u01f6\u01f9\3\2\2\2\u01f7\u01f5\3\2\2\2")
        buf.write("\u01f8\u01fa\5\24\13\2\u01f9\u01f8\3\2\2\2\u01f9\u01fa")
        buf.write("\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb\u01fc\7\23\2\2\u01fc")
        buf.write("\u020b\3\2\2\2\u01fd\u01fe\5\16\b\2\u01fe\u0202\5\20\t")
        buf.write("\2\u01ff\u0201\5\22\n\2\u0200\u01ff\3\2\2\2\u0201\u0204")
        buf.write("\3\2\2\2\u0202\u0200\3\2\2\2\u0202\u0203\3\2\2\2\u0203")
        buf.write("\u0206\3\2\2\2\u0204\u0202\3\2\2\2\u0205\u0207\5\24\13")
        buf.write("\2\u0206\u0205\3\2\2\2\u0206\u0207\3\2\2\2\u0207\u0208")
        buf.write("\3\2\2\2\u0208\u0209\b\7\1\2\u0209\u020b\3\2\2\2\u020a")
        buf.write("\u01f0\3\2\2\2\u020a\u01fd\3\2\2\2\u020b\r\3\2\2\2\u020c")
        buf.write("\u020e\7\17\2\2\u020d\u020f\t\2\2\2\u020e\u020d\3\2\2")
        buf.write("\2\u020f\u0210\3\2\2\2\u0210\u020e\3\2\2\2\u0210\u0211")
        buf.write("\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u0214\5\26\f\2\u0213")
        buf.write("\u0215\t\2\2\2\u0214\u0213\3\2\2\2\u0215\u0216\3\2\2\2")
        buf.write("\u0216\u0214\3\2\2\2\u0216\u0217\3\2\2\2\u0217\17\3\2")
        buf.write("\2\2\u0218\u021a\7\20\2\2\u0219\u021b\t\2\2\2\u021a\u0219")
        buf.write("\3\2\2\2\u021b\u021c\3\2\2\2\u021c\u021a\3\2\2\2\u021c")
        buf.write("\u021d\3\2\2\2\u021d\u0260\3\2\2\2\u021e\u0222\5$\23\2")
        buf.write("\u021f\u0221\t\2\2\2\u0220\u021f\3\2\2\2\u0221\u0224\3")
        buf.write("\2\2\2\u0222\u0220\3\2\2\2\u0222\u0223\3\2\2\2\u0223\u0225")
        buf.write("\3\2\2\2\u0224\u0222\3\2\2\2\u0225\u0229\7\3\2\2\u0226")
        buf.write("\u0228\t\2\2\2\u0227\u0226\3\2\2\2\u0228\u022b\3\2\2\2")
        buf.write("\u0229\u0227\3\2\2\2\u0229\u022a\3\2\2\2\u022a\u0245\3")
        buf.write("\2\2\2\u022b\u0229\3\2\2\2\u022c\u023a\5$\23\2\u022d\u022f")
        buf.write("\7\67\2\2\u022e\u022d\3\2\2\2\u022f\u0232\3\2\2\2\u0230")
        buf.write("\u022e\3\2\2\2\u0230\u0231\3\2\2\2\u0231\u0233\3\2\2\2")
        buf.write("\u0232\u0230\3\2\2\2\u0233\u0237\78\2\2\u0234\u0236\7")
        buf.write("\67\2\2\u0235\u0234\3\2\2\2\u0236\u0239\3\2\2\2\u0237")
        buf.write("\u0235\3\2\2\2\u0237\u0238\3\2\2\2\u0238\u023b\3\2\2\2")
        buf.write("\u0239\u0237\3\2\2\2\u023a\u0230\3\2\2\2\u023b\u023c\3")
        buf.write("\2\2\2\u023c\u023a\3\2\2\2\u023c\u023d\3\2\2\2\u023d\u0245")
        buf.write("\3\2\2\2\u023e\u0240\5\6\4\2\u023f\u0241\t\2\2\2\u0240")
        buf.write("\u023f\3\2\2\2\u0241\u0242\3\2\2\2\u0242\u0240\3\2\2\2")
        buf.write("\u0242\u0243\3\2\2\2\u0243\u0245\3\2\2\2\u0244\u021e\3")
        buf.write("\2\2\2\u0244\u022c\3\2\2\2\u0244\u023e\3\2\2\2\u0245\u0248")
        buf.write("\3\2\2\2\u0246\u0244\3\2\2\2\u0246\u0247\3\2\2\2\u0247")
        buf.write("\u025e\3\2\2\2\u0248\u0246\3\2\2\2\u0249\u024d\5$\23\2")
        buf.write("\u024a\u024c\t\2\2\2\u024b\u024a\3\2\2\2\u024c\u024f\3")
        buf.write("\2\2\2\u024d\u024b\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u0256")
        buf.write("\3\2\2\2\u024f\u024d\3\2\2\2\u0250\u0257\7\3\2\2\u0251")
        buf.write("\u0253\t\2\2\2\u0252\u0251\3\2\2\2\u0253\u0254\3\2\2\2")
        buf.write("\u0254\u0252\3\2\2\2\u0254\u0255\3\2\2\2\u0255\u0257\3")
        buf.write("\2\2\2\u0256\u0250\3\2\2\2\u0256\u0252\3\2\2\2\u0257\u025f")
        buf.write("\3\2\2\2\u0258\u025a\5\6\4\2\u0259\u025b\t\2\2\2\u025a")
        buf.write("\u0259\3\2\2\2\u025b\u025c\3\2\2\2\u025c\u025a\3\2\2\2")
        buf.write("\u025c\u025d\3\2\2\2\u025d\u025f\3\2\2\2\u025e\u0249\3")
        buf.write("\2\2\2\u025e\u0258\3\2\2\2\u025f\u0261\3\2\2\2\u0260\u0246")
        buf.write("\3\2\2\2\u0260\u0261\3\2\2\2\u0261\u02ae\3\2\2\2\u0262")
        buf.write("\u0263\7\16\2\2\u0263\u0265\b\t\1\2\u0264\u0266\t\2\2")
        buf.write("\2\u0265\u0264\3\2\2\2\u0266\u0267\3\2\2\2\u0267\u0265")
        buf.write("\3\2\2\2\u0267\u0268\3\2\2\2\u0268\u02ab\3\2\2\2\u0269")
        buf.write("\u026d\5$\23\2\u026a\u026c\t\2\2\2\u026b\u026a\3\2\2\2")
        buf.write("\u026c\u026f\3\2\2\2\u026d\u026b\3\2\2\2\u026d\u026e\3")
        buf.write("\2\2\2\u026e\u0270\3\2\2\2\u026f\u026d\3\2\2\2\u0270\u0274")
        buf.write("\7\3\2\2\u0271\u0273\t\2\2\2\u0272\u0271\3\2\2\2\u0273")
        buf.write("\u0276\3\2\2\2\u0274\u0272\3\2\2\2\u0274\u0275\3\2\2\2")
        buf.write("\u0275\u0290\3\2\2\2\u0276\u0274\3\2\2\2\u0277\u0285\5")
        buf.write("$\23\2\u0278\u027a\7\67\2\2\u0279\u0278\3\2\2\2\u027a")
        buf.write("\u027d\3\2\2\2\u027b\u0279\3\2\2\2\u027b\u027c\3\2\2\2")
        buf.write("\u027c\u027e\3\2\2\2\u027d\u027b\3\2\2\2\u027e\u0282\7")
        buf.write("8\2\2\u027f\u0281\7\67\2\2\u0280\u027f\3\2\2\2\u0281\u0284")
        buf.write("\3\2\2\2\u0282\u0280\3\2\2\2\u0282\u0283\3\2\2\2\u0283")
        buf.write("\u0286\3\2\2\2\u0284\u0282\3\2\2\2\u0285\u027b\3\2\2\2")
        buf.write("\u0286\u0287\3\2\2\2\u0287\u0285\3\2\2\2\u0287\u0288\3")
        buf.write("\2\2\2\u0288\u0290\3\2\2\2\u0289\u028b\5\6\4\2\u028a\u028c")
        buf.write("\t\2\2\2\u028b\u028a\3\2\2\2\u028c\u028d\3\2\2\2\u028d")
        buf.write("\u028b\3\2\2\2\u028d\u028e\3\2\2\2\u028e\u0290\3\2\2\2")
        buf.write("\u028f\u0269\3\2\2\2\u028f\u0277\3\2\2\2\u028f\u0289\3")
        buf.write("\2\2\2\u0290\u0293\3\2\2\2\u0291\u028f\3\2\2\2\u0291\u0292")
        buf.write("\3\2\2\2\u0292\u02a9\3\2\2\2\u0293\u0291\3\2\2\2\u0294")
        buf.write("\u0298\5$\23\2\u0295\u0297\t\2\2\2\u0296\u0295\3\2\2\2")
        buf.write("\u0297\u029a\3\2\2\2\u0298\u0296\3\2\2\2\u0298\u0299\3")
        buf.write("\2\2\2\u0299\u02a1\3\2\2\2\u029a\u0298\3\2\2\2\u029b\u02a2")
        buf.write("\7\3\2\2\u029c\u029e\t\2\2\2\u029d\u029c\3\2\2\2\u029e")
        buf.write("\u029f\3\2\2\2\u029f\u029d\3\2\2\2\u029f\u02a0\3\2\2\2")
        buf.write("\u02a0\u02a2\3\2\2\2\u02a1\u029b\3\2\2\2\u02a1\u029d\3")
        buf.write("\2\2\2\u02a2\u02aa\3\2\2\2\u02a3\u02a5\5\6\4\2\u02a4\u02a6")
        buf.write("\t\2\2\2\u02a5\u02a4\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7")
        buf.write("\u02a5\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8\u02aa\3\2\2\2")
        buf.write("\u02a9\u0294\3\2\2\2\u02a9\u02a3\3\2\2\2\u02aa\u02ac\3")
        buf.write("\2\2\2\u02ab\u0291\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02ae")
        buf.write("\3\2\2\2\u02ad\u0218\3\2\2\2\u02ad\u0262\3\2\2\2\u02ae")
        buf.write("\21\3\2\2\2\u02af\u02b1\7\21\2\2\u02b0\u02b2\t\2\2\2\u02b1")
        buf.write("\u02b0\3\2\2\2\u02b2\u02b3\3\2\2\2\u02b3\u02b1\3\2\2\2")
        buf.write("\u02b3\u02b4\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5\u02b6\5")
        buf.write("\16\b\2\u02b6\u02b7\5\20\t\2\u02b7\23\3\2\2\2\u02b8\u02ba")
        buf.write("\7\21\2\2\u02b9\u02bb\t\2\2\2\u02ba\u02b9\3\2\2\2\u02bb")
        buf.write("\u02bc\3\2\2\2\u02bc\u02ba\3\2\2\2\u02bc\u02bd\3\2\2\2")
        buf.write("\u02bd\u0300\3\2\2\2\u02be\u02c2\5$\23\2\u02bf\u02c1\t")
        buf.write("\2\2\2\u02c0\u02bf\3\2\2\2\u02c1\u02c4\3\2\2\2\u02c2\u02c0")
        buf.write("\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3\u02c5\3\2\2\2\u02c4")
        buf.write("\u02c2\3\2\2\2\u02c5\u02c9\7\3\2\2\u02c6\u02c8\t\2\2\2")
        buf.write("\u02c7\u02c6\3\2\2\2\u02c8\u02cb\3\2\2\2\u02c9\u02c7\3")
        buf.write("\2\2\2\u02c9\u02ca\3\2\2\2\u02ca\u02e5\3\2\2\2\u02cb\u02c9")
        buf.write("\3\2\2\2\u02cc\u02da\5$\23\2\u02cd\u02cf\7\67\2\2\u02ce")
        buf.write("\u02cd\3\2\2\2\u02cf\u02d2\3\2\2\2\u02d0\u02ce\3\2\2\2")
        buf.write("\u02d0\u02d1\3\2\2\2\u02d1\u02d3\3\2\2\2\u02d2\u02d0\3")
        buf.write("\2\2\2\u02d3\u02d7\78\2\2\u02d4\u02d6\7\67\2\2\u02d5\u02d4")
        buf.write("\3\2\2\2\u02d6\u02d9\3\2\2\2\u02d7\u02d5\3\2\2\2\u02d7")
        buf.write("\u02d8\3\2\2\2\u02d8\u02db\3\2\2\2\u02d9\u02d7\3\2\2\2")
        buf.write("\u02da\u02d0\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u02da\3")
        buf.write("\2\2\2\u02dc\u02dd\3\2\2\2\u02dd\u02e5\3\2\2\2\u02de\u02e0")
        buf.write("\5\6\4\2\u02df\u02e1\t\2\2\2\u02e0\u02df\3\2\2\2\u02e1")
        buf.write("\u02e2\3\2\2\2\u02e2\u02e0\3\2\2\2\u02e2\u02e3\3\2\2\2")
        buf.write("\u02e3\u02e5\3\2\2\2\u02e4\u02be\3\2\2\2\u02e4\u02cc\3")
        buf.write("\2\2\2\u02e4\u02de\3\2\2\2\u02e5\u02e8\3\2\2\2\u02e6\u02e4")
        buf.write("\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7\u02fe\3\2\2\2\u02e8")
        buf.write("\u02e6\3\2\2\2\u02e9\u02ed\5$\23\2\u02ea\u02ec\t\2\2\2")
        buf.write("\u02eb\u02ea\3\2\2\2\u02ec\u02ef\3\2\2\2\u02ed\u02eb\3")
        buf.write("\2\2\2\u02ed\u02ee\3\2\2\2\u02ee\u02f6\3\2\2\2\u02ef\u02ed")
        buf.write("\3\2\2\2\u02f0\u02f7\7\3\2\2\u02f1\u02f3\t\2\2\2\u02f2")
        buf.write("\u02f1\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4\u02f2\3\2\2\2")
        buf.write("\u02f4\u02f5\3\2\2\2\u02f5\u02f7\3\2\2\2\u02f6\u02f0\3")
        buf.write("\2\2\2\u02f6\u02f2\3\2\2\2\u02f7\u02ff\3\2\2\2\u02f8\u02fa")
        buf.write("\5\6\4\2\u02f9\u02fb\t\2\2\2\u02fa\u02f9\3\2\2\2\u02fb")
        buf.write("\u02fc\3\2\2\2\u02fc\u02fa\3\2\2\2\u02fc\u02fd\3\2\2\2")
        buf.write("\u02fd\u02ff\3\2\2\2\u02fe\u02e9\3\2\2\2\u02fe\u02f8\3")
        buf.write("\2\2\2\u02ff\u0301\3\2\2\2\u0300\u02e6\3\2\2\2\u0300\u0301")
        buf.write("\3\2\2\2\u0301\25\3\2\2\2\u0302\u0311\5\30\r\2\u0303\u0305")
        buf.write("\t\2\2\2\u0304\u0303\3\2\2\2\u0305\u0306\3\2\2\2\u0306")
        buf.write("\u0304\3\2\2\2\u0306\u0307\3\2\2\2\u0307\u0308\3\2\2\2")
        buf.write("\u0308\u030a\7\61\2\2\u0309\u030b\t\2\2\2\u030a\u0309")
        buf.write("\3\2\2\2\u030b\u030c\3\2\2\2\u030c\u030a\3\2\2\2\u030c")
        buf.write("\u030d\3\2\2\2\u030d\u030e\3\2\2\2\u030e\u0310\5\30\r")
        buf.write("\2\u030f\u0304\3\2\2\2\u0310\u0313\3\2\2\2\u0311\u030f")
        buf.write("\3\2\2\2\u0311\u0312\3\2\2\2\u0312\27\3\2\2\2\u0313\u0311")
        buf.write("\3\2\2\2\u0314\u0316\7\62\2\2\u0315\u0317\t\2\2\2\u0316")
        buf.write("\u0315\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u0316\3\2\2\2")
        buf.write("\u0318\u0319\3\2\2\2\u0319\u031b\3\2\2\2\u031a\u0314\3")
        buf.write("\2\2\2\u031a\u031b\3\2\2\2\u031b\u031f\3\2\2\2\u031c\u0320")
        buf.write("\5\"\22\2\u031d\u0320\7\63\2\2\u031e\u0320\5\32\16\2\u031f")
        buf.write("\u031c\3\2\2\2\u031f\u031d\3\2\2\2\u031f\u031e\3\2\2\2")
        buf.write("\u0320\31\3\2\2\2\u0321\u0325\5\34\17\2\u0322\u0324\t")
        buf.write("\2\2\2\u0323\u0322\3\2\2\2\u0324\u0327\3\2\2\2\u0325\u0323")
        buf.write("\3\2\2\2\u0325\u0326\3\2\2\2\u0326\u0328\3\2\2\2\u0327")
        buf.write("\u0325\3\2\2\2\u0328\u032c\7.\2\2\u0329\u032b\t\2\2\2")
        buf.write("\u032a\u0329\3\2\2\2\u032b\u032e\3\2\2\2\u032c\u032a\3")
        buf.write("\2\2\2\u032c\u032d\3\2\2\2\u032d\u032f\3\2\2\2\u032e\u032c")
        buf.write("\3\2\2\2\u032f\u0330\5\34\17\2\u0330\33\3\2\2\2\u0331")
        buf.write("\u033b\5\"\22\2\u0332\u033b\7\64\2\2\u0333\u033b\7\66")
        buf.write("\2\2\u0334\u033b\7\65\2\2\u0335\u033b\7\63\2\2\u0336\u033b")
        buf.write("\5\36\20\2\u0337\u033b\5Z.\2\u0338\u033b\5*\26\2\u0339")
        buf.write("\u033b\5 \21\2\u033a\u0331\3\2\2\2\u033a\u0332\3\2\2\2")
        buf.write("\u033a\u0333\3\2\2\2\u033a\u0334\3\2\2\2\u033a\u0335\3")
        buf.write("\2\2\2\u033a\u0336\3\2\2\2\u033a\u0337\3\2\2\2\u033a\u0338")
        buf.write("\3\2\2\2\u033a\u0339\3\2\2\2\u033b\35\3\2\2\2\u033c\u034b")
        buf.write("\5\\/\2\u033d\u033f\t\2\2\2\u033e\u033d\3\2\2\2\u033f")
        buf.write("\u0342\3\2\2\2\u0340\u033e\3\2\2\2\u0340\u0341\3\2\2\2")
        buf.write("\u0341\u0343\3\2\2\2\u0342\u0340\3\2\2\2\u0343\u0347\7")
        buf.write("/\2\2\u0344\u0346\t\2\2\2\u0345\u0344\3\2\2\2\u0346\u0349")
        buf.write("\3\2\2\2\u0347\u0345\3\2\2\2\u0347\u0348\3\2\2\2\u0348")
        buf.write("\u034a\3\2\2\2\u0349\u0347\3\2\2\2\u034a\u034c\5\\/\2")
        buf.write("\u034b\u0340\3\2\2\2\u034c\u034d\3\2\2\2\u034d\u034b\3")
        buf.write("\2\2\2\u034d\u034e\3\2\2\2\u034e\37\3\2\2\2\u034f\u035e")
        buf.write("\5\\/\2\u0350\u0352\t\2\2\2\u0351\u0350\3\2\2\2\u0352")
        buf.write("\u0355\3\2\2\2\u0353\u0351\3\2\2\2\u0353\u0354\3\2\2\2")
        buf.write("\u0354\u0356\3\2\2\2\u0355\u0353\3\2\2\2\u0356\u035a\7")
        buf.write("\60\2\2\u0357\u0359\t\2\2\2\u0358\u0357\3\2\2\2\u0359")
        buf.write("\u035c\3\2\2\2\u035a\u0358\3\2\2\2\u035a\u035b\3\2\2\2")
        buf.write("\u035b\u035d\3\2\2\2\u035c\u035a\3\2\2\2\u035d\u035f\5")
        buf.write("\\/\2\u035e\u0353\3\2\2\2\u035f\u0360\3\2\2\2\u0360\u035e")
        buf.write("\3\2\2\2\u0360\u0361\3\2\2\2\u0361!\3\2\2\2\u0362\u037c")
        buf.write("\5.\30\2\u0363\u037c\5\60\31\2\u0364\u037c\5\66\34\2\u0365")
        buf.write("\u037c\58\35\2\u0366\u037c\5V,\2\u0367\u037c\5:\36\2\u0368")
        buf.write("\u037c\5<\37\2\u0369\u037c\5> \2\u036a\u037c\5@!\2\u036b")
        buf.write("\u037c\5B\"\2\u036c\u037c\5D#\2\u036d\u037c\5F$\2\u036e")
        buf.write("\u037c\5H%\2\u036f\u037c\5J&\2\u0370\u037c\5L\'\2\u0371")
        buf.write("\u037c\5N(\2\u0372\u037c\5P)\2\u0373\u037c\5R*\2\u0374")
        buf.write("\u037c\5T+\2\u0375\u037c\5\64\33\2\u0376\u037c\5\62\32")
        buf.write("\2\u0377\u037c\7!\2\2\u0378\u037c\7&\2\2\u0379\u037c\7")
        buf.write("\'\2\2\u037a\u037c\5X-\2\u037b\u0362\3\2\2\2\u037b\u0363")
        buf.write("\3\2\2\2\u037b\u0364\3\2\2\2\u037b\u0365\3\2\2\2\u037b")
        buf.write("\u0366\3\2\2\2\u037b\u0367\3\2\2\2\u037b\u0368\3\2\2\2")
        buf.write("\u037b\u0369\3\2\2\2\u037b\u036a\3\2\2\2\u037b\u036b\3")
        buf.write("\2\2\2\u037b\u036c\3\2\2\2\u037b\u036d\3\2\2\2\u037b\u036e")
        buf.write("\3\2\2\2\u037b\u036f\3\2\2\2\u037b\u0370\3\2\2\2\u037b")
        buf.write("\u0371\3\2\2\2\u037b\u0372\3\2\2\2\u037b\u0373\3\2\2\2")
        buf.write("\u037b\u0374\3\2\2\2\u037b\u0375\3\2\2\2\u037b\u0376\3")
        buf.write("\2\2\2\u037b\u0377\3\2\2\2\u037b\u0378\3\2\2\2\u037b\u0379")
        buf.write("\3\2\2\2\u037b\u037a\3\2\2\2\u037c#\3\2\2\2\u037d\u0398")
        buf.write("\5.\30\2\u037e\u0398\5\60\31\2\u037f\u0398\5\66\34\2\u0380")
        buf.write("\u0398\58\35\2\u0381\u0398\5V,\2\u0382\u0398\5:\36\2\u0383")
        buf.write("\u0398\5<\37\2\u0384\u0398\5> \2\u0385\u0398\5@!\2\u0386")
        buf.write("\u0398\5B\"\2\u0387\u0398\5D#\2\u0388\u0398\5F$\2\u0389")
        buf.write("\u0398\5H%\2\u038a\u0398\5J&\2\u038b\u0398\5L\'\2\u038c")
        buf.write("\u0398\5N(\2\u038d\u0398\5P)\2\u038e\u0398\5R*\2\u038f")
        buf.write("\u0398\5(\25\2\u0390\u0398\5&\24\2\u0391\u0398\5\64\33")
        buf.write("\2\u0392\u0398\5\62\32\2\u0393\u0398\7!\2\2\u0394\u0398")
        buf.write("\7&\2\2\u0395\u0398\7\'\2\2\u0396\u0398\5X-\2\u0397\u037d")
        buf.write("\3\2\2\2\u0397\u037e\3\2\2\2\u0397\u037f\3\2\2\2\u0397")
        buf.write("\u0380\3\2\2\2\u0397\u0381\3\2\2\2\u0397\u0382\3\2\2\2")
        buf.write("\u0397\u0383\3\2\2\2\u0397\u0384\3\2\2\2\u0397\u0385\3")
        buf.write("\2\2\2\u0397\u0386\3\2\2\2\u0397\u0387\3\2\2\2\u0397\u0388")
        buf.write("\3\2\2\2\u0397\u0389\3\2\2\2\u0397\u038a\3\2\2\2\u0397")
        buf.write("\u038b\3\2\2\2\u0397\u038c\3\2\2\2\u0397\u038d\3\2\2\2")
        buf.write("\u0397\u038e\3\2\2\2\u0397\u038f\3\2\2\2\u0397\u0390\3")
        buf.write("\2\2\2\u0397\u0391\3\2\2\2\u0397\u0392\3\2\2\2\u0397\u0393")
        buf.write("\3\2\2\2\u0397\u0394\3\2\2\2\u0397\u0395\3\2\2\2\u0397")
        buf.write("\u0396\3\2\2\2\u0398%\3\2\2\2\u0399\u039c\7\65\2\2\u039a")
        buf.write("\u039c\5*\26\2\u039b\u0399\3\2\2\2\u039b\u039a\3\2\2\2")
        buf.write("\u039c\u03a0\3\2\2\2\u039d\u039f\t\2\2\2\u039e\u039d\3")
        buf.write("\2\2\2\u039f\u03a2\3\2\2\2\u03a0\u039e\3\2\2\2\u03a0\u03a1")
        buf.write("\3\2\2\2\u03a1\u03a3\3\2\2\2\u03a2\u03a0\3\2\2\2\u03a3")
        buf.write("\u03a7\7\7\2\2\u03a4\u03a6\t\2\2\2\u03a5\u03a4\3\2\2\2")
        buf.write("\u03a6\u03a9\3\2\2\2\u03a7\u03a5\3\2\2\2\u03a7\u03a8\3")
        buf.write("\2\2\2\u03a8\u03aa\3\2\2\2\u03a9\u03a7\3\2\2\2\u03aa\u03ab")
        buf.write("\5\34\17\2\u03ab\'\3\2\2\2\u03ac\u03b0\7\65\2\2\u03ad")
        buf.write("\u03af\t\2\2\2\u03ae\u03ad\3\2\2\2\u03af\u03b2\3\2\2\2")
        buf.write("\u03b0\u03ae\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03b3\3")
        buf.write("\2\2\2\u03b2\u03b0\3\2\2\2\u03b3\u03b7\7-\2\2\u03b4\u03b6")
        buf.write("\t\2\2\2\u03b5\u03b4\3\2\2\2\u03b6\u03b9\3\2\2\2\u03b7")
        buf.write("\u03b5\3\2\2\2\u03b7\u03b8\3\2\2\2\u03b8\u03ba\3\2\2\2")
        buf.write("\u03b9\u03b7\3\2\2\2\u03ba\u03be\5\34\17\2\u03bb\u03bd")
        buf.write("\t\2\2\2\u03bc\u03bb\3\2\2\2\u03bd\u03c0\3\2\2\2\u03be")
        buf.write("\u03bc\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf)\3\2\2\2\u03c0")
        buf.write("\u03be\3\2\2\2\u03c1\u03c4\7\65\2\2\u03c2\u03c4\5X-\2")
        buf.write("\u03c3\u03c1\3\2\2\2\u03c3\u03c2\3\2\2\2\u03c4\u03c5\3")
        buf.write("\2\2\2\u03c5\u03c9\7\b\2\2\u03c6\u03c8\t\2\2\2\u03c7\u03c6")
        buf.write("\3\2\2\2\u03c8\u03cb\3\2\2\2\u03c9\u03c7\3\2\2\2\u03c9")
        buf.write("\u03ca\3\2\2\2\u03ca\u03cc\3\2\2\2\u03cb\u03c9\3\2\2\2")
        buf.write("\u03cc\u03d0\5\34\17\2\u03cd\u03cf\t\2\2\2\u03ce\u03cd")
        buf.write("\3\2\2\2\u03cf\u03d2\3\2\2\2\u03d0\u03ce\3\2\2\2\u03d0")
        buf.write("\u03d1\3\2\2\2\u03d1\u03d3\3\2\2\2\u03d2\u03d0\3\2\2\2")
        buf.write("\u03d3\u03d4\7\t\2\2\u03d4+\3\2\2\2\u03d5\u03d9\7\25\2")
        buf.write("\2\u03d6\u03d8\t\2\2\2\u03d7\u03d6\3\2\2\2\u03d8\u03db")
        buf.write("\3\2\2\2\u03d9\u03d7\3\2\2\2\u03d9\u03da\3\2\2\2\u03da")
        buf.write("\u03dc\3\2\2\2\u03db\u03d9\3\2\2\2\u03dc\u03dd\7\65\2")
        buf.write("\2\u03dd-\3\2\2\2\u03de\u03e2\7\65\2\2\u03df\u03e1\t\2")
        buf.write("\2\2\u03e0\u03df\3\2\2\2\u03e1\u03e4\3\2\2\2\u03e2\u03e0")
        buf.write("\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e5\3\2\2\2\u03e4")
        buf.write("\u03e2\3\2\2\2\u03e5\u03e9\7\4\2\2\u03e6\u03e8\t\2\2\2")
        buf.write("\u03e7\u03e6\3\2\2\2\u03e8\u03eb\3\2\2\2\u03e9\u03e7\3")
        buf.write("\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u0406\3\2\2\2\u03eb\u03e9")
        buf.write("\3\2\2\2\u03ec\u03f0\5\34\17\2\u03ed\u03ef\t\2\2\2\u03ee")
        buf.write("\u03ed\3\2\2\2\u03ef\u03f2\3\2\2\2\u03f0\u03ee\3\2\2\2")
        buf.write("\u03f0\u03f1\3\2\2\2\u03f1\u0403\3\2\2\2\u03f2\u03f0\3")
        buf.write("\2\2\2\u03f3\u03f7\7\5\2\2\u03f4\u03f6\t\2\2\2\u03f5\u03f4")
        buf.write("\3\2\2\2\u03f6\u03f9\3\2\2\2\u03f7\u03f5\3\2\2\2\u03f7")
        buf.write("\u03f8\3\2\2\2\u03f8\u03fa\3\2\2\2\u03f9\u03f7\3\2\2\2")
        buf.write("\u03fa\u03fe\5\34\17\2\u03fb\u03fd\t\2\2\2\u03fc\u03fb")
        buf.write("\3\2\2\2\u03fd\u0400\3\2\2\2\u03fe\u03fc\3\2\2\2\u03fe")
        buf.write("\u03ff\3\2\2\2\u03ff\u0402\3\2\2\2\u0400\u03fe\3\2\2\2")
        buf.write("\u0401\u03f3\3\2\2\2\u0402\u0405\3\2\2\2\u0403\u0401\3")
        buf.write("\2\2\2\u0403\u0404\3\2\2\2\u0404\u0407\3\2\2\2\u0405\u0403")
        buf.write("\3\2\2\2\u0406\u03ec\3\2\2\2\u0406\u0407\3\2\2\2\u0407")
        buf.write("\u0408\3\2\2\2\u0408\u0409\7\6\2\2\u0409/\3\2\2\2\u040a")
        buf.write("\u040e\7\26\2\2\u040b\u040d\t\2\2\2\u040c\u040b\3\2\2")
        buf.write("\2\u040d\u0410\3\2\2\2\u040e\u040c\3\2\2\2\u040e\u040f")
        buf.write("\3\2\2\2\u040f\u0411\3\2\2\2\u0410\u040e\3\2\2\2\u0411")
        buf.write("\u0415\7\4\2\2\u0412\u0414\t\2\2\2\u0413\u0412\3\2\2\2")
        buf.write("\u0414\u0417\3\2\2\2\u0415\u0413\3\2\2\2\u0415\u0416\3")
        buf.write("\2\2\2\u0416\u0418\3\2\2\2\u0417\u0415\3\2\2\2\u0418\u041c")
        buf.write("\5\34\17\2\u0419\u041b\t\2\2\2\u041a\u0419\3\2\2\2\u041b")
        buf.write("\u041e\3\2\2\2\u041c\u041a\3\2\2\2\u041c\u041d\3\2\2\2")
        buf.write("\u041d\u041f\3\2\2\2\u041e\u041c\3\2\2\2\u041f\u0420\7")
        buf.write("\6\2\2\u0420\61\3\2\2\2\u0421\u0425\7%\2\2\u0422\u0424")
        buf.write("\t\2\2\2\u0423\u0422\3\2\2\2\u0424\u0427\3\2\2\2\u0425")
        buf.write("\u0423\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u0428\3\2\2\2")
        buf.write("\u0427\u0425\3\2\2\2\u0428\u042c\7\4\2\2\u0429\u042b\t")
        buf.write("\2\2\2\u042a\u0429\3\2\2\2\u042b\u042e\3\2\2\2\u042c\u042a")
        buf.write("\3\2\2\2\u042c\u042d\3\2\2\2\u042d\u042f\3\2\2\2\u042e")
        buf.write("\u042c\3\2\2\2\u042f\u0433\5\34\17\2\u0430\u0432\t\2\2")
        buf.write("\2\u0431\u0430\3\2\2\2\u0432\u0435\3\2\2\2\u0433\u0431")
        buf.write("\3\2\2\2\u0433\u0434\3\2\2\2\u0434\u0436\3\2\2\2\u0435")
        buf.write("\u0433\3\2\2\2\u0436\u0437\7\6\2\2\u0437\63\3\2\2\2\u0438")
        buf.write("\u043c\7$\2\2\u0439\u043b\t\2\2\2\u043a\u0439\3\2\2\2")
        buf.write("\u043b\u043e\3\2\2\2\u043c\u043a\3\2\2\2\u043c\u043d\3")
        buf.write("\2\2\2\u043d\u043f\3\2\2\2\u043e\u043c\3\2\2\2\u043f\u0443")
        buf.write("\7\4\2\2\u0440\u0442\t\2\2\2\u0441\u0440\3\2\2\2\u0442")
        buf.write("\u0445\3\2\2\2\u0443\u0441\3\2\2\2\u0443\u0444\3\2\2\2")
        buf.write("\u0444\u0446\3\2\2\2\u0445\u0443\3\2\2\2\u0446\u044a\5")
        buf.write("\34\17\2\u0447\u0449\t\2\2\2\u0448\u0447\3\2\2\2\u0449")
        buf.write("\u044c\3\2\2\2\u044a\u0448\3\2\2\2\u044a\u044b\3\2\2\2")
        buf.write("\u044b\u044d\3\2\2\2\u044c\u044a\3\2\2\2\u044d\u044e\7")
        buf.write("\6\2\2\u044e\65\3\2\2\2\u044f\u0453\7\27\2\2\u0450\u0452")
        buf.write("\t\2\2\2\u0451\u0450\3\2\2\2\u0452\u0455\3\2\2\2\u0453")
        buf.write("\u0451\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0456\3\2\2\2")
        buf.write("\u0455\u0453\3\2\2\2\u0456\u045a\7\4\2\2\u0457\u0459\t")
        buf.write("\2\2\2\u0458\u0457\3\2\2\2\u0459\u045c\3\2\2\2\u045a\u0458")
        buf.write("\3\2\2\2\u045a\u045b\3\2\2\2\u045b\u045d\3\2\2\2\u045c")
        buf.write("\u045a\3\2\2\2\u045d\u0461\5\34\17\2\u045e\u0460\t\2\2")
        buf.write("\2\u045f\u045e\3\2\2\2\u0460\u0463\3\2\2\2\u0461\u045f")
        buf.write("\3\2\2\2\u0461\u0462\3\2\2\2\u0462\u0464\3\2\2\2\u0463")
        buf.write("\u0461\3\2\2\2\u0464\u0465\7\6\2\2\u0465\67\3\2\2\2\u0466")
        buf.write("\u046a\7\30\2\2\u0467\u0469\t\2\2\2\u0468\u0467\3\2\2")
        buf.write("\2\u0469\u046c\3\2\2\2\u046a\u0468\3\2\2\2\u046a\u046b")
        buf.write("\3\2\2\2\u046b\u046d\3\2\2\2\u046c\u046a\3\2\2\2\u046d")
        buf.write("\u0471\7\4\2\2\u046e\u0470\t\2\2\2\u046f\u046e\3\2\2\2")
        buf.write("\u0470\u0473\3\2\2\2\u0471\u046f\3\2\2\2\u0471\u0472\3")
        buf.write("\2\2\2\u0472\u0474\3\2\2\2\u0473\u0471\3\2\2\2\u0474\u0478")
        buf.write("\5\34\17\2\u0475\u0477\t\2\2\2\u0476\u0475\3\2\2\2\u0477")
        buf.write("\u047a\3\2\2\2\u0478\u0476\3\2\2\2\u0478\u0479\3\2\2\2")
        buf.write("\u0479\u047b\3\2\2\2\u047a\u0478\3\2\2\2\u047b\u047f\7")
        buf.write("\5\2\2\u047c\u047e\t\2\2\2\u047d\u047c\3\2\2\2\u047e\u0481")
        buf.write("\3\2\2\2\u047f\u047d\3\2\2\2\u047f\u0480\3\2\2\2\u0480")
        buf.write("\u0482\3\2\2\2\u0481\u047f\3\2\2\2\u0482\u0486\5\34\17")
        buf.write("\2\u0483\u0485\t\2\2\2\u0484\u0483\3\2\2\2\u0485\u0488")
        buf.write("\3\2\2\2\u0486\u0484\3\2\2\2\u0486\u0487\3\2\2\2\u0487")
        buf.write("\u0489\3\2\2\2\u0488\u0486\3\2\2\2\u0489\u048a\7\6\2\2")
        buf.write("\u048a9\3\2\2\2\u048b\u048f\7\31\2\2\u048c\u048e\t\2\2")
        buf.write("\2\u048d\u048c\3\2\2\2\u048e\u0491\3\2\2\2\u048f\u048d")
        buf.write("\3\2\2\2\u048f\u0490\3\2\2\2\u0490\u0492\3\2\2\2\u0491")
        buf.write("\u048f\3\2\2\2\u0492\u0496\7\4\2\2\u0493\u0495\t\2\2\2")
        buf.write("\u0494\u0493\3\2\2\2\u0495\u0498\3\2\2\2\u0496\u0494\3")
        buf.write("\2\2\2\u0496\u0497\3\2\2\2\u0497\u0499\3\2\2\2\u0498\u0496")
        buf.write("\3\2\2\2\u0499\u049d\5\34\17\2\u049a\u049c\t\2\2\2\u049b")
        buf.write("\u049a\3\2\2\2\u049c\u049f\3\2\2\2\u049d\u049b\3\2\2\2")
        buf.write("\u049d\u049e\3\2\2\2\u049e\u04a0\3\2\2\2\u049f\u049d\3")
        buf.write("\2\2\2\u04a0\u04a1\7\6\2\2\u04a1;\3\2\2\2\u04a2\u04a6")
        buf.write("\7\32\2\2\u04a3\u04a5\t\2\2\2\u04a4\u04a3\3\2\2\2\u04a5")
        buf.write("\u04a8\3\2\2\2\u04a6\u04a4\3\2\2\2\u04a6\u04a7\3\2\2\2")
        buf.write("\u04a7\u04a9\3\2\2\2\u04a8\u04a6\3\2\2\2\u04a9\u04ad\7")
        buf.write("\4\2\2\u04aa\u04ac\t\2\2\2\u04ab\u04aa\3\2\2\2\u04ac\u04af")
        buf.write("\3\2\2\2\u04ad\u04ab\3\2\2\2\u04ad\u04ae\3\2\2\2\u04ae")
        buf.write("\u04b0\3\2\2\2\u04af\u04ad\3\2\2\2\u04b0\u04b4\5\34\17")
        buf.write("\2\u04b1\u04b3\t\2\2\2\u04b2\u04b1\3\2\2\2\u04b3\u04b6")
        buf.write("\3\2\2\2\u04b4\u04b2\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b5")
        buf.write("\u04b7\3\2\2\2\u04b6\u04b4\3\2\2\2\u04b7\u04bb\7\5\2\2")
        buf.write("\u04b8\u04ba\t\2\2\2\u04b9\u04b8\3\2\2\2\u04ba\u04bd\3")
        buf.write("\2\2\2\u04bb\u04b9\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04be")
        buf.write("\3\2\2\2\u04bd\u04bb\3\2\2\2\u04be\u04c2\5\34\17\2\u04bf")
        buf.write("\u04c1\t\2\2\2\u04c0\u04bf\3\2\2\2\u04c1\u04c4\3\2\2\2")
        buf.write("\u04c2\u04c0\3\2\2\2\u04c2\u04c3\3\2\2\2\u04c3\u04c5\3")
        buf.write("\2\2\2\u04c4\u04c2\3\2\2\2\u04c5\u04c6\7\6\2\2\u04c6=")
        buf.write("\3\2\2\2\u04c7\u04cb\7\33\2\2\u04c8\u04ca\t\2\2\2\u04c9")
        buf.write("\u04c8\3\2\2\2\u04ca\u04cd\3\2\2\2\u04cb\u04c9\3\2\2\2")
        buf.write("\u04cb\u04cc\3\2\2\2\u04cc\u04ce\3\2\2\2\u04cd\u04cb\3")
        buf.write("\2\2\2\u04ce\u04d2\7\4\2\2\u04cf\u04d1\t\2\2\2\u04d0\u04cf")
        buf.write("\3\2\2\2\u04d1\u04d4\3\2\2\2\u04d2\u04d0\3\2\2\2\u04d2")
        buf.write("\u04d3\3\2\2\2\u04d3\u04d5\3\2\2\2\u04d4\u04d2\3\2\2\2")
        buf.write("\u04d5\u04d9\5\34\17\2\u04d6\u04d8\t\2\2\2\u04d7\u04d6")
        buf.write("\3\2\2\2\u04d8\u04db\3\2\2\2\u04d9\u04d7\3\2\2\2\u04d9")
        buf.write("\u04da\3\2\2\2\u04da\u04dc\3\2\2\2\u04db\u04d9\3\2\2\2")
        buf.write("\u04dc\u04e0\7\5\2\2\u04dd\u04df\t\2\2\2\u04de\u04dd\3")
        buf.write("\2\2\2\u04df\u04e2\3\2\2\2\u04e0\u04de\3\2\2\2\u04e0\u04e1")
        buf.write("\3\2\2\2\u04e1\u04e3\3\2\2\2\u04e2\u04e0\3\2\2\2\u04e3")
        buf.write("\u04e7\5\34\17\2\u04e4\u04e6\t\2\2\2\u04e5\u04e4\3\2\2")
        buf.write("\2\u04e6\u04e9\3\2\2\2\u04e7\u04e5\3\2\2\2\u04e7\u04e8")
        buf.write("\3\2\2\2\u04e8\u04ea\3\2\2\2\u04e9\u04e7\3\2\2\2\u04ea")
        buf.write("\u04eb\7\6\2\2\u04eb?\3\2\2\2\u04ec\u04f0\7\34\2\2\u04ed")
        buf.write("\u04ef\t\2\2\2\u04ee\u04ed\3\2\2\2\u04ef\u04f2\3\2\2\2")
        buf.write("\u04f0\u04ee\3\2\2\2\u04f0\u04f1\3\2\2\2\u04f1\u04f3\3")
        buf.write("\2\2\2\u04f2\u04f0\3\2\2\2\u04f3\u04f7\7\4\2\2\u04f4\u04f6")
        buf.write("\t\2\2\2\u04f5\u04f4\3\2\2\2\u04f6\u04f9\3\2\2\2\u04f7")
        buf.write("\u04f5\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8\u04fa\3\2\2\2")
        buf.write("\u04f9\u04f7\3\2\2\2\u04fa\u04fe\5\34\17\2\u04fb\u04fd")
        buf.write("\t\2\2\2\u04fc\u04fb\3\2\2\2\u04fd\u0500\3\2\2\2\u04fe")
        buf.write("\u04fc\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ff\u0501\3\2\2\2")
        buf.write("\u0500\u04fe\3\2\2\2\u0501\u0505\7\5\2\2\u0502\u0504\t")
        buf.write("\2\2\2\u0503\u0502\3\2\2\2\u0504\u0507\3\2\2\2\u0505\u0503")
        buf.write("\3\2\2\2\u0505\u0506\3\2\2\2\u0506\u0508\3\2\2\2\u0507")
        buf.write("\u0505\3\2\2\2\u0508\u050c\5\34\17\2\u0509\u050b\t\2\2")
        buf.write("\2\u050a\u0509\3\2\2\2\u050b\u050e\3\2\2\2\u050c\u050a")
        buf.write("\3\2\2\2\u050c\u050d\3\2\2\2\u050d\u050f\3\2\2\2\u050e")
        buf.write("\u050c\3\2\2\2\u050f\u0510\7\6\2\2\u0510A\3\2\2\2\u0511")
        buf.write("\u0515\7\35\2\2\u0512\u0514\t\2\2\2\u0513\u0512\3\2\2")
        buf.write("\2\u0514\u0517\3\2\2\2\u0515\u0513\3\2\2\2\u0515\u0516")
        buf.write("\3\2\2\2\u0516\u0518\3\2\2\2\u0517\u0515\3\2\2\2\u0518")
        buf.write("\u051c\7\4\2\2\u0519\u051b\t\2\2\2\u051a\u0519\3\2\2\2")
        buf.write("\u051b\u051e\3\2\2\2\u051c\u051a\3\2\2\2\u051c\u051d\3")
        buf.write("\2\2\2\u051d\u051f\3\2\2\2\u051e\u051c\3\2\2\2\u051f\u0523")
        buf.write("\5\34\17\2\u0520\u0522\t\2\2\2\u0521\u0520\3\2\2\2\u0522")
        buf.write("\u0525\3\2\2\2\u0523\u0521\3\2\2\2\u0523\u0524\3\2\2\2")
        buf.write("\u0524\u0526\3\2\2\2\u0525\u0523\3\2\2\2\u0526\u052a\7")
        buf.write("\5\2\2\u0527\u0529\t\2\2\2\u0528\u0527\3\2\2\2\u0529\u052c")
        buf.write("\3\2\2\2\u052a\u0528\3\2\2\2\u052a\u052b\3\2\2\2\u052b")
        buf.write("\u052d\3\2\2\2\u052c\u052a\3\2\2\2\u052d\u0531\5\34\17")
        buf.write("\2\u052e\u0530\t\2\2\2\u052f\u052e\3\2\2\2\u0530\u0533")
        buf.write("\3\2\2\2\u0531\u052f\3\2\2\2\u0531\u0532\3\2\2\2\u0532")
        buf.write("\u0534\3\2\2\2\u0533\u0531\3\2\2\2\u0534\u0535\7\6\2\2")
        buf.write("\u0535C\3\2\2\2\u0536\u053a\7*\2\2\u0537\u0539\t\2\2\2")
        buf.write("\u0538\u0537\3\2\2\2\u0539\u053c\3\2\2\2\u053a\u0538\3")
        buf.write("\2\2\2\u053a\u053b\3\2\2\2\u053b\u053d\3\2\2\2\u053c\u053a")
        buf.write("\3\2\2\2\u053d\u0541\7\4\2\2\u053e\u0540\t\2\2\2\u053f")
        buf.write("\u053e\3\2\2\2\u0540\u0543\3\2\2\2\u0541\u053f\3\2\2\2")
        buf.write("\u0541\u0542\3\2\2\2\u0542\u0544\3\2\2\2\u0543\u0541\3")
        buf.write("\2\2\2\u0544\u0548\5\34\17\2\u0545\u0547\t\2\2\2\u0546")
        buf.write("\u0545\3\2\2\2\u0547\u054a\3\2\2\2\u0548\u0546\3\2\2\2")
        buf.write("\u0548\u0549\3\2\2\2\u0549\u054b\3\2\2\2\u054a\u0548\3")
        buf.write("\2\2\2\u054b\u054c\7\6\2\2\u054cE\3\2\2\2\u054d\u0551")
        buf.write("\7\36\2\2\u054e\u0550\t\2\2\2\u054f\u054e\3\2\2\2\u0550")
        buf.write("\u0553\3\2\2\2\u0551\u054f\3\2\2\2\u0551\u0552\3\2\2\2")
        buf.write("\u0552\u0554\3\2\2\2\u0553\u0551\3\2\2\2\u0554\u0558\7")
        buf.write("\4\2\2\u0555\u0557\t\2\2\2\u0556\u0555\3\2\2\2\u0557\u055a")
        buf.write("\3\2\2\2\u0558\u0556\3\2\2\2\u0558\u0559\3\2\2\2\u0559")
        buf.write("\u055b\3\2\2\2\u055a\u0558\3\2\2\2\u055b\u055f\5\34\17")
        buf.write("\2\u055c\u055e\t\2\2\2\u055d\u055c\3\2\2\2\u055e\u0561")
        buf.write("\3\2\2\2\u055f\u055d\3\2\2\2\u055f\u0560\3\2\2\2\u0560")
        buf.write("\u0562\3\2\2\2\u0561\u055f\3\2\2\2\u0562\u0563\7\6\2\2")
        buf.write("\u0563G\3\2\2\2\u0564\u0568\7\37\2\2\u0565\u0567\t\2\2")
        buf.write("\2\u0566\u0565\3\2\2\2\u0567\u056a\3\2\2\2\u0568\u0566")
        buf.write("\3\2\2\2\u0568\u0569\3\2\2\2\u0569\u056b\3\2\2\2\u056a")
        buf.write("\u0568\3\2\2\2\u056b\u056f\7\4\2\2\u056c\u056e\t\2\2\2")
        buf.write("\u056d\u056c\3\2\2\2\u056e\u0571\3\2\2\2\u056f\u056d\3")
        buf.write("\2\2\2\u056f\u0570\3\2\2\2\u0570\u0582\3\2\2\2\u0571\u056f")
        buf.write("\3\2\2\2\u0572\u0576\5\34\17\2\u0573\u0575\t\2\2\2\u0574")
        buf.write("\u0573\3\2\2\2\u0575\u0578\3\2\2\2\u0576\u0574\3\2\2\2")
        buf.write("\u0576\u0577\3\2\2\2\u0577\u0579\3\2\2\2\u0578\u0576\3")
        buf.write("\2\2\2\u0579\u057d\7\5\2\2\u057a\u057c\t\2\2\2\u057b\u057a")
        buf.write("\3\2\2\2\u057c\u057f\3\2\2\2\u057d\u057b\3\2\2\2\u057d")
        buf.write("\u057e\3\2\2\2\u057e\u0581\3\2\2\2\u057f\u057d\3\2\2\2")
        buf.write("\u0580\u0572\3\2\2\2\u0581\u0584\3\2\2\2\u0582\u0580\3")
        buf.write("\2\2\2\u0582\u0583\3\2\2\2\u0583\u0585\3\2\2\2\u0584\u0582")
        buf.write("\3\2\2\2\u0585\u0589\5\34\17\2\u0586\u0588\t\2\2\2\u0587")
        buf.write("\u0586\3\2\2\2\u0588\u058b\3\2\2\2\u0589\u0587\3\2\2\2")
        buf.write("\u0589\u058a\3\2\2\2\u058a\u058c\3\2\2\2\u058b\u0589\3")
        buf.write("\2\2\2\u058c\u058d\7\6\2\2\u058dI\3\2\2\2\u058e\u0592")
        buf.write("\7\"\2\2\u058f\u0591\t\2\2\2\u0590\u058f\3\2\2\2\u0591")
        buf.write("\u0594\3\2\2\2\u0592\u0590\3\2\2\2\u0592\u0593\3\2\2\2")
        buf.write("\u0593\u0595\3\2\2\2\u0594\u0592\3\2\2\2\u0595\u0599\7")
        buf.write("\4\2\2\u0596\u0598\t\2\2\2\u0597\u0596\3\2\2\2\u0598\u059b")
        buf.write("\3\2\2\2\u0599\u0597\3\2\2\2\u0599\u059a\3\2\2\2\u059a")
        buf.write("\u059c\3\2\2\2\u059b\u0599\3\2\2\2\u059c\u05a0\5\34\17")
        buf.write("\2\u059d\u059f\t\2\2\2\u059e\u059d\3\2\2\2\u059f\u05a2")
        buf.write("\3\2\2\2\u05a0\u059e\3\2\2\2\u05a0\u05a1\3\2\2\2\u05a1")
        buf.write("\u05a3\3\2\2\2\u05a2\u05a0\3\2\2\2\u05a3\u05a4\7\6\2\2")
        buf.write("\u05a4K\3\2\2\2\u05a5\u05a9\7#\2\2\u05a6\u05a8\t\2\2\2")
        buf.write("\u05a7\u05a6\3\2\2\2\u05a8\u05ab\3\2\2\2\u05a9\u05a7\3")
        buf.write("\2\2\2\u05a9\u05aa\3\2\2\2\u05aa\u05ac\3\2\2\2\u05ab\u05a9")
        buf.write("\3\2\2\2\u05ac\u05b0\7\4\2\2\u05ad\u05af\t\2\2\2\u05ae")
        buf.write("\u05ad\3\2\2\2\u05af\u05b2\3\2\2\2\u05b0\u05ae\3\2\2\2")
        buf.write("\u05b0\u05b1\3\2\2\2\u05b1\u05b3\3\2\2\2\u05b2\u05b0\3")
        buf.write("\2\2\2\u05b3\u05b7\5\34\17\2\u05b4\u05b6\t\2\2\2\u05b5")
        buf.write("\u05b4\3\2\2\2\u05b6\u05b9\3\2\2\2\u05b7\u05b5\3\2\2\2")
        buf.write("\u05b7\u05b8\3\2\2\2\u05b8\u05ba\3\2\2\2\u05b9\u05b7\3")
        buf.write("\2\2\2\u05ba\u05bb\7\6\2\2\u05bbM\3\2\2\2\u05bc\u05c0")
        buf.write("\7)\2\2\u05bd\u05bf\t\2\2\2\u05be\u05bd\3\2\2\2\u05bf")
        buf.write("\u05c2\3\2\2\2\u05c0\u05be\3\2\2\2\u05c0\u05c1\3\2\2\2")
        buf.write("\u05c1\u05c3\3\2\2\2\u05c2\u05c0\3\2\2\2\u05c3\u05c7\7")
        buf.write("\4\2\2\u05c4\u05c6\t\2\2\2\u05c5\u05c4\3\2\2\2\u05c6\u05c9")
        buf.write("\3\2\2\2\u05c7\u05c5\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8")
        buf.write("\u05ca\3\2\2\2\u05c9\u05c7\3\2\2\2\u05ca\u05ce\5\34\17")
        buf.write("\2\u05cb\u05cd\t\2\2\2\u05cc\u05cb\3\2\2\2\u05cd\u05d0")
        buf.write("\3\2\2\2\u05ce\u05cc\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf")
        buf.write("\u05d1\3\2\2\2\u05d0\u05ce\3\2\2\2\u05d1\u05d2\7\6\2\2")
        buf.write("\u05d2O\3\2\2\2\u05d3\u05d7\7 \2\2\u05d4\u05d6\t\2\2\2")
        buf.write("\u05d5\u05d4\3\2\2\2\u05d6\u05d9\3\2\2\2\u05d7\u05d5\3")
        buf.write("\2\2\2\u05d7\u05d8\3\2\2\2\u05d8\u05da\3\2\2\2\u05d9\u05d7")
        buf.write("\3\2\2\2\u05da\u05de\7\4\2\2\u05db\u05dd\t\2\2\2\u05dc")
        buf.write("\u05db\3\2\2\2\u05dd\u05e0\3\2\2\2\u05de\u05dc\3\2\2\2")
        buf.write("\u05de\u05df\3\2\2\2\u05df\u05e1\3\2\2\2\u05e0\u05de\3")
        buf.write("\2\2\2\u05e1\u05e5\5\34\17\2\u05e2\u05e4\t\2\2\2\u05e3")
        buf.write("\u05e2\3\2\2\2\u05e4\u05e7\3\2\2\2\u05e5\u05e3\3\2\2\2")
        buf.write("\u05e5\u05e6\3\2\2\2\u05e6\u05e8\3\2\2\2\u05e7\u05e5\3")
        buf.write("\2\2\2\u05e8\u05e9\7\6\2\2\u05e9Q\3\2\2\2\u05ea\u05ee")
        buf.write("\7+\2\2\u05eb\u05ed\t\2\2\2\u05ec\u05eb\3\2\2\2\u05ed")
        buf.write("\u05f0\3\2\2\2\u05ee\u05ec\3\2\2\2\u05ee\u05ef\3\2\2\2")
        buf.write("\u05ef\u05f1\3\2\2\2\u05f0\u05ee\3\2\2\2\u05f1\u05f5\7")
        buf.write("\4\2\2\u05f2\u05f4\t\2\2\2\u05f3\u05f2\3\2\2\2\u05f4\u05f7")
        buf.write("\3\2\2\2\u05f5\u05f3\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6")
        buf.write("\u05f8\3\2\2\2\u05f7\u05f5\3\2\2\2\u05f8\u05fc\5\34\17")
        buf.write("\2\u05f9\u05fb\t\2\2\2\u05fa\u05f9\3\2\2\2\u05fb\u05fe")
        buf.write("\3\2\2\2\u05fc\u05fa\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd")
        buf.write("\u05ff\3\2\2\2\u05fe\u05fc\3\2\2\2\u05ff\u0600\7\6\2\2")
        buf.write("\u0600S\3\2\2\2\u0601\u0605\7,\2\2\u0602\u0604\t\2\2\2")
        buf.write("\u0603\u0602\3\2\2\2\u0604\u0607\3\2\2\2\u0605\u0603\3")
        buf.write("\2\2\2\u0605\u0606\3\2\2\2\u0606\u0608\3\2\2\2\u0607\u0605")
        buf.write("\3\2\2\2\u0608\u060c\7\4\2\2\u0609\u060b\t\2\2\2\u060a")
        buf.write("\u0609\3\2\2\2\u060b\u060e\3\2\2\2\u060c\u060a\3\2\2\2")
        buf.write("\u060c\u060d\3\2\2\2\u060d\u0612\3\2\2\2\u060e\u060c\3")
        buf.write("\2\2\2\u060f\u0613\7\65\2\2\u0610\u0613\5Z.\2\u0611\u0613")
        buf.write("\5X-\2\u0612\u060f\3\2\2\2\u0612\u0610\3\2\2\2\u0612\u0611")
        buf.write("\3\2\2\2\u0613\u0617\3\2\2\2\u0614\u0616\t\2\2\2\u0615")
        buf.write("\u0614\3\2\2\2\u0616\u0619\3\2\2\2\u0617\u0615\3\2\2\2")
        buf.write("\u0617\u0618\3\2\2\2\u0618\u061a\3\2\2\2\u0619\u0617\3")
        buf.write("\2\2\2\u061a\u061b\7\6\2\2\u061bU\3\2\2\2\u061c\u0620")
        buf.write("\7\24\2\2\u061d\u061f\t\2\2\2\u061e\u061d\3\2\2\2\u061f")
        buf.write("\u0622\3\2\2\2\u0620\u061e\3\2\2\2\u0620\u0621\3\2\2\2")
        buf.write("\u0621\u0623\3\2\2\2\u0622\u0620\3\2\2\2\u0623\u0627\7")
        buf.write("\4\2\2\u0624\u0626\t\2\2\2\u0625\u0624\3\2\2\2\u0626\u0629")
        buf.write("\3\2\2\2\u0627\u0625\3\2\2\2\u0627\u0628\3\2\2\2\u0628")
        buf.write("\u062a\3\2\2\2\u0629\u0627\3\2\2\2\u062a\u062e\5\34\17")
        buf.write("\2\u062b\u062d\t\2\2\2\u062c\u062b\3\2\2\2\u062d\u0630")
        buf.write("\3\2\2\2\u062e\u062c\3\2\2\2\u062e\u062f\3\2\2\2\u062f")
        buf.write("\u0631\3\2\2\2\u0630\u062e\3\2\2\2\u0631\u0632\7\6\2\2")
        buf.write("\u0632W\3\2\2\2\u0633\u0634\7(\2\2\u0634Y\3\2\2\2\u0635")
        buf.write("\u0639\7\b\2\2\u0636\u0638\t\2\2\2\u0637\u0636\3\2\2\2")
        buf.write("\u0638\u063b\3\2\2\2\u0639\u0637\3\2\2\2\u0639\u063a\3")
        buf.write("\2\2\2\u063a\u0656\3\2\2\2\u063b\u0639\3\2\2\2\u063c\u064d")
        buf.write("\5\\/\2\u063d\u063f\t\2\2\2\u063e\u063d\3\2\2\2\u063f")
        buf.write("\u0642\3\2\2\2\u0640\u063e\3\2\2\2\u0640\u0641\3\2\2\2")
        buf.write("\u0641\u0643\3\2\2\2\u0642\u0640\3\2\2\2\u0643\u0647\7")
        buf.write("\5\2\2\u0644\u0646\t\2\2\2\u0645\u0644\3\2\2\2\u0646\u0649")
        buf.write("\3\2\2\2\u0647\u0645\3\2\2\2\u0647\u0648\3\2\2\2\u0648")
        buf.write("\u064a\3\2\2\2\u0649\u0647\3\2\2\2\u064a\u064c\5\\/\2")
        buf.write("\u064b\u0640\3\2\2\2\u064c\u064f\3\2\2\2\u064d\u064b\3")
        buf.write("\2\2\2\u064d\u064e\3\2\2\2\u064e\u0653\3\2\2\2\u064f\u064d")
        buf.write("\3\2\2\2\u0650\u0652\t\2\2\2\u0651\u0650\3\2\2\2\u0652")
        buf.write("\u0655\3\2\2\2\u0653\u0651\3\2\2\2\u0653\u0654\3\2\2\2")
        buf.write("\u0654\u0657\3\2\2\2\u0655\u0653\3\2\2\2\u0656\u063c\3")
        buf.write("\2\2\2\u0656\u0657\3\2\2\2\u0657\u0658\3\2\2\2\u0658\u0659")
        buf.write("\7\t\2\2\u0659[\3\2\2\2\u065a\u065b\t\3\2\2\u065b]\3\2")
        buf.write("\2\2\u00f7ahov}\u0082\u0087\u008c\u008e\u0090\u0097\u009b")
        buf.write("\u00a0\u00a2\u00a4\u00a9\u00ad\u00b5\u00bb\u00c2\u00c9")
        buf.write("\u00d0\u00d7\u00dc\u00df\u00e5\u00ec\u00f2\u00f9\u0100")
        buf.write("\u0107\u010c\u0112\u0114\u0116\u011d\u0121\u0124\u0129")
        buf.write("\u012b\u0132\u0138\u013e\u0144\u014a\u0150\u0156\u015d")
        buf.write("\u0164\u016b\u0170\u0176\u0178\u017a\u0181\u0188\u018a")
        buf.write("\u0190\u0192\u0194\u019c\u01a2\u01a8\u01ae\u01b5\u01bc")
        buf.write("\u01c3\u01c8\u01ce\u01d0\u01d2\u01d9\u01e0\u01e2\u01e8")
        buf.write("\u01ea\u01ec\u01f5\u01f9\u0202\u0206\u020a\u0210\u0216")
        buf.write("\u021c\u0222\u0229\u0230\u0237\u023c\u0242\u0244\u0246")
        buf.write("\u024d\u0254\u0256\u025c\u025e\u0260\u0267\u026d\u0274")
        buf.write("\u027b\u0282\u0287\u028d\u028f\u0291\u0298\u029f\u02a1")
        buf.write("\u02a7\u02a9\u02ab\u02ad\u02b3\u02bc\u02c2\u02c9\u02d0")
        buf.write("\u02d7\u02dc\u02e2\u02e4\u02e6\u02ed\u02f4\u02f6\u02fc")
        buf.write("\u02fe\u0300\u0306\u030c\u0311\u0318\u031a\u031f\u0325")
        buf.write("\u032c\u033a\u0340\u0347\u034d\u0353\u035a\u0360\u037b")
        buf.write("\u0397\u039b\u03a0\u03a7\u03b0\u03b7\u03be\u03c3\u03c9")
        buf.write("\u03d0\u03d9\u03e2\u03e9\u03f0\u03f7\u03fe\u0403\u0406")
        buf.write("\u040e\u0415\u041c\u0425\u042c\u0433\u043c\u0443\u044a")
        buf.write("\u0453\u045a\u0461\u046a\u0471\u0478\u047f\u0486\u048f")
        buf.write("\u0496\u049d\u04a6\u04ad\u04b4\u04bb\u04c2\u04cb\u04d2")
        buf.write("\u04d9\u04e0\u04e7\u04f0\u04f7\u04fe\u0505\u050c\u0515")
        buf.write("\u051c\u0523\u052a\u0531\u053a\u0541\u0548\u0551\u0558")
        buf.write("\u055f\u0568\u056f\u0576\u057d\u0582\u0589\u0592\u0599")
        buf.write("\u05a0\u05a9\u05b0\u05b7\u05c0\u05c7\u05ce\u05d7\u05de")
        buf.write("\u05e5\u05ee\u05f5\u05fc\u0605\u060c\u0612\u0617\u0620")
        buf.write("\u0627\u062e\u0639\u0640\u0647\u064d\u0653\u0656")
        return buf.getvalue()


class WordlifyParser ( Parser ):

    grammarFileName = "Wordlify.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'('", "','", "')'", "'='", "'['", 
                     "']'", "'fn'", "'while'", "'foreach'", "'in'", "'do'", 
                     "'if'", "'then'", "'else'", "'begin'", "'end'", "'baseName'", 
                     "'use'", "'exist'", "'print'", "'rename'", "'remove'", 
                     "'move'", "'copy'", "'download'", "'write'", "'wait'", 
                     "'execute'", "'exit'", "'time'", "'getFiles'", "'dateModified'", 
                     "'isDir'", "'isFile'", "'file'", "'folder'", "'args'", 
                     "'size'", "'read'", "'create'", "'length'", "'<-'", 
                     "<INVALID>", "<INVALID>", "'.'", "<INVALID>", "'not'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "FN", "WHILE", "FOREACH", "IN", "DO", "IF", "THEN", 
                      "ELSE", "BEGIN", "END", "BASENAME", "IMPORT", "EXIST", 
                      "PRINT", "RENAME", "REMOVE", "MOVE", "COPY", "DOWNLOAD", 
                      "WRITE", "WAIT", "EXECUTE", "EXIT", "TIME", "GET_FILES", 
                      "DATE_MODIFIED", "IS_DIR", "IS_FILE", "FILE", "FOLDER", 
                      "ARGS", "SIZE", "READ", "CREATE", "LENGTH", "APPEND", 
                      "CMP_OP", "ARITH_OP", "CONCAT_OP", "BIN_LOG_OP", "NOT", 
                      "BOOL", "STR", "ID", "NUM", "WS", "NL", "END_COMMENT", 
                      "ERROR_CHAR" ]

    RULE_program = 0
    RULE_fn_def = 1
    RULE_block_instr = 2
    RULE_foreach = 3
    RULE_while_instr = 4
    RULE_if_instr = 5
    RULE_if_cond = 6
    RULE_then = 7
    RULE_else_if = 8
    RULE_else_block = 9
    RULE_cond = 10
    RULE_single_cond = 11
    RULE_comparison = 12
    RULE_expr = 13
    RULE_arith_expr = 14
    RULE_concat = 15
    RULE_fn_call = 16
    RULE_atom_instr = 17
    RULE_assign = 18
    RULE_array_append = 19
    RULE_array_elem = 20
    RULE_import_call = 21
    RULE_own_fn_call = 22
    RULE_exist = 23
    RULE_is_file = 24
    RULE_is_dir = 25
    RULE_print_instr = 26
    RULE_rename = 27
    RULE_remove = 28
    RULE_move = 29
    RULE_copy = 30
    RULE_download = 31
    RULE_write = 32
    RULE_read = 33
    RULE_wait_instr = 34
    RULE_execute = 35
    RULE_get_files = 36
    RULE_date_modified = 37
    RULE_size = 38
    RULE_exit = 39
    RULE_create = 40
    RULE_length = 41
    RULE_basename = 42
    RULE_args = 43
    RULE_array = 44
    RULE_value_or_id = 45

    ruleNames =  [ "program", "fn_def", "block_instr", "foreach", "while_instr", 
                   "if_instr", "if_cond", "then", "else_if", "else_block", 
                   "cond", "single_cond", "comparison", "expr", "arith_expr", 
                   "concat", "fn_call", "atom_instr", "assign", "array_append", 
                   "array_elem", "import_call", "own_fn_call", "exist", 
                   "is_file", "is_dir", "print_instr", "rename", "remove", 
                   "move", "copy", "download", "write", "read", "wait_instr", 
                   "execute", "get_files", "date_modified", "size", "exit", 
                   "create", "length", "basename", "args", "array", "value_or_id" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    FN=8
    WHILE=9
    FOREACH=10
    IN=11
    DO=12
    IF=13
    THEN=14
    ELSE=15
    BEGIN=16
    END=17
    BASENAME=18
    IMPORT=19
    EXIST=20
    PRINT=21
    RENAME=22
    REMOVE=23
    MOVE=24
    COPY=25
    DOWNLOAD=26
    WRITE=27
    WAIT=28
    EXECUTE=29
    EXIT=30
    TIME=31
    GET_FILES=32
    DATE_MODIFIED=33
    IS_DIR=34
    IS_FILE=35
    FILE=36
    FOLDER=37
    ARGS=38
    SIZE=39
    READ=40
    CREATE=41
    LENGTH=42
    APPEND=43
    CMP_OP=44
    ARITH_OP=45
    CONCAT_OP=46
    BIN_LOG_OP=47
    NOT=48
    BOOL=49
    STR=50
    ID=51
    NUM=52
    WS=53
    NL=54
    END_COMMENT=55
    ERROR_CHAR=56

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(WordlifyParser.EOF, 0)

        def END_COMMENT(self):
            return self.getToken(WordlifyParser.END_COMMENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def fn_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Fn_defContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Fn_defContext,i)


        def import_call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Import_callContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Import_callContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = WordlifyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 95
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 92
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 97
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.FN) | (1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.IMPORT) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 142
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 140
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                        if la_ == 1:
                            self.state = 98
                            self.atom_instr()
                            self.state = 102
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 99
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 104
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 105
                            self.match(WordlifyParser.T__0)
                            self.state = 109
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 106
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 111
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 112
                            self.atom_instr()
                            self.state = 126 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 116
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 113
                                    self.match(WordlifyParser.WS)
                                    self.state = 118
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 119
                                self.match(WordlifyParser.NL)
                                self.state = 123
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 120
                                        self.match(WordlifyParser.WS) 
                                    self.state = 125
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                                self.state = 128 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 133
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                                self.state = 130
                                self.block_instr()
                                pass
                            elif token in [WordlifyParser.FN]:
                                self.state = 131
                                self.fn_def()
                                pass
                            elif token in [WordlifyParser.IMPORT]:
                                self.state = 132
                                self.import_call()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 136 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 135
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 138 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 144
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                self.state = 160
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 145
                    self.atom_instr()
                    self.state = 149
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 146
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 151
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                    self.state = 153
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==WordlifyParser.T__0:
                        self.state = 152
                        self.match(WordlifyParser.T__0)


                    pass
                elif token in [WordlifyParser.FN, WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF, WordlifyParser.IMPORT]:
                    self.state = 158
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 155
                        self.block_instr()
                        pass
                    elif token in [WordlifyParser.FN]:
                        self.state = 156
                        self.fn_def()
                        pass
                    elif token in [WordlifyParser.IMPORT]:
                        self.state = 157
                        self.import_call()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 164
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 169
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.END_COMMENT:
                self.state = 170
                self.match(WordlifyParser.END_COMMENT)


            self.state = 173
            self.match(WordlifyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FN(self):
            return self.getToken(WordlifyParser.FN, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def BEGIN(self):
            return self.getToken(WordlifyParser.BEGIN, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_def" ):
                listener.enterFn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_def" ):
                listener.exitFn_def(self)




    def fn_def(self):

        localctx = WordlifyParser.Fn_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fn_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 175
            self.match(WordlifyParser.FN)
            self.state = 177 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 176
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 179 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 181
            self.match(WordlifyParser.ID)
            self.state = 185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 182
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 188
            self.match(WordlifyParser.T__1)
            self.state = 192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 189
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.ID:
                self.state = 195
                self.match(WordlifyParser.ID)
                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 196
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 201
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.T__2:
                    self.state = 202
                    self.match(WordlifyParser.T__2)
                    self.state = 206
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 203
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 208
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 209
                    self.match(WordlifyParser.ID)
                    self.state = 213
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 210
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 215
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 220
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 223
            self.match(WordlifyParser.T__3)
            self.state = 227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 224
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 230
            self.match(WordlifyParser.BEGIN)
            self.state = 232 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 231
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 234 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 276
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 274
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                        if la_ == 1:
                            self.state = 236
                            self.atom_instr()
                            self.state = 240
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 237
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 242
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 243
                            self.match(WordlifyParser.T__0)
                            self.state = 247
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 244
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 249
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 250
                            self.atom_instr()
                            self.state = 264 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 254
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 251
                                    self.match(WordlifyParser.WS)
                                    self.state = 256
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 257
                                self.match(WordlifyParser.NL)
                                self.state = 261
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 258
                                        self.match(WordlifyParser.WS) 
                                    self.state = 263
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                                self.state = 266 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 268
                            self.block_instr()
                            self.state = 270 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 269
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 272 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 278
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                self.state = 290
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 279
                    self.atom_instr()
                    self.state = 283
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 280
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 285
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                    self.state = 287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==WordlifyParser.T__0:
                        self.state = 286
                        self.match(WordlifyParser.T__0)


                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 289
                    self.block_instr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 293 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 292
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 295 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break



            self.state = 299
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_instr(self):
            return self.getTypedRuleContext(WordlifyParser.If_instrContext,0)


        def while_instr(self):
            return self.getTypedRuleContext(WordlifyParser.While_instrContext,0)


        def foreach(self):
            return self.getTypedRuleContext(WordlifyParser.ForeachContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_block_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_instr" ):
                listener.enterBlock_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_instr" ):
                listener.exitBlock_instr(self)




    def block_instr(self):

        localctx = WordlifyParser.Block_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block_instr)
        try:
            self.state = 304
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 301
                self.if_instr()
                pass
            elif token in [WordlifyParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 302
                self.while_instr()
                pass
            elif token in [WordlifyParser.FOREACH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 303
                self.foreach()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeachContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(WordlifyParser.FOREACH, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def IN(self):
            return self.getToken(WordlifyParser.IN, 0)

        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_foreach

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeach" ):
                listener.enterForeach(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeach" ):
                listener.exitForeach(self)




    def foreach(self):

        localctx = WordlifyParser.ForeachContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_foreach)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self.match(WordlifyParser.FOREACH)
            self.state = 308 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 307
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 310 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 312
            self.match(WordlifyParser.ID)
            self.state = 314 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 313
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 316 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 318
            self.match(WordlifyParser.IN)
            self.state = 320 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 319
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 322 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 324
            self.match(WordlifyParser.ID)
            self.state = 326 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 325
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 328 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 330
            self.match(WordlifyParser.DO)
            self.state = 332 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 331
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 334 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 376
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 374
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                        if la_ == 1:
                            self.state = 336
                            self.atom_instr()
                            self.state = 340
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 337
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 342
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 343
                            self.match(WordlifyParser.T__0)
                            self.state = 347
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 344
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 349
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 350
                            self.atom_instr()
                            self.state = 364 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 354
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 351
                                    self.match(WordlifyParser.WS)
                                    self.state = 356
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 357
                                self.match(WordlifyParser.NL)
                                self.state = 361
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 358
                                        self.match(WordlifyParser.WS) 
                                    self.state = 363
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                                self.state = 366 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 368
                            self.block_instr()
                            self.state = 370 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 369
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 372 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 378
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

                self.state = 400
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 379
                    self.atom_instr()
                    self.state = 383
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 380
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 385
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

                    self.state = 392
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 386
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 388 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 387
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 390 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 394
                    self.block_instr()
                    self.state = 396 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 395
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 398 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 404
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(WordlifyParser.WHILE, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_while_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_instr" ):
                listener.enterWhile_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_instr" ):
                listener.exitWhile_instr(self)




    def while_instr(self):

        localctx = WordlifyParser.While_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_while_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.match(WordlifyParser.WHILE)
            self.state = 408 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 407
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 410 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 412
            self.cond()
            self.state = 414 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 413
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 416 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 418
            self.match(WordlifyParser.DO)
            self.state = 420 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 419
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 422 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 464
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 462
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                        if la_ == 1:
                            self.state = 424
                            self.atom_instr()
                            self.state = 428
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 425
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 430
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 431
                            self.match(WordlifyParser.T__0)
                            self.state = 435
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 432
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 437
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 438
                            self.atom_instr()
                            self.state = 452 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 442
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 439
                                    self.match(WordlifyParser.WS)
                                    self.state = 444
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 445
                                self.match(WordlifyParser.NL)
                                self.state = 449
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 446
                                        self.match(WordlifyParser.WS) 
                                    self.state = 451
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

                                self.state = 454 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 456
                            self.block_instr()
                            self.state = 458 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 457
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 460 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 466
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

                self.state = 488
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 467
                    self.atom_instr()
                    self.state = 471
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 468
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 473
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                    self.state = 480
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 474
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 476 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 475
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 478 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 482
                    self.block_instr()
                    self.state = 484 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 483
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 486 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 492
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def else_if(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Else_ifContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Else_ifContext,i)


        def else_block(self):
            return self.getTypedRuleContext(WordlifyParser.Else_blockContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_if_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_instr" ):
                listener.enterIf_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_instr" ):
                listener.exitIf_instr(self)




    def if_instr(self):

        localctx = WordlifyParser.If_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_if_instr)
        self._la = 0 # Token type
        try:
            self.state = 520
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 494
                self.if_cond()
                self.state = 495
                self.then()
                self.state = 499
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 496
                        self.else_if() 
                    self.state = 501
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ELSE:
                    self.state = 502
                    self.else_block()


                self.state = 505
                self.match(WordlifyParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 507
                self.if_cond()
                self.state = 508
                self.then()
                self.state = 512
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 509
                        self.else_if() 
                    self.state = 514
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ELSE:
                    self.state = 515
                    self.else_block()


                self.notifyErrorListeners("Missing 'end' at end of 'if' instruction")
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(WordlifyParser.IF, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_if_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_cond" ):
                listener.enterIf_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_cond" ):
                listener.exitIf_cond(self)




    def if_cond(self):

        localctx = WordlifyParser.If_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_if_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.match(WordlifyParser.IF)
            self.state = 524 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 523
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 526 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 528
            self.cond()
            self.state = 530 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 529
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 532 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEN(self):
            return self.getToken(WordlifyParser.THEN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_then

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThen" ):
                listener.enterThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThen" ):
                listener.exitThen(self)




    def then(self):

        localctx = WordlifyParser.ThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_then)
        self._la = 0 # Token type
        try:
            self.state = 683
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.THEN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 534
                self.match(WordlifyParser.THEN)
                self.state = 536 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 535
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 538 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

                self.state = 606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 580
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 578
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                            if la_ == 1:
                                self.state = 540
                                self.atom_instr()
                                self.state = 544
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 541
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 546
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 547
                                self.match(WordlifyParser.T__0)
                                self.state = 551
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 548
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 553
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 554
                                self.atom_instr()
                                self.state = 568 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 558
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 555
                                        self.match(WordlifyParser.WS)
                                        self.state = 560
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 561
                                    self.match(WordlifyParser.NL)
                                    self.state = 565
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 562
                                            self.match(WordlifyParser.WS) 
                                        self.state = 567
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

                                    self.state = 570 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 572
                                self.block_instr()
                                self.state = 574 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 573
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 576 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 582
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

                    self.state = 604
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 583
                        self.atom_instr()
                        self.state = 587
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 584
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 589
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

                        self.state = 596
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 590
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 592 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 591
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()

                                else:
                                    raise NoViableAltException(self)
                                self.state = 594 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 598
                        self.block_instr()
                        self.state = 600 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 599
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()

                            else:
                                raise NoViableAltException(self)
                            self.state = 602 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [WordlifyParser.DO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 608
                self.match(WordlifyParser.DO)
                self.notifyErrorListeners("Should be 'then' instead of 'do'")
                self.state = 611 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 610
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 613 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 655
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 653
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                            if la_ == 1:
                                self.state = 615
                                self.atom_instr()
                                self.state = 619
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 616
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 621
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 622
                                self.match(WordlifyParser.T__0)
                                self.state = 626
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 623
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 628
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 629
                                self.atom_instr()
                                self.state = 643 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 633
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 630
                                        self.match(WordlifyParser.WS)
                                        self.state = 635
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 636
                                    self.match(WordlifyParser.NL)
                                    self.state = 640
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 637
                                            self.match(WordlifyParser.WS) 
                                        self.state = 642
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

                                    self.state = 645 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 647
                                self.block_instr()
                                self.state = 649 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 648
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 651 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 657
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

                    self.state = 679
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 658
                        self.atom_instr()
                        self.state = 662
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 659
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 664
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

                        self.state = 671
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 665
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 667 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 666
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()

                                else:
                                    raise NoViableAltException(self)
                                self.state = 669 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 673
                        self.block_instr()
                        self.state = 675 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 674
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()

                            else:
                                raise NoViableAltException(self)
                            self.state = 677 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_else_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_if" ):
                listener.enterElse_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_if" ):
                listener.exitElse_if(self)




    def else_if(self):

        localctx = WordlifyParser.Else_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_else_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(WordlifyParser.ELSE)
            self.state = 687 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 686
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 689 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 691
            self.if_cond()
            self.state = 692
            self.then()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_else_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_block" ):
                listener.enterElse_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_block" ):
                listener.exitElse_block(self)




    def else_block(self):

        localctx = WordlifyParser.Else_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_else_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.match(WordlifyParser.ELSE)
            self.state = 696 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 695
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 698 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 740
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 738
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                        if la_ == 1:
                            self.state = 700
                            self.atom_instr()
                            self.state = 704
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 701
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 706
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 707
                            self.match(WordlifyParser.T__0)
                            self.state = 711
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 708
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 713
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 714
                            self.atom_instr()
                            self.state = 728 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 718
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 715
                                    self.match(WordlifyParser.WS)
                                    self.state = 720
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 721
                                self.match(WordlifyParser.NL)
                                self.state = 725
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 722
                                        self.match(WordlifyParser.WS) 
                                    self.state = 727
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

                                self.state = 730 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 732
                            self.block_instr()
                            self.state = 734 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 733
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 736 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 742
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

                self.state = 764
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 743
                    self.atom_instr()
                    self.state = 747
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 744
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 749
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

                    self.state = 756
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 750
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 752 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 751
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()

                            else:
                                raise NoViableAltException(self)
                            self.state = 754 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 758
                    self.block_instr()
                    self.state = 760 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 759
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()

                        else:
                            raise NoViableAltException(self)
                        self.state = 762 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_cond(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Single_condContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Single_condContext,i)


        def BIN_LOG_OP(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.BIN_LOG_OP)
            else:
                return self.getToken(WordlifyParser.BIN_LOG_OP, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)




    def cond(self):

        localctx = WordlifyParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.single_cond()
            self.state = 783
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 770 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 769
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 772 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    self.state = 774
                    self.match(WordlifyParser.BIN_LOG_OP)
                    self.state = 776 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 775
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 778 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    self.state = 780
                    self.single_cond() 
                self.state = 785
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def comparison(self):
            return self.getTypedRuleContext(WordlifyParser.ComparisonContext,0)


        def NOT(self):
            return self.getToken(WordlifyParser.NOT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_single_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_cond" ):
                listener.enterSingle_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_cond" ):
                listener.exitSingle_cond(self)




    def single_cond(self):

        localctx = WordlifyParser.Single_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_single_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.NOT:
                self.state = 786
                self.match(WordlifyParser.NOT)
                self.state = 788 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 787
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 790 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break



            self.state = 797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.state = 794
                self.fn_call()
                pass

            elif la_ == 2:
                self.state = 795
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 3:
                self.state = 796
                self.comparison()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def CMP_OP(self):
            return self.getToken(WordlifyParser.CMP_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = WordlifyParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.expr()
            self.state = 803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 800
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 805
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 806
            self.match(WordlifyParser.CMP_OP)
            self.state = 810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 807
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 813
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def arith_expr(self):
            return self.getTypedRuleContext(WordlifyParser.Arith_exprContext,0)


        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def array_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Array_elemContext,0)


        def concat(self):
            return self.getTypedRuleContext(WordlifyParser.ConcatContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = WordlifyParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_expr)
        try:
            self.state = 824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 815
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 816
                self.match(WordlifyParser.STR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 817
                self.match(WordlifyParser.NUM)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 818
                self.match(WordlifyParser.ID)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 819
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 820
                self.arith_expr()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 821
                self.array()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 822
                self.array_elem()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 823
                self.concat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def ARITH_OP(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ARITH_OP)
            else:
                return self.getToken(WordlifyParser.ARITH_OP, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)




    def arith_expr(self):

        localctx = WordlifyParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.value_or_id()
            self.state = 841 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 830
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 827
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 832
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 833
                    self.match(WordlifyParser.ARITH_OP)
                    self.state = 837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 834
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 839
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 840
                    self.value_or_id()

                else:
                    raise NoViableAltException(self)
                self.state = 843 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConcatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def CONCAT_OP(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.CONCAT_OP)
            else:
                return self.getToken(WordlifyParser.CONCAT_OP, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_concat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcat" ):
                listener.enterConcat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcat" ):
                listener.exitConcat(self)




    def concat(self):

        localctx = WordlifyParser.ConcatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_concat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.value_or_id()
            self.state = 860 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 849
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 846
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 851
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 852
                    self.match(WordlifyParser.CONCAT_OP)
                    self.state = 856
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 853
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 858
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 859
                    self.value_or_id()

                else:
                    raise NoViableAltException(self)
                self.state = 862 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def basename(self):
            return self.getTypedRuleContext(WordlifyParser.BasenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def length(self):
            return self.getTypedRuleContext(WordlifyParser.LengthContext,0)


        def is_dir(self):
            return self.getTypedRuleContext(WordlifyParser.Is_dirContext,0)


        def is_file(self):
            return self.getTypedRuleContext(WordlifyParser.Is_fileContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_call" ):
                listener.enterFn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_call" ):
                listener.exitFn_call(self)




    def fn_call(self):

        localctx = WordlifyParser.Fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_fn_call)
        try:
            self.state = 889
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 864
                self.own_fn_call()
                pass
            elif token in [WordlifyParser.EXIST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 865
                self.exist()
                pass
            elif token in [WordlifyParser.PRINT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 866
                self.print_instr()
                pass
            elif token in [WordlifyParser.RENAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 867
                self.rename()
                pass
            elif token in [WordlifyParser.BASENAME]:
                self.enterOuterAlt(localctx, 5)
                self.state = 868
                self.basename()
                pass
            elif token in [WordlifyParser.REMOVE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 869
                self.remove()
                pass
            elif token in [WordlifyParser.MOVE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 870
                self.move()
                pass
            elif token in [WordlifyParser.COPY]:
                self.enterOuterAlt(localctx, 8)
                self.state = 871
                self.copy()
                pass
            elif token in [WordlifyParser.DOWNLOAD]:
                self.enterOuterAlt(localctx, 9)
                self.state = 872
                self.download()
                pass
            elif token in [WordlifyParser.WRITE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 873
                self.write()
                pass
            elif token in [WordlifyParser.READ]:
                self.enterOuterAlt(localctx, 11)
                self.state = 874
                self.read()
                pass
            elif token in [WordlifyParser.WAIT]:
                self.enterOuterAlt(localctx, 12)
                self.state = 875
                self.wait_instr()
                pass
            elif token in [WordlifyParser.EXECUTE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 876
                self.execute()
                pass
            elif token in [WordlifyParser.GET_FILES]:
                self.enterOuterAlt(localctx, 14)
                self.state = 877
                self.get_files()
                pass
            elif token in [WordlifyParser.DATE_MODIFIED]:
                self.enterOuterAlt(localctx, 15)
                self.state = 878
                self.date_modified()
                pass
            elif token in [WordlifyParser.SIZE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 879
                self.size()
                pass
            elif token in [WordlifyParser.EXIT]:
                self.enterOuterAlt(localctx, 17)
                self.state = 880
                self.exit()
                pass
            elif token in [WordlifyParser.CREATE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 881
                self.create()
                pass
            elif token in [WordlifyParser.LENGTH]:
                self.enterOuterAlt(localctx, 19)
                self.state = 882
                self.length()
                pass
            elif token in [WordlifyParser.IS_DIR]:
                self.enterOuterAlt(localctx, 20)
                self.state = 883
                self.is_dir()
                pass
            elif token in [WordlifyParser.IS_FILE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 884
                self.is_file()
                pass
            elif token in [WordlifyParser.TIME]:
                self.enterOuterAlt(localctx, 22)
                self.state = 885
                self.match(WordlifyParser.TIME)
                pass
            elif token in [WordlifyParser.FILE]:
                self.enterOuterAlt(localctx, 23)
                self.state = 886
                self.match(WordlifyParser.FILE)
                pass
            elif token in [WordlifyParser.FOLDER]:
                self.enterOuterAlt(localctx, 24)
                self.state = 887
                self.match(WordlifyParser.FOLDER)
                pass
            elif token in [WordlifyParser.ARGS]:
                self.enterOuterAlt(localctx, 25)
                self.state = 888
                self.args()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def basename(self):
            return self.getTypedRuleContext(WordlifyParser.BasenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def array_append(self):
            return self.getTypedRuleContext(WordlifyParser.Array_appendContext,0)


        def assign(self):
            return self.getTypedRuleContext(WordlifyParser.AssignContext,0)


        def is_dir(self):
            return self.getTypedRuleContext(WordlifyParser.Is_dirContext,0)


        def is_file(self):
            return self.getTypedRuleContext(WordlifyParser.Is_fileContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_atom_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_instr" ):
                listener.enterAtom_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_instr" ):
                listener.exitAtom_instr(self)




    def atom_instr(self):

        localctx = WordlifyParser.Atom_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_atom_instr)
        try:
            self.state = 917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 891
                self.own_fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 892
                self.exist()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 893
                self.print_instr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 894
                self.rename()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 895
                self.basename()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 896
                self.remove()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 897
                self.move()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 898
                self.copy()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 899
                self.download()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 900
                self.write()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 901
                self.read()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 902
                self.wait_instr()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 903
                self.execute()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 904
                self.get_files()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 905
                self.date_modified()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 906
                self.size()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 907
                self.exit()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 908
                self.create()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 909
                self.array_append()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 910
                self.assign()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 911
                self.is_dir()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 912
                self.is_file()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 913
                self.match(WordlifyParser.TIME)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 914
                self.match(WordlifyParser.FILE)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 915
                self.match(WordlifyParser.FOLDER)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 916
                self.args()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def array_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Array_elemContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)




    def assign(self):

        localctx = WordlifyParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 919
                self.match(WordlifyParser.ID)
                pass

            elif la_ == 2:
                self.state = 920
                self.array_elem()
                pass


            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 923
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 929
            self.match(WordlifyParser.T__4)
            self.state = 933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 930
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 936
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_appendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def APPEND(self):
            return self.getToken(WordlifyParser.APPEND, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array_append

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_append" ):
                listener.enterArray_append(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_append" ):
                listener.exitArray_append(self)




    def array_append(self):

        localctx = WordlifyParser.Array_appendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_array_append)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(WordlifyParser.ID)
            self.state = 942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 939
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 945
            self.match(WordlifyParser.APPEND)
            self.state = 949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 946
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 951
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 952
            self.expr()
            self.state = 956
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,153,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 953
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 958
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_elem" ):
                listener.enterArray_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_elem" ):
                listener.exitArray_elem(self)




    def array_elem(self):

        localctx = WordlifyParser.Array_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_array_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.state = 959
                self.match(WordlifyParser.ID)
                pass
            elif token in [WordlifyParser.ARGS]:
                self.state = 960
                self.args()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 963
            self.match(WordlifyParser.T__5)
            self.state = 967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 964
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 970
            self.expr()
            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 971
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 977
            self.match(WordlifyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(WordlifyParser.IMPORT, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_import_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_call" ):
                listener.enterImport_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_call" ):
                listener.exitImport_call(self)




    def import_call(self):

        localctx = WordlifyParser.Import_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_import_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.match(WordlifyParser.IMPORT)
            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 980
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 985
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 986
            self.match(WordlifyParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Own_fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_own_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOwn_fn_call" ):
                listener.enterOwn_fn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOwn_fn_call" ):
                listener.exitOwn_fn_call(self)




    def own_fn_call(self):

        localctx = WordlifyParser.Own_fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_own_fn_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.match(WordlifyParser.ID)
            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 989
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 995
            self.match(WordlifyParser.T__1)
            self.state = 999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 996
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1001
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.T__5) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.LENGTH) | (1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 1002
                self.expr()
                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1003
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1008
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.T__2:
                    self.state = 1009
                    self.match(WordlifyParser.T__2)
                    self.state = 1013
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1010
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1015
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1016
                    self.expr()
                    self.state = 1020
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1017
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1022
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1027
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1030
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIST(self):
            return self.getToken(WordlifyParser.EXIST, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExist" ):
                listener.enterExist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExist" ):
                listener.exitExist(self)




    def exist(self):

        localctx = WordlifyParser.ExistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_exist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(WordlifyParser.EXIST)
            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1033
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1039
            self.match(WordlifyParser.T__1)
            self.state = 1043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1040
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1045
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1046
            self.expr()
            self.state = 1050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1047
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1052
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1053
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS_FILE(self):
            return self.getToken(WordlifyParser.IS_FILE, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_is_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_file" ):
                listener.enterIs_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_file" ):
                listener.exitIs_file(self)




    def is_file(self):

        localctx = WordlifyParser.Is_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_is_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(WordlifyParser.IS_FILE)
            self.state = 1059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1056
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1061
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1062
            self.match(WordlifyParser.T__1)
            self.state = 1066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1063
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1069
            self.expr()
            self.state = 1073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1070
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1075
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1076
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_dirContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS_DIR(self):
            return self.getToken(WordlifyParser.IS_DIR, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_is_dir

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_dir" ):
                listener.enterIs_dir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_dir" ):
                listener.exitIs_dir(self)




    def is_dir(self):

        localctx = WordlifyParser.Is_dirContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_is_dir)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1078
            self.match(WordlifyParser.IS_DIR)
            self.state = 1082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1079
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1084
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1085
            self.match(WordlifyParser.T__1)
            self.state = 1089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1086
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1092
            self.expr()
            self.state = 1096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1093
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1099
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(WordlifyParser.PRINT, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_print_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_instr" ):
                listener.enterPrint_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_instr" ):
                listener.exitPrint_instr(self)




    def print_instr(self):

        localctx = WordlifyParser.Print_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_print_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.match(WordlifyParser.PRINT)
            self.state = 1105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1102
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1108
            self.match(WordlifyParser.T__1)
            self.state = 1112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1109
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1115
            self.expr()
            self.state = 1119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1116
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1122
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(WordlifyParser.RENAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_rename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename" ):
                listener.enterRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename" ):
                listener.exitRename(self)




    def rename(self):

        localctx = WordlifyParser.RenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_rename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124
            self.match(WordlifyParser.RENAME)
            self.state = 1128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1125
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1131
            self.match(WordlifyParser.T__1)
            self.state = 1135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1132
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1137
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1138
            self.expr()
            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1139
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1144
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1145
            self.match(WordlifyParser.T__2)
            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1146
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1152
            self.expr()
            self.state = 1156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1153
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1158
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1159
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(WordlifyParser.REMOVE, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove" ):
                listener.enterRemove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove" ):
                listener.exitRemove(self)




    def remove(self):

        localctx = WordlifyParser.RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.match(WordlifyParser.REMOVE)
            self.state = 1165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1162
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1167
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1168
            self.match(WordlifyParser.T__1)
            self.state = 1172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1169
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1174
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1175
            self.expr()
            self.state = 1179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1176
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1182
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOVE(self):
            return self.getToken(WordlifyParser.MOVE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)




    def move(self):

        localctx = WordlifyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.match(WordlifyParser.MOVE)
            self.state = 1188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1185
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1190
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1191
            self.match(WordlifyParser.T__1)
            self.state = 1195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1192
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1198
            self.expr()
            self.state = 1202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1199
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1204
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1205
            self.match(WordlifyParser.T__2)
            self.state = 1209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1206
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1211
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1212
            self.expr()
            self.state = 1216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1213
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1218
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1219
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(WordlifyParser.COPY, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_copy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy" ):
                listener.enterCopy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy" ):
                listener.exitCopy(self)




    def copy(self):

        localctx = WordlifyParser.CopyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_copy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            self.match(WordlifyParser.COPY)
            self.state = 1225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1222
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1227
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1228
            self.match(WordlifyParser.T__1)
            self.state = 1232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1229
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1234
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1235
            self.expr()
            self.state = 1239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1236
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1241
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1242
            self.match(WordlifyParser.T__2)
            self.state = 1246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1243
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1248
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1249
            self.expr()
            self.state = 1253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1250
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1255
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1256
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DownloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOWNLOAD(self):
            return self.getToken(WordlifyParser.DOWNLOAD, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_download

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDownload" ):
                listener.enterDownload(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDownload" ):
                listener.exitDownload(self)




    def download(self):

        localctx = WordlifyParser.DownloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_download)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.match(WordlifyParser.DOWNLOAD)
            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1259
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1265
            self.match(WordlifyParser.T__1)
            self.state = 1269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1266
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1271
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1272
            self.expr()
            self.state = 1276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1273
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1279
            self.match(WordlifyParser.T__2)
            self.state = 1283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1280
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1285
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1286
            self.expr()
            self.state = 1290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1287
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1292
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1293
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(WordlifyParser.WRITE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_write

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite" ):
                listener.enterWrite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite" ):
                listener.exitWrite(self)




    def write(self):

        localctx = WordlifyParser.WriteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_write)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.match(WordlifyParser.WRITE)
            self.state = 1299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1296
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1301
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1302
            self.match(WordlifyParser.T__1)
            self.state = 1306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1303
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1308
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1309
            self.expr()
            self.state = 1313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1310
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1315
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1316
            self.match(WordlifyParser.T__2)
            self.state = 1320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1317
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1322
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1323
            self.expr()
            self.state = 1327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1324
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1329
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1330
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(WordlifyParser.READ, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_read

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead" ):
                listener.enterRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead" ):
                listener.exitRead(self)




    def read(self):

        localctx = WordlifyParser.ReadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_read)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.match(WordlifyParser.READ)
            self.state = 1336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1333
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1338
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1339
            self.match(WordlifyParser.T__1)
            self.state = 1343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1340
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1345
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1346
            self.expr()
            self.state = 1350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1347
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1352
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1353
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wait_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(WordlifyParser.WAIT, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_wait_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_instr" ):
                listener.enterWait_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_instr" ):
                listener.exitWait_instr(self)




    def wait_instr(self):

        localctx = WordlifyParser.Wait_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_wait_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1355
            self.match(WordlifyParser.WAIT)
            self.state = 1359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1356
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1361
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1362
            self.match(WordlifyParser.T__1)
            self.state = 1366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1363
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1368
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1369
            self.expr()
            self.state = 1373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1370
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1375
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1376
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(WordlifyParser.EXECUTE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_execute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)




    def execute(self):

        localctx = WordlifyParser.ExecuteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_execute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1378
            self.match(WordlifyParser.EXECUTE)
            self.state = 1382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1379
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1384
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1385
            self.match(WordlifyParser.T__1)
            self.state = 1389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1386
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1391
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1408
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,215,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1392
                    self.expr()
                    self.state = 1396
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1393
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1398
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1399
                    self.match(WordlifyParser.T__2)
                    self.state = 1403
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1400
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1405
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
             
                self.state = 1410
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,215,self._ctx)

            self.state = 1411
            self.expr()
            self.state = 1415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1412
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1417
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1418
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_filesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET_FILES(self):
            return self.getToken(WordlifyParser.GET_FILES, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_get_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_files" ):
                listener.enterGet_files(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_files" ):
                listener.exitGet_files(self)




    def get_files(self):

        localctx = WordlifyParser.Get_filesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_get_files)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1420
            self.match(WordlifyParser.GET_FILES)
            self.state = 1424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1421
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1426
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1427
            self.match(WordlifyParser.T__1)
            self.state = 1431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1428
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1433
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1434
            self.expr()
            self.state = 1438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1435
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1440
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1441
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_modifiedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_MODIFIED(self):
            return self.getToken(WordlifyParser.DATE_MODIFIED, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_date_modified

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_modified" ):
                listener.enterDate_modified(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_modified" ):
                listener.exitDate_modified(self)




    def date_modified(self):

        localctx = WordlifyParser.Date_modifiedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_date_modified)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            self.match(WordlifyParser.DATE_MODIFIED)
            self.state = 1447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1444
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1449
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1450
            self.match(WordlifyParser.T__1)
            self.state = 1454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1451
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1456
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1457
            self.expr()
            self.state = 1461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1458
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1463
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1464
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIZE(self):
            return self.getToken(WordlifyParser.SIZE, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSize" ):
                listener.enterSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSize" ):
                listener.exitSize(self)




    def size(self):

        localctx = WordlifyParser.SizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1466
            self.match(WordlifyParser.SIZE)
            self.state = 1470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1467
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1472
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1473
            self.match(WordlifyParser.T__1)
            self.state = 1477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1474
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1479
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1480
            self.expr()
            self.state = 1484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1481
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1486
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1487
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(WordlifyParser.EXIT, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit" ):
                listener.enterExit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit" ):
                listener.exitExit(self)




    def exit(self):

        localctx = WordlifyParser.ExitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_exit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1489
            self.match(WordlifyParser.EXIT)
            self.state = 1493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1490
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1495
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1496
            self.match(WordlifyParser.T__1)
            self.state = 1500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1497
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1502
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1503
            self.expr()
            self.state = 1507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1504
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1509
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1510
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(WordlifyParser.CREATE, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate" ):
                listener.enterCreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate" ):
                listener.exitCreate(self)




    def create(self):

        localctx = WordlifyParser.CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1512
            self.match(WordlifyParser.CREATE)
            self.state = 1516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1513
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1518
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1519
            self.match(WordlifyParser.T__1)
            self.state = 1523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1520
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1525
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1526
            self.expr()
            self.state = 1530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1527
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1532
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1533
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LENGTH(self):
            return self.getToken(WordlifyParser.LENGTH, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLength" ):
                listener.enterLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLength" ):
                listener.exitLength(self)




    def length(self):

        localctx = WordlifyParser.LengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_length)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1535
            self.match(WordlifyParser.LENGTH)
            self.state = 1539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1536
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1541
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1542
            self.match(WordlifyParser.T__1)
            self.state = 1546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1543
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1548
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1552
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.state = 1549
                self.match(WordlifyParser.ID)
                pass
            elif token in [WordlifyParser.T__5]:
                self.state = 1550
                self.array()
                pass
            elif token in [WordlifyParser.ARGS]:
                self.state = 1551
                self.args()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1554
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1559
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1560
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BASENAME(self):
            return self.getToken(WordlifyParser.BASENAME, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_basename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasename" ):
                listener.enterBasename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasename" ):
                listener.exitBasename(self)




    def basename(self):

        localctx = WordlifyParser.BasenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_basename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1562
            self.match(WordlifyParser.BASENAME)
            self.state = 1566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1563
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1568
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1569
            self.match(WordlifyParser.T__1)
            self.state = 1573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1570
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1575
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1576
            self.expr()
            self.state = 1580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1577
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1582
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1583
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARGS(self):
            return self.getToken(WordlifyParser.ARGS, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)




    def args(self):

        localctx = WordlifyParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_args)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1585
            self.match(WordlifyParser.ARGS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray" ):
                listener.enterArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray" ):
                listener.exitArray(self)




    def array(self):

        localctx = WordlifyParser.ArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1587
            self.match(WordlifyParser.T__5)
            self.state = 1591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1588
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 1594
                self.value_or_id()
                self.state = 1611
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1598
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 1595
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1600
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1601
                        self.match(WordlifyParser.T__2)
                        self.state = 1605
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 1602
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1607
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1608
                        self.value_or_id() 
                    self.state = 1613
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

                self.state = 1617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1614
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1619
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1622
            self.match(WordlifyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_or_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_value_or_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_or_id" ):
                listener.enterValue_or_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_or_id" ):
                listener.exitValue_or_id(self)




    def value_or_id(self):

        localctx = WordlifyParser.Value_or_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_value_or_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1624
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





