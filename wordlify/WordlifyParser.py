# Generated from Wordlify.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3:")
        buf.write("\u0820\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\3\2\7\2b\n\2\f\2\16\2e\13\2\3\2\3\2\7\2")
        buf.write("i\n\2\f\2\16\2l\13\2\3\2\3\2\7\2p\n\2\f\2\16\2s\13\2\3")
        buf.write("\2\3\2\7\2w\n\2\f\2\16\2z\13\2\3\2\3\2\7\2~\n\2\f\2\16")
        buf.write("\2\u0081\13\2\6\2\u0083\n\2\r\2\16\2\u0084\3\2\3\2\3\2")
        buf.write("\5\2\u008a\n\2\3\2\6\2\u008d\n\2\r\2\16\2\u008e\7\2\u0091")
        buf.write("\n\2\f\2\16\2\u0094\13\2\3\2\3\2\7\2\u0098\n\2\f\2\16")
        buf.write("\2\u009b\13\2\3\2\5\2\u009e\n\2\3\2\3\2\3\2\5\2\u00a3")
        buf.write("\n\2\5\2\u00a5\n\2\5\2\u00a7\n\2\3\2\7\2\u00aa\n\2\f\2")
        buf.write("\16\2\u00ad\13\2\3\2\5\2\u00b0\n\2\3\2\3\2\7\2\u00b4\n")
        buf.write("\2\f\2\16\2\u00b7\13\2\3\2\3\2\7\2\u00bb\n\2\f\2\16\2")
        buf.write("\u00be\13\2\3\2\5\2\u00c1\n\2\3\2\3\2\7\2\u00c5\n\2\f")
        buf.write("\2\16\2\u00c8\13\2\3\2\3\2\7\2\u00cc\n\2\f\2\16\2\u00cf")
        buf.write("\13\2\3\2\3\2\7\2\u00d3\n\2\f\2\16\2\u00d6\13\2\6\2\u00d8")
        buf.write("\n\2\r\2\16\2\u00d9\3\2\3\2\3\2\5\2\u00df\n\2\3\2\6\2")
        buf.write("\u00e2\n\2\r\2\16\2\u00e3\7\2\u00e6\n\2\f\2\16\2\u00e9")
        buf.write("\13\2\3\2\3\2\7\2\u00ed\n\2\f\2\16\2\u00f0\13\2\3\2\5")
        buf.write("\2\u00f3\n\2\3\2\3\2\3\2\5\2\u00f8\n\2\5\2\u00fa\n\2\5")
        buf.write("\2\u00fc\n\2\3\2\7\2\u00ff\n\2\f\2\16\2\u0102\13\2\3\2")
        buf.write("\5\2\u0105\n\2\3\2\5\2\u0108\n\2\3\3\3\3\6\3\u010c\n\3")
        buf.write("\r\3\16\3\u010d\3\3\3\3\7\3\u0112\n\3\f\3\16\3\u0115\13")
        buf.write("\3\3\3\3\3\7\3\u0119\n\3\f\3\16\3\u011c\13\3\3\3\3\3\7")
        buf.write("\3\u0120\n\3\f\3\16\3\u0123\13\3\3\3\3\3\7\3\u0127\n\3")
        buf.write("\f\3\16\3\u012a\13\3\3\3\3\3\7\3\u012e\n\3\f\3\16\3\u0131")
        buf.write("\13\3\7\3\u0133\n\3\f\3\16\3\u0136\13\3\5\3\u0138\n\3")
        buf.write("\3\3\3\3\7\3\u013c\n\3\f\3\16\3\u013f\13\3\3\3\3\3\6\3")
        buf.write("\u0143\n\3\r\3\16\3\u0144\3\3\3\3\7\3\u0149\n\3\f\3\16")
        buf.write("\3\u014c\13\3\3\3\3\3\7\3\u0150\n\3\f\3\16\3\u0153\13")
        buf.write("\3\3\3\3\3\7\3\u0157\n\3\f\3\16\3\u015a\13\3\3\3\3\3\7")
        buf.write("\3\u015e\n\3\f\3\16\3\u0161\13\3\6\3\u0163\n\3\r\3\16")
        buf.write("\3\u0164\3\3\3\3\6\3\u0169\n\3\r\3\16\3\u016a\7\3\u016d")
        buf.write("\n\3\f\3\16\3\u0170\13\3\3\3\3\3\7\3\u0174\n\3\f\3\16")
        buf.write("\3\u0177\13\3\3\3\5\3\u017a\n\3\3\3\5\3\u017d\n\3\3\3")
        buf.write("\6\3\u0180\n\3\r\3\16\3\u0181\5\3\u0184\n\3\3\3\3\3\3")
        buf.write("\3\6\3\u0189\n\3\r\3\16\3\u018a\3\3\3\3\7\3\u018f\n\3")
        buf.write("\f\3\16\3\u0192\13\3\3\3\3\3\7\3\u0196\n\3\f\3\16\3\u0199")
        buf.write("\13\3\3\3\3\3\7\3\u019d\n\3\f\3\16\3\u01a0\13\3\3\3\3")
        buf.write("\3\7\3\u01a4\n\3\f\3\16\3\u01a7\13\3\3\3\3\3\7\3\u01ab")
        buf.write("\n\3\f\3\16\3\u01ae\13\3\7\3\u01b0\n\3\f\3\16\3\u01b3")
        buf.write("\13\3\5\3\u01b5\n\3\3\3\3\3\7\3\u01b9\n\3\f\3\16\3\u01bc")
        buf.write("\13\3\3\3\3\3\6\3\u01c0\n\3\r\3\16\3\u01c1\3\3\3\3\7\3")
        buf.write("\u01c6\n\3\f\3\16\3\u01c9\13\3\3\3\5\3\u01cc\n\3\3\3\3")
        buf.write("\3\7\3\u01d0\n\3\f\3\16\3\u01d3\13\3\3\3\3\3\7\3\u01d7")
        buf.write("\n\3\f\3\16\3\u01da\13\3\3\3\3\3\7\3\u01de\n\3\f\3\16")
        buf.write("\3\u01e1\13\3\6\3\u01e3\n\3\r\3\16\3\u01e4\3\3\3\3\6\3")
        buf.write("\u01e9\n\3\r\3\16\3\u01ea\7\3\u01ed\n\3\f\3\16\3\u01f0")
        buf.write("\13\3\3\3\3\3\7\3\u01f4\n\3\f\3\16\3\u01f7\13\3\3\3\5")
        buf.write("\3\u01fa\n\3\3\3\5\3\u01fd\n\3\3\3\6\3\u0200\n\3\r\3\16")
        buf.write("\3\u0201\5\3\u0204\n\3\3\3\5\3\u0207\n\3\3\4\3\4\3\4\5")
        buf.write("\4\u020c\n\4\3\5\3\5\6\5\u0210\n\5\r\5\16\5\u0211\3\5")
        buf.write("\3\5\6\5\u0216\n\5\r\5\16\5\u0217\3\5\3\5\6\5\u021c\n")
        buf.write("\5\r\5\16\5\u021d\3\5\3\5\3\5\5\5\u0223\n\5\3\5\6\5\u0226")
        buf.write("\n\5\r\5\16\5\u0227\3\5\3\5\6\5\u022c\n\5\r\5\16\5\u022d")
        buf.write("\3\5\3\5\7\5\u0232\n\5\f\5\16\5\u0235\13\5\3\5\3\5\7\5")
        buf.write("\u0239\n\5\f\5\16\5\u023c\13\5\3\5\3\5\7\5\u0240\n\5\f")
        buf.write("\5\16\5\u0243\13\5\3\5\3\5\7\5\u0247\n\5\f\5\16\5\u024a")
        buf.write("\13\5\6\5\u024c\n\5\r\5\16\5\u024d\3\5\3\5\6\5\u0252\n")
        buf.write("\5\r\5\16\5\u0253\7\5\u0256\n\5\f\5\16\5\u0259\13\5\3")
        buf.write("\5\3\5\7\5\u025d\n\5\f\5\16\5\u0260\13\5\3\5\3\5\6\5\u0264")
        buf.write("\n\5\r\5\16\5\u0265\5\5\u0268\n\5\3\5\3\5\6\5\u026c\n")
        buf.write("\5\r\5\16\5\u026d\5\5\u0270\n\5\5\5\u0272\n\5\3\5\3\5")
        buf.write("\3\5\6\5\u0277\n\5\r\5\16\5\u0278\3\5\3\5\6\5\u027d\n")
        buf.write("\5\r\5\16\5\u027e\3\5\3\5\6\5\u0283\n\5\r\5\16\5\u0284")
        buf.write("\3\5\3\5\3\5\5\5\u028a\n\5\3\5\6\5\u028d\n\5\r\5\16\5")
        buf.write("\u028e\3\5\3\5\6\5\u0293\n\5\r\5\16\5\u0294\3\5\3\5\7")
        buf.write("\5\u0299\n\5\f\5\16\5\u029c\13\5\3\5\5\5\u029f\n\5\3\5")
        buf.write("\3\5\7\5\u02a3\n\5\f\5\16\5\u02a6\13\5\3\5\3\5\7\5\u02aa")
        buf.write("\n\5\f\5\16\5\u02ad\13\5\3\5\3\5\7\5\u02b1\n\5\f\5\16")
        buf.write("\5\u02b4\13\5\6\5\u02b6\n\5\r\5\16\5\u02b7\3\5\3\5\6\5")
        buf.write("\u02bc\n\5\r\5\16\5\u02bd\7\5\u02c0\n\5\f\5\16\5\u02c3")
        buf.write("\13\5\3\5\3\5\7\5\u02c7\n\5\f\5\16\5\u02ca\13\5\3\5\3")
        buf.write("\5\6\5\u02ce\n\5\r\5\16\5\u02cf\5\5\u02d2\n\5\3\5\3\5")
        buf.write("\6\5\u02d6\n\5\r\5\16\5\u02d7\5\5\u02da\n\5\5\5\u02dc")
        buf.write("\n\5\3\5\5\5\u02df\n\5\3\6\3\6\6\6\u02e3\n\6\r\6\16\6")
        buf.write("\u02e4\3\6\3\6\6\6\u02e9\n\6\r\6\16\6\u02ea\3\6\3\6\6")
        buf.write("\6\u02ef\n\6\r\6\16\6\u02f0\3\6\3\6\7\6\u02f5\n\6\f\6")
        buf.write("\16\6\u02f8\13\6\3\6\3\6\7\6\u02fc\n\6\f\6\16\6\u02ff")
        buf.write("\13\6\3\6\3\6\7\6\u0303\n\6\f\6\16\6\u0306\13\6\3\6\3")
        buf.write("\6\7\6\u030a\n\6\f\6\16\6\u030d\13\6\6\6\u030f\n\6\r\6")
        buf.write("\16\6\u0310\3\6\3\6\6\6\u0315\n\6\r\6\16\6\u0316\7\6\u0319")
        buf.write("\n\6\f\6\16\6\u031c\13\6\3\6\3\6\7\6\u0320\n\6\f\6\16")
        buf.write("\6\u0323\13\6\3\6\3\6\6\6\u0327\n\6\r\6\16\6\u0328\5\6")
        buf.write("\u032b\n\6\3\6\3\6\6\6\u032f\n\6\r\6\16\6\u0330\5\6\u0333")
        buf.write("\n\6\5\6\u0335\n\6\3\6\3\6\3\6\3\6\6\6\u033b\n\6\r\6\16")
        buf.write("\6\u033c\3\6\3\6\6\6\u0341\n\6\r\6\16\6\u0342\3\6\3\6")
        buf.write("\6\6\u0347\n\6\r\6\16\6\u0348\3\6\3\6\7\6\u034d\n\6\f")
        buf.write("\6\16\6\u0350\13\6\3\6\5\6\u0353\n\6\3\6\3\6\7\6\u0357")
        buf.write("\n\6\f\6\16\6\u035a\13\6\3\6\3\6\7\6\u035e\n\6\f\6\16")
        buf.write("\6\u0361\13\6\3\6\3\6\7\6\u0365\n\6\f\6\16\6\u0368\13")
        buf.write("\6\6\6\u036a\n\6\r\6\16\6\u036b\3\6\3\6\6\6\u0370\n\6")
        buf.write("\r\6\16\6\u0371\7\6\u0374\n\6\f\6\16\6\u0377\13\6\3\6")
        buf.write("\3\6\7\6\u037b\n\6\f\6\16\6\u037e\13\6\3\6\3\6\6\6\u0382")
        buf.write("\n\6\r\6\16\6\u0383\5\6\u0386\n\6\3\6\3\6\6\6\u038a\n")
        buf.write("\6\r\6\16\6\u038b\5\6\u038e\n\6\5\6\u0390\n\6\3\6\3\6")
        buf.write("\5\6\u0394\n\6\3\7\3\7\3\7\7\7\u0399\n\7\f\7\16\7\u039c")
        buf.write("\13\7\3\7\5\7\u039f\n\7\3\7\3\7\3\7\3\7\3\7\7\7\u03a6")
        buf.write("\n\7\f\7\16\7\u03a9\13\7\3\7\5\7\u03ac\n\7\3\7\3\7\5\7")
        buf.write("\u03b0\n\7\3\b\3\b\6\b\u03b4\n\b\r\b\16\b\u03b5\3\b\3")
        buf.write("\b\6\b\u03ba\n\b\r\b\16\b\u03bb\3\t\3\t\6\t\u03c0\n\t")
        buf.write("\r\t\16\t\u03c1\3\t\3\t\7\t\u03c6\n\t\f\t\16\t\u03c9\13")
        buf.write("\t\3\t\3\t\7\t\u03cd\n\t\f\t\16\t\u03d0\13\t\3\t\3\t\7")
        buf.write("\t\u03d4\n\t\f\t\16\t\u03d7\13\t\3\t\3\t\7\t\u03db\n\t")
        buf.write("\f\t\16\t\u03de\13\t\6\t\u03e0\n\t\r\t\16\t\u03e1\3\t")
        buf.write("\3\t\6\t\u03e6\n\t\r\t\16\t\u03e7\7\t\u03ea\n\t\f\t\16")
        buf.write("\t\u03ed\13\t\3\t\3\t\7\t\u03f1\n\t\f\t\16\t\u03f4\13")
        buf.write("\t\3\t\3\t\6\t\u03f8\n\t\r\t\16\t\u03f9\5\t\u03fc\n\t")
        buf.write("\3\t\3\t\6\t\u0400\n\t\r\t\16\t\u0401\5\t\u0404\n\t\5")
        buf.write("\t\u0406\n\t\3\t\3\t\6\t\u040a\n\t\r\t\16\t\u040b\3\t")
        buf.write("\3\t\7\t\u0410\n\t\f\t\16\t\u0413\13\t\3\t\5\t\u0416\n")
        buf.write("\t\3\t\3\t\7\t\u041a\n\t\f\t\16\t\u041d\13\t\3\t\3\t\7")
        buf.write("\t\u0421\n\t\f\t\16\t\u0424\13\t\3\t\3\t\7\t\u0428\n\t")
        buf.write("\f\t\16\t\u042b\13\t\6\t\u042d\n\t\r\t\16\t\u042e\3\t")
        buf.write("\3\t\6\t\u0433\n\t\r\t\16\t\u0434\7\t\u0437\n\t\f\t\16")
        buf.write("\t\u043a\13\t\3\t\3\t\7\t\u043e\n\t\f\t\16\t\u0441\13")
        buf.write("\t\3\t\3\t\6\t\u0445\n\t\r\t\16\t\u0446\5\t\u0449\n\t")
        buf.write("\3\t\3\t\6\t\u044d\n\t\r\t\16\t\u044e\5\t\u0451\n\t\5")
        buf.write("\t\u0453\n\t\5\t\u0455\n\t\3\n\3\n\6\n\u0459\n\n\r\n\16")
        buf.write("\n\u045a\3\n\3\n\3\n\3\13\3\13\6\13\u0462\n\13\r\13\16")
        buf.write("\13\u0463\3\13\3\13\7\13\u0468\n\13\f\13\16\13\u046b\13")
        buf.write("\13\3\13\3\13\7\13\u046f\n\13\f\13\16\13\u0472\13\13\3")
        buf.write("\13\3\13\7\13\u0476\n\13\f\13\16\13\u0479\13\13\3\13\3")
        buf.write("\13\7\13\u047d\n\13\f\13\16\13\u0480\13\13\6\13\u0482")
        buf.write("\n\13\r\13\16\13\u0483\3\13\3\13\6\13\u0488\n\13\r\13")
        buf.write("\16\13\u0489\7\13\u048c\n\13\f\13\16\13\u048f\13\13\3")
        buf.write("\13\3\13\7\13\u0493\n\13\f\13\16\13\u0496\13\13\3\13\3")
        buf.write("\13\6\13\u049a\n\13\r\13\16\13\u049b\5\13\u049e\n\13\3")
        buf.write("\13\3\13\6\13\u04a2\n\13\r\13\16\13\u04a3\5\13\u04a6\n")
        buf.write("\13\5\13\u04a8\n\13\3\f\3\f\6\f\u04ac\n\f\r\f\16\f\u04ad")
        buf.write("\3\f\3\f\6\f\u04b2\n\f\r\f\16\f\u04b3\3\f\5\f\u04b7\n")
        buf.write("\f\3\r\3\r\6\r\u04bb\n\r\r\r\16\r\u04bc\3\r\3\r\3\r\7")
        buf.write("\r\u04c2\n\r\f\r\16\r\u04c5\13\r\3\r\3\r\7\r\u04c9\n\r")
        buf.write("\f\r\16\r\u04cc\13\r\3\r\3\r\3\r\5\r\u04d1\n\r\3\16\3")
        buf.write("\16\3\16\5\16\u04d6\n\16\3\17\3\17\7\17\u04da\n\17\f\17")
        buf.write("\16\17\u04dd\13\17\3\17\3\17\7\17\u04e1\n\17\f\17\16\17")
        buf.write("\u04e4\13\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\5\20\u04f1\n\20\3\21\3\21\7\21\u04f5\n\21")
        buf.write("\f\21\16\21\u04f8\13\21\3\21\3\21\7\21\u04fc\n\21\f\21")
        buf.write("\16\21\u04ff\13\21\3\21\6\21\u0502\n\21\r\21\16\21\u0503")
        buf.write("\3\22\3\22\7\22\u0508\n\22\f\22\16\22\u050b\13\22\3\22")
        buf.write("\3\22\7\22\u050f\n\22\f\22\16\22\u0512\13\22\3\22\6\22")
        buf.write("\u0515\n\22\r\22\16\22\u0516\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u0532")
        buf.write("\n\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\5\24\u054e\n\24\3\25\3\25\5")
        buf.write("\25\u0552\n\25\3\25\7\25\u0555\n\25\f\25\16\25\u0558\13")
        buf.write("\25\3\25\3\25\7\25\u055c\n\25\f\25\16\25\u055f\13\25\3")
        buf.write("\25\3\25\3\25\5\25\u0564\n\25\3\25\7\25\u0567\n\25\f\25")
        buf.write("\16\25\u056a\13\25\3\25\3\25\5\25\u056e\n\25\3\26\3\26")
        buf.write("\7\26\u0572\n\26\f\26\16\26\u0575\13\26\3\26\3\26\7\26")
        buf.write("\u0579\n\26\f\26\16\26\u057c\13\26\3\26\3\26\7\26\u0580")
        buf.write("\n\26\f\26\16\26\u0583\13\26\3\27\3\27\5\27\u0587\n\27")
        buf.write("\3\27\3\27\7\27\u058b\n\27\f\27\16\27\u058e\13\27\3\27")
        buf.write("\3\27\7\27\u0592\n\27\f\27\16\27\u0595\13\27\3\27\3\27")
        buf.write("\3\30\3\30\7\30\u059b\n\30\f\30\16\30\u059e\13\30\3\30")
        buf.write("\3\30\3\31\3\31\7\31\u05a4\n\31\f\31\16\31\u05a7\13\31")
        buf.write("\3\31\3\31\7\31\u05ab\n\31\f\31\16\31\u05ae\13\31\3\31")
        buf.write("\3\31\7\31\u05b2\n\31\f\31\16\31\u05b5\13\31\3\31\3\31")
        buf.write("\7\31\u05b9\n\31\f\31\16\31\u05bc\13\31\3\31\3\31\7\31")
        buf.write("\u05c0\n\31\f\31\16\31\u05c3\13\31\7\31\u05c5\n\31\f\31")
        buf.write("\16\31\u05c8\13\31\5\31\u05ca\n\31\3\31\3\31\3\32\3\32")
        buf.write("\7\32\u05d0\n\32\f\32\16\32\u05d3\13\32\3\32\3\32\7\32")
        buf.write("\u05d7\n\32\f\32\16\32\u05da\13\32\3\32\3\32\7\32\u05de")
        buf.write("\n\32\f\32\16\32\u05e1\13\32\3\32\3\32\3\33\3\33\7\33")
        buf.write("\u05e7\n\33\f\33\16\33\u05ea\13\33\3\33\3\33\7\33\u05ee")
        buf.write("\n\33\f\33\16\33\u05f1\13\33\3\33\3\33\7\33\u05f5\n\33")
        buf.write("\f\33\16\33\u05f8\13\33\3\33\3\33\3\34\3\34\7\34\u05fe")
        buf.write("\n\34\f\34\16\34\u0601\13\34\3\34\3\34\7\34\u0605\n\34")
        buf.write("\f\34\16\34\u0608\13\34\3\34\3\34\7\34\u060c\n\34\f\34")
        buf.write("\16\34\u060f\13\34\3\34\3\34\3\35\3\35\7\35\u0615\n\35")
        buf.write("\f\35\16\35\u0618\13\35\3\35\3\35\7\35\u061c\n\35\f\35")
        buf.write("\16\35\u061f\13\35\3\35\3\35\7\35\u0623\n\35\f\35\16\35")
        buf.write("\u0626\13\35\3\35\3\35\3\36\3\36\7\36\u062c\n\36\f\36")
        buf.write("\16\36\u062f\13\36\3\36\3\36\7\36\u0633\n\36\f\36\16\36")
        buf.write("\u0636\13\36\3\36\3\36\7\36\u063a\n\36\f\36\16\36\u063d")
        buf.write("\13\36\3\36\3\36\7\36\u0641\n\36\f\36\16\36\u0644\13\36")
        buf.write("\3\36\3\36\7\36\u0648\n\36\f\36\16\36\u064b\13\36\3\36")
        buf.write("\3\36\3\37\3\37\7\37\u0651\n\37\f\37\16\37\u0654\13\37")
        buf.write("\3\37\3\37\7\37\u0658\n\37\f\37\16\37\u065b\13\37\3\37")
        buf.write("\3\37\7\37\u065f\n\37\f\37\16\37\u0662\13\37\3\37\3\37")
        buf.write("\3 \3 \7 \u0668\n \f \16 \u066b\13 \3 \3 \7 \u066f\n ")
        buf.write("\f \16 \u0672\13 \3 \3 \7 \u0676\n \f \16 \u0679\13 \3")
        buf.write(" \3 \7 \u067d\n \f \16 \u0680\13 \3 \3 \7 \u0684\n \f")
        buf.write(" \16 \u0687\13 \3 \3 \3!\3!\7!\u068d\n!\f!\16!\u0690\13")
        buf.write("!\3!\3!\7!\u0694\n!\f!\16!\u0697\13!\3!\3!\7!\u069b\n")
        buf.write("!\f!\16!\u069e\13!\3!\3!\7!\u06a2\n!\f!\16!\u06a5\13!")
        buf.write("\3!\3!\7!\u06a9\n!\f!\16!\u06ac\13!\3!\3!\3\"\3\"\7\"")
        buf.write("\u06b2\n\"\f\"\16\"\u06b5\13\"\3\"\3\"\7\"\u06b9\n\"\f")
        buf.write("\"\16\"\u06bc\13\"\3\"\3\"\7\"\u06c0\n\"\f\"\16\"\u06c3")
        buf.write("\13\"\3\"\3\"\7\"\u06c7\n\"\f\"\16\"\u06ca\13\"\3\"\3")
        buf.write("\"\7\"\u06ce\n\"\f\"\16\"\u06d1\13\"\3\"\3\"\3#\3#\7#")
        buf.write("\u06d7\n#\f#\16#\u06da\13#\3#\3#\7#\u06de\n#\f#\16#\u06e1")
        buf.write("\13#\3#\3#\7#\u06e5\n#\f#\16#\u06e8\13#\3#\3#\7#\u06ec")
        buf.write("\n#\f#\16#\u06ef\13#\3#\3#\7#\u06f3\n#\f#\16#\u06f6\13")
        buf.write("#\3#\3#\3$\3$\7$\u06fc\n$\f$\16$\u06ff\13$\3$\3$\7$\u0703")
        buf.write("\n$\f$\16$\u0706\13$\3$\3$\7$\u070a\n$\f$\16$\u070d\13")
        buf.write("$\3$\3$\3%\3%\7%\u0713\n%\f%\16%\u0716\13%\3%\3%\7%\u071a")
        buf.write("\n%\f%\16%\u071d\13%\3%\3%\7%\u0721\n%\f%\16%\u0724\13")
        buf.write("%\3%\3%\3&\3&\7&\u072a\n&\f&\16&\u072d\13&\3&\3&\7&\u0731")
        buf.write("\n&\f&\16&\u0734\13&\3&\3&\7&\u0738\n&\f&\16&\u073b\13")
        buf.write("&\3&\3&\7&\u073f\n&\f&\16&\u0742\13&\7&\u0744\n&\f&\16")
        buf.write("&\u0747\13&\3&\3&\7&\u074b\n&\f&\16&\u074e\13&\3&\3&\3")
        buf.write("\'\3\'\7\'\u0754\n\'\f\'\16\'\u0757\13\'\3\'\3\'\7\'\u075b")
        buf.write("\n\'\f\'\16\'\u075e\13\'\3\'\3\'\7\'\u0762\n\'\f\'\16")
        buf.write("\'\u0765\13\'\3\'\3\'\3(\3(\7(\u076b\n(\f(\16(\u076e\13")
        buf.write("(\3(\3(\7(\u0772\n(\f(\16(\u0775\13(\3(\3(\7(\u0779\n")
        buf.write("(\f(\16(\u077c\13(\3(\3(\3)\3)\7)\u0782\n)\f)\16)\u0785")
        buf.write("\13)\3)\3)\7)\u0789\n)\f)\16)\u078c\13)\3)\3)\7)\u0790")
        buf.write("\n)\f)\16)\u0793\13)\3)\3)\3*\3*\7*\u0799\n*\f*\16*\u079c")
        buf.write("\13*\3*\3*\7*\u07a0\n*\f*\16*\u07a3\13*\3*\3*\7*\u07a7")
        buf.write("\n*\f*\16*\u07aa\13*\3*\3*\3+\3+\7+\u07b0\n+\f+\16+\u07b3")
        buf.write("\13+\3+\3+\7+\u07b7\n+\f+\16+\u07ba\13+\3+\3+\7+\u07be")
        buf.write("\n+\f+\16+\u07c1\13+\3+\3+\3,\3,\7,\u07c7\n,\f,\16,\u07ca")
        buf.write("\13,\3,\3,\7,\u07ce\n,\f,\16,\u07d1\13,\3,\3,\3,\5,\u07d6")
        buf.write("\n,\3,\7,\u07d9\n,\f,\16,\u07dc\13,\3,\3,\3-\3-\7-\u07e2")
        buf.write("\n-\f-\16-\u07e5\13-\3-\3-\7-\u07e9\n-\f-\16-\u07ec\13")
        buf.write("-\3-\3-\7-\u07f0\n-\f-\16-\u07f3\13-\3-\3-\3.\3.\3/\3")
        buf.write("/\7/\u07fb\n/\f/\16/\u07fe\13/\3/\3/\7/\u0802\n/\f/\16")
        buf.write("/\u0805\13/\3/\3/\7/\u0809\n/\f/\16/\u080c\13/\3/\7/\u080f")
        buf.write("\n/\f/\16/\u0812\13/\3/\7/\u0815\n/\f/\16/\u0818\13/\5")
        buf.write("/\u081a\n/\3/\3/\3\60\3\60\3\60\2\2\61\2\4\6\b\n\f\16")
        buf.write("\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDF")
        buf.write("HJLNPRTVXZ\\^\2\4\3\2\678\3\2\63\66\2\u098c\2\u0107\3")
        buf.write("\2\2\2\4\u0206\3\2\2\2\6\u020b\3\2\2\2\b\u02de\3\2\2\2")
        buf.write("\n\u0393\3\2\2\2\f\u03af\3\2\2\2\16\u03b1\3\2\2\2\20\u0454")
        buf.write("\3\2\2\2\22\u0456\3\2\2\2\24\u045f\3\2\2\2\26\u04a9\3")
        buf.write("\2\2\2\30\u04d0\3\2\2\2\32\u04d5\3\2\2\2\34\u04d7\3\2")
        buf.write("\2\2\36\u04f0\3\2\2\2 \u04f2\3\2\2\2\"\u0505\3\2\2\2$")
        buf.write("\u0531\3\2\2\2&\u054d\3\2\2\2(\u056d\3\2\2\2*\u056f\3")
        buf.write("\2\2\2,\u0586\3\2\2\2.\u0598\3\2\2\2\60\u05a1\3\2\2\2")
        buf.write("\62\u05cd\3\2\2\2\64\u05e4\3\2\2\2\66\u05fb\3\2\2\28\u0612")
        buf.write("\3\2\2\2:\u0629\3\2\2\2<\u064e\3\2\2\2>\u0665\3\2\2\2")
        buf.write("@\u068a\3\2\2\2B\u06af\3\2\2\2D\u06d4\3\2\2\2F\u06f9\3")
        buf.write("\2\2\2H\u0710\3\2\2\2J\u0727\3\2\2\2L\u0751\3\2\2\2N\u0768")
        buf.write("\3\2\2\2P\u077f\3\2\2\2R\u0796\3\2\2\2T\u07ad\3\2\2\2")
        buf.write("V\u07c4\3\2\2\2X\u07df\3\2\2\2Z\u07f6\3\2\2\2\\\u07f8")
        buf.write("\3\2\2\2^\u081d\3\2\2\2`b\t\2\2\2a`\3\2\2\2be\3\2\2\2")
        buf.write("ca\3\2\2\2cd\3\2\2\2d\u00a6\3\2\2\2ec\3\2\2\2fj\5&\24")
        buf.write("\2gi\t\2\2\2hg\3\2\2\2il\3\2\2\2jh\3\2\2\2jk\3\2\2\2k")
        buf.write("m\3\2\2\2lj\3\2\2\2mq\7\3\2\2np\t\2\2\2on\3\2\2\2ps\3")
        buf.write("\2\2\2qo\3\2\2\2qr\3\2\2\2r\u0091\3\2\2\2sq\3\2\2\2t\u0082")
        buf.write("\5&\24\2uw\7\67\2\2vu\3\2\2\2wz\3\2\2\2xv\3\2\2\2xy\3")
        buf.write("\2\2\2y{\3\2\2\2zx\3\2\2\2{\177\78\2\2|~\7\67\2\2}|\3")
        buf.write("\2\2\2~\u0081\3\2\2\2\177}\3\2\2\2\177\u0080\3\2\2\2\u0080")
        buf.write("\u0083\3\2\2\2\u0081\177\3\2\2\2\u0082x\3\2\2\2\u0083")
        buf.write("\u0084\3\2\2\2\u0084\u0082\3\2\2\2\u0084\u0085\3\2\2\2")
        buf.write("\u0085\u0091\3\2\2\2\u0086\u008a\5\6\4\2\u0087\u008a\5")
        buf.write("\4\3\2\u0088\u008a\5.\30\2\u0089\u0086\3\2\2\2\u0089\u0087")
        buf.write("\3\2\2\2\u0089\u0088\3\2\2\2\u008a\u008c\3\2\2\2\u008b")
        buf.write("\u008d\t\2\2\2\u008c\u008b\3\2\2\2\u008d\u008e\3\2\2\2")
        buf.write("\u008e\u008c\3\2\2\2\u008e\u008f\3\2\2\2\u008f\u0091\3")
        buf.write("\2\2\2\u0090f\3\2\2\2\u0090t\3\2\2\2\u0090\u0089\3\2\2")
        buf.write("\2\u0091\u0094\3\2\2\2\u0092\u0090\3\2\2\2\u0092\u0093")
        buf.write("\3\2\2\2\u0093\u00a4\3\2\2\2\u0094\u0092\3\2\2\2\u0095")
        buf.write("\u0099\5&\24\2\u0096\u0098\t\2\2\2\u0097\u0096\3\2\2\2")
        buf.write("\u0098\u009b\3\2\2\2\u0099\u0097\3\2\2\2\u0099\u009a\3")
        buf.write("\2\2\2\u009a\u009d\3\2\2\2\u009b\u0099\3\2\2\2\u009c\u009e")
        buf.write("\7\3\2\2\u009d\u009c\3\2\2\2\u009d\u009e\3\2\2\2\u009e")
        buf.write("\u00a5\3\2\2\2\u009f\u00a3\5\6\4\2\u00a0\u00a3\5\4\3\2")
        buf.write("\u00a1\u00a3\5.\30\2\u00a2\u009f\3\2\2\2\u00a2\u00a0\3")
        buf.write("\2\2\2\u00a2\u00a1\3\2\2\2\u00a3\u00a5\3\2\2\2\u00a4\u0095")
        buf.write("\3\2\2\2\u00a4\u00a2\3\2\2\2\u00a5\u00a7\3\2\2\2\u00a6")
        buf.write("\u0092\3\2\2\2\u00a6\u00a7\3\2\2\2\u00a7\u00ab\3\2\2\2")
        buf.write("\u00a8\u00aa\t\2\2\2\u00a9\u00a8\3\2\2\2\u00aa\u00ad\3")
        buf.write("\2\2\2\u00ab\u00a9\3\2\2\2\u00ab\u00ac\3\2\2\2\u00ac\u00af")
        buf.write("\3\2\2\2\u00ad\u00ab\3\2\2\2\u00ae\u00b0\79\2\2\u00af")
        buf.write("\u00ae\3\2\2\2\u00af\u00b0\3\2\2\2\u00b0\u00b1\3\2\2\2")
        buf.write("\u00b1\u0108\7\2\2\3\u00b2\u00b4\t\2\2\2\u00b3\u00b2\3")
        buf.write("\2\2\2\u00b4\u00b7\3\2\2\2\u00b5\u00b3\3\2\2\2\u00b5\u00b6")
        buf.write("\3\2\2\2\u00b6\u00fb\3\2\2\2\u00b7\u00b5\3\2\2\2\u00b8")
        buf.write("\u00bc\5&\24\2\u00b9\u00bb\t\2\2\2\u00ba\u00b9\3\2\2\2")
        buf.write("\u00bb\u00be\3\2\2\2\u00bc\u00ba\3\2\2\2\u00bc\u00bd\3")
        buf.write("\2\2\2\u00bd\u00c0\3\2\2\2\u00be\u00bc\3\2\2\2\u00bf\u00c1")
        buf.write("\7\3\2\2\u00c0\u00bf\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1")
        buf.write("\u00c2\3\2\2\2\u00c2\u00c6\b\2\1\2\u00c3\u00c5\t\2\2\2")
        buf.write("\u00c4\u00c3\3\2\2\2\u00c5\u00c8\3\2\2\2\u00c6\u00c4\3")
        buf.write("\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00e6\3\2\2\2\u00c8\u00c6")
        buf.write("\3\2\2\2\u00c9\u00d7\5&\24\2\u00ca\u00cc\7\67\2\2\u00cb")
        buf.write("\u00ca\3\2\2\2\u00cc\u00cf\3\2\2\2\u00cd\u00cb\3\2\2\2")
        buf.write("\u00cd\u00ce\3\2\2\2\u00ce\u00d0\3\2\2\2\u00cf\u00cd\3")
        buf.write("\2\2\2\u00d0\u00d4\78\2\2\u00d1\u00d3\7\67\2\2\u00d2\u00d1")
        buf.write("\3\2\2\2\u00d3\u00d6\3\2\2\2\u00d4\u00d2\3\2\2\2\u00d4")
        buf.write("\u00d5\3\2\2\2\u00d5\u00d8\3\2\2\2\u00d6\u00d4\3\2\2\2")
        buf.write("\u00d7\u00cd\3\2\2\2\u00d8\u00d9\3\2\2\2\u00d9\u00d7\3")
        buf.write("\2\2\2\u00d9\u00da\3\2\2\2\u00da\u00e6\3\2\2\2\u00db\u00df")
        buf.write("\5\6\4\2\u00dc\u00df\5\4\3\2\u00dd\u00df\5.\30\2\u00de")
        buf.write("\u00db\3\2\2\2\u00de\u00dc\3\2\2\2\u00de\u00dd\3\2\2\2")
        buf.write("\u00df\u00e1\3\2\2\2\u00e0\u00e2\t\2\2\2\u00e1\u00e0\3")
        buf.write("\2\2\2\u00e2\u00e3\3\2\2\2\u00e3\u00e1\3\2\2\2\u00e3\u00e4")
        buf.write("\3\2\2\2\u00e4\u00e6\3\2\2\2\u00e5\u00b8\3\2\2\2\u00e5")
        buf.write("\u00c9\3\2\2\2\u00e5\u00de\3\2\2\2\u00e6\u00e9\3\2\2\2")
        buf.write("\u00e7\u00e5\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00f9\3")
        buf.write("\2\2\2\u00e9\u00e7\3\2\2\2\u00ea\u00ee\5&\24\2\u00eb\u00ed")
        buf.write("\t\2\2\2\u00ec\u00eb\3\2\2\2\u00ed\u00f0\3\2\2\2\u00ee")
        buf.write("\u00ec\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef\u00f2\3\2\2\2")
        buf.write("\u00f0\u00ee\3\2\2\2\u00f1\u00f3\7\3\2\2\u00f2\u00f1\3")
        buf.write("\2\2\2\u00f2\u00f3\3\2\2\2\u00f3\u00fa\3\2\2\2\u00f4\u00f8")
        buf.write("\5\6\4\2\u00f5\u00f8\5\4\3\2\u00f6\u00f8\5.\30\2\u00f7")
        buf.write("\u00f4\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f7\u00f6\3\2\2\2")
        buf.write("\u00f8\u00fa\3\2\2\2\u00f9\u00ea\3\2\2\2\u00f9\u00f7\3")
        buf.write("\2\2\2\u00fa\u00fc\3\2\2\2\u00fb\u00e7\3\2\2\2\u00fb\u00fc")
        buf.write("\3\2\2\2\u00fc\u0100\3\2\2\2\u00fd\u00ff\t\2\2\2\u00fe")
        buf.write("\u00fd\3\2\2\2\u00ff\u0102\3\2\2\2\u0100\u00fe\3\2\2\2")
        buf.write("\u0100\u0101\3\2\2\2\u0101\u0104\3\2\2\2\u0102\u0100\3")
        buf.write("\2\2\2\u0103\u0105\79\2\2\u0104\u0103\3\2\2\2\u0104\u0105")
        buf.write("\3\2\2\2\u0105\u0106\3\2\2\2\u0106\u0108\7\2\2\3\u0107")
        buf.write("c\3\2\2\2\u0107\u00b5\3\2\2\2\u0108\3\3\2\2\2\u0109\u010b")
        buf.write("\7\b\2\2\u010a\u010c\t\2\2\2\u010b\u010a\3\2\2\2\u010c")
        buf.write("\u010d\3\2\2\2\u010d\u010b\3\2\2\2\u010d\u010e\3\2\2\2")
        buf.write("\u010e\u010f\3\2\2\2\u010f\u0113\7\65\2\2\u0110\u0112")
        buf.write("\t\2\2\2\u0111\u0110\3\2\2\2\u0112\u0115\3\2\2\2\u0113")
        buf.write("\u0111\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u0116\3\2\2\2")
        buf.write("\u0115\u0113\3\2\2\2\u0116\u011a\7+\2\2\u0117\u0119\t")
        buf.write("\2\2\2\u0118\u0117\3\2\2\2\u0119\u011c\3\2\2\2\u011a\u0118")
        buf.write("\3\2\2\2\u011a\u011b\3\2\2\2\u011b\u0137\3\2\2\2\u011c")
        buf.write("\u011a\3\2\2\2\u011d\u0121\7\65\2\2\u011e\u0120\t\2\2")
        buf.write("\2\u011f\u011e\3\2\2\2\u0120\u0123\3\2\2\2\u0121\u011f")
        buf.write("\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0134\3\2\2\2\u0123")
        buf.write("\u0121\3\2\2\2\u0124\u0128\7\4\2\2\u0125\u0127\t\2\2\2")
        buf.write("\u0126\u0125\3\2\2\2\u0127\u012a\3\2\2\2\u0128\u0126\3")
        buf.write("\2\2\2\u0128\u0129\3\2\2\2\u0129\u012b\3\2\2\2\u012a\u0128")
        buf.write("\3\2\2\2\u012b\u012f\7\65\2\2\u012c\u012e\t\2\2\2\u012d")
        buf.write("\u012c\3\2\2\2\u012e\u0131\3\2\2\2\u012f\u012d\3\2\2\2")
        buf.write("\u012f\u0130\3\2\2\2\u0130\u0133\3\2\2\2\u0131\u012f\3")
        buf.write("\2\2\2\u0132\u0124\3\2\2\2\u0133\u0136\3\2\2\2\u0134\u0132")
        buf.write("\3\2\2\2\u0134\u0135\3\2\2\2\u0135\u0138\3\2\2\2\u0136")
        buf.write("\u0134\3\2\2\2\u0137\u011d\3\2\2\2\u0137\u0138\3\2\2\2")
        buf.write("\u0138\u0139\3\2\2\2\u0139\u013d\7,\2\2\u013a\u013c\t")
        buf.write("\2\2\2\u013b\u013a\3\2\2\2\u013c\u013f\3\2\2\2\u013d\u013b")
        buf.write("\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u0140\3\2\2\2\u013f")
        buf.write("\u013d\3\2\2\2\u0140\u0142\7\20\2\2\u0141\u0143\t\2\2")
        buf.write("\2\u0142\u0141\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0142")
        buf.write("\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0183\3\2\2\2\u0146")
        buf.write("\u014a\5&\24\2\u0147\u0149\t\2\2\2\u0148\u0147\3\2\2\2")
        buf.write("\u0149\u014c\3\2\2\2\u014a\u0148\3\2\2\2\u014a\u014b\3")
        buf.write("\2\2\2\u014b\u014d\3\2\2\2\u014c\u014a\3\2\2\2\u014d\u0151")
        buf.write("\7\3\2\2\u014e\u0150\t\2\2\2\u014f\u014e\3\2\2\2\u0150")
        buf.write("\u0153\3\2\2\2\u0151\u014f\3\2\2\2\u0151\u0152\3\2\2\2")
        buf.write("\u0152\u016d\3\2\2\2\u0153\u0151\3\2\2\2\u0154\u0162\5")
        buf.write("&\24\2\u0155\u0157\7\67\2\2\u0156\u0155\3\2\2\2\u0157")
        buf.write("\u015a\3\2\2\2\u0158\u0156\3\2\2\2\u0158\u0159\3\2\2\2")
        buf.write("\u0159\u015b\3\2\2\2\u015a\u0158\3\2\2\2\u015b\u015f\7")
        buf.write("8\2\2\u015c\u015e\7\67\2\2\u015d\u015c\3\2\2\2\u015e\u0161")
        buf.write("\3\2\2\2\u015f\u015d\3\2\2\2\u015f\u0160\3\2\2\2\u0160")
        buf.write("\u0163\3\2\2\2\u0161\u015f\3\2\2\2\u0162\u0158\3\2\2\2")
        buf.write("\u0163\u0164\3\2\2\2\u0164\u0162\3\2\2\2\u0164\u0165\3")
        buf.write("\2\2\2\u0165\u016d\3\2\2\2\u0166\u0168\5\6\4\2\u0167\u0169")
        buf.write("\t\2\2\2\u0168\u0167\3\2\2\2\u0169\u016a\3\2\2\2\u016a")
        buf.write("\u0168\3\2\2\2\u016a\u016b\3\2\2\2\u016b\u016d\3\2\2\2")
        buf.write("\u016c\u0146\3\2\2\2\u016c\u0154\3\2\2\2\u016c\u0166\3")
        buf.write("\2\2\2\u016d\u0170\3\2\2\2\u016e\u016c\3\2\2\2\u016e\u016f")
        buf.write("\3\2\2\2\u016f\u017c\3\2\2\2\u0170\u016e\3\2\2\2\u0171")
        buf.write("\u0175\5&\24\2\u0172\u0174\t\2\2\2\u0173\u0172\3\2\2\2")
        buf.write("\u0174\u0177\3\2\2\2\u0175\u0173\3\2\2\2\u0175\u0176\3")
        buf.write("\2\2\2\u0176\u0179\3\2\2\2\u0177\u0175\3\2\2\2\u0178\u017a")
        buf.write("\7\3\2\2\u0179\u0178\3\2\2\2\u0179\u017a\3\2\2\2\u017a")
        buf.write("\u017d\3\2\2\2\u017b\u017d\5\6\4\2\u017c\u0171\3\2\2\2")
        buf.write("\u017c\u017b\3\2\2\2\u017d\u017f\3\2\2\2\u017e\u0180\t")
        buf.write("\2\2\2\u017f\u017e\3\2\2\2\u0180\u0181\3\2\2\2\u0181\u017f")
        buf.write("\3\2\2\2\u0181\u0182\3\2\2\2\u0182\u0184\3\2\2\2\u0183")
        buf.write("\u016e\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u0185\3\2\2\2")
        buf.write("\u0185\u0207\7\21\2\2\u0186\u0188\7\b\2\2\u0187\u0189")
        buf.write("\t\2\2\2\u0188\u0187\3\2\2\2\u0189\u018a\3\2\2\2\u018a")
        buf.write("\u0188\3\2\2\2\u018a\u018b\3\2\2\2\u018b\u018c\3\2\2\2")
        buf.write("\u018c\u0190\7\65\2\2\u018d\u018f\t\2\2\2\u018e\u018d")
        buf.write("\3\2\2\2\u018f\u0192\3\2\2\2\u0190\u018e\3\2\2\2\u0190")
        buf.write("\u0191\3\2\2\2\u0191\u0193\3\2\2\2\u0192\u0190\3\2\2\2")
        buf.write("\u0193\u0197\7+\2\2\u0194\u0196\t\2\2\2\u0195\u0194\3")
        buf.write("\2\2\2\u0196\u0199\3\2\2\2\u0197\u0195\3\2\2\2\u0197\u0198")
        buf.write("\3\2\2\2\u0198\u01b4\3\2\2\2\u0199\u0197\3\2\2\2\u019a")
        buf.write("\u019e\7\65\2\2\u019b\u019d\t\2\2\2\u019c\u019b\3\2\2")
        buf.write("\2\u019d\u01a0\3\2\2\2\u019e\u019c\3\2\2\2\u019e\u019f")
        buf.write("\3\2\2\2\u019f\u01b1\3\2\2\2\u01a0\u019e\3\2\2\2\u01a1")
        buf.write("\u01a5\7\4\2\2\u01a2\u01a4\t\2\2\2\u01a3\u01a2\3\2\2\2")
        buf.write("\u01a4\u01a7\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a5\u01a6\3")
        buf.write("\2\2\2\u01a6\u01a8\3\2\2\2\u01a7\u01a5\3\2\2\2\u01a8\u01ac")
        buf.write("\7\65\2\2\u01a9\u01ab\t\2\2\2\u01aa\u01a9\3\2\2\2\u01ab")
        buf.write("\u01ae\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ac\u01ad\3\2\2\2")
        buf.write("\u01ad\u01b0\3\2\2\2\u01ae\u01ac\3\2\2\2\u01af\u01a1\3")
        buf.write("\2\2\2\u01b0\u01b3\3\2\2\2\u01b1\u01af\3\2\2\2\u01b1\u01b2")
        buf.write("\3\2\2\2\u01b2\u01b5\3\2\2\2\u01b3\u01b1\3\2\2\2\u01b4")
        buf.write("\u019a\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5\u01b6\3\2\2\2")
        buf.write("\u01b6\u01ba\7,\2\2\u01b7\u01b9\t\2\2\2\u01b8\u01b7\3")
        buf.write("\2\2\2\u01b9\u01bc\3\2\2\2\u01ba\u01b8\3\2\2\2\u01ba\u01bb")
        buf.write("\3\2\2\2\u01bb\u01bd\3\2\2\2\u01bc\u01ba\3\2\2\2\u01bd")
        buf.write("\u01bf\7\20\2\2\u01be\u01c0\t\2\2\2\u01bf\u01be\3\2\2")
        buf.write("\2\u01c0\u01c1\3\2\2\2\u01c1\u01bf\3\2\2\2\u01c1\u01c2")
        buf.write("\3\2\2\2\u01c2\u0203\3\2\2\2\u01c3\u01c7\5&\24\2\u01c4")
        buf.write("\u01c6\t\2\2\2\u01c5\u01c4\3\2\2\2\u01c6\u01c9\3\2\2\2")
        buf.write("\u01c7\u01c5\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01cb\3")
        buf.write("\2\2\2\u01c9\u01c7\3\2\2\2\u01ca\u01cc\7\3\2\2\u01cb\u01ca")
        buf.write("\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd")
        buf.write("\u01d1\b\3\1\2\u01ce\u01d0\t\2\2\2\u01cf\u01ce\3\2\2\2")
        buf.write("\u01d0\u01d3\3\2\2\2\u01d1\u01cf\3\2\2\2\u01d1\u01d2\3")
        buf.write("\2\2\2\u01d2\u01ed\3\2\2\2\u01d3\u01d1\3\2\2\2\u01d4\u01e2")
        buf.write("\5&\24\2\u01d5\u01d7\7\67\2\2\u01d6\u01d5\3\2\2\2\u01d7")
        buf.write("\u01da\3\2\2\2\u01d8\u01d6\3\2\2\2\u01d8\u01d9\3\2\2\2")
        buf.write("\u01d9\u01db\3\2\2\2\u01da\u01d8\3\2\2\2\u01db\u01df\7")
        buf.write("8\2\2\u01dc\u01de\7\67\2\2\u01dd\u01dc\3\2\2\2\u01de\u01e1")
        buf.write("\3\2\2\2\u01df\u01dd\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0")
        buf.write("\u01e3\3\2\2\2\u01e1\u01df\3\2\2\2\u01e2\u01d8\3\2\2\2")
        buf.write("\u01e3\u01e4\3\2\2\2\u01e4\u01e2\3\2\2\2\u01e4\u01e5\3")
        buf.write("\2\2\2\u01e5\u01ed\3\2\2\2\u01e6\u01e8\5\6\4\2\u01e7\u01e9")
        buf.write("\t\2\2\2\u01e8\u01e7\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea")
        buf.write("\u01e8\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ed\3\2\2\2")
        buf.write("\u01ec\u01c3\3\2\2\2\u01ec\u01d4\3\2\2\2\u01ec\u01e6\3")
        buf.write("\2\2\2\u01ed\u01f0\3\2\2\2\u01ee\u01ec\3\2\2\2\u01ee\u01ef")
        buf.write("\3\2\2\2\u01ef\u01fc\3\2\2\2\u01f0\u01ee\3\2\2\2\u01f1")
        buf.write("\u01f5\5&\24\2\u01f2\u01f4\t\2\2\2\u01f3\u01f2\3\2\2\2")
        buf.write("\u01f4\u01f7\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f5\u01f6\3")
        buf.write("\2\2\2\u01f6\u01f9\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f8\u01fa")
        buf.write("\7\3\2\2\u01f9\u01f8\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa")
        buf.write("\u01fd\3\2\2\2\u01fb\u01fd\5\6\4\2\u01fc\u01f1\3\2\2\2")
        buf.write("\u01fc\u01fb\3\2\2\2\u01fd\u01ff\3\2\2\2\u01fe\u0200\t")
        buf.write("\2\2\2\u01ff\u01fe\3\2\2\2\u0200\u0201\3\2\2\2\u0201\u01ff")
        buf.write("\3\2\2\2\u0201\u0202\3\2\2\2\u0202\u0204\3\2\2\2\u0203")
        buf.write("\u01ee\3\2\2\2\u0203\u0204\3\2\2\2\u0204\u0205\3\2\2\2")
        buf.write("\u0205\u0207\7\21\2\2\u0206\u0109\3\2\2\2\u0206\u0186")
        buf.write("\3\2\2\2\u0207\5\3\2\2\2\u0208\u020c\5\f\7\2\u0209\u020c")
        buf.write("\5\n\6\2\u020a\u020c\5\b\5\2\u020b\u0208\3\2\2\2\u020b")
        buf.write("\u0209\3\2\2\2\u020b\u020a\3\2\2\2\u020c\7\3\2\2\2\u020d")
        buf.write("\u020f\7\n\2\2\u020e\u0210\t\2\2\2\u020f\u020e\3\2\2\2")
        buf.write("\u0210\u0211\3\2\2\2\u0211\u020f\3\2\2\2\u0211\u0212\3")
        buf.write("\2\2\2\u0212\u0213\3\2\2\2\u0213\u0215\7\65\2\2\u0214")
        buf.write("\u0216\t\2\2\2\u0215\u0214\3\2\2\2\u0216\u0217\3\2\2\2")
        buf.write("\u0217\u0215\3\2\2\2\u0217\u0218\3\2\2\2\u0218\u0219\3")
        buf.write("\2\2\2\u0219\u021b\7\13\2\2\u021a\u021c\t\2\2\2\u021b")
        buf.write("\u021a\3\2\2\2\u021c\u021d\3\2\2\2\u021d\u021b\3\2\2\2")
        buf.write("\u021d\u021e\3\2\2\2\u021e\u0222\3\2\2\2\u021f\u0223\7")
        buf.write("\65\2\2\u0220\u0223\5Z.\2\u0221\u0223\5\\/\2\u0222\u021f")
        buf.write("\3\2\2\2\u0222\u0220\3\2\2\2\u0222\u0221\3\2\2\2\u0223")
        buf.write("\u0225\3\2\2\2\u0224\u0226\t\2\2\2\u0225\u0224\3\2\2\2")
        buf.write("\u0226\u0227\3\2\2\2\u0227\u0225\3\2\2\2\u0227\u0228\3")
        buf.write("\2\2\2\u0228\u0229\3\2\2\2\u0229\u022b\7\f\2\2\u022a\u022c")
        buf.write("\t\2\2\2\u022b\u022a\3\2\2\2\u022c\u022d\3\2\2\2\u022d")
        buf.write("\u022b\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u0271\3\2\2\2")
        buf.write("\u022f\u0233\5&\24\2\u0230\u0232\t\2\2\2\u0231\u0230\3")
        buf.write("\2\2\2\u0232\u0235\3\2\2\2\u0233\u0231\3\2\2\2\u0233\u0234")
        buf.write("\3\2\2\2\u0234\u0236\3\2\2\2\u0235\u0233\3\2\2\2\u0236")
        buf.write("\u023a\7\3\2\2\u0237\u0239\t\2\2\2\u0238\u0237\3\2\2\2")
        buf.write("\u0239\u023c\3\2\2\2\u023a\u0238\3\2\2\2\u023a\u023b\3")
        buf.write("\2\2\2\u023b\u0256\3\2\2\2\u023c\u023a\3\2\2\2\u023d\u024b")
        buf.write("\5&\24\2\u023e\u0240\7\67\2\2\u023f\u023e\3\2\2\2\u0240")
        buf.write("\u0243\3\2\2\2\u0241\u023f\3\2\2\2\u0241\u0242\3\2\2\2")
        buf.write("\u0242\u0244\3\2\2\2\u0243\u0241\3\2\2\2\u0244\u0248\7")
        buf.write("8\2\2\u0245\u0247\7\67\2\2\u0246\u0245\3\2\2\2\u0247\u024a")
        buf.write("\3\2\2\2\u0248\u0246\3\2\2\2\u0248\u0249\3\2\2\2\u0249")
        buf.write("\u024c\3\2\2\2\u024a\u0248\3\2\2\2\u024b\u0241\3\2\2\2")
        buf.write("\u024c\u024d\3\2\2\2\u024d\u024b\3\2\2\2\u024d\u024e\3")
        buf.write("\2\2\2\u024e\u0256\3\2\2\2\u024f\u0251\5\6\4\2\u0250\u0252")
        buf.write("\t\2\2\2\u0251\u0250\3\2\2\2\u0252\u0253\3\2\2\2\u0253")
        buf.write("\u0251\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u0256\3\2\2\2")
        buf.write("\u0255\u022f\3\2\2\2\u0255\u023d\3\2\2\2\u0255\u024f\3")
        buf.write("\2\2\2\u0256\u0259\3\2\2\2\u0257\u0255\3\2\2\2\u0257\u0258")
        buf.write("\3\2\2\2\u0258\u026f\3\2\2\2\u0259\u0257\3\2\2\2\u025a")
        buf.write("\u025e\5&\24\2\u025b\u025d\t\2\2\2\u025c\u025b\3\2\2\2")
        buf.write("\u025d\u0260\3\2\2\2\u025e\u025c\3\2\2\2\u025e\u025f\3")
        buf.write("\2\2\2\u025f\u0267\3\2\2\2\u0260\u025e\3\2\2\2\u0261\u0268")
        buf.write("\7\3\2\2\u0262\u0264\t\2\2\2\u0263\u0262\3\2\2\2\u0264")
        buf.write("\u0265\3\2\2\2\u0265\u0263\3\2\2\2\u0265\u0266\3\2\2\2")
        buf.write("\u0266\u0268\3\2\2\2\u0267\u0261\3\2\2\2\u0267\u0263\3")
        buf.write("\2\2\2\u0268\u0270\3\2\2\2\u0269\u026b\5\6\4\2\u026a\u026c")
        buf.write("\t\2\2\2\u026b\u026a\3\2\2\2\u026c\u026d\3\2\2\2\u026d")
        buf.write("\u026b\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u0270\3\2\2\2")
        buf.write("\u026f\u025a\3\2\2\2\u026f\u0269\3\2\2\2\u0270\u0272\3")
        buf.write("\2\2\2\u0271\u0257\3\2\2\2\u0271\u0272\3\2\2\2\u0272\u0273")
        buf.write("\3\2\2\2\u0273\u02df\7\21\2\2\u0274\u0276\7\n\2\2\u0275")
        buf.write("\u0277\t\2\2\2\u0276\u0275\3\2\2\2\u0277\u0278\3\2\2\2")
        buf.write("\u0278\u0276\3\2\2\2\u0278\u0279\3\2\2\2\u0279\u027a\3")
        buf.write("\2\2\2\u027a\u027c\7\65\2\2\u027b\u027d\t\2\2\2\u027c")
        buf.write("\u027b\3\2\2\2\u027d\u027e\3\2\2\2\u027e\u027c\3\2\2\2")
        buf.write("\u027e\u027f\3\2\2\2\u027f\u0280\3\2\2\2\u0280\u0282\7")
        buf.write("\13\2\2\u0281\u0283\t\2\2\2\u0282\u0281\3\2\2\2\u0283")
        buf.write("\u0284\3\2\2\2\u0284\u0282\3\2\2\2\u0284\u0285\3\2\2\2")
        buf.write("\u0285\u0289\3\2\2\2\u0286\u028a\7\65\2\2\u0287\u028a")
        buf.write("\5Z.\2\u0288\u028a\5\\/\2\u0289\u0286\3\2\2\2\u0289\u0287")
        buf.write("\3\2\2\2\u0289\u0288\3\2\2\2\u028a\u028c\3\2\2\2\u028b")
        buf.write("\u028d\t\2\2\2\u028c\u028b\3\2\2\2\u028d\u028e\3\2\2\2")
        buf.write("\u028e\u028c\3\2\2\2\u028e\u028f\3\2\2\2\u028f\u0290\3")
        buf.write("\2\2\2\u0290\u0292\7\f\2\2\u0291\u0293\t\2\2\2\u0292\u0291")
        buf.write("\3\2\2\2\u0293\u0294\3\2\2\2\u0294\u0292\3\2\2\2\u0294")
        buf.write("\u0295\3\2\2\2\u0295\u02db\3\2\2\2\u0296\u029a\5&\24\2")
        buf.write("\u0297\u0299\t\2\2\2\u0298\u0297\3\2\2\2\u0299\u029c\3")
        buf.write("\2\2\2\u029a\u0298\3\2\2\2\u029a\u029b\3\2\2\2\u029b\u029e")
        buf.write("\3\2\2\2\u029c\u029a\3\2\2\2\u029d\u029f\7\3\2\2\u029e")
        buf.write("\u029d\3\2\2\2\u029e\u029f\3\2\2\2\u029f\u02a0\3\2\2\2")
        buf.write("\u02a0\u02a4\b\5\1\2\u02a1\u02a3\t\2\2\2\u02a2\u02a1\3")
        buf.write("\2\2\2\u02a3\u02a6\3\2\2\2\u02a4\u02a2\3\2\2\2\u02a4\u02a5")
        buf.write("\3\2\2\2\u02a5\u02c0\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a7")
        buf.write("\u02b5\5&\24\2\u02a8\u02aa\7\67\2\2\u02a9\u02a8\3\2\2")
        buf.write("\2\u02aa\u02ad\3\2\2\2\u02ab\u02a9\3\2\2\2\u02ab\u02ac")
        buf.write("\3\2\2\2\u02ac\u02ae\3\2\2\2\u02ad\u02ab\3\2\2\2\u02ae")
        buf.write("\u02b2\78\2\2\u02af\u02b1\7\67\2\2\u02b0\u02af\3\2\2\2")
        buf.write("\u02b1\u02b4\3\2\2\2\u02b2\u02b0\3\2\2\2\u02b2\u02b3\3")
        buf.write("\2\2\2\u02b3\u02b6\3\2\2\2\u02b4\u02b2\3\2\2\2\u02b5\u02ab")
        buf.write("\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7\u02b5\3\2\2\2\u02b7")
        buf.write("\u02b8\3\2\2\2\u02b8\u02c0\3\2\2\2\u02b9\u02bb\5\6\4\2")
        buf.write("\u02ba\u02bc\t\2\2\2\u02bb\u02ba\3\2\2\2\u02bc\u02bd\3")
        buf.write("\2\2\2\u02bd\u02bb\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02c0")
        buf.write("\3\2\2\2\u02bf\u0296\3\2\2\2\u02bf\u02a7\3\2\2\2\u02bf")
        buf.write("\u02b9\3\2\2\2\u02c0\u02c3\3\2\2\2\u02c1\u02bf\3\2\2\2")
        buf.write("\u02c1\u02c2\3\2\2\2\u02c2\u02d9\3\2\2\2\u02c3\u02c1\3")
        buf.write("\2\2\2\u02c4\u02c8\5&\24\2\u02c5\u02c7\t\2\2\2\u02c6\u02c5")
        buf.write("\3\2\2\2\u02c7\u02ca\3\2\2\2\u02c8\u02c6\3\2\2\2\u02c8")
        buf.write("\u02c9\3\2\2\2\u02c9\u02d1\3\2\2\2\u02ca\u02c8\3\2\2\2")
        buf.write("\u02cb\u02d2\7\3\2\2\u02cc\u02ce\t\2\2\2\u02cd\u02cc\3")
        buf.write("\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02cd\3\2\2\2\u02cf\u02d0")
        buf.write("\3\2\2\2\u02d0\u02d2\3\2\2\2\u02d1\u02cb\3\2\2\2\u02d1")
        buf.write("\u02cd\3\2\2\2\u02d2\u02da\3\2\2\2\u02d3\u02d5\5\6\4\2")
        buf.write("\u02d4\u02d6\t\2\2\2\u02d5\u02d4\3\2\2\2\u02d6\u02d7\3")
        buf.write("\2\2\2\u02d7\u02d5\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8\u02da")
        buf.write("\3\2\2\2\u02d9\u02c4\3\2\2\2\u02d9\u02d3\3\2\2\2\u02da")
        buf.write("\u02dc\3\2\2\2\u02db\u02c1\3\2\2\2\u02db\u02dc\3\2\2\2")
        buf.write("\u02dc\u02dd\3\2\2\2\u02dd\u02df\7\21\2\2\u02de\u020d")
        buf.write("\3\2\2\2\u02de\u0274\3\2\2\2\u02df\t\3\2\2\2\u02e0\u02e2")
        buf.write("\7\t\2\2\u02e1\u02e3\t\2\2\2\u02e2\u02e1\3\2\2\2\u02e3")
        buf.write("\u02e4\3\2\2\2\u02e4\u02e2\3\2\2\2\u02e4\u02e5\3\2\2\2")
        buf.write("\u02e5\u02e6\3\2\2\2\u02e6\u02e8\5\26\f\2\u02e7\u02e9")
        buf.write("\t\2\2\2\u02e8\u02e7\3\2\2\2\u02e9\u02ea\3\2\2\2\u02ea")
        buf.write("\u02e8\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02ec\3\2\2\2")
        buf.write("\u02ec\u02ee\7\f\2\2\u02ed\u02ef\t\2\2\2\u02ee\u02ed\3")
        buf.write("\2\2\2\u02ef\u02f0\3\2\2\2\u02f0\u02ee\3\2\2\2\u02f0\u02f1")
        buf.write("\3\2\2\2\u02f1\u0334\3\2\2\2\u02f2\u02f6\5&\24\2\u02f3")
        buf.write("\u02f5\t\2\2\2\u02f4\u02f3\3\2\2\2\u02f5\u02f8\3\2\2\2")
        buf.write("\u02f6\u02f4\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\u02f9\3")
        buf.write("\2\2\2\u02f8\u02f6\3\2\2\2\u02f9\u02fd\7\3\2\2\u02fa\u02fc")
        buf.write("\t\2\2\2\u02fb\u02fa\3\2\2\2\u02fc\u02ff\3\2\2\2\u02fd")
        buf.write("\u02fb\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\u0319\3\2\2\2")
        buf.write("\u02ff\u02fd\3\2\2\2\u0300\u030e\5&\24\2\u0301\u0303\7")
        buf.write("\67\2\2\u0302\u0301\3\2\2\2\u0303\u0306\3\2\2\2\u0304")
        buf.write("\u0302\3\2\2\2\u0304\u0305\3\2\2\2\u0305\u0307\3\2\2\2")
        buf.write("\u0306\u0304\3\2\2\2\u0307\u030b\78\2\2\u0308\u030a\7")
        buf.write("\67\2\2\u0309\u0308\3\2\2\2\u030a\u030d\3\2\2\2\u030b")
        buf.write("\u0309\3\2\2\2\u030b\u030c\3\2\2\2\u030c\u030f\3\2\2\2")
        buf.write("\u030d\u030b\3\2\2\2\u030e\u0304\3\2\2\2\u030f\u0310\3")
        buf.write("\2\2\2\u0310\u030e\3\2\2\2\u0310\u0311\3\2\2\2\u0311\u0319")
        buf.write("\3\2\2\2\u0312\u0314\5\6\4\2\u0313\u0315\t\2\2\2\u0314")
        buf.write("\u0313\3\2\2\2\u0315\u0316\3\2\2\2\u0316\u0314\3\2\2\2")
        buf.write("\u0316\u0317\3\2\2\2\u0317\u0319\3\2\2\2\u0318\u02f2\3")
        buf.write("\2\2\2\u0318\u0300\3\2\2\2\u0318\u0312\3\2\2\2\u0319\u031c")
        buf.write("\3\2\2\2\u031a\u0318\3\2\2\2\u031a\u031b\3\2\2\2\u031b")
        buf.write("\u0332\3\2\2\2\u031c\u031a\3\2\2\2\u031d\u0321\5&\24\2")
        buf.write("\u031e\u0320\t\2\2\2\u031f\u031e\3\2\2\2\u0320\u0323\3")
        buf.write("\2\2\2\u0321\u031f\3\2\2\2\u0321\u0322\3\2\2\2\u0322\u032a")
        buf.write("\3\2\2\2\u0323\u0321\3\2\2\2\u0324\u032b\7\3\2\2\u0325")
        buf.write("\u0327\t\2\2\2\u0326\u0325\3\2\2\2\u0327\u0328\3\2\2\2")
        buf.write("\u0328\u0326\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u032b\3")
        buf.write("\2\2\2\u032a\u0324\3\2\2\2\u032a\u0326\3\2\2\2\u032b\u0333")
        buf.write("\3\2\2\2\u032c\u032e\5\6\4\2\u032d\u032f\t\2\2\2\u032e")
        buf.write("\u032d\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u032e\3\2\2\2")
        buf.write("\u0330\u0331\3\2\2\2\u0331\u0333\3\2\2\2\u0332\u031d\3")
        buf.write("\2\2\2\u0332\u032c\3\2\2\2\u0333\u0335\3\2\2\2\u0334\u031a")
        buf.write("\3\2\2\2\u0334\u0335\3\2\2\2\u0335\u0336\3\2\2\2\u0336")
        buf.write("\u0337\7\21\2\2\u0337\u0394\3\2\2\2\u0338\u033a\7\t\2")
        buf.write("\2\u0339\u033b\t\2\2\2\u033a\u0339\3\2\2\2\u033b\u033c")
        buf.write("\3\2\2\2\u033c\u033a\3\2\2\2\u033c\u033d\3\2\2\2\u033d")
        buf.write("\u033e\3\2\2\2\u033e\u0340\5\26\f\2\u033f\u0341\t\2\2")
        buf.write("\2\u0340\u033f\3\2\2\2\u0341\u0342\3\2\2\2\u0342\u0340")
        buf.write("\3\2\2\2\u0342\u0343\3\2\2\2\u0343\u0344\3\2\2\2\u0344")
        buf.write("\u0346\7\f\2\2\u0345\u0347\t\2\2\2\u0346\u0345\3\2\2\2")
        buf.write("\u0347\u0348\3\2\2\2\u0348\u0346\3\2\2\2\u0348\u0349\3")
        buf.write("\2\2\2\u0349\u038f\3\2\2\2\u034a\u034e\5&\24\2\u034b\u034d")
        buf.write("\t\2\2\2\u034c\u034b\3\2\2\2\u034d\u0350\3\2\2\2\u034e")
        buf.write("\u034c\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0352\3\2\2\2")
        buf.write("\u0350\u034e\3\2\2\2\u0351\u0353\7\3\2\2\u0352\u0351\3")
        buf.write("\2\2\2\u0352\u0353\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0358")
        buf.write("\b\6\1\2\u0355\u0357\t\2\2\2\u0356\u0355\3\2\2\2\u0357")
        buf.write("\u035a\3\2\2\2\u0358\u0356\3\2\2\2\u0358\u0359\3\2\2\2")
        buf.write("\u0359\u0374\3\2\2\2\u035a\u0358\3\2\2\2\u035b\u0369\5")
        buf.write("&\24\2\u035c\u035e\7\67\2\2\u035d\u035c\3\2\2\2\u035e")
        buf.write("\u0361\3\2\2\2\u035f\u035d\3\2\2\2\u035f\u0360\3\2\2\2")
        buf.write("\u0360\u0362\3\2\2\2\u0361\u035f\3\2\2\2\u0362\u0366\7")
        buf.write("8\2\2\u0363\u0365\7\67\2\2\u0364\u0363\3\2\2\2\u0365\u0368")
        buf.write("\3\2\2\2\u0366\u0364\3\2\2\2\u0366\u0367\3\2\2\2\u0367")
        buf.write("\u036a\3\2\2\2\u0368\u0366\3\2\2\2\u0369\u035f\3\2\2\2")
        buf.write("\u036a\u036b\3\2\2\2\u036b\u0369\3\2\2\2\u036b\u036c\3")
        buf.write("\2\2\2\u036c\u0374\3\2\2\2\u036d\u036f\5\6\4\2\u036e\u0370")
        buf.write("\t\2\2\2\u036f\u036e\3\2\2\2\u0370\u0371\3\2\2\2\u0371")
        buf.write("\u036f\3\2\2\2\u0371\u0372\3\2\2\2\u0372\u0374\3\2\2\2")
        buf.write("\u0373\u034a\3\2\2\2\u0373\u035b\3\2\2\2\u0373\u036d\3")
        buf.write("\2\2\2\u0374\u0377\3\2\2\2\u0375\u0373\3\2\2\2\u0375\u0376")
        buf.write("\3\2\2\2\u0376\u038d\3\2\2\2\u0377\u0375\3\2\2\2\u0378")
        buf.write("\u037c\5&\24\2\u0379\u037b\t\2\2\2\u037a\u0379\3\2\2\2")
        buf.write("\u037b\u037e\3\2\2\2\u037c\u037a\3\2\2\2\u037c\u037d\3")
        buf.write("\2\2\2\u037d\u0385\3\2\2\2\u037e\u037c\3\2\2\2\u037f\u0386")
        buf.write("\7\3\2\2\u0380\u0382\t\2\2\2\u0381\u0380\3\2\2\2\u0382")
        buf.write("\u0383\3\2\2\2\u0383\u0381\3\2\2\2\u0383\u0384\3\2\2\2")
        buf.write("\u0384\u0386\3\2\2\2\u0385\u037f\3\2\2\2\u0385\u0381\3")
        buf.write("\2\2\2\u0386\u038e\3\2\2\2\u0387\u0389\5\6\4\2\u0388\u038a")
        buf.write("\t\2\2\2\u0389\u0388\3\2\2\2\u038a\u038b\3\2\2\2\u038b")
        buf.write("\u0389\3\2\2\2\u038b\u038c\3\2\2\2\u038c\u038e\3\2\2\2")
        buf.write("\u038d\u0378\3\2\2\2\u038d\u0387\3\2\2\2\u038e\u0390\3")
        buf.write("\2\2\2\u038f\u0375\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0391")
        buf.write("\3\2\2\2\u0391\u0392\7\21\2\2\u0392\u0394\3\2\2\2\u0393")
        buf.write("\u02e0\3\2\2\2\u0393\u0338\3\2\2\2\u0394\13\3\2\2\2\u0395")
        buf.write("\u0396\5\16\b\2\u0396\u039a\5\20\t\2\u0397\u0399\5\22")
        buf.write("\n\2\u0398\u0397\3\2\2\2\u0399\u039c\3\2\2\2\u039a\u0398")
        buf.write("\3\2\2\2\u039a\u039b\3\2\2\2\u039b\u039e\3\2\2\2\u039c")
        buf.write("\u039a\3\2\2\2\u039d\u039f\5\24\13\2\u039e\u039d\3\2\2")
        buf.write("\2\u039e\u039f\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a1")
        buf.write("\7\21\2\2\u03a1\u03b0\3\2\2\2\u03a2\u03a3\5\16\b\2\u03a3")
        buf.write("\u03a7\5\20\t\2\u03a4\u03a6\5\22\n\2\u03a5\u03a4\3\2\2")
        buf.write("\2\u03a6\u03a9\3\2\2\2\u03a7\u03a5\3\2\2\2\u03a7\u03a8")
        buf.write("\3\2\2\2\u03a8\u03ab\3\2\2\2\u03a9\u03a7\3\2\2\2\u03aa")
        buf.write("\u03ac\5\24\13\2\u03ab\u03aa\3\2\2\2\u03ab\u03ac\3\2\2")
        buf.write("\2\u03ac\u03ad\3\2\2\2\u03ad\u03ae\b\7\1\2\u03ae\u03b0")
        buf.write("\3\2\2\2\u03af\u0395\3\2\2\2\u03af\u03a2\3\2\2\2\u03b0")
        buf.write("\r\3\2\2\2\u03b1\u03b3\7\r\2\2\u03b2\u03b4\t\2\2\2\u03b3")
        buf.write("\u03b2\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5\u03b3\3\2\2\2")
        buf.write("\u03b5\u03b6\3\2\2\2\u03b6\u03b7\3\2\2\2\u03b7\u03b9\5")
        buf.write("\26\f\2\u03b8\u03ba\t\2\2\2\u03b9\u03b8\3\2\2\2\u03ba")
        buf.write("\u03bb\3\2\2\2\u03bb\u03b9\3\2\2\2\u03bb\u03bc\3\2\2\2")
        buf.write("\u03bc\17\3\2\2\2\u03bd\u03bf\7\16\2\2\u03be\u03c0\t\2")
        buf.write("\2\2\u03bf\u03be\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03bf")
        buf.write("\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u0405\3\2\2\2\u03c3")
        buf.write("\u03c7\5&\24\2\u03c4\u03c6\t\2\2\2\u03c5\u03c4\3\2\2\2")
        buf.write("\u03c6\u03c9\3\2\2\2\u03c7\u03c5\3\2\2\2\u03c7\u03c8\3")
        buf.write("\2\2\2\u03c8\u03ca\3\2\2\2\u03c9\u03c7\3\2\2\2\u03ca\u03ce")
        buf.write("\7\3\2\2\u03cb\u03cd\t\2\2\2\u03cc\u03cb\3\2\2\2\u03cd")
        buf.write("\u03d0\3\2\2\2\u03ce\u03cc\3\2\2\2\u03ce\u03cf\3\2\2\2")
        buf.write("\u03cf\u03ea\3\2\2\2\u03d0\u03ce\3\2\2\2\u03d1\u03df\5")
        buf.write("&\24\2\u03d2\u03d4\7\67\2\2\u03d3\u03d2\3\2\2\2\u03d4")
        buf.write("\u03d7\3\2\2\2\u03d5\u03d3\3\2\2\2\u03d5\u03d6\3\2\2\2")
        buf.write("\u03d6\u03d8\3\2\2\2\u03d7\u03d5\3\2\2\2\u03d8\u03dc\7")
        buf.write("8\2\2\u03d9\u03db\7\67\2\2\u03da\u03d9\3\2\2\2\u03db\u03de")
        buf.write("\3\2\2\2\u03dc\u03da\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd")
        buf.write("\u03e0\3\2\2\2\u03de\u03dc\3\2\2\2\u03df\u03d5\3\2\2\2")
        buf.write("\u03e0\u03e1\3\2\2\2\u03e1\u03df\3\2\2\2\u03e1\u03e2\3")
        buf.write("\2\2\2\u03e2\u03ea\3\2\2\2\u03e3\u03e5\5\6\4\2\u03e4\u03e6")
        buf.write("\t\2\2\2\u03e5\u03e4\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7")
        buf.write("\u03e5\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03ea\3\2\2\2")
        buf.write("\u03e9\u03c3\3\2\2\2\u03e9\u03d1\3\2\2\2\u03e9\u03e3\3")
        buf.write("\2\2\2\u03ea\u03ed\3\2\2\2\u03eb\u03e9\3\2\2\2\u03eb\u03ec")
        buf.write("\3\2\2\2\u03ec\u0403\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ee")
        buf.write("\u03f2\5&\24\2\u03ef\u03f1\t\2\2\2\u03f0\u03ef\3\2\2\2")
        buf.write("\u03f1\u03f4\3\2\2\2\u03f2\u03f0\3\2\2\2\u03f2\u03f3\3")
        buf.write("\2\2\2\u03f3\u03fb\3\2\2\2\u03f4\u03f2\3\2\2\2\u03f5\u03fc")
        buf.write("\7\3\2\2\u03f6\u03f8\t\2\2\2\u03f7\u03f6\3\2\2\2\u03f8")
        buf.write("\u03f9\3\2\2\2\u03f9\u03f7\3\2\2\2\u03f9\u03fa\3\2\2\2")
        buf.write("\u03fa\u03fc\3\2\2\2\u03fb\u03f5\3\2\2\2\u03fb\u03f7\3")
        buf.write("\2\2\2\u03fc\u0404\3\2\2\2\u03fd\u03ff\5\6\4\2\u03fe\u0400")
        buf.write("\t\2\2\2\u03ff\u03fe\3\2\2\2\u0400\u0401\3\2\2\2\u0401")
        buf.write("\u03ff\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u0404\3\2\2\2")
        buf.write("\u0403\u03ee\3\2\2\2\u0403\u03fd\3\2\2\2\u0404\u0406\3")
        buf.write("\2\2\2\u0405\u03eb\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0455")
        buf.write("\3\2\2\2\u0407\u0409\7\16\2\2\u0408\u040a\t\2\2\2\u0409")
        buf.write("\u0408\3\2\2\2\u040a\u040b\3\2\2\2\u040b\u0409\3\2\2\2")
        buf.write("\u040b\u040c\3\2\2\2\u040c\u0452\3\2\2\2\u040d\u0411\5")
        buf.write("&\24\2\u040e\u0410\t\2\2\2\u040f\u040e\3\2\2\2\u0410\u0413")
        buf.write("\3\2\2\2\u0411\u040f\3\2\2\2\u0411\u0412\3\2\2\2\u0412")
        buf.write("\u0415\3\2\2\2\u0413\u0411\3\2\2\2\u0414\u0416\7\3\2\2")
        buf.write("\u0415\u0414\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u0417\3")
        buf.write("\2\2\2\u0417\u041b\b\t\1\2\u0418\u041a\t\2\2\2\u0419\u0418")
        buf.write("\3\2\2\2\u041a\u041d\3\2\2\2\u041b\u0419\3\2\2\2\u041b")
        buf.write("\u041c\3\2\2\2\u041c\u0437\3\2\2\2\u041d\u041b\3\2\2\2")
        buf.write("\u041e\u042c\5&\24\2\u041f\u0421\7\67\2\2\u0420\u041f")
        buf.write("\3\2\2\2\u0421\u0424\3\2\2\2\u0422\u0420\3\2\2\2\u0422")
        buf.write("\u0423\3\2\2\2\u0423\u0425\3\2\2\2\u0424\u0422\3\2\2\2")
        buf.write("\u0425\u0429\78\2\2\u0426\u0428\7\67\2\2\u0427\u0426\3")
        buf.write("\2\2\2\u0428\u042b\3\2\2\2\u0429\u0427\3\2\2\2\u0429\u042a")
        buf.write("\3\2\2\2\u042a\u042d\3\2\2\2\u042b\u0429\3\2\2\2\u042c")
        buf.write("\u0422\3\2\2\2\u042d\u042e\3\2\2\2\u042e\u042c\3\2\2\2")
        buf.write("\u042e\u042f\3\2\2\2\u042f\u0437\3\2\2\2\u0430\u0432\5")
        buf.write("\6\4\2\u0431\u0433\t\2\2\2\u0432\u0431\3\2\2\2\u0433\u0434")
        buf.write("\3\2\2\2\u0434\u0432\3\2\2\2\u0434\u0435\3\2\2\2\u0435")
        buf.write("\u0437\3\2\2\2\u0436\u040d\3\2\2\2\u0436\u041e\3\2\2\2")
        buf.write("\u0436\u0430\3\2\2\2\u0437\u043a\3\2\2\2\u0438\u0436\3")
        buf.write("\2\2\2\u0438\u0439\3\2\2\2\u0439\u0450\3\2\2\2\u043a\u0438")
        buf.write("\3\2\2\2\u043b\u043f\5&\24\2\u043c\u043e\t\2\2\2\u043d")
        buf.write("\u043c\3\2\2\2\u043e\u0441\3\2\2\2\u043f\u043d\3\2\2\2")
        buf.write("\u043f\u0440\3\2\2\2\u0440\u0448\3\2\2\2\u0441\u043f\3")
        buf.write("\2\2\2\u0442\u0449\7\3\2\2\u0443\u0445\t\2\2\2\u0444\u0443")
        buf.write("\3\2\2\2\u0445\u0446\3\2\2\2\u0446\u0444\3\2\2\2\u0446")
        buf.write("\u0447\3\2\2\2\u0447\u0449\3\2\2\2\u0448\u0442\3\2\2\2")
        buf.write("\u0448\u0444\3\2\2\2\u0449\u0451\3\2\2\2\u044a\u044c\5")
        buf.write("\6\4\2\u044b\u044d\t\2\2\2\u044c\u044b\3\2\2\2\u044d\u044e")
        buf.write("\3\2\2\2\u044e\u044c\3\2\2\2\u044e\u044f\3\2\2\2\u044f")
        buf.write("\u0451\3\2\2\2\u0450\u043b\3\2\2\2\u0450\u044a\3\2\2\2")
        buf.write("\u0451\u0453\3\2\2\2\u0452\u0438\3\2\2\2\u0452\u0453\3")
        buf.write("\2\2\2\u0453\u0455\3\2\2\2\u0454\u03bd\3\2\2\2\u0454\u0407")
        buf.write("\3\2\2\2\u0455\21\3\2\2\2\u0456\u0458\7\17\2\2\u0457\u0459")
        buf.write("\t\2\2\2\u0458\u0457\3\2\2\2\u0459\u045a\3\2\2\2\u045a")
        buf.write("\u0458\3\2\2\2\u045a\u045b\3\2\2\2\u045b\u045c\3\2\2\2")
        buf.write("\u045c\u045d\5\16\b\2\u045d\u045e\5\20\t\2\u045e\23\3")
        buf.write("\2\2\2\u045f\u0461\7\17\2\2\u0460\u0462\t\2\2\2\u0461")
        buf.write("\u0460\3\2\2\2\u0462\u0463\3\2\2\2\u0463\u0461\3\2\2\2")
        buf.write("\u0463\u0464\3\2\2\2\u0464\u04a7\3\2\2\2\u0465\u0469\5")
        buf.write("&\24\2\u0466\u0468\t\2\2\2\u0467\u0466\3\2\2\2\u0468\u046b")
        buf.write("\3\2\2\2\u0469\u0467\3\2\2\2\u0469\u046a\3\2\2\2\u046a")
        buf.write("\u046c\3\2\2\2\u046b\u0469\3\2\2\2\u046c\u0470\7\3\2\2")
        buf.write("\u046d\u046f\t\2\2\2\u046e\u046d\3\2\2\2\u046f\u0472\3")
        buf.write("\2\2\2\u0470\u046e\3\2\2\2\u0470\u0471\3\2\2\2\u0471\u048c")
        buf.write("\3\2\2\2\u0472\u0470\3\2\2\2\u0473\u0481\5&\24\2\u0474")
        buf.write("\u0476\7\67\2\2\u0475\u0474\3\2\2\2\u0476\u0479\3\2\2")
        buf.write("\2\u0477\u0475\3\2\2\2\u0477\u0478\3\2\2\2\u0478\u047a")
        buf.write("\3\2\2\2\u0479\u0477\3\2\2\2\u047a\u047e\78\2\2\u047b")
        buf.write("\u047d\7\67\2\2\u047c\u047b\3\2\2\2\u047d\u0480\3\2\2")
        buf.write("\2\u047e\u047c\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0482")
        buf.write("\3\2\2\2\u0480\u047e\3\2\2\2\u0481\u0477\3\2\2\2\u0482")
        buf.write("\u0483\3\2\2\2\u0483\u0481\3\2\2\2\u0483\u0484\3\2\2\2")
        buf.write("\u0484\u048c\3\2\2\2\u0485\u0487\5\6\4\2\u0486\u0488\t")
        buf.write("\2\2\2\u0487\u0486\3\2\2\2\u0488\u0489\3\2\2\2\u0489\u0487")
        buf.write("\3\2\2\2\u0489\u048a\3\2\2\2\u048a\u048c\3\2\2\2\u048b")
        buf.write("\u0465\3\2\2\2\u048b\u0473\3\2\2\2\u048b\u0485\3\2\2\2")
        buf.write("\u048c\u048f\3\2\2\2\u048d\u048b\3\2\2\2\u048d\u048e\3")
        buf.write("\2\2\2\u048e\u04a5\3\2\2\2\u048f\u048d\3\2\2\2\u0490\u0494")
        buf.write("\5&\24\2\u0491\u0493\t\2\2\2\u0492\u0491\3\2\2\2\u0493")
        buf.write("\u0496\3\2\2\2\u0494\u0492\3\2\2\2\u0494\u0495\3\2\2\2")
        buf.write("\u0495\u049d\3\2\2\2\u0496\u0494\3\2\2\2\u0497\u049e\7")
        buf.write("\3\2\2\u0498\u049a\t\2\2\2\u0499\u0498\3\2\2\2\u049a\u049b")
        buf.write("\3\2\2\2\u049b\u0499\3\2\2\2\u049b\u049c\3\2\2\2\u049c")
        buf.write("\u049e\3\2\2\2\u049d\u0497\3\2\2\2\u049d\u0499\3\2\2\2")
        buf.write("\u049e\u04a6\3\2\2\2\u049f\u04a1\5\6\4\2\u04a0\u04a2\t")
        buf.write("\2\2\2\u04a1\u04a0\3\2\2\2\u04a2\u04a3\3\2\2\2\u04a3\u04a1")
        buf.write("\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a6\3\2\2\2\u04a5")
        buf.write("\u0490\3\2\2\2\u04a5\u049f\3\2\2\2\u04a6\u04a8\3\2\2\2")
        buf.write("\u04a7\u048d\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\25\3\2")
        buf.write("\2\2\u04a9\u04b6\5\30\r\2\u04aa\u04ac\t\2\2\2\u04ab\u04aa")
        buf.write("\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad\u04ab\3\2\2\2\u04ad")
        buf.write("\u04ae\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04b1\7\61\2")
        buf.write("\2\u04b0\u04b2\t\2\2\2\u04b1\u04b0\3\2\2\2\u04b2\u04b3")
        buf.write("\3\2\2\2\u04b3\u04b1\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4")
        buf.write("\u04b5\3\2\2\2\u04b5\u04b7\5\26\f\2\u04b6\u04ab\3\2\2")
        buf.write("\2\u04b6\u04b7\3\2\2\2\u04b7\27\3\2\2\2\u04b8\u04ba\7")
        buf.write("\62\2\2\u04b9\u04bb\t\2\2\2\u04ba\u04b9\3\2\2\2\u04bb")
        buf.write("\u04bc\3\2\2\2\u04bc\u04ba\3\2\2\2\u04bc\u04bd\3\2\2\2")
        buf.write("\u04bd\u04be\3\2\2\2\u04be\u04d1\5\30\r\2\u04bf\u04c3")
        buf.write("\7+\2\2\u04c0\u04c2\t\2\2\2\u04c1\u04c0\3\2\2\2\u04c2")
        buf.write("\u04c5\3\2\2\2\u04c3\u04c1\3\2\2\2\u04c3\u04c4\3\2\2\2")
        buf.write("\u04c4\u04c6\3\2\2\2\u04c5\u04c3\3\2\2\2\u04c6\u04ca\5")
        buf.write("\26\f\2\u04c7\u04c9\t\2\2\2\u04c8\u04c7\3\2\2\2\u04c9")
        buf.write("\u04cc\3\2\2\2\u04ca\u04c8\3\2\2\2\u04ca\u04cb\3\2\2\2")
        buf.write("\u04cb\u04cd\3\2\2\2\u04cc\u04ca\3\2\2\2\u04cd\u04ce\7")
        buf.write(",\2\2\u04ce\u04d1\3\2\2\2\u04cf\u04d1\5\32\16\2\u04d0")
        buf.write("\u04b8\3\2\2\2\u04d0\u04bf\3\2\2\2\u04d0\u04cf\3\2\2\2")
        buf.write("\u04d1\31\3\2\2\2\u04d2\u04d6\5$\23\2\u04d3\u04d6\7\63")
        buf.write("\2\2\u04d4\u04d6\5\34\17\2\u04d5\u04d2\3\2\2\2\u04d5\u04d3")
        buf.write("\3\2\2\2\u04d5\u04d4\3\2\2\2\u04d6\33\3\2\2\2\u04d7\u04db")
        buf.write("\5\36\20\2\u04d8\u04da\t\2\2\2\u04d9\u04d8\3\2\2\2\u04da")
        buf.write("\u04dd\3\2\2\2\u04db\u04d9\3\2\2\2\u04db\u04dc\3\2\2\2")
        buf.write("\u04dc\u04de\3\2\2\2\u04dd\u04db\3\2\2\2\u04de\u04e2\7")
        buf.write(".\2\2\u04df\u04e1\t\2\2\2\u04e0\u04df\3\2\2\2\u04e1\u04e4")
        buf.write("\3\2\2\2\u04e2\u04e0\3\2\2\2\u04e2\u04e3\3\2\2\2\u04e3")
        buf.write("\u04e5\3\2\2\2\u04e4\u04e2\3\2\2\2\u04e5\u04e6\5\36\20")
        buf.write("\2\u04e6\35\3\2\2\2\u04e7\u04f1\5$\23\2\u04e8\u04f1\7")
        buf.write("\64\2\2\u04e9\u04f1\7\66\2\2\u04ea\u04f1\7\65\2\2\u04eb")
        buf.write("\u04f1\7\63\2\2\u04ec\u04f1\5 \21\2\u04ed\u04f1\5\\/\2")
        buf.write("\u04ee\u04f1\5,\27\2\u04ef\u04f1\5\"\22\2\u04f0\u04e7")
        buf.write("\3\2\2\2\u04f0\u04e8\3\2\2\2\u04f0\u04e9\3\2\2\2\u04f0")
        buf.write("\u04ea\3\2\2\2\u04f0\u04eb\3\2\2\2\u04f0\u04ec\3\2\2\2")
        buf.write("\u04f0\u04ed\3\2\2\2\u04f0\u04ee\3\2\2\2\u04f0\u04ef\3")
        buf.write("\2\2\2\u04f1\37\3\2\2\2\u04f2\u0501\5^\60\2\u04f3\u04f5")
        buf.write("\t\2\2\2\u04f4\u04f3\3\2\2\2\u04f5\u04f8\3\2\2\2\u04f6")
        buf.write("\u04f4\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7\u04f9\3\2\2\2")
        buf.write("\u04f8\u04f6\3\2\2\2\u04f9\u04fd\7/\2\2\u04fa\u04fc\t")
        buf.write("\2\2\2\u04fb\u04fa\3\2\2\2\u04fc\u04ff\3\2\2\2\u04fd\u04fb")
        buf.write("\3\2\2\2\u04fd\u04fe\3\2\2\2\u04fe\u0500\3\2\2\2\u04ff")
        buf.write("\u04fd\3\2\2\2\u0500\u0502\5^\60\2\u0501\u04f6\3\2\2\2")
        buf.write("\u0502\u0503\3\2\2\2\u0503\u0501\3\2\2\2\u0503\u0504\3")
        buf.write("\2\2\2\u0504!\3\2\2\2\u0505\u0514\5^\60\2\u0506\u0508")
        buf.write("\t\2\2\2\u0507\u0506\3\2\2\2\u0508\u050b\3\2\2\2\u0509")
        buf.write("\u0507\3\2\2\2\u0509\u050a\3\2\2\2\u050a\u050c\3\2\2\2")
        buf.write("\u050b\u0509\3\2\2\2\u050c\u0510\7\60\2\2\u050d\u050f")
        buf.write("\t\2\2\2\u050e\u050d\3\2\2\2\u050f\u0512\3\2\2\2\u0510")
        buf.write("\u050e\3\2\2\2\u0510\u0511\3\2\2\2\u0511\u0513\3\2\2\2")
        buf.write("\u0512\u0510\3\2\2\2\u0513\u0515\5^\60\2\u0514\u0509\3")
        buf.write("\2\2\2\u0515\u0516\3\2\2\2\u0516\u0514\3\2\2\2\u0516\u0517")
        buf.write("\3\2\2\2\u0517#\3\2\2\2\u0518\u0532\5\60\31\2\u0519\u0532")
        buf.write("\5\62\32\2\u051a\u0532\58\35\2\u051b\u0532\5:\36\2\u051c")
        buf.write("\u0532\5X-\2\u051d\u0532\5<\37\2\u051e\u0532\5> \2\u051f")
        buf.write("\u0532\5@!\2\u0520\u0532\5B\"\2\u0521\u0532\5D#\2\u0522")
        buf.write("\u0532\5F$\2\u0523\u0532\5H%\2\u0524\u0532\5J&\2\u0525")
        buf.write("\u0532\5L\'\2\u0526\u0532\5N(\2\u0527\u0532\5P)\2\u0528")
        buf.write("\u0532\5R*\2\u0529\u0532\5T+\2\u052a\u0532\5V,\2\u052b")
        buf.write("\u0532\5\66\34\2\u052c\u0532\5\64\33\2\u052d\u0532\7\37")
        buf.write("\2\2\u052e\u0532\7$\2\2\u052f\u0532\7%\2\2\u0530\u0532")
        buf.write("\5Z.\2\u0531\u0518\3\2\2\2\u0531\u0519\3\2\2\2\u0531\u051a")
        buf.write("\3\2\2\2\u0531\u051b\3\2\2\2\u0531\u051c\3\2\2\2\u0531")
        buf.write("\u051d\3\2\2\2\u0531\u051e\3\2\2\2\u0531\u051f\3\2\2\2")
        buf.write("\u0531\u0520\3\2\2\2\u0531\u0521\3\2\2\2\u0531\u0522\3")
        buf.write("\2\2\2\u0531\u0523\3\2\2\2\u0531\u0524\3\2\2\2\u0531\u0525")
        buf.write("\3\2\2\2\u0531\u0526\3\2\2\2\u0531\u0527\3\2\2\2\u0531")
        buf.write("\u0528\3\2\2\2\u0531\u0529\3\2\2\2\u0531\u052a\3\2\2\2")
        buf.write("\u0531\u052b\3\2\2\2\u0531\u052c\3\2\2\2\u0531\u052d\3")
        buf.write("\2\2\2\u0531\u052e\3\2\2\2\u0531\u052f\3\2\2\2\u0531\u0530")
        buf.write("\3\2\2\2\u0532%\3\2\2\2\u0533\u054e\5\60\31\2\u0534\u054e")
        buf.write("\5\62\32\2\u0535\u054e\58\35\2\u0536\u054e\5:\36\2\u0537")
        buf.write("\u054e\5X-\2\u0538\u054e\5<\37\2\u0539\u054e\5> \2\u053a")
        buf.write("\u054e\5@!\2\u053b\u054e\5B\"\2\u053c\u054e\5D#\2\u053d")
        buf.write("\u054e\5F$\2\u053e\u054e\5H%\2\u053f\u054e\5J&\2\u0540")
        buf.write("\u054e\5L\'\2\u0541\u054e\5N(\2\u0542\u054e\5P)\2\u0543")
        buf.write("\u054e\5R*\2\u0544\u054e\5T+\2\u0545\u054e\5*\26\2\u0546")
        buf.write("\u054e\5(\25\2\u0547\u054e\5\66\34\2\u0548\u054e\5\64")
        buf.write("\33\2\u0549\u054e\7\37\2\2\u054a\u054e\7$\2\2\u054b\u054e")
        buf.write("\7%\2\2\u054c\u054e\5Z.\2\u054d\u0533\3\2\2\2\u054d\u0534")
        buf.write("\3\2\2\2\u054d\u0535\3\2\2\2\u054d\u0536\3\2\2\2\u054d")
        buf.write("\u0537\3\2\2\2\u054d\u0538\3\2\2\2\u054d\u0539\3\2\2\2")
        buf.write("\u054d\u053a\3\2\2\2\u054d\u053b\3\2\2\2\u054d\u053c\3")
        buf.write("\2\2\2\u054d\u053d\3\2\2\2\u054d\u053e\3\2\2\2\u054d\u053f")
        buf.write("\3\2\2\2\u054d\u0540\3\2\2\2\u054d\u0541\3\2\2\2\u054d")
        buf.write("\u0542\3\2\2\2\u054d\u0543\3\2\2\2\u054d\u0544\3\2\2\2")
        buf.write("\u054d\u0545\3\2\2\2\u054d\u0546\3\2\2\2\u054d\u0547\3")
        buf.write("\2\2\2\u054d\u0548\3\2\2\2\u054d\u0549\3\2\2\2\u054d\u054a")
        buf.write("\3\2\2\2\u054d\u054b\3\2\2\2\u054d\u054c\3\2\2\2\u054e")
        buf.write("\'\3\2\2\2\u054f\u0552\7\65\2\2\u0550\u0552\5,\27\2\u0551")
        buf.write("\u054f\3\2\2\2\u0551\u0550\3\2\2\2\u0552\u0556\3\2\2\2")
        buf.write("\u0553\u0555\t\2\2\2\u0554\u0553\3\2\2\2\u0555\u0558\3")
        buf.write("\2\2\2\u0556\u0554\3\2\2\2\u0556\u0557\3\2\2\2\u0557\u0559")
        buf.write("\3\2\2\2\u0558\u0556\3\2\2\2\u0559\u055d\7\5\2\2\u055a")
        buf.write("\u055c\t\2\2\2\u055b\u055a\3\2\2\2\u055c\u055f\3\2\2\2")
        buf.write("\u055d\u055b\3\2\2\2\u055d\u055e\3\2\2\2\u055e\u0560\3")
        buf.write("\2\2\2\u055f\u055d\3\2\2\2\u0560\u056e\5\36\20\2\u0561")
        buf.write("\u0564\7\65\2\2\u0562\u0564\5,\27\2\u0563\u0561\3\2\2")
        buf.write("\2\u0563\u0562\3\2\2\2\u0564\u0568\3\2\2\2\u0565\u0567")
        buf.write("\t\2\2\2\u0566\u0565\3\2\2\2\u0567\u056a\3\2\2\2\u0568")
        buf.write("\u0566\3\2\2\2\u0568\u0569\3\2\2\2\u0569\u056b\3\2\2\2")
        buf.write("\u056a\u0568\3\2\2\2\u056b\u056c\7\5\2\2\u056c\u056e\b")
        buf.write("\25\1\2\u056d\u0551\3\2\2\2\u056d\u0563\3\2\2\2\u056e")
        buf.write(")\3\2\2\2\u056f\u0573\7\65\2\2\u0570\u0572\t\2\2\2\u0571")
        buf.write("\u0570\3\2\2\2\u0572\u0575\3\2\2\2\u0573\u0571\3\2\2\2")
        buf.write("\u0573\u0574\3\2\2\2\u0574\u0576\3\2\2\2\u0575\u0573\3")
        buf.write("\2\2\2\u0576\u057a\7-\2\2\u0577\u0579\t\2\2\2\u0578\u0577")
        buf.write("\3\2\2\2\u0579\u057c\3\2\2\2\u057a\u0578\3\2\2\2\u057a")
        buf.write("\u057b\3\2\2\2\u057b\u057d\3\2\2\2\u057c\u057a\3\2\2\2")
        buf.write("\u057d\u0581\5\36\20\2\u057e\u0580\t\2\2\2\u057f\u057e")
        buf.write("\3\2\2\2\u0580\u0583\3\2\2\2\u0581\u057f\3\2\2\2\u0581")
        buf.write("\u0582\3\2\2\2\u0582+\3\2\2\2\u0583\u0581\3\2\2\2\u0584")
        buf.write("\u0587\7\65\2\2\u0585\u0587\5Z.\2\u0586\u0584\3\2\2\2")
        buf.write("\u0586\u0585\3\2\2\2\u0587\u0588\3\2\2\2\u0588\u058c\7")
        buf.write("\6\2\2\u0589\u058b\t\2\2\2\u058a\u0589\3\2\2\2\u058b\u058e")
        buf.write("\3\2\2\2\u058c\u058a\3\2\2\2\u058c\u058d\3\2\2\2\u058d")
        buf.write("\u058f\3\2\2\2\u058e\u058c\3\2\2\2\u058f\u0593\5\36\20")
        buf.write("\2\u0590\u0592\t\2\2\2\u0591\u0590\3\2\2\2\u0592\u0595")
        buf.write("\3\2\2\2\u0593\u0591\3\2\2\2\u0593\u0594\3\2\2\2\u0594")
        buf.write("\u0596\3\2\2\2\u0595\u0593\3\2\2\2\u0596\u0597\7\7\2\2")
        buf.write("\u0597-\3\2\2\2\u0598\u059c\7\23\2\2\u0599\u059b\t\2\2")
        buf.write("\2\u059a\u0599\3\2\2\2\u059b\u059e\3\2\2\2\u059c\u059a")
        buf.write("\3\2\2\2\u059c\u059d\3\2\2\2\u059d\u059f\3\2\2\2\u059e")
        buf.write("\u059c\3\2\2\2\u059f\u05a0\7\65\2\2\u05a0/\3\2\2\2\u05a1")
        buf.write("\u05a5\7\65\2\2\u05a2\u05a4\t\2\2\2\u05a3\u05a2\3\2\2")
        buf.write("\2\u05a4\u05a7\3\2\2\2\u05a5\u05a3\3\2\2\2\u05a5\u05a6")
        buf.write("\3\2\2\2\u05a6\u05a8\3\2\2\2\u05a7\u05a5\3\2\2\2\u05a8")
        buf.write("\u05ac\7+\2\2\u05a9\u05ab\t\2\2\2\u05aa\u05a9\3\2\2\2")
        buf.write("\u05ab\u05ae\3\2\2\2\u05ac\u05aa\3\2\2\2\u05ac\u05ad\3")
        buf.write("\2\2\2\u05ad\u05c9\3\2\2\2\u05ae\u05ac\3\2\2\2\u05af\u05b3")
        buf.write("\5\36\20\2\u05b0\u05b2\t\2\2\2\u05b1\u05b0\3\2\2\2\u05b2")
        buf.write("\u05b5\3\2\2\2\u05b3\u05b1\3\2\2\2\u05b3\u05b4\3\2\2\2")
        buf.write("\u05b4\u05c6\3\2\2\2\u05b5\u05b3\3\2\2\2\u05b6\u05ba\7")
        buf.write("\4\2\2\u05b7\u05b9\t\2\2\2\u05b8\u05b7\3\2\2\2\u05b9\u05bc")
        buf.write("\3\2\2\2\u05ba\u05b8\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bb")
        buf.write("\u05bd\3\2\2\2\u05bc\u05ba\3\2\2\2\u05bd\u05c1\5\36\20")
        buf.write("\2\u05be\u05c0\t\2\2\2\u05bf\u05be\3\2\2\2\u05c0\u05c3")
        buf.write("\3\2\2\2\u05c1\u05bf\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2")
        buf.write("\u05c5\3\2\2\2\u05c3\u05c1\3\2\2\2\u05c4\u05b6\3\2\2\2")
        buf.write("\u05c5\u05c8\3\2\2\2\u05c6\u05c4\3\2\2\2\u05c6\u05c7\3")
        buf.write("\2\2\2\u05c7\u05ca\3\2\2\2\u05c8\u05c6\3\2\2\2\u05c9\u05af")
        buf.write("\3\2\2\2\u05c9\u05ca\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb")
        buf.write("\u05cc\7,\2\2\u05cc\61\3\2\2\2\u05cd\u05d1\7\24\2\2\u05ce")
        buf.write("\u05d0\t\2\2\2\u05cf\u05ce\3\2\2\2\u05d0\u05d3\3\2\2\2")
        buf.write("\u05d1\u05cf\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2\u05d4\3")
        buf.write("\2\2\2\u05d3\u05d1\3\2\2\2\u05d4\u05d8\7+\2\2\u05d5\u05d7")
        buf.write("\t\2\2\2\u05d6\u05d5\3\2\2\2\u05d7\u05da\3\2\2\2\u05d8")
        buf.write("\u05d6\3\2\2\2\u05d8\u05d9\3\2\2\2\u05d9\u05db\3\2\2\2")
        buf.write("\u05da\u05d8\3\2\2\2\u05db\u05df\5\36\20\2\u05dc\u05de")
        buf.write("\t\2\2\2\u05dd\u05dc\3\2\2\2\u05de\u05e1\3\2\2\2\u05df")
        buf.write("\u05dd\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05e2\3\2\2\2")
        buf.write("\u05e1\u05df\3\2\2\2\u05e2\u05e3\7,\2\2\u05e3\63\3\2\2")
        buf.write("\2\u05e4\u05e8\7#\2\2\u05e5\u05e7\t\2\2\2\u05e6\u05e5")
        buf.write("\3\2\2\2\u05e7\u05ea\3\2\2\2\u05e8\u05e6\3\2\2\2\u05e8")
        buf.write("\u05e9\3\2\2\2\u05e9\u05eb\3\2\2\2\u05ea\u05e8\3\2\2\2")
        buf.write("\u05eb\u05ef\7+\2\2\u05ec\u05ee\t\2\2\2\u05ed\u05ec\3")
        buf.write("\2\2\2\u05ee\u05f1\3\2\2\2\u05ef\u05ed\3\2\2\2\u05ef\u05f0")
        buf.write("\3\2\2\2\u05f0\u05f2\3\2\2\2\u05f1\u05ef\3\2\2\2\u05f2")
        buf.write("\u05f6\5\36\20\2\u05f3\u05f5\t\2\2\2\u05f4\u05f3\3\2\2")
        buf.write("\2\u05f5\u05f8\3\2\2\2\u05f6\u05f4\3\2\2\2\u05f6\u05f7")
        buf.write("\3\2\2\2\u05f7\u05f9\3\2\2\2\u05f8\u05f6\3\2\2\2\u05f9")
        buf.write("\u05fa\7,\2\2\u05fa\65\3\2\2\2\u05fb\u05ff\7\"\2\2\u05fc")
        buf.write("\u05fe\t\2\2\2\u05fd\u05fc\3\2\2\2\u05fe\u0601\3\2\2\2")
        buf.write("\u05ff\u05fd\3\2\2\2\u05ff\u0600\3\2\2\2\u0600\u0602\3")
        buf.write("\2\2\2\u0601\u05ff\3\2\2\2\u0602\u0606\7+\2\2\u0603\u0605")
        buf.write("\t\2\2\2\u0604\u0603\3\2\2\2\u0605\u0608\3\2\2\2\u0606")
        buf.write("\u0604\3\2\2\2\u0606\u0607\3\2\2\2\u0607\u0609\3\2\2\2")
        buf.write("\u0608\u0606\3\2\2\2\u0609\u060d\5\36\20\2\u060a\u060c")
        buf.write("\t\2\2\2\u060b\u060a\3\2\2\2\u060c\u060f\3\2\2\2\u060d")
        buf.write("\u060b\3\2\2\2\u060d\u060e\3\2\2\2\u060e\u0610\3\2\2\2")
        buf.write("\u060f\u060d\3\2\2\2\u0610\u0611\7,\2\2\u0611\67\3\2\2")
        buf.write("\2\u0612\u0616\7\25\2\2\u0613\u0615\t\2\2\2\u0614\u0613")
        buf.write("\3\2\2\2\u0615\u0618\3\2\2\2\u0616\u0614\3\2\2\2\u0616")
        buf.write("\u0617\3\2\2\2\u0617\u0619\3\2\2\2\u0618\u0616\3\2\2\2")
        buf.write("\u0619\u061d\7+\2\2\u061a\u061c\t\2\2\2\u061b\u061a\3")
        buf.write("\2\2\2\u061c\u061f\3\2\2\2\u061d\u061b\3\2\2\2\u061d\u061e")
        buf.write("\3\2\2\2\u061e\u0620\3\2\2\2\u061f\u061d\3\2\2\2\u0620")
        buf.write("\u0624\5\36\20\2\u0621\u0623\t\2\2\2\u0622\u0621\3\2\2")
        buf.write("\2\u0623\u0626\3\2\2\2\u0624\u0622\3\2\2\2\u0624\u0625")
        buf.write("\3\2\2\2\u0625\u0627\3\2\2\2\u0626\u0624\3\2\2\2\u0627")
        buf.write("\u0628\7,\2\2\u06289\3\2\2\2\u0629\u062d\7\26\2\2\u062a")
        buf.write("\u062c\t\2\2\2\u062b\u062a\3\2\2\2\u062c\u062f\3\2\2\2")
        buf.write("\u062d\u062b\3\2\2\2\u062d\u062e\3\2\2\2\u062e\u0630\3")
        buf.write("\2\2\2\u062f\u062d\3\2\2\2\u0630\u0634\7+\2\2\u0631\u0633")
        buf.write("\t\2\2\2\u0632\u0631\3\2\2\2\u0633\u0636\3\2\2\2\u0634")
        buf.write("\u0632\3\2\2\2\u0634\u0635\3\2\2\2\u0635\u0637\3\2\2\2")
        buf.write("\u0636\u0634\3\2\2\2\u0637\u063b\5\36\20\2\u0638\u063a")
        buf.write("\t\2\2\2\u0639\u0638\3\2\2\2\u063a\u063d\3\2\2\2\u063b")
        buf.write("\u0639\3\2\2\2\u063b\u063c\3\2\2\2\u063c\u063e\3\2\2\2")
        buf.write("\u063d\u063b\3\2\2\2\u063e\u0642\7\4\2\2\u063f\u0641\t")
        buf.write("\2\2\2\u0640\u063f\3\2\2\2\u0641\u0644\3\2\2\2\u0642\u0640")
        buf.write("\3\2\2\2\u0642\u0643\3\2\2\2\u0643\u0645\3\2\2\2\u0644")
        buf.write("\u0642\3\2\2\2\u0645\u0649\5\36\20\2\u0646\u0648\t\2\2")
        buf.write("\2\u0647\u0646\3\2\2\2\u0648\u064b\3\2\2\2\u0649\u0647")
        buf.write("\3\2\2\2\u0649\u064a\3\2\2\2\u064a\u064c\3\2\2\2\u064b")
        buf.write("\u0649\3\2\2\2\u064c\u064d\7,\2\2\u064d;\3\2\2\2\u064e")
        buf.write("\u0652\7\27\2\2\u064f\u0651\t\2\2\2\u0650\u064f\3\2\2")
        buf.write("\2\u0651\u0654\3\2\2\2\u0652\u0650\3\2\2\2\u0652\u0653")
        buf.write("\3\2\2\2\u0653\u0655\3\2\2\2\u0654\u0652\3\2\2\2\u0655")
        buf.write("\u0659\7+\2\2\u0656\u0658\t\2\2\2\u0657\u0656\3\2\2\2")
        buf.write("\u0658\u065b\3\2\2\2\u0659\u0657\3\2\2\2\u0659\u065a\3")
        buf.write("\2\2\2\u065a\u065c\3\2\2\2\u065b\u0659\3\2\2\2\u065c\u0660")
        buf.write("\5\36\20\2\u065d\u065f\t\2\2\2\u065e\u065d\3\2\2\2\u065f")
        buf.write("\u0662\3\2\2\2\u0660\u065e\3\2\2\2\u0660\u0661\3\2\2\2")
        buf.write("\u0661\u0663\3\2\2\2\u0662\u0660\3\2\2\2\u0663\u0664\7")
        buf.write(",\2\2\u0664=\3\2\2\2\u0665\u0669\7\30\2\2\u0666\u0668")
        buf.write("\t\2\2\2\u0667\u0666\3\2\2\2\u0668\u066b\3\2\2\2\u0669")
        buf.write("\u0667\3\2\2\2\u0669\u066a\3\2\2\2\u066a\u066c\3\2\2\2")
        buf.write("\u066b\u0669\3\2\2\2\u066c\u0670\7+\2\2\u066d\u066f\t")
        buf.write("\2\2\2\u066e\u066d\3\2\2\2\u066f\u0672\3\2\2\2\u0670\u066e")
        buf.write("\3\2\2\2\u0670\u0671\3\2\2\2\u0671\u0673\3\2\2\2\u0672")
        buf.write("\u0670\3\2\2\2\u0673\u0677\5\36\20\2\u0674\u0676\t\2\2")
        buf.write("\2\u0675\u0674\3\2\2\2\u0676\u0679\3\2\2\2\u0677\u0675")
        buf.write("\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u067a\3\2\2\2\u0679")
        buf.write("\u0677\3\2\2\2\u067a\u067e\7\4\2\2\u067b\u067d\t\2\2\2")
        buf.write("\u067c\u067b\3\2\2\2\u067d\u0680\3\2\2\2\u067e\u067c\3")
        buf.write("\2\2\2\u067e\u067f\3\2\2\2\u067f\u0681\3\2\2\2\u0680\u067e")
        buf.write("\3\2\2\2\u0681\u0685\5\36\20\2\u0682\u0684\t\2\2\2\u0683")
        buf.write("\u0682\3\2\2\2\u0684\u0687\3\2\2\2\u0685\u0683\3\2\2\2")
        buf.write("\u0685\u0686\3\2\2\2\u0686\u0688\3\2\2\2\u0687\u0685\3")
        buf.write("\2\2\2\u0688\u0689\7,\2\2\u0689?\3\2\2\2\u068a\u068e\7")
        buf.write("\31\2\2\u068b\u068d\t\2\2\2\u068c\u068b\3\2\2\2\u068d")
        buf.write("\u0690\3\2\2\2\u068e\u068c\3\2\2\2\u068e\u068f\3\2\2\2")
        buf.write("\u068f\u0691\3\2\2\2\u0690\u068e\3\2\2\2\u0691\u0695\7")
        buf.write("+\2\2\u0692\u0694\t\2\2\2\u0693\u0692\3\2\2\2\u0694\u0697")
        buf.write("\3\2\2\2\u0695\u0693\3\2\2\2\u0695\u0696\3\2\2\2\u0696")
        buf.write("\u0698\3\2\2\2\u0697\u0695\3\2\2\2\u0698\u069c\5\36\20")
        buf.write("\2\u0699\u069b\t\2\2\2\u069a\u0699\3\2\2\2\u069b\u069e")
        buf.write("\3\2\2\2\u069c\u069a\3\2\2\2\u069c\u069d\3\2\2\2\u069d")
        buf.write("\u069f\3\2\2\2\u069e\u069c\3\2\2\2\u069f\u06a3\7\4\2\2")
        buf.write("\u06a0\u06a2\t\2\2\2\u06a1\u06a0\3\2\2\2\u06a2\u06a5\3")
        buf.write("\2\2\2\u06a3\u06a1\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a6")
        buf.write("\3\2\2\2\u06a5\u06a3\3\2\2\2\u06a6\u06aa\5\36\20\2\u06a7")
        buf.write("\u06a9\t\2\2\2\u06a8\u06a7\3\2\2\2\u06a9\u06ac\3\2\2\2")
        buf.write("\u06aa\u06a8\3\2\2\2\u06aa\u06ab\3\2\2\2\u06ab\u06ad\3")
        buf.write("\2\2\2\u06ac\u06aa\3\2\2\2\u06ad\u06ae\7,\2\2\u06aeA\3")
        buf.write("\2\2\2\u06af\u06b3\7\32\2\2\u06b0\u06b2\t\2\2\2\u06b1")
        buf.write("\u06b0\3\2\2\2\u06b2\u06b5\3\2\2\2\u06b3\u06b1\3\2\2\2")
        buf.write("\u06b3\u06b4\3\2\2\2\u06b4\u06b6\3\2\2\2\u06b5\u06b3\3")
        buf.write("\2\2\2\u06b6\u06ba\7+\2\2\u06b7\u06b9\t\2\2\2\u06b8\u06b7")
        buf.write("\3\2\2\2\u06b9\u06bc\3\2\2\2\u06ba\u06b8\3\2\2\2\u06ba")
        buf.write("\u06bb\3\2\2\2\u06bb\u06bd\3\2\2\2\u06bc\u06ba\3\2\2\2")
        buf.write("\u06bd\u06c1\5\36\20\2\u06be\u06c0\t\2\2\2\u06bf\u06be")
        buf.write("\3\2\2\2\u06c0\u06c3\3\2\2\2\u06c1\u06bf\3\2\2\2\u06c1")
        buf.write("\u06c2\3\2\2\2\u06c2\u06c4\3\2\2\2\u06c3\u06c1\3\2\2\2")
        buf.write("\u06c4\u06c8\7\4\2\2\u06c5\u06c7\t\2\2\2\u06c6\u06c5\3")
        buf.write("\2\2\2\u06c7\u06ca\3\2\2\2\u06c8\u06c6\3\2\2\2\u06c8\u06c9")
        buf.write("\3\2\2\2\u06c9\u06cb\3\2\2\2\u06ca\u06c8\3\2\2\2\u06cb")
        buf.write("\u06cf\5\36\20\2\u06cc\u06ce\t\2\2\2\u06cd\u06cc\3\2\2")
        buf.write("\2\u06ce\u06d1\3\2\2\2\u06cf\u06cd\3\2\2\2\u06cf\u06d0")
        buf.write("\3\2\2\2\u06d0\u06d2\3\2\2\2\u06d1\u06cf\3\2\2\2\u06d2")
        buf.write("\u06d3\7,\2\2\u06d3C\3\2\2\2\u06d4\u06d8\7\33\2\2\u06d5")
        buf.write("\u06d7\t\2\2\2\u06d6\u06d5\3\2\2\2\u06d7\u06da\3\2\2\2")
        buf.write("\u06d8\u06d6\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u06db\3")
        buf.write("\2\2\2\u06da\u06d8\3\2\2\2\u06db\u06df\7+\2\2\u06dc\u06de")
        buf.write("\t\2\2\2\u06dd\u06dc\3\2\2\2\u06de\u06e1\3\2\2\2\u06df")
        buf.write("\u06dd\3\2\2\2\u06df\u06e0\3\2\2\2\u06e0\u06e2\3\2\2\2")
        buf.write("\u06e1\u06df\3\2\2\2\u06e2\u06e6\5\36\20\2\u06e3\u06e5")
        buf.write("\t\2\2\2\u06e4\u06e3\3\2\2\2\u06e5\u06e8\3\2\2\2\u06e6")
        buf.write("\u06e4\3\2\2\2\u06e6\u06e7\3\2\2\2\u06e7\u06e9\3\2\2\2")
        buf.write("\u06e8\u06e6\3\2\2\2\u06e9\u06ed\7\4\2\2\u06ea\u06ec\t")
        buf.write("\2\2\2\u06eb\u06ea\3\2\2\2\u06ec\u06ef\3\2\2\2\u06ed\u06eb")
        buf.write("\3\2\2\2\u06ed\u06ee\3\2\2\2\u06ee\u06f0\3\2\2\2\u06ef")
        buf.write("\u06ed\3\2\2\2\u06f0\u06f4\5\36\20\2\u06f1\u06f3\t\2\2")
        buf.write("\2\u06f2\u06f1\3\2\2\2\u06f3\u06f6\3\2\2\2\u06f4\u06f2")
        buf.write("\3\2\2\2\u06f4\u06f5\3\2\2\2\u06f5\u06f7\3\2\2\2\u06f6")
        buf.write("\u06f4\3\2\2\2\u06f7\u06f8\7,\2\2\u06f8E\3\2\2\2\u06f9")
        buf.write("\u06fd\7(\2\2\u06fa\u06fc\t\2\2\2\u06fb\u06fa\3\2\2\2")
        buf.write("\u06fc\u06ff\3\2\2\2\u06fd\u06fb\3\2\2\2\u06fd\u06fe\3")
        buf.write("\2\2\2\u06fe\u0700\3\2\2\2\u06ff\u06fd\3\2\2\2\u0700\u0704")
        buf.write("\7+\2\2\u0701\u0703\t\2\2\2\u0702\u0701\3\2\2\2\u0703")
        buf.write("\u0706\3\2\2\2\u0704\u0702\3\2\2\2\u0704\u0705\3\2\2\2")
        buf.write("\u0705\u0707\3\2\2\2\u0706\u0704\3\2\2\2\u0707\u070b\5")
        buf.write("\36\20\2\u0708\u070a\t\2\2\2\u0709\u0708\3\2\2\2\u070a")
        buf.write("\u070d\3\2\2\2\u070b\u0709\3\2\2\2\u070b\u070c\3\2\2\2")
        buf.write("\u070c\u070e\3\2\2\2\u070d\u070b\3\2\2\2\u070e\u070f\7")
        buf.write(",\2\2\u070fG\3\2\2\2\u0710\u0714\7\34\2\2\u0711\u0713")
        buf.write("\t\2\2\2\u0712\u0711\3\2\2\2\u0713\u0716\3\2\2\2\u0714")
        buf.write("\u0712\3\2\2\2\u0714\u0715\3\2\2\2\u0715\u0717\3\2\2\2")
        buf.write("\u0716\u0714\3\2\2\2\u0717\u071b\7+\2\2\u0718\u071a\t")
        buf.write("\2\2\2\u0719\u0718\3\2\2\2\u071a\u071d\3\2\2\2\u071b\u0719")
        buf.write("\3\2\2\2\u071b\u071c\3\2\2\2\u071c\u071e\3\2\2\2\u071d")
        buf.write("\u071b\3\2\2\2\u071e\u0722\5\36\20\2\u071f\u0721\t\2\2")
        buf.write("\2\u0720\u071f\3\2\2\2\u0721\u0724\3\2\2\2\u0722\u0720")
        buf.write("\3\2\2\2\u0722\u0723\3\2\2\2\u0723\u0725\3\2\2\2\u0724")
        buf.write("\u0722\3\2\2\2\u0725\u0726\7,\2\2\u0726I\3\2\2\2\u0727")
        buf.write("\u072b\7\35\2\2\u0728\u072a\t\2\2\2\u0729\u0728\3\2\2")
        buf.write("\2\u072a\u072d\3\2\2\2\u072b\u0729\3\2\2\2\u072b\u072c")
        buf.write("\3\2\2\2\u072c\u072e\3\2\2\2\u072d\u072b\3\2\2\2\u072e")
        buf.write("\u0732\7+\2\2\u072f\u0731\t\2\2\2\u0730\u072f\3\2\2\2")
        buf.write("\u0731\u0734\3\2\2\2\u0732\u0730\3\2\2\2\u0732\u0733\3")
        buf.write("\2\2\2\u0733\u0745\3\2\2\2\u0734\u0732\3\2\2\2\u0735\u0739")
        buf.write("\5\36\20\2\u0736\u0738\t\2\2\2\u0737\u0736\3\2\2\2\u0738")
        buf.write("\u073b\3\2\2\2\u0739\u0737\3\2\2\2\u0739\u073a\3\2\2\2")
        buf.write("\u073a\u073c\3\2\2\2\u073b\u0739\3\2\2\2\u073c\u0740\7")
        buf.write("\4\2\2\u073d\u073f\t\2\2\2\u073e\u073d\3\2\2\2\u073f\u0742")
        buf.write("\3\2\2\2\u0740\u073e\3\2\2\2\u0740\u0741\3\2\2\2\u0741")
        buf.write("\u0744\3\2\2\2\u0742\u0740\3\2\2\2\u0743\u0735\3\2\2\2")
        buf.write("\u0744\u0747\3\2\2\2\u0745\u0743\3\2\2\2\u0745\u0746\3")
        buf.write("\2\2\2\u0746\u0748\3\2\2\2\u0747\u0745\3\2\2\2\u0748\u074c")
        buf.write("\5\36\20\2\u0749\u074b\t\2\2\2\u074a\u0749\3\2\2\2\u074b")
        buf.write("\u074e\3\2\2\2\u074c\u074a\3\2\2\2\u074c\u074d\3\2\2\2")
        buf.write("\u074d\u074f\3\2\2\2\u074e\u074c\3\2\2\2\u074f\u0750\7")
        buf.write(",\2\2\u0750K\3\2\2\2\u0751\u0755\7 \2\2\u0752\u0754\t")
        buf.write("\2\2\2\u0753\u0752\3\2\2\2\u0754\u0757\3\2\2\2\u0755\u0753")
        buf.write("\3\2\2\2\u0755\u0756\3\2\2\2\u0756\u0758\3\2\2\2\u0757")
        buf.write("\u0755\3\2\2\2\u0758\u075c\7+\2\2\u0759\u075b\t\2\2\2")
        buf.write("\u075a\u0759\3\2\2\2\u075b\u075e\3\2\2\2\u075c\u075a\3")
        buf.write("\2\2\2\u075c\u075d\3\2\2\2\u075d\u075f\3\2\2\2\u075e\u075c")
        buf.write("\3\2\2\2\u075f\u0763\5\36\20\2\u0760\u0762\t\2\2\2\u0761")
        buf.write("\u0760\3\2\2\2\u0762\u0765\3\2\2\2\u0763\u0761\3\2\2\2")
        buf.write("\u0763\u0764\3\2\2\2\u0764\u0766\3\2\2\2\u0765\u0763\3")
        buf.write("\2\2\2\u0766\u0767\7,\2\2\u0767M\3\2\2\2\u0768\u076c\7")
        buf.write("!\2\2\u0769\u076b\t\2\2\2\u076a\u0769\3\2\2\2\u076b\u076e")
        buf.write("\3\2\2\2\u076c\u076a\3\2\2\2\u076c\u076d\3\2\2\2\u076d")
        buf.write("\u076f\3\2\2\2\u076e\u076c\3\2\2\2\u076f\u0773\7+\2\2")
        buf.write("\u0770\u0772\t\2\2\2\u0771\u0770\3\2\2\2\u0772\u0775\3")
        buf.write("\2\2\2\u0773\u0771\3\2\2\2\u0773\u0774\3\2\2\2\u0774\u0776")
        buf.write("\3\2\2\2\u0775\u0773\3\2\2\2\u0776\u077a\5\36\20\2\u0777")
        buf.write("\u0779\t\2\2\2\u0778\u0777\3\2\2\2\u0779\u077c\3\2\2\2")
        buf.write("\u077a\u0778\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u077d\3")
        buf.write("\2\2\2\u077c\u077a\3\2\2\2\u077d\u077e\7,\2\2\u077eO\3")
        buf.write("\2\2\2\u077f\u0783\7\'\2\2\u0780\u0782\t\2\2\2\u0781\u0780")
        buf.write("\3\2\2\2\u0782\u0785\3\2\2\2\u0783\u0781\3\2\2\2\u0783")
        buf.write("\u0784\3\2\2\2\u0784\u0786\3\2\2\2\u0785\u0783\3\2\2\2")
        buf.write("\u0786\u078a\7+\2\2\u0787\u0789\t\2\2\2\u0788\u0787\3")
        buf.write("\2\2\2\u0789\u078c\3\2\2\2\u078a\u0788\3\2\2\2\u078a\u078b")
        buf.write("\3\2\2\2\u078b\u078d\3\2\2\2\u078c\u078a\3\2\2\2\u078d")
        buf.write("\u0791\5\36\20\2\u078e\u0790\t\2\2\2\u078f\u078e\3\2\2")
        buf.write("\2\u0790\u0793\3\2\2\2\u0791\u078f\3\2\2\2\u0791\u0792")
        buf.write("\3\2\2\2\u0792\u0794\3\2\2\2\u0793\u0791\3\2\2\2\u0794")
        buf.write("\u0795\7,\2\2\u0795Q\3\2\2\2\u0796\u079a\7\36\2\2\u0797")
        buf.write("\u0799\t\2\2\2\u0798\u0797\3\2\2\2\u0799\u079c\3\2\2\2")
        buf.write("\u079a\u0798\3\2\2\2\u079a\u079b\3\2\2\2\u079b\u079d\3")
        buf.write("\2\2\2\u079c\u079a\3\2\2\2\u079d\u07a1\7+\2\2\u079e\u07a0")
        buf.write("\t\2\2\2\u079f\u079e\3\2\2\2\u07a0\u07a3\3\2\2\2\u07a1")
        buf.write("\u079f\3\2\2\2\u07a1\u07a2\3\2\2\2\u07a2\u07a4\3\2\2\2")
        buf.write("\u07a3\u07a1\3\2\2\2\u07a4\u07a8\5\36\20\2\u07a5\u07a7")
        buf.write("\t\2\2\2\u07a6\u07a5\3\2\2\2\u07a7\u07aa\3\2\2\2\u07a8")
        buf.write("\u07a6\3\2\2\2\u07a8\u07a9\3\2\2\2\u07a9\u07ab\3\2\2\2")
        buf.write("\u07aa\u07a8\3\2\2\2\u07ab\u07ac\7,\2\2\u07acS\3\2\2\2")
        buf.write("\u07ad\u07b1\7)\2\2\u07ae\u07b0\t\2\2\2\u07af\u07ae\3")
        buf.write("\2\2\2\u07b0\u07b3\3\2\2\2\u07b1\u07af\3\2\2\2\u07b1\u07b2")
        buf.write("\3\2\2\2\u07b2\u07b4\3\2\2\2\u07b3\u07b1\3\2\2\2\u07b4")
        buf.write("\u07b8\7+\2\2\u07b5\u07b7\t\2\2\2\u07b6\u07b5\3\2\2\2")
        buf.write("\u07b7\u07ba\3\2\2\2\u07b8\u07b6\3\2\2\2\u07b8\u07b9\3")
        buf.write("\2\2\2\u07b9\u07bb\3\2\2\2\u07ba\u07b8\3\2\2\2\u07bb\u07bf")
        buf.write("\5\36\20\2\u07bc\u07be\t\2\2\2\u07bd\u07bc\3\2\2\2\u07be")
        buf.write("\u07c1\3\2\2\2\u07bf\u07bd\3\2\2\2\u07bf\u07c0\3\2\2\2")
        buf.write("\u07c0\u07c2\3\2\2\2\u07c1\u07bf\3\2\2\2\u07c2\u07c3\7")
        buf.write(",\2\2\u07c3U\3\2\2\2\u07c4\u07c8\7*\2\2\u07c5\u07c7\t")
        buf.write("\2\2\2\u07c6\u07c5\3\2\2\2\u07c7\u07ca\3\2\2\2\u07c8\u07c6")
        buf.write("\3\2\2\2\u07c8\u07c9\3\2\2\2\u07c9\u07cb\3\2\2\2\u07ca")
        buf.write("\u07c8\3\2\2\2\u07cb\u07cf\7+\2\2\u07cc\u07ce\t\2\2\2")
        buf.write("\u07cd\u07cc\3\2\2\2\u07ce\u07d1\3\2\2\2\u07cf\u07cd\3")
        buf.write("\2\2\2\u07cf\u07d0\3\2\2\2\u07d0\u07d5\3\2\2\2\u07d1\u07cf")
        buf.write("\3\2\2\2\u07d2\u07d6\7\65\2\2\u07d3\u07d6\5\\/\2\u07d4")
        buf.write("\u07d6\5Z.\2\u07d5\u07d2\3\2\2\2\u07d5\u07d3\3\2\2\2\u07d5")
        buf.write("\u07d4\3\2\2\2\u07d6\u07da\3\2\2\2\u07d7\u07d9\t\2\2\2")
        buf.write("\u07d8\u07d7\3\2\2\2\u07d9\u07dc\3\2\2\2\u07da\u07d8\3")
        buf.write("\2\2\2\u07da\u07db\3\2\2\2\u07db\u07dd\3\2\2\2\u07dc\u07da")
        buf.write("\3\2\2\2\u07dd\u07de\7,\2\2\u07deW\3\2\2\2\u07df\u07e3")
        buf.write("\7\22\2\2\u07e0\u07e2\t\2\2\2\u07e1\u07e0\3\2\2\2\u07e2")
        buf.write("\u07e5\3\2\2\2\u07e3\u07e1\3\2\2\2\u07e3\u07e4\3\2\2\2")
        buf.write("\u07e4\u07e6\3\2\2\2\u07e5\u07e3\3\2\2\2\u07e6\u07ea\7")
        buf.write("+\2\2\u07e7\u07e9\t\2\2\2\u07e8\u07e7\3\2\2\2\u07e9\u07ec")
        buf.write("\3\2\2\2\u07ea\u07e8\3\2\2\2\u07ea\u07eb\3\2\2\2\u07eb")
        buf.write("\u07ed\3\2\2\2\u07ec\u07ea\3\2\2\2\u07ed\u07f1\5\36\20")
        buf.write("\2\u07ee\u07f0\t\2\2\2\u07ef\u07ee\3\2\2\2\u07f0\u07f3")
        buf.write("\3\2\2\2\u07f1\u07ef\3\2\2\2\u07f1\u07f2\3\2\2\2\u07f2")
        buf.write("\u07f4\3\2\2\2\u07f3\u07f1\3\2\2\2\u07f4\u07f5\7,\2\2")
        buf.write("\u07f5Y\3\2\2\2\u07f6\u07f7\7&\2\2\u07f7[\3\2\2\2\u07f8")
        buf.write("\u07fc\7\6\2\2\u07f9\u07fb\t\2\2\2\u07fa\u07f9\3\2\2\2")
        buf.write("\u07fb\u07fe\3\2\2\2\u07fc\u07fa\3\2\2\2\u07fc\u07fd\3")
        buf.write("\2\2\2\u07fd\u0819\3\2\2\2\u07fe\u07fc\3\2\2\2\u07ff\u0810")
        buf.write("\5^\60\2\u0800\u0802\t\2\2\2\u0801\u0800\3\2\2\2\u0802")
        buf.write("\u0805\3\2\2\2\u0803\u0801\3\2\2\2\u0803\u0804\3\2\2\2")
        buf.write("\u0804\u0806\3\2\2\2\u0805\u0803\3\2\2\2\u0806\u080a\7")
        buf.write("\4\2\2\u0807\u0809\t\2\2\2\u0808\u0807\3\2\2\2\u0809\u080c")
        buf.write("\3\2\2\2\u080a\u0808\3\2\2\2\u080a\u080b\3\2\2\2\u080b")
        buf.write("\u080d\3\2\2\2\u080c\u080a\3\2\2\2\u080d\u080f\5^\60\2")
        buf.write("\u080e\u0803\3\2\2\2\u080f\u0812\3\2\2\2\u0810\u080e\3")
        buf.write("\2\2\2\u0810\u0811\3\2\2\2\u0811\u0816\3\2\2\2\u0812\u0810")
        buf.write("\3\2\2\2\u0813\u0815\t\2\2\2\u0814\u0813\3\2\2\2\u0815")
        buf.write("\u0818\3\2\2\2\u0816\u0814\3\2\2\2\u0816\u0817\3\2\2\2")
        buf.write("\u0817\u081a\3\2\2\2\u0818\u0816\3\2\2\2\u0819\u07ff\3")
        buf.write("\2\2\2\u0819\u081a\3\2\2\2\u081a\u081b\3\2\2\2\u081b\u081c")
        buf.write("\7\7\2\2\u081c]\3\2\2\2\u081d\u081e\t\3\2\2\u081e_\3\2")
        buf.write("\2\2\u0153cjqx\177\u0084\u0089\u008e\u0090\u0092\u0099")
        buf.write("\u009d\u00a2\u00a4\u00a6\u00ab\u00af\u00b5\u00bc\u00c0")
        buf.write("\u00c6\u00cd\u00d4\u00d9\u00de\u00e3\u00e5\u00e7\u00ee")
        buf.write("\u00f2\u00f7\u00f9\u00fb\u0100\u0104\u0107\u010d\u0113")
        buf.write("\u011a\u0121\u0128\u012f\u0134\u0137\u013d\u0144\u014a")
        buf.write("\u0151\u0158\u015f\u0164\u016a\u016c\u016e\u0175\u0179")
        buf.write("\u017c\u0181\u0183\u018a\u0190\u0197\u019e\u01a5\u01ac")
        buf.write("\u01b1\u01b4\u01ba\u01c1\u01c7\u01cb\u01d1\u01d8\u01df")
        buf.write("\u01e4\u01ea\u01ec\u01ee\u01f5\u01f9\u01fc\u0201\u0203")
        buf.write("\u0206\u020b\u0211\u0217\u021d\u0222\u0227\u022d\u0233")
        buf.write("\u023a\u0241\u0248\u024d\u0253\u0255\u0257\u025e\u0265")
        buf.write("\u0267\u026d\u026f\u0271\u0278\u027e\u0284\u0289\u028e")
        buf.write("\u0294\u029a\u029e\u02a4\u02ab\u02b2\u02b7\u02bd\u02bf")
        buf.write("\u02c1\u02c8\u02cf\u02d1\u02d7\u02d9\u02db\u02de\u02e4")
        buf.write("\u02ea\u02f0\u02f6\u02fd\u0304\u030b\u0310\u0316\u0318")
        buf.write("\u031a\u0321\u0328\u032a\u0330\u0332\u0334\u033c\u0342")
        buf.write("\u0348\u034e\u0352\u0358\u035f\u0366\u036b\u0371\u0373")
        buf.write("\u0375\u037c\u0383\u0385\u038b\u038d\u038f\u0393\u039a")
        buf.write("\u039e\u03a7\u03ab\u03af\u03b5\u03bb\u03c1\u03c7\u03ce")
        buf.write("\u03d5\u03dc\u03e1\u03e7\u03e9\u03eb\u03f2\u03f9\u03fb")
        buf.write("\u0401\u0403\u0405\u040b\u0411\u0415\u041b\u0422\u0429")
        buf.write("\u042e\u0434\u0436\u0438\u043f\u0446\u0448\u044e\u0450")
        buf.write("\u0452\u0454\u045a\u0463\u0469\u0470\u0477\u047e\u0483")
        buf.write("\u0489\u048b\u048d\u0494\u049b\u049d\u04a3\u04a5\u04a7")
        buf.write("\u04ad\u04b3\u04b6\u04bc\u04c3\u04ca\u04d0\u04d5\u04db")
        buf.write("\u04e2\u04f0\u04f6\u04fd\u0503\u0509\u0510\u0516\u0531")
        buf.write("\u054d\u0551\u0556\u055d\u0563\u0568\u056d\u0573\u057a")
        buf.write("\u0581\u0586\u058c\u0593\u059c\u05a5\u05ac\u05b3\u05ba")
        buf.write("\u05c1\u05c6\u05c9\u05d1\u05d8\u05df\u05e8\u05ef\u05f6")
        buf.write("\u05ff\u0606\u060d\u0616\u061d\u0624\u062d\u0634\u063b")
        buf.write("\u0642\u0649\u0652\u0659\u0660\u0669\u0670\u0677\u067e")
        buf.write("\u0685\u068e\u0695\u069c\u06a3\u06aa\u06b3\u06ba\u06c1")
        buf.write("\u06c8\u06cf\u06d8\u06df\u06e6\u06ed\u06f4\u06fd\u0704")
        buf.write("\u070b\u0714\u071b\u0722\u072b\u0732\u0739\u0740\u0745")
        buf.write("\u074c\u0755\u075c\u0763\u076c\u0773\u077a\u0783\u078a")
        buf.write("\u0791\u079a\u07a1\u07a8\u07b1\u07b8\u07bf\u07c8\u07cf")
        buf.write("\u07d5\u07da\u07e3\u07ea\u07f1\u07fc\u0803\u080a\u0810")
        buf.write("\u0816\u0819")
        return buf.getvalue()


class WordlifyParser ( Parser ):

    grammarFileName = "Wordlify.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "','", "'='", "'['", "']'", "'fn'", 
                     "'while'", "'foreach'", "'in'", "'do'", "'if'", "'then'", 
                     "'else'", "'begin'", "'end'", "'baseName'", "'use'", 
                     "'exist'", "'print'", "'rename'", "'remove'", "'move'", 
                     "'copy'", "'download'", "'write'", "'wait'", "'execute'", 
                     "'exit'", "'time'", "'getFiles'", "'dateModified'", 
                     "'isDir'", "'isFile'", "'file'", "'folder'", "'args'", 
                     "'size'", "'read'", "'create'", "'length'", "'('", 
                     "')'", "'<-'", "<INVALID>", "<INVALID>", "'.'", "<INVALID>", 
                     "'not'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "FN", "WHILE", "FOREACH", 
                      "IN", "DO", "IF", "THEN", "ELSE", "BEGIN", "END", 
                      "BASENAME", "IMPORT", "EXIST", "PRINT", "RENAME", 
                      "REMOVE", "MOVE", "COPY", "DOWNLOAD", "WRITE", "WAIT", 
                      "EXECUTE", "EXIT", "TIME", "GET_FILES", "DATE_MODIFIED", 
                      "IS_DIR", "IS_FILE", "FILE", "FOLDER", "ARGS", "SIZE", 
                      "READ", "CREATE", "LENGTH", "L_PAREN", "R_PAREN", 
                      "APPEND", "CMP_OP", "ARITH_OP", "CONCAT_OP", "BIN_LOG_OP", 
                      "NOT", "BOOL", "STR", "ID", "NUM", "WS", "NL", "END_COMMENT", 
                      "ERROR_CHAR" ]

    RULE_program = 0
    RULE_fn_def = 1
    RULE_block_instr = 2
    RULE_foreach = 3
    RULE_while_instr = 4
    RULE_if_instr = 5
    RULE_if_cond = 6
    RULE_then = 7
    RULE_else_if = 8
    RULE_else_block = 9
    RULE_cond = 10
    RULE_cond1 = 11
    RULE_single_cond = 12
    RULE_comparison = 13
    RULE_expr = 14
    RULE_arith_expr = 15
    RULE_concat = 16
    RULE_fn_call = 17
    RULE_atom_instr = 18
    RULE_assign = 19
    RULE_array_append = 20
    RULE_array_elem = 21
    RULE_import_call = 22
    RULE_own_fn_call = 23
    RULE_exist = 24
    RULE_is_file = 25
    RULE_is_dir = 26
    RULE_print_instr = 27
    RULE_rename = 28
    RULE_remove = 29
    RULE_move = 30
    RULE_copy = 31
    RULE_download = 32
    RULE_write = 33
    RULE_read = 34
    RULE_wait_instr = 35
    RULE_execute = 36
    RULE_get_files = 37
    RULE_date_modified = 38
    RULE_size = 39
    RULE_exit = 40
    RULE_create = 41
    RULE_length = 42
    RULE_basename = 43
    RULE_args = 44
    RULE_array = 45
    RULE_value_or_id = 46

    ruleNames =  [ "program", "fn_def", "block_instr", "foreach", "while_instr", 
                   "if_instr", "if_cond", "then", "else_if", "else_block", 
                   "cond", "cond1", "single_cond", "comparison", "expr", 
                   "arith_expr", "concat", "fn_call", "atom_instr", "assign", 
                   "array_append", "array_elem", "import_call", "own_fn_call", 
                   "exist", "is_file", "is_dir", "print_instr", "rename", 
                   "remove", "move", "copy", "download", "write", "read", 
                   "wait_instr", "execute", "get_files", "date_modified", 
                   "size", "exit", "create", "length", "basename", "args", 
                   "array", "value_or_id" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    FN=6
    WHILE=7
    FOREACH=8
    IN=9
    DO=10
    IF=11
    THEN=12
    ELSE=13
    BEGIN=14
    END=15
    BASENAME=16
    IMPORT=17
    EXIST=18
    PRINT=19
    RENAME=20
    REMOVE=21
    MOVE=22
    COPY=23
    DOWNLOAD=24
    WRITE=25
    WAIT=26
    EXECUTE=27
    EXIT=28
    TIME=29
    GET_FILES=30
    DATE_MODIFIED=31
    IS_DIR=32
    IS_FILE=33
    FILE=34
    FOLDER=35
    ARGS=36
    SIZE=37
    READ=38
    CREATE=39
    LENGTH=40
    L_PAREN=41
    R_PAREN=42
    APPEND=43
    CMP_OP=44
    ARITH_OP=45
    CONCAT_OP=46
    BIN_LOG_OP=47
    NOT=48
    BOOL=49
    STR=50
    ID=51
    NUM=52
    WS=53
    NL=54
    END_COMMENT=55
    ERROR_CHAR=56

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(WordlifyParser.EOF, 0)

        def END_COMMENT(self):
            return self.getToken(WordlifyParser.END_COMMENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def fn_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Fn_defContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Fn_defContext,i)


        def import_call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Import_callContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Import_callContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = WordlifyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.state = 261
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 97
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 94
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 99
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                self.state = 164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.FN) | (1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.IMPORT) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 144
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 142
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                            if la_ == 1:
                                self.state = 100
                                self.atom_instr()
                                self.state = 104
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 101
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 106
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 107
                                self.match(WordlifyParser.T__0)
                                self.state = 111
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 108
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 113
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 114
                                self.atom_instr()
                                self.state = 128 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 118
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 115
                                        self.match(WordlifyParser.WS)
                                        self.state = 120
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 121
                                    self.match(WordlifyParser.NL)
                                    self.state = 125
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 122
                                            self.match(WordlifyParser.WS) 
                                        self.state = 127
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                                    self.state = 130 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 135
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                                    self.state = 132
                                    self.block_instr()
                                    pass
                                elif token in [WordlifyParser.FN]:
                                    self.state = 133
                                    self.fn_def()
                                    pass
                                elif token in [WordlifyParser.IMPORT]:
                                    self.state = 134
                                    self.import_call()
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                self.state = 138 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 137
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 140 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 146
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                    self.state = 162
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 147
                        self.atom_instr()
                        self.state = 151
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 148
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 153
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                        self.state = 155
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==WordlifyParser.T__0:
                            self.state = 154
                            self.match(WordlifyParser.T__0)


                        pass
                    elif token in [WordlifyParser.FN, WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF, WordlifyParser.IMPORT]:
                        self.state = 160
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                            self.state = 157
                            self.block_instr()
                            pass
                        elif token in [WordlifyParser.FN]:
                            self.state = 158
                            self.fn_def()
                            pass
                        elif token in [WordlifyParser.IMPORT]:
                            self.state = 159
                            self.import_call()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 166
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 171
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.END_COMMENT:
                    self.state = 172
                    self.match(WordlifyParser.END_COMMENT)


                self.state = 175
                self.match(WordlifyParser.EOF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 179
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 176
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 181
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.FN) | (1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.IMPORT) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 229
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 227
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                            if la_ == 1:
                                self.state = 182
                                self.atom_instr()
                                self.state = 186
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 183
                                        _la = self._input.LA(1)
                                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                            self._errHandler.recoverInline(self)
                                        else:
                                            self._errHandler.reportMatch(self)
                                            self.consume() 
                                    self.state = 188
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

                                self.state = 190
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==WordlifyParser.T__0:
                                    self.state = 189
                                    self.match(WordlifyParser.T__0)


                                self.notifyErrorListeners("Missing semicolon")
                                self.state = 196
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 193
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 198
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 199
                                self.atom_instr()
                                self.state = 213 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 203
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 200
                                        self.match(WordlifyParser.WS)
                                        self.state = 205
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 206
                                    self.match(WordlifyParser.NL)
                                    self.state = 210
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 207
                                            self.match(WordlifyParser.WS) 
                                        self.state = 212
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

                                    self.state = 215 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 220
                                self._errHandler.sync(self)
                                token = self._input.LA(1)
                                if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                                    self.state = 217
                                    self.block_instr()
                                    pass
                                elif token in [WordlifyParser.FN]:
                                    self.state = 218
                                    self.fn_def()
                                    pass
                                elif token in [WordlifyParser.IMPORT]:
                                    self.state = 219
                                    self.import_call()
                                    pass
                                else:
                                    raise NoViableAltException(self)

                                self.state = 223 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 222
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 225 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 231
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                    self.state = 247
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 232
                        self.atom_instr()
                        self.state = 236
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 233
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 238
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

                        self.state = 240
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==WordlifyParser.T__0:
                            self.state = 239
                            self.match(WordlifyParser.T__0)


                        pass
                    elif token in [WordlifyParser.FN, WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF, WordlifyParser.IMPORT]:
                        self.state = 245
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                            self.state = 242
                            self.block_instr()
                            pass
                        elif token in [WordlifyParser.FN]:
                            self.state = 243
                            self.fn_def()
                            pass
                        elif token in [WordlifyParser.IMPORT]:
                            self.state = 244
                            self.import_call()
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 251
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 256
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.END_COMMENT:
                    self.state = 257
                    self.match(WordlifyParser.END_COMMENT)


                self.state = 260
                self.match(WordlifyParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FN(self):
            return self.getToken(WordlifyParser.FN, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def BEGIN(self):
            return self.getToken(WordlifyParser.BEGIN, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_def" ):
                listener.enterFn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_def" ):
                listener.exitFn_def(self)




    def fn_def(self):

        localctx = WordlifyParser.Fn_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fn_def)
        self._la = 0 # Token type
        try:
            self.state = 516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 263
                self.match(WordlifyParser.FN)
                self.state = 265 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 264
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 267 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 269
                self.match(WordlifyParser.ID)
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 270
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 275
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 276
                self.match(WordlifyParser.L_PAREN)
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 277
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ID:
                    self.state = 283
                    self.match(WordlifyParser.ID)
                    self.state = 287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 284
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 289
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 306
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.T__1:
                        self.state = 290
                        self.match(WordlifyParser.T__1)
                        self.state = 294
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 291
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 296
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 297
                        self.match(WordlifyParser.ID)
                        self.state = 301
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 298
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 303
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 308
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 311
                self.match(WordlifyParser.R_PAREN)
                self.state = 315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 312
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 317
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 318
                self.match(WordlifyParser.BEGIN)
                self.state = 320 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 319
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 322 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 364
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 362
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                            if la_ == 1:
                                self.state = 324
                                self.atom_instr()
                                self.state = 328
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 325
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 330
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 331
                                self.match(WordlifyParser.T__0)
                                self.state = 335
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 332
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 337
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 338
                                self.atom_instr()
                                self.state = 352 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 342
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 339
                                        self.match(WordlifyParser.WS)
                                        self.state = 344
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 345
                                    self.match(WordlifyParser.NL)
                                    self.state = 349
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 346
                                            self.match(WordlifyParser.WS) 
                                        self.state = 351
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                                    self.state = 354 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 356
                                self.block_instr()
                                self.state = 358 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 357
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 360 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 366
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

                    self.state = 378
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 367
                        self.atom_instr()
                        self.state = 371
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 368
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 373
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

                        self.state = 375
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==WordlifyParser.T__0:
                            self.state = 374
                            self.match(WordlifyParser.T__0)


                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 377
                        self.block_instr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 381 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 380
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 383 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break



                self.state = 387
                self.match(WordlifyParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 388
                self.match(WordlifyParser.FN)
                self.state = 390 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 389
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 392 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 394
                self.match(WordlifyParser.ID)
                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 395
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 400
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 401
                self.match(WordlifyParser.L_PAREN)
                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 402
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 407
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ID:
                    self.state = 408
                    self.match(WordlifyParser.ID)
                    self.state = 412
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 409
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 414
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 431
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.T__1:
                        self.state = 415
                        self.match(WordlifyParser.T__1)
                        self.state = 419
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 416
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 421
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 422
                        self.match(WordlifyParser.ID)
                        self.state = 426
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 423
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 428
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 433
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 436
                self.match(WordlifyParser.R_PAREN)
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 437
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 443
                self.match(WordlifyParser.BEGIN)
                self.state = 445 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 444
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 447 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 492
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 490
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                            if la_ == 1:
                                self.state = 449
                                self.atom_instr()
                                self.state = 453
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 450
                                        _la = self._input.LA(1)
                                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                            self._errHandler.recoverInline(self)
                                        else:
                                            self._errHandler.reportMatch(self)
                                            self.consume() 
                                    self.state = 455
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

                                self.state = 457
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==WordlifyParser.T__0:
                                    self.state = 456
                                    self.match(WordlifyParser.T__0)


                                self.notifyErrorListeners("Missing semicolon in function")
                                self.state = 463
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 460
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 465
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 466
                                self.atom_instr()
                                self.state = 480 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 470
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 467
                                        self.match(WordlifyParser.WS)
                                        self.state = 472
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 473
                                    self.match(WordlifyParser.NL)
                                    self.state = 477
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 474
                                            self.match(WordlifyParser.WS) 
                                        self.state = 479
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

                                    self.state = 482 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 484
                                self.block_instr()
                                self.state = 486 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 485
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 488 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 494
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

                    self.state = 506
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 495
                        self.atom_instr()
                        self.state = 499
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 496
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 501
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

                        self.state = 503
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==WordlifyParser.T__0:
                            self.state = 502
                            self.match(WordlifyParser.T__0)


                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 505
                        self.block_instr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 509 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 508
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 511 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break



                self.state = 515
                self.match(WordlifyParser.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_instr(self):
            return self.getTypedRuleContext(WordlifyParser.If_instrContext,0)


        def while_instr(self):
            return self.getTypedRuleContext(WordlifyParser.While_instrContext,0)


        def foreach(self):
            return self.getTypedRuleContext(WordlifyParser.ForeachContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_block_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_instr" ):
                listener.enterBlock_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_instr" ):
                listener.exitBlock_instr(self)




    def block_instr(self):

        localctx = WordlifyParser.Block_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block_instr)
        try:
            self.state = 521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 518
                self.if_instr()
                pass
            elif token in [WordlifyParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 519
                self.while_instr()
                pass
            elif token in [WordlifyParser.FOREACH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 520
                self.foreach()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeachContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(WordlifyParser.FOREACH, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def IN(self):
            return self.getToken(WordlifyParser.IN, 0)

        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_foreach

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeach" ):
                listener.enterForeach(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeach" ):
                listener.exitForeach(self)




    def foreach(self):

        localctx = WordlifyParser.ForeachContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_foreach)
        self._la = 0 # Token type
        try:
            self.state = 732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 523
                self.match(WordlifyParser.FOREACH)
                self.state = 525 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 524
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 527 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 529
                self.match(WordlifyParser.ID)
                self.state = 531 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 530
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 533 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 535
                self.match(WordlifyParser.IN)
                self.state = 537 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 536
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 539 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 544
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.ID]:
                    self.state = 541
                    self.match(WordlifyParser.ID)
                    pass
                elif token in [WordlifyParser.ARGS]:
                    self.state = 542
                    self.args()
                    pass
                elif token in [WordlifyParser.T__3]:
                    self.state = 543
                    self.array()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 547 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 546
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 549 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 551
                self.match(WordlifyParser.DO)
                self.state = 553 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 552
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 555 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 597
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,98,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 595
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                            if la_ == 1:
                                self.state = 557
                                self.atom_instr()
                                self.state = 561
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 558
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 563
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 564
                                self.match(WordlifyParser.T__0)
                                self.state = 568
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 565
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 570
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 571
                                self.atom_instr()
                                self.state = 585 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 575
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 572
                                        self.match(WordlifyParser.WS)
                                        self.state = 577
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 578
                                    self.match(WordlifyParser.NL)
                                    self.state = 582
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 579
                                            self.match(WordlifyParser.WS) 
                                        self.state = 584
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                                    self.state = 587 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 589
                                self.block_instr()
                                self.state = 591 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 590
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 593 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 599
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,98,self._ctx)

                    self.state = 621
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 600
                        self.atom_instr()
                        self.state = 604
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 601
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 606
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                        self.state = 613
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 607
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 609 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 608
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 611 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 615
                        self.block_instr()
                        self.state = 617 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 616
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 619 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 625
                self.match(WordlifyParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 626
                self.match(WordlifyParser.FOREACH)
                self.state = 628 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 627
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 630 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 632
                self.match(WordlifyParser.ID)
                self.state = 634 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 633
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 636 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 638
                self.match(WordlifyParser.IN)
                self.state = 640 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 639
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 642 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 647
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.ID]:
                    self.state = 644
                    self.match(WordlifyParser.ID)
                    pass
                elif token in [WordlifyParser.ARGS]:
                    self.state = 645
                    self.args()
                    pass
                elif token in [WordlifyParser.T__3]:
                    self.state = 646
                    self.array()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 650 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 649
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 652 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 654
                self.match(WordlifyParser.DO)
                self.state = 656 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 655
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 658 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 703
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 701
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                            if la_ == 1:
                                self.state = 660
                                self.atom_instr()
                                self.state = 664
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 661
                                        _la = self._input.LA(1)
                                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                            self._errHandler.recoverInline(self)
                                        else:
                                            self._errHandler.reportMatch(self)
                                            self.consume() 
                                    self.state = 666
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

                                self.state = 668
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==WordlifyParser.T__0:
                                    self.state = 667
                                    self.match(WordlifyParser.T__0)


                                self.notifyErrorListeners("Missing semicolon in foreach loop")
                                self.state = 674
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 671
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 676
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 677
                                self.atom_instr()
                                self.state = 691 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 681
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 678
                                        self.match(WordlifyParser.WS)
                                        self.state = 683
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 684
                                    self.match(WordlifyParser.NL)
                                    self.state = 688
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 685
                                            self.match(WordlifyParser.WS) 
                                        self.state = 690
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

                                    self.state = 693 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 695
                                self.block_instr()
                                self.state = 697 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 696
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 699 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 705
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

                    self.state = 727
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 706
                        self.atom_instr()
                        self.state = 710
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 707
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 712
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

                        self.state = 719
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 713
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 715 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 714
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 717 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 721
                        self.block_instr()
                        self.state = 723 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 722
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 725 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 731
                self.match(WordlifyParser.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(WordlifyParser.WHILE, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_while_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_instr" ):
                listener.enterWhile_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_instr" ):
                listener.exitWhile_instr(self)




    def while_instr(self):

        localctx = WordlifyParser.While_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_while_instr)
        self._la = 0 # Token type
        try:
            self.state = 913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 734
                self.match(WordlifyParser.WHILE)
                self.state = 736 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 735
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 738 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 740
                self.cond()
                self.state = 742 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 741
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 744 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 746
                self.match(WordlifyParser.DO)
                self.state = 748 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 747
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 750 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 792
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 790
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                            if la_ == 1:
                                self.state = 752
                                self.atom_instr()
                                self.state = 756
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 753
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 758
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 759
                                self.match(WordlifyParser.T__0)
                                self.state = 763
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 760
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 765
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 766
                                self.atom_instr()
                                self.state = 780 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 770
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 767
                                        self.match(WordlifyParser.WS)
                                        self.state = 772
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 773
                                    self.match(WordlifyParser.NL)
                                    self.state = 777
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 774
                                            self.match(WordlifyParser.WS) 
                                        self.state = 779
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

                                    self.state = 782 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 784
                                self.block_instr()
                                self.state = 786 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 785
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 788 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 794
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

                    self.state = 816
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 795
                        self.atom_instr()
                        self.state = 799
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 796
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 801
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

                        self.state = 808
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 802
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 804 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 803
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 806 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 810
                        self.block_instr()
                        self.state = 812 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 811
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 814 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 820
                self.match(WordlifyParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 822
                self.match(WordlifyParser.WHILE)
                self.state = 824 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 823
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 826 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 828
                self.cond()
                self.state = 830 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 829
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 832 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 834
                self.match(WordlifyParser.DO)
                self.state = 836 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 835
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 838 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 883
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 881
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                            if la_ == 1:
                                self.state = 840
                                self.atom_instr()
                                self.state = 844
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 841
                                        _la = self._input.LA(1)
                                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                            self._errHandler.recoverInline(self)
                                        else:
                                            self._errHandler.reportMatch(self)
                                            self.consume() 
                                    self.state = 846
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

                                self.state = 848
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==WordlifyParser.T__0:
                                    self.state = 847
                                    self.match(WordlifyParser.T__0)


                                self.notifyErrorListeners("Missing semicolon in while loop")
                                self.state = 854
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 851
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 856
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 857
                                self.atom_instr()
                                self.state = 871 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 861
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 858
                                        self.match(WordlifyParser.WS)
                                        self.state = 863
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 864
                                    self.match(WordlifyParser.NL)
                                    self.state = 868
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 865
                                            self.match(WordlifyParser.WS) 
                                        self.state = 870
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

                                    self.state = 873 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 875
                                self.block_instr()
                                self.state = 877 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 876
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 879 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 885
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

                    self.state = 907
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 886
                        self.atom_instr()
                        self.state = 890
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 887
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 892
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

                        self.state = 899
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 893
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 895 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 894
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 897 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 901
                        self.block_instr()
                        self.state = 903 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 902
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 905 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 911
                self.match(WordlifyParser.END)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def else_if(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Else_ifContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Else_ifContext,i)


        def else_block(self):
            return self.getTypedRuleContext(WordlifyParser.Else_blockContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_if_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_instr" ):
                listener.enterIf_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_instr" ):
                listener.exitIf_instr(self)




    def if_instr(self):

        localctx = WordlifyParser.If_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_if_instr)
        self._la = 0 # Token type
        try:
            self.state = 941
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 915
                self.if_cond()
                self.state = 916
                self.then()
                self.state = 920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 917
                        self.else_if() 
                    self.state = 922
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

                self.state = 924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ELSE:
                    self.state = 923
                    self.else_block()


                self.state = 926
                self.match(WordlifyParser.END)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 928
                self.if_cond()
                self.state = 929
                self.then()
                self.state = 933
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 930
                        self.else_if() 
                    self.state = 935
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==WordlifyParser.ELSE:
                    self.state = 936
                    self.else_block()


                self.notifyErrorListeners("Missing 'end' at end of 'if' instruction")
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(WordlifyParser.IF, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_if_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_cond" ):
                listener.enterIf_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_cond" ):
                listener.exitIf_cond(self)




    def if_cond(self):

        localctx = WordlifyParser.If_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_if_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.match(WordlifyParser.IF)
            self.state = 945 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 944
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 947 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 949
            self.cond()
            self.state = 951 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 950
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 953 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEN(self):
            return self.getToken(WordlifyParser.THEN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_then

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThen" ):
                listener.enterThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThen" ):
                listener.exitThen(self)




    def then(self):

        localctx = WordlifyParser.ThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_then)
        self._la = 0 # Token type
        try:
            self.state = 1106
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 955
                self.match(WordlifyParser.THEN)
                self.state = 957 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 956
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 959 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 1001
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 999
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                            if la_ == 1:
                                self.state = 961
                                self.atom_instr()
                                self.state = 965
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 962
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 967
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 968
                                self.match(WordlifyParser.T__0)
                                self.state = 972
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 969
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 974
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 975
                                self.atom_instr()
                                self.state = 989 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 979
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 976
                                        self.match(WordlifyParser.WS)
                                        self.state = 981
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 982
                                    self.match(WordlifyParser.NL)
                                    self.state = 986
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 983
                                            self.match(WordlifyParser.WS) 
                                        self.state = 988
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

                                    self.state = 991 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 993
                                self.block_instr()
                                self.state = 995 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 994
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 997 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 1003
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

                    self.state = 1025
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 1004
                        self.atom_instr()
                        self.state = 1008
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,179,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1005
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 1010
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,179,self._ctx)

                        self.state = 1017
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 1011
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 1013 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1012
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()

                                else:
                                    raise NoViableAltException(self)
                                self.state = 1015 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 1019
                        self.block_instr()
                        self.state = 1021 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1020
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1023 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1029
                self.match(WordlifyParser.THEN)
                self.state = 1031 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1030
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1033 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                    self.state = 1078
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,194,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1076
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                            if la_ == 1:
                                self.state = 1035
                                self.atom_instr()
                                self.state = 1039
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,186,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 1036
                                        _la = self._input.LA(1)
                                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                            self._errHandler.recoverInline(self)
                                        else:
                                            self._errHandler.reportMatch(self)
                                            self.consume() 
                                    self.state = 1041
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,186,self._ctx)

                                self.state = 1043
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==WordlifyParser.T__0:
                                    self.state = 1042
                                    self.match(WordlifyParser.T__0)


                                self.notifyErrorListeners("Missing semicolon in if-instruction")
                                self.state = 1049
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                    self.state = 1046
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 1051
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                pass

                            elif la_ == 2:
                                self.state = 1052
                                self.atom_instr()
                                self.state = 1066 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 1056
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    while _la==WordlifyParser.WS:
                                        self.state = 1053
                                        self.match(WordlifyParser.WS)
                                        self.state = 1058
                                        self._errHandler.sync(self)
                                        _la = self._input.LA(1)

                                    self.state = 1059
                                    self.match(WordlifyParser.NL)
                                    self.state = 1063
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,190,self._ctx)
                                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                        if _alt==1:
                                            self.state = 1060
                                            self.match(WordlifyParser.WS) 
                                        self.state = 1065
                                        self._errHandler.sync(self)
                                        _alt = self._interp.adaptivePredict(self._input,190,self._ctx)

                                    self.state = 1068 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                            elif la_ == 3:
                                self.state = 1070
                                self.block_instr()
                                self.state = 1072 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while True:
                                    self.state = 1071
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()
                                    self.state = 1074 
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)
                                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        break

                                pass

                     
                        self.state = 1080
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,194,self._ctx)

                    self.state = 1102
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                        self.state = 1081
                        self.atom_instr()
                        self.state = 1085
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1082
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 1087
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

                        self.state = 1094
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [WordlifyParser.T__0]:
                            self.state = 1088
                            self.match(WordlifyParser.T__0)
                            pass
                        elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                            self.state = 1090 
                            self._errHandler.sync(self)
                            _alt = 1
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt == 1:
                                    self.state = 1089
                                    _la = self._input.LA(1)
                                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume()

                                else:
                                    raise NoViableAltException(self)
                                self.state = 1092 
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,196,self._ctx)

                            pass
                        else:
                            raise NoViableAltException(self)

                        pass
                    elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 1096
                        self.block_instr()
                        self.state = 1098 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1097
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1100 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_else_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_if" ):
                listener.enterElse_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_if" ):
                listener.exitElse_if(self)




    def else_if(self):

        localctx = WordlifyParser.Else_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_else_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.match(WordlifyParser.ELSE)
            self.state = 1110 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1109
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1112 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 1114
            self.if_cond()
            self.state = 1115
            self.then()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_else_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_block" ):
                listener.enterElse_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_block" ):
                listener.exitElse_block(self)




    def else_block(self):

        localctx = WordlifyParser.Else_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_else_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            self.match(WordlifyParser.ELSE)
            self.state = 1119 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1118
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 1121 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 1163
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1161
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                        if la_ == 1:
                            self.state = 1123
                            self.atom_instr()
                            self.state = 1127
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 1124
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 1129
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 1130
                            self.match(WordlifyParser.T__0)
                            self.state = 1134
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 1131
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 1136
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 1137
                            self.atom_instr()
                            self.state = 1151 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 1141
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 1138
                                    self.match(WordlifyParser.WS)
                                    self.state = 1143
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 1144
                                self.match(WordlifyParser.NL)
                                self.state = 1148
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,207,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 1145
                                        self.match(WordlifyParser.WS) 
                                    self.state = 1150
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,207,self._ctx)

                                self.state = 1153 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 1155
                            self.block_instr()
                            self.state = 1157 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 1156
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 1159 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 1165
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

                self.state = 1187
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 1166
                    self.atom_instr()
                    self.state = 1170
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1167
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 1172
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,212,self._ctx)

                    self.state = 1179
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 1173
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 1175 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1174
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1177 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,213,self._ctx)

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 1181
                    self.block_instr()
                    self.state = 1183 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 1182
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()

                        else:
                            raise NoViableAltException(self)
                        self.state = 1185 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,215,self._ctx)

                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cond1(self):
            return self.getTypedRuleContext(WordlifyParser.Cond1Context,0)


        def BIN_LOG_OP(self):
            return self.getToken(WordlifyParser.BIN_LOG_OP, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)




    def cond(self):

        localctx = WordlifyParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1191
            self.cond1()
            self.state = 1204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.state = 1193 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1192
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1195 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 1197
                self.match(WordlifyParser.BIN_LOG_OP)
                self.state = 1199 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1198
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1201 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 1203
                self.cond()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cond1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(WordlifyParser.NOT, 0)

        def cond1(self):
            return self.getTypedRuleContext(WordlifyParser.Cond1Context,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def single_cond(self):
            return self.getTypedRuleContext(WordlifyParser.Single_condContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_cond1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond1" ):
                listener.enterCond1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond1" ):
                listener.exitCond1(self)




    def cond1(self):

        localctx = WordlifyParser.Cond1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_cond1)
        self._la = 0 # Token type
        try:
            self.state = 1230
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.NOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1206
                self.match(WordlifyParser.NOT)
                self.state = 1208 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1207
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1210 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break

                self.state = 1212
                self.cond1()
                pass
            elif token in [WordlifyParser.L_PAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1213
                self.match(WordlifyParser.L_PAREN)
                self.state = 1217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1214
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1219
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1220
                self.cond()
                self.state = 1224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1221
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1226
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1227
                self.match(WordlifyParser.R_PAREN)
                pass
            elif token in [WordlifyParser.T__3, WordlifyParser.BASENAME, WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.LENGTH, WordlifyParser.BOOL, WordlifyParser.STR, WordlifyParser.ID, WordlifyParser.NUM]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1229
                self.single_cond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def comparison(self):
            return self.getTypedRuleContext(WordlifyParser.ComparisonContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_single_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_cond" ):
                listener.enterSingle_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_cond" ):
                listener.exitSingle_cond(self)




    def single_cond(self):

        localctx = WordlifyParser.Single_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_single_cond)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.state = 1232
                self.fn_call()
                pass

            elif la_ == 2:
                self.state = 1233
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 3:
                self.state = 1234
                self.comparison()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def CMP_OP(self):
            return self.getToken(WordlifyParser.CMP_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = WordlifyParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self.expr()
            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1238
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1243
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1244
            self.match(WordlifyParser.CMP_OP)
            self.state = 1248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1245
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1250
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1251
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def arith_expr(self):
            return self.getTypedRuleContext(WordlifyParser.Arith_exprContext,0)


        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def array_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Array_elemContext,0)


        def concat(self):
            return self.getTypedRuleContext(WordlifyParser.ConcatContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = WordlifyParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_expr)
        try:
            self.state = 1262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1253
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1254
                self.match(WordlifyParser.STR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1255
                self.match(WordlifyParser.NUM)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1256
                self.match(WordlifyParser.ID)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1257
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1258
                self.arith_expr()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1259
                self.array()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1260
                self.array_elem()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1261
                self.concat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def ARITH_OP(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ARITH_OP)
            else:
                return self.getToken(WordlifyParser.ARITH_OP, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)




    def arith_expr(self):

        localctx = WordlifyParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            self.value_or_id()
            self.state = 1279 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1268
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1265
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1270
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1271
                    self.match(WordlifyParser.ARITH_OP)
                    self.state = 1275
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1272
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1277
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1278
                    self.value_or_id()

                else:
                    raise NoViableAltException(self)
                self.state = 1281 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConcatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def CONCAT_OP(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.CONCAT_OP)
            else:
                return self.getToken(WordlifyParser.CONCAT_OP, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_concat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcat" ):
                listener.enterConcat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcat" ):
                listener.exitConcat(self)




    def concat(self):

        localctx = WordlifyParser.ConcatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_concat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.value_or_id()
            self.state = 1298 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1284
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1289
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1290
                    self.match(WordlifyParser.CONCAT_OP)
                    self.state = 1294
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1291
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1296
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1297
                    self.value_or_id()

                else:
                    raise NoViableAltException(self)
                self.state = 1300 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,234,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def basename(self):
            return self.getTypedRuleContext(WordlifyParser.BasenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def length(self):
            return self.getTypedRuleContext(WordlifyParser.LengthContext,0)


        def is_dir(self):
            return self.getTypedRuleContext(WordlifyParser.Is_dirContext,0)


        def is_file(self):
            return self.getTypedRuleContext(WordlifyParser.Is_fileContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_call" ):
                listener.enterFn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_call" ):
                listener.exitFn_call(self)




    def fn_call(self):

        localctx = WordlifyParser.Fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_fn_call)
        try:
            self.state = 1327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1302
                self.own_fn_call()
                pass
            elif token in [WordlifyParser.EXIST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1303
                self.exist()
                pass
            elif token in [WordlifyParser.PRINT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1304
                self.print_instr()
                pass
            elif token in [WordlifyParser.RENAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1305
                self.rename()
                pass
            elif token in [WordlifyParser.BASENAME]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1306
                self.basename()
                pass
            elif token in [WordlifyParser.REMOVE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1307
                self.remove()
                pass
            elif token in [WordlifyParser.MOVE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1308
                self.move()
                pass
            elif token in [WordlifyParser.COPY]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1309
                self.copy()
                pass
            elif token in [WordlifyParser.DOWNLOAD]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1310
                self.download()
                pass
            elif token in [WordlifyParser.WRITE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1311
                self.write()
                pass
            elif token in [WordlifyParser.READ]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1312
                self.read()
                pass
            elif token in [WordlifyParser.WAIT]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1313
                self.wait_instr()
                pass
            elif token in [WordlifyParser.EXECUTE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1314
                self.execute()
                pass
            elif token in [WordlifyParser.GET_FILES]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1315
                self.get_files()
                pass
            elif token in [WordlifyParser.DATE_MODIFIED]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1316
                self.date_modified()
                pass
            elif token in [WordlifyParser.SIZE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1317
                self.size()
                pass
            elif token in [WordlifyParser.EXIT]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1318
                self.exit()
                pass
            elif token in [WordlifyParser.CREATE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1319
                self.create()
                pass
            elif token in [WordlifyParser.LENGTH]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1320
                self.length()
                pass
            elif token in [WordlifyParser.IS_DIR]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1321
                self.is_dir()
                pass
            elif token in [WordlifyParser.IS_FILE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1322
                self.is_file()
                pass
            elif token in [WordlifyParser.TIME]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1323
                self.match(WordlifyParser.TIME)
                pass
            elif token in [WordlifyParser.FILE]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1324
                self.match(WordlifyParser.FILE)
                pass
            elif token in [WordlifyParser.FOLDER]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1325
                self.match(WordlifyParser.FOLDER)
                pass
            elif token in [WordlifyParser.ARGS]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1326
                self.args()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def basename(self):
            return self.getTypedRuleContext(WordlifyParser.BasenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def array_append(self):
            return self.getTypedRuleContext(WordlifyParser.Array_appendContext,0)


        def assign(self):
            return self.getTypedRuleContext(WordlifyParser.AssignContext,0)


        def is_dir(self):
            return self.getTypedRuleContext(WordlifyParser.Is_dirContext,0)


        def is_file(self):
            return self.getTypedRuleContext(WordlifyParser.Is_fileContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_atom_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_instr" ):
                listener.enterAtom_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_instr" ):
                listener.exitAtom_instr(self)




    def atom_instr(self):

        localctx = WordlifyParser.Atom_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_atom_instr)
        try:
            self.state = 1355
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1329
                self.own_fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1330
                self.exist()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1331
                self.print_instr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1332
                self.rename()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1333
                self.basename()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1334
                self.remove()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1335
                self.move()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1336
                self.copy()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1337
                self.download()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1338
                self.write()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1339
                self.read()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1340
                self.wait_instr()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1341
                self.execute()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1342
                self.get_files()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1343
                self.date_modified()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1344
                self.size()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1345
                self.exit()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1346
                self.create()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1347
                self.array_append()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1348
                self.assign()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1349
                self.is_dir()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1350
                self.is_file()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1351
                self.match(WordlifyParser.TIME)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1352
                self.match(WordlifyParser.FILE)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1353
                self.match(WordlifyParser.FOLDER)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1354
                self.args()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def array_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Array_elemContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)




    def assign(self):

        localctx = WordlifyParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_assign)
        self._la = 0 # Token type
        try:
            self.state = 1387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1359
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
                if la_ == 1:
                    self.state = 1357
                    self.match(WordlifyParser.ID)
                    pass

                elif la_ == 2:
                    self.state = 1358
                    self.array_elem()
                    pass


                self.state = 1364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1361
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1366
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1367
                self.match(WordlifyParser.T__2)
                self.state = 1371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1368
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1373
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1374
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1377
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
                if la_ == 1:
                    self.state = 1375
                    self.match(WordlifyParser.ID)
                    pass

                elif la_ == 2:
                    self.state = 1376
                    self.array_elem()
                    pass


                self.state = 1382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1379
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1384
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1385
                self.match(WordlifyParser.T__2)
                self.notifyErrorListeners("Missing value to assign to variable")
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_appendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def APPEND(self):
            return self.getToken(WordlifyParser.APPEND, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array_append

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_append" ):
                listener.enterArray_append(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_append" ):
                listener.exitArray_append(self)




    def array_append(self):

        localctx = WordlifyParser.Array_appendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_array_append)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1389
            self.match(WordlifyParser.ID)
            self.state = 1393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1390
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1395
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1396
            self.match(WordlifyParser.APPEND)
            self.state = 1400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1397
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1402
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1403
            self.expr()
            self.state = 1407
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,245,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1404
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 1409
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_elem" ):
                listener.enterArray_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_elem" ):
                listener.exitArray_elem(self)




    def array_elem(self):

        localctx = WordlifyParser.Array_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_array_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1412
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.state = 1410
                self.match(WordlifyParser.ID)
                pass
            elif token in [WordlifyParser.ARGS]:
                self.state = 1411
                self.args()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1414
            self.match(WordlifyParser.T__3)
            self.state = 1418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1415
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1420
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1421
            self.expr()
            self.state = 1425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1422
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1427
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1428
            self.match(WordlifyParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(WordlifyParser.IMPORT, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_import_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_call" ):
                listener.enterImport_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_call" ):
                listener.exitImport_call(self)




    def import_call(self):

        localctx = WordlifyParser.Import_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_import_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self.match(WordlifyParser.IMPORT)
            self.state = 1434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1431
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1436
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1437
            self.match(WordlifyParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Own_fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_own_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOwn_fn_call" ):
                listener.enterOwn_fn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOwn_fn_call" ):
                listener.exitOwn_fn_call(self)




    def own_fn_call(self):

        localctx = WordlifyParser.Own_fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_own_fn_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            self.match(WordlifyParser.ID)
            self.state = 1443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1440
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1445
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1446
            self.match(WordlifyParser.L_PAREN)
            self.state = 1450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1447
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1452
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.T__3) | (1 << WordlifyParser.BASENAME) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.LENGTH) | (1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 1453
                self.expr()
                self.state = 1457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1454
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1459
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.T__1:
                    self.state = 1460
                    self.match(WordlifyParser.T__1)
                    self.state = 1464
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1461
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1466
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1467
                    self.expr()
                    self.state = 1471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1468
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1473
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1478
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1481
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIST(self):
            return self.getToken(WordlifyParser.EXIST, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExist" ):
                listener.enterExist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExist" ):
                listener.exitExist(self)




    def exist(self):

        localctx = WordlifyParser.ExistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_exist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1483
            self.match(WordlifyParser.EXIST)
            self.state = 1487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1484
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1489
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1490
            self.match(WordlifyParser.L_PAREN)
            self.state = 1494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1491
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1496
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1497
            self.expr()
            self.state = 1501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1498
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1503
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1504
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS_FILE(self):
            return self.getToken(WordlifyParser.IS_FILE, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_is_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_file" ):
                listener.enterIs_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_file" ):
                listener.exitIs_file(self)




    def is_file(self):

        localctx = WordlifyParser.Is_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_is_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1506
            self.match(WordlifyParser.IS_FILE)
            self.state = 1510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1507
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1512
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1513
            self.match(WordlifyParser.L_PAREN)
            self.state = 1517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1514
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1519
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1520
            self.expr()
            self.state = 1524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1521
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1526
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1527
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_dirContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS_DIR(self):
            return self.getToken(WordlifyParser.IS_DIR, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_is_dir

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_dir" ):
                listener.enterIs_dir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_dir" ):
                listener.exitIs_dir(self)




    def is_dir(self):

        localctx = WordlifyParser.Is_dirContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_is_dir)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1529
            self.match(WordlifyParser.IS_DIR)
            self.state = 1533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1530
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1535
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1536
            self.match(WordlifyParser.L_PAREN)
            self.state = 1540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1537
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1542
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1543
            self.expr()
            self.state = 1547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1544
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1549
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1550
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(WordlifyParser.PRINT, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_print_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_instr" ):
                listener.enterPrint_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_instr" ):
                listener.exitPrint_instr(self)




    def print_instr(self):

        localctx = WordlifyParser.Print_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_print_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1552
            self.match(WordlifyParser.PRINT)
            self.state = 1556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1553
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1558
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1559
            self.match(WordlifyParser.L_PAREN)
            self.state = 1563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1560
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1565
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1566
            self.expr()
            self.state = 1570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1567
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1572
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1573
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(WordlifyParser.RENAME, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_rename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename" ):
                listener.enterRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename" ):
                listener.exitRename(self)




    def rename(self):

        localctx = WordlifyParser.RenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_rename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1575
            self.match(WordlifyParser.RENAME)
            self.state = 1579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1576
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1581
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1582
            self.match(WordlifyParser.L_PAREN)
            self.state = 1586
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1583
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1588
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1589
            self.expr()
            self.state = 1593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1590
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1595
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1596
            self.match(WordlifyParser.T__1)
            self.state = 1600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1597
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1602
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1603
            self.expr()
            self.state = 1607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1604
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1609
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1610
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(WordlifyParser.REMOVE, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove" ):
                listener.enterRemove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove" ):
                listener.exitRemove(self)




    def remove(self):

        localctx = WordlifyParser.RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1612
            self.match(WordlifyParser.REMOVE)
            self.state = 1616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1613
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1618
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1619
            self.match(WordlifyParser.L_PAREN)
            self.state = 1623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1620
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1625
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1626
            self.expr()
            self.state = 1630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1627
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1632
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1633
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOVE(self):
            return self.getToken(WordlifyParser.MOVE, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)




    def move(self):

        localctx = WordlifyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1635
            self.match(WordlifyParser.MOVE)
            self.state = 1639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1636
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1641
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1642
            self.match(WordlifyParser.L_PAREN)
            self.state = 1646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1643
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1648
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1649
            self.expr()
            self.state = 1653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1650
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1655
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1656
            self.match(WordlifyParser.T__1)
            self.state = 1660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1657
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1662
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1663
            self.expr()
            self.state = 1667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1664
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1669
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1670
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(WordlifyParser.COPY, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_copy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy" ):
                listener.enterCopy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy" ):
                listener.exitCopy(self)




    def copy(self):

        localctx = WordlifyParser.CopyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_copy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1672
            self.match(WordlifyParser.COPY)
            self.state = 1676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1673
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1678
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1679
            self.match(WordlifyParser.L_PAREN)
            self.state = 1683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1680
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1685
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1686
            self.expr()
            self.state = 1690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1687
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1692
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1693
            self.match(WordlifyParser.T__1)
            self.state = 1697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1694
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1699
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1700
            self.expr()
            self.state = 1704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1701
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1706
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1707
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DownloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOWNLOAD(self):
            return self.getToken(WordlifyParser.DOWNLOAD, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_download

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDownload" ):
                listener.enterDownload(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDownload" ):
                listener.exitDownload(self)




    def download(self):

        localctx = WordlifyParser.DownloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_download)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1709
            self.match(WordlifyParser.DOWNLOAD)
            self.state = 1713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1710
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1715
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1716
            self.match(WordlifyParser.L_PAREN)
            self.state = 1720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1717
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1722
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1723
            self.expr()
            self.state = 1727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1724
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1729
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1730
            self.match(WordlifyParser.T__1)
            self.state = 1734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1731
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1736
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1737
            self.expr()
            self.state = 1741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1738
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1743
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1744
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(WordlifyParser.WRITE, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_write

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite" ):
                listener.enterWrite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite" ):
                listener.exitWrite(self)




    def write(self):

        localctx = WordlifyParser.WriteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_write)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1746
            self.match(WordlifyParser.WRITE)
            self.state = 1750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1747
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1753
            self.match(WordlifyParser.L_PAREN)
            self.state = 1757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1754
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1759
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1760
            self.expr()
            self.state = 1764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1761
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1766
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1767
            self.match(WordlifyParser.T__1)
            self.state = 1771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1768
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1773
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1774
            self.expr()
            self.state = 1778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1775
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1780
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1781
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(WordlifyParser.READ, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_read

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead" ):
                listener.enterRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead" ):
                listener.exitRead(self)




    def read(self):

        localctx = WordlifyParser.ReadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_read)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1783
            self.match(WordlifyParser.READ)
            self.state = 1787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1784
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1789
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1790
            self.match(WordlifyParser.L_PAREN)
            self.state = 1794
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1791
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1796
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1797
            self.expr()
            self.state = 1801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1798
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1803
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1804
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wait_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(WordlifyParser.WAIT, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_wait_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_instr" ):
                listener.enterWait_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_instr" ):
                listener.exitWait_instr(self)




    def wait_instr(self):

        localctx = WordlifyParser.Wait_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_wait_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1806
            self.match(WordlifyParser.WAIT)
            self.state = 1810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1807
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1812
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1813
            self.match(WordlifyParser.L_PAREN)
            self.state = 1817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1814
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1819
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1820
            self.expr()
            self.state = 1824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1821
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1826
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1827
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(WordlifyParser.EXECUTE, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_execute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)




    def execute(self):

        localctx = WordlifyParser.ExecuteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_execute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1829
            self.match(WordlifyParser.EXECUTE)
            self.state = 1833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1830
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1835
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1836
            self.match(WordlifyParser.L_PAREN)
            self.state = 1840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1837
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1842
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1859
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,307,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1843
                    self.expr()
                    self.state = 1847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1844
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1849
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1850
                    self.match(WordlifyParser.T__1)
                    self.state = 1854
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1851
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1856
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
             
                self.state = 1861
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,307,self._ctx)

            self.state = 1862
            self.expr()
            self.state = 1866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1863
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1868
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1869
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_filesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET_FILES(self):
            return self.getToken(WordlifyParser.GET_FILES, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_get_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_files" ):
                listener.enterGet_files(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_files" ):
                listener.exitGet_files(self)




    def get_files(self):

        localctx = WordlifyParser.Get_filesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_get_files)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1871
            self.match(WordlifyParser.GET_FILES)
            self.state = 1875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1872
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1877
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1878
            self.match(WordlifyParser.L_PAREN)
            self.state = 1882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1879
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1884
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1885
            self.expr()
            self.state = 1889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1886
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1891
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1892
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_modifiedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_MODIFIED(self):
            return self.getToken(WordlifyParser.DATE_MODIFIED, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_date_modified

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_modified" ):
                listener.enterDate_modified(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_modified" ):
                listener.exitDate_modified(self)




    def date_modified(self):

        localctx = WordlifyParser.Date_modifiedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_date_modified)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1894
            self.match(WordlifyParser.DATE_MODIFIED)
            self.state = 1898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1895
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1900
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1901
            self.match(WordlifyParser.L_PAREN)
            self.state = 1905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1902
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1907
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1908
            self.expr()
            self.state = 1912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1909
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1914
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1915
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIZE(self):
            return self.getToken(WordlifyParser.SIZE, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSize" ):
                listener.enterSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSize" ):
                listener.exitSize(self)




    def size(self):

        localctx = WordlifyParser.SizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1917
            self.match(WordlifyParser.SIZE)
            self.state = 1921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1918
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1923
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1924
            self.match(WordlifyParser.L_PAREN)
            self.state = 1928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1925
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1930
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1931
            self.expr()
            self.state = 1935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1932
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1937
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1938
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(WordlifyParser.EXIT, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit" ):
                listener.enterExit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit" ):
                listener.exitExit(self)




    def exit(self):

        localctx = WordlifyParser.ExitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_exit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1940
            self.match(WordlifyParser.EXIT)
            self.state = 1944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1941
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1946
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1947
            self.match(WordlifyParser.L_PAREN)
            self.state = 1951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1948
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1953
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1954
            self.expr()
            self.state = 1958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1955
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1960
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1961
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(WordlifyParser.CREATE, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate" ):
                listener.enterCreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate" ):
                listener.exitCreate(self)




    def create(self):

        localctx = WordlifyParser.CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1963
            self.match(WordlifyParser.CREATE)
            self.state = 1967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1964
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1969
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1970
            self.match(WordlifyParser.L_PAREN)
            self.state = 1974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1971
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1976
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1977
            self.expr()
            self.state = 1981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1978
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1983
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1984
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LENGTH(self):
            return self.getToken(WordlifyParser.LENGTH, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLength" ):
                listener.enterLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLength" ):
                listener.exitLength(self)




    def length(self):

        localctx = WordlifyParser.LengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_length)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1986
            self.match(WordlifyParser.LENGTH)
            self.state = 1990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1987
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1992
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1993
            self.match(WordlifyParser.L_PAREN)
            self.state = 1997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1994
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1999
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2003
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.state = 2000
                self.match(WordlifyParser.ID)
                pass
            elif token in [WordlifyParser.T__3]:
                self.state = 2001
                self.array()
                pass
            elif token in [WordlifyParser.ARGS]:
                self.state = 2002
                self.args()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2005
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2010
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2011
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BASENAME(self):
            return self.getToken(WordlifyParser.BASENAME, 0)

        def L_PAREN(self):
            return self.getToken(WordlifyParser.L_PAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def R_PAREN(self):
            return self.getToken(WordlifyParser.R_PAREN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_basename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasename" ):
                listener.enterBasename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasename" ):
                listener.exitBasename(self)




    def basename(self):

        localctx = WordlifyParser.BasenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_basename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2013
            self.match(WordlifyParser.BASENAME)
            self.state = 2017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2014
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2019
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2020
            self.match(WordlifyParser.L_PAREN)
            self.state = 2024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2021
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2026
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2027
            self.expr()
            self.state = 2031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2028
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2033
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2034
            self.match(WordlifyParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARGS(self):
            return self.getToken(WordlifyParser.ARGS, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)




    def args(self):

        localctx = WordlifyParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_args)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2036
            self.match(WordlifyParser.ARGS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray" ):
                listener.enterArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray" ):
                listener.exitArray(self)




    def array(self):

        localctx = WordlifyParser.ArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2038
            self.match(WordlifyParser.T__3)
            self.state = 2042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 2039
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2044
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 2045
                self.value_or_id()
                self.state = 2062
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,334,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2049
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 2046
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 2051
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2052
                        self.match(WordlifyParser.T__1)
                        self.state = 2056
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 2053
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 2058
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2059
                        self.value_or_id() 
                    self.state = 2064
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,334,self._ctx)

                self.state = 2068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 2065
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2070
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2073
            self.match(WordlifyParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_or_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_value_or_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_or_id" ):
                listener.enterValue_or_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_or_id" ):
                listener.exitValue_or_id(self)




    def value_or_id(self):

        localctx = WordlifyParser.Value_or_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_value_or_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2075
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





