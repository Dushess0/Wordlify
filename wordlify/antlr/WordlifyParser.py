# Generated from Wordlify.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\66")
        buf.write("\u05cd\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\3\2\7\2")
        buf.write("\\\n\2\f\2\16\2_\13\2\3\2\3\2\7\2c\n\2\f\2\16\2f\13\2")
        buf.write("\3\2\3\2\7\2j\n\2\f\2\16\2m\13\2\3\2\3\2\7\2q\n\2\f\2")
        buf.write("\16\2t\13\2\3\2\3\2\7\2x\n\2\f\2\16\2{\13\2\6\2}\n\2\r")
        buf.write("\2\16\2~\3\2\3\2\5\2\u0083\n\2\3\2\6\2\u0086\n\2\r\2\16")
        buf.write("\2\u0087\7\2\u008a\n\2\f\2\16\2\u008d\13\2\3\2\3\2\7\2")
        buf.write("\u0091\n\2\f\2\16\2\u0094\13\2\3\2\5\2\u0097\n\2\3\2\3")
        buf.write("\2\5\2\u009b\n\2\5\2\u009d\n\2\5\2\u009f\n\2\3\2\7\2\u00a2")
        buf.write("\n\2\f\2\16\2\u00a5\13\2\3\2\5\2\u00a8\n\2\3\2\3\2\3\3")
        buf.write("\3\3\6\3\u00ae\n\3\r\3\16\3\u00af\3\3\3\3\7\3\u00b4\n")
        buf.write("\3\f\3\16\3\u00b7\13\3\3\3\3\3\7\3\u00bb\n\3\f\3\16\3")
        buf.write("\u00be\13\3\3\3\3\3\7\3\u00c2\n\3\f\3\16\3\u00c5\13\3")
        buf.write("\3\3\3\3\7\3\u00c9\n\3\f\3\16\3\u00cc\13\3\3\3\3\3\7\3")
        buf.write("\u00d0\n\3\f\3\16\3\u00d3\13\3\7\3\u00d5\n\3\f\3\16\3")
        buf.write("\u00d8\13\3\5\3\u00da\n\3\3\3\3\3\7\3\u00de\n\3\f\3\16")
        buf.write("\3\u00e1\13\3\3\3\3\3\6\3\u00e5\n\3\r\3\16\3\u00e6\3\3")
        buf.write("\3\3\7\3\u00eb\n\3\f\3\16\3\u00ee\13\3\3\3\3\3\7\3\u00f2")
        buf.write("\n\3\f\3\16\3\u00f5\13\3\3\3\3\3\7\3\u00f9\n\3\f\3\16")
        buf.write("\3\u00fc\13\3\3\3\3\3\7\3\u0100\n\3\f\3\16\3\u0103\13")
        buf.write("\3\6\3\u0105\n\3\r\3\16\3\u0106\3\3\3\3\6\3\u010b\n\3")
        buf.write("\r\3\16\3\u010c\7\3\u010f\n\3\f\3\16\3\u0112\13\3\3\3")
        buf.write("\3\3\7\3\u0116\n\3\f\3\16\3\u0119\13\3\3\3\5\3\u011c\n")
        buf.write("\3\3\3\5\3\u011f\n\3\3\3\6\3\u0122\n\3\r\3\16\3\u0123")
        buf.write("\5\3\u0126\n\3\3\3\3\3\3\4\3\4\3\4\5\4\u012d\n\4\3\5\3")
        buf.write("\5\6\5\u0131\n\5\r\5\16\5\u0132\3\5\3\5\6\5\u0137\n\5")
        buf.write("\r\5\16\5\u0138\3\5\3\5\6\5\u013d\n\5\r\5\16\5\u013e\3")
        buf.write("\5\3\5\6\5\u0143\n\5\r\5\16\5\u0144\3\5\3\5\6\5\u0149")
        buf.write("\n\5\r\5\16\5\u014a\3\5\3\5\7\5\u014f\n\5\f\5\16\5\u0152")
        buf.write("\13\5\3\5\3\5\7\5\u0156\n\5\f\5\16\5\u0159\13\5\3\5\3")
        buf.write("\5\7\5\u015d\n\5\f\5\16\5\u0160\13\5\3\5\3\5\7\5\u0164")
        buf.write("\n\5\f\5\16\5\u0167\13\5\6\5\u0169\n\5\r\5\16\5\u016a")
        buf.write("\3\5\3\5\6\5\u016f\n\5\r\5\16\5\u0170\7\5\u0173\n\5\f")
        buf.write("\5\16\5\u0176\13\5\3\5\3\5\7\5\u017a\n\5\f\5\16\5\u017d")
        buf.write("\13\5\3\5\3\5\6\5\u0181\n\5\r\5\16\5\u0182\5\5\u0185\n")
        buf.write("\5\3\5\3\5\6\5\u0189\n\5\r\5\16\5\u018a\5\5\u018d\n\5")
        buf.write("\5\5\u018f\n\5\3\5\3\5\3\6\3\6\6\6\u0195\n\6\r\6\16\6")
        buf.write("\u0196\3\6\3\6\6\6\u019b\n\6\r\6\16\6\u019c\3\6\3\6\6")
        buf.write("\6\u01a1\n\6\r\6\16\6\u01a2\3\6\3\6\7\6\u01a7\n\6\f\6")
        buf.write("\16\6\u01aa\13\6\3\6\3\6\7\6\u01ae\n\6\f\6\16\6\u01b1")
        buf.write("\13\6\3\6\3\6\7\6\u01b5\n\6\f\6\16\6\u01b8\13\6\3\6\3")
        buf.write("\6\7\6\u01bc\n\6\f\6\16\6\u01bf\13\6\6\6\u01c1\n\6\r\6")
        buf.write("\16\6\u01c2\3\6\3\6\6\6\u01c7\n\6\r\6\16\6\u01c8\7\6\u01cb")
        buf.write("\n\6\f\6\16\6\u01ce\13\6\3\6\3\6\7\6\u01d2\n\6\f\6\16")
        buf.write("\6\u01d5\13\6\3\6\3\6\6\6\u01d9\n\6\r\6\16\6\u01da\5\6")
        buf.write("\u01dd\n\6\3\6\3\6\6\6\u01e1\n\6\r\6\16\6\u01e2\5\6\u01e5")
        buf.write("\n\6\5\6\u01e7\n\6\3\6\3\6\3\7\3\7\3\7\7\7\u01ee\n\7\f")
        buf.write("\7\16\7\u01f1\13\7\3\7\5\7\u01f4\n\7\3\7\3\7\3\b\3\b\6")
        buf.write("\b\u01fa\n\b\r\b\16\b\u01fb\3\b\3\b\6\b\u0200\n\b\r\b")
        buf.write("\16\b\u0201\3\t\3\t\6\t\u0206\n\t\r\t\16\t\u0207\3\t\3")
        buf.write("\t\7\t\u020c\n\t\f\t\16\t\u020f\13\t\3\t\3\t\7\t\u0213")
        buf.write("\n\t\f\t\16\t\u0216\13\t\3\t\3\t\7\t\u021a\n\t\f\t\16")
        buf.write("\t\u021d\13\t\3\t\3\t\7\t\u0221\n\t\f\t\16\t\u0224\13")
        buf.write("\t\6\t\u0226\n\t\r\t\16\t\u0227\3\t\3\t\6\t\u022c\n\t")
        buf.write("\r\t\16\t\u022d\7\t\u0230\n\t\f\t\16\t\u0233\13\t\3\t")
        buf.write("\3\t\7\t\u0237\n\t\f\t\16\t\u023a\13\t\3\t\3\t\6\t\u023e")
        buf.write("\n\t\r\t\16\t\u023f\5\t\u0242\n\t\3\t\3\t\6\t\u0246\n")
        buf.write("\t\r\t\16\t\u0247\5\t\u024a\n\t\5\t\u024c\n\t\3\n\3\n")
        buf.write("\6\n\u0250\n\n\r\n\16\n\u0251\3\n\3\n\3\n\3\13\3\13\6")
        buf.write("\13\u0259\n\13\r\13\16\13\u025a\3\13\3\13\7\13\u025f\n")
        buf.write("\13\f\13\16\13\u0262\13\13\3\13\3\13\7\13\u0266\n\13\f")
        buf.write("\13\16\13\u0269\13\13\3\13\3\13\7\13\u026d\n\13\f\13\16")
        buf.write("\13\u0270\13\13\3\13\3\13\7\13\u0274\n\13\f\13\16\13\u0277")
        buf.write("\13\13\6\13\u0279\n\13\r\13\16\13\u027a\3\13\3\13\6\13")
        buf.write("\u027f\n\13\r\13\16\13\u0280\7\13\u0283\n\13\f\13\16\13")
        buf.write("\u0286\13\13\3\13\3\13\7\13\u028a\n\13\f\13\16\13\u028d")
        buf.write("\13\13\3\13\3\13\6\13\u0291\n\13\r\13\16\13\u0292\5\13")
        buf.write("\u0295\n\13\3\13\3\13\6\13\u0299\n\13\r\13\16\13\u029a")
        buf.write("\5\13\u029d\n\13\5\13\u029f\n\13\3\f\3\f\3\f\3\f\5\f\u02a5")
        buf.write("\n\f\3\r\3\r\7\r\u02a9\n\r\f\r\16\r\u02ac\13\r\3\r\3\r")
        buf.write("\7\r\u02b0\n\r\f\r\16\r\u02b3\13\r\3\r\3\r\3\16\3\16\7")
        buf.write("\16\u02b9\n\16\f\16\16\16\u02bc\13\16\3\16\3\16\7\16\u02c0")
        buf.write("\n\16\f\16\16\16\u02c3\13\16\3\16\3\16\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u02d0\n\17\3\20\3")
        buf.write("\20\7\20\u02d4\n\20\f\20\16\20\u02d7\13\20\3\20\3\20\7")
        buf.write("\20\u02db\n\20\f\20\16\20\u02de\13\20\3\20\3\20\3\21\3")
        buf.write("\21\7\21\u02e4\n\21\f\21\16\21\u02e7\13\21\3\21\3\21\7")
        buf.write("\21\u02eb\n\21\f\21\16\21\u02ee\13\21\3\21\6\21\u02f1")
        buf.write("\n\21\r\21\16\21\u02f2\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u030d\n\22\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\5\23\u0328\n\23\3\24\3\24\5\24\u032c\n")
        buf.write("\24\3\24\7\24\u032f\n\24\f\24\16\24\u0332\13\24\3\24\3")
        buf.write("\24\7\24\u0336\n\24\f\24\16\24\u0339\13\24\3\24\3\24\3")
        buf.write("\25\3\25\7\25\u033f\n\25\f\25\16\25\u0342\13\25\3\25\3")
        buf.write("\25\7\25\u0346\n\25\f\25\16\25\u0349\13\25\3\25\3\25\7")
        buf.write("\25\u034d\n\25\f\25\16\25\u0350\13\25\3\26\3\26\5\26\u0354")
        buf.write("\n\26\3\26\3\26\7\26\u0358\n\26\f\26\16\26\u035b\13\26")
        buf.write("\3\26\3\26\7\26\u035f\n\26\f\26\16\26\u0362\13\26\3\26")
        buf.write("\3\26\3\27\3\27\7\27\u0368\n\27\f\27\16\27\u036b\13\27")
        buf.write("\3\27\3\27\7\27\u036f\n\27\f\27\16\27\u0372\13\27\3\27")
        buf.write("\3\27\7\27\u0376\n\27\f\27\16\27\u0379\13\27\3\27\3\27")
        buf.write("\7\27\u037d\n\27\f\27\16\27\u0380\13\27\3\27\3\27\7\27")
        buf.write("\u0384\n\27\f\27\16\27\u0387\13\27\7\27\u0389\n\27\f\27")
        buf.write("\16\27\u038c\13\27\5\27\u038e\n\27\3\27\3\27\3\30\3\30")
        buf.write("\7\30\u0394\n\30\f\30\16\30\u0397\13\30\3\30\3\30\7\30")
        buf.write("\u039b\n\30\f\30\16\30\u039e\13\30\3\30\3\30\7\30\u03a2")
        buf.write("\n\30\f\30\16\30\u03a5\13\30\3\30\3\30\3\31\3\31\7\31")
        buf.write("\u03ab\n\31\f\31\16\31\u03ae\13\31\3\31\3\31\7\31\u03b2")
        buf.write("\n\31\f\31\16\31\u03b5\13\31\3\31\3\31\7\31\u03b9\n\31")
        buf.write("\f\31\16\31\u03bc\13\31\3\31\3\31\3\32\3\32\7\32\u03c2")
        buf.write("\n\32\f\32\16\32\u03c5\13\32\3\32\3\32\7\32\u03c9\n\32")
        buf.write("\f\32\16\32\u03cc\13\32\3\32\3\32\7\32\u03d0\n\32\f\32")
        buf.write("\16\32\u03d3\13\32\3\32\3\32\3\33\3\33\7\33\u03d9\n\33")
        buf.write("\f\33\16\33\u03dc\13\33\3\33\3\33\7\33\u03e0\n\33\f\33")
        buf.write("\16\33\u03e3\13\33\3\33\3\33\7\33\u03e7\n\33\f\33\16\33")
        buf.write("\u03ea\13\33\3\33\3\33\3\34\3\34\7\34\u03f0\n\34\f\34")
        buf.write("\16\34\u03f3\13\34\3\34\3\34\7\34\u03f7\n\34\f\34\16\34")
        buf.write("\u03fa\13\34\3\34\3\34\7\34\u03fe\n\34\f\34\16\34\u0401")
        buf.write("\13\34\3\34\3\34\7\34\u0405\n\34\f\34\16\34\u0408\13\34")
        buf.write("\3\34\3\34\7\34\u040c\n\34\f\34\16\34\u040f\13\34\3\34")
        buf.write("\3\34\3\35\3\35\7\35\u0415\n\35\f\35\16\35\u0418\13\35")
        buf.write("\3\35\3\35\7\35\u041c\n\35\f\35\16\35\u041f\13\35\3\35")
        buf.write("\3\35\7\35\u0423\n\35\f\35\16\35\u0426\13\35\3\35\3\35")
        buf.write("\3\36\3\36\7\36\u042c\n\36\f\36\16\36\u042f\13\36\3\36")
        buf.write("\3\36\7\36\u0433\n\36\f\36\16\36\u0436\13\36\3\36\3\36")
        buf.write("\7\36\u043a\n\36\f\36\16\36\u043d\13\36\3\36\3\36\7\36")
        buf.write("\u0441\n\36\f\36\16\36\u0444\13\36\3\36\3\36\7\36\u0448")
        buf.write("\n\36\f\36\16\36\u044b\13\36\3\36\3\36\3\37\3\37\7\37")
        buf.write("\u0451\n\37\f\37\16\37\u0454\13\37\3\37\3\37\7\37\u0458")
        buf.write("\n\37\f\37\16\37\u045b\13\37\3\37\3\37\7\37\u045f\n\37")
        buf.write("\f\37\16\37\u0462\13\37\3\37\3\37\7\37\u0466\n\37\f\37")
        buf.write("\16\37\u0469\13\37\3\37\3\37\7\37\u046d\n\37\f\37\16\37")
        buf.write("\u0470\13\37\3\37\3\37\3 \3 \7 \u0476\n \f \16 \u0479")
        buf.write("\13 \3 \3 \7 \u047d\n \f \16 \u0480\13 \3 \3 \7 \u0484")
        buf.write("\n \f \16 \u0487\13 \3 \3 \7 \u048b\n \f \16 \u048e\13")
        buf.write(" \3 \3 \7 \u0492\n \f \16 \u0495\13 \3 \3 \3!\3!\7!\u049b")
        buf.write("\n!\f!\16!\u049e\13!\3!\3!\7!\u04a2\n!\f!\16!\u04a5\13")
        buf.write("!\3!\3!\7!\u04a9\n!\f!\16!\u04ac\13!\3!\3!\7!\u04b0\n")
        buf.write("!\f!\16!\u04b3\13!\3!\3!\7!\u04b7\n!\f!\16!\u04ba\13!")
        buf.write("\3!\3!\3\"\3\"\7\"\u04c0\n\"\f\"\16\"\u04c3\13\"\3\"\3")
        buf.write("\"\7\"\u04c7\n\"\f\"\16\"\u04ca\13\"\3\"\3\"\7\"\u04ce")
        buf.write("\n\"\f\"\16\"\u04d1\13\"\3\"\3\"\3#\3#\7#\u04d7\n#\f#")
        buf.write("\16#\u04da\13#\3#\3#\7#\u04de\n#\f#\16#\u04e1\13#\3#\3")
        buf.write("#\7#\u04e5\n#\f#\16#\u04e8\13#\3#\3#\3$\3$\7$\u04ee\n")
        buf.write("$\f$\16$\u04f1\13$\3$\3$\7$\u04f5\n$\f$\16$\u04f8\13$")
        buf.write("\3$\3$\7$\u04fc\n$\f$\16$\u04ff\13$\3$\3$\7$\u0503\n$")
        buf.write("\f$\16$\u0506\13$\7$\u0508\n$\f$\16$\u050b\13$\3$\3$\7")
        buf.write("$\u050f\n$\f$\16$\u0512\13$\3$\3$\3%\3%\7%\u0518\n%\f")
        buf.write("%\16%\u051b\13%\3%\3%\7%\u051f\n%\f%\16%\u0522\13%\3%")
        buf.write("\3%\7%\u0526\n%\f%\16%\u0529\13%\3%\3%\3&\3&\7&\u052f")
        buf.write("\n&\f&\16&\u0532\13&\3&\3&\7&\u0536\n&\f&\16&\u0539\13")
        buf.write("&\3&\3&\7&\u053d\n&\f&\16&\u0540\13&\3&\3&\3\'\3\'\7\'")
        buf.write("\u0546\n\'\f\'\16\'\u0549\13\'\3\'\3\'\7\'\u054d\n\'\f")
        buf.write("\'\16\'\u0550\13\'\3\'\3\'\7\'\u0554\n\'\f\'\16\'\u0557")
        buf.write("\13\'\3\'\3\'\3(\3(\7(\u055d\n(\f(\16(\u0560\13(\3(\3")
        buf.write("(\7(\u0564\n(\f(\16(\u0567\13(\3(\3(\7(\u056b\n(\f(\16")
        buf.write("(\u056e\13(\3(\3(\3)\3)\7)\u0574\n)\f)\16)\u0577\13)\3")
        buf.write(")\3)\7)\u057b\n)\f)\16)\u057e\13)\3)\3)\7)\u0582\n)\f")
        buf.write(")\16)\u0585\13)\3)\3)\3*\3*\7*\u058b\n*\f*\16*\u058e\13")
        buf.write("*\3*\3*\7*\u0592\n*\f*\16*\u0595\13*\3*\3*\3*\5*\u059a")
        buf.write("\n*\3*\7*\u059d\n*\f*\16*\u05a0\13*\3*\3*\3+\3+\3,\3,")
        buf.write("\7,\u05a8\n,\f,\16,\u05ab\13,\3,\3,\7,\u05af\n,\f,\16")
        buf.write(",\u05b2\13,\3,\3,\7,\u05b6\n,\f,\16,\u05b9\13,\3,\7,\u05bc")
        buf.write("\n,\f,\16,\u05bf\13,\3,\7,\u05c2\n,\f,\16,\u05c5\13,\5")
        buf.write(",\u05c7\n,\3,\3,\3-\3-\3-\2\2.\2\4\6\b\n\f\16\20\22\24")
        buf.write("\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVX")
        buf.write("\2\4\3\2\64\65\3\2\60\63\2\u06b8\2]\3\2\2\2\4\u00ab\3")
        buf.write("\2\2\2\6\u012c\3\2\2\2\b\u012e\3\2\2\2\n\u0192\3\2\2\2")
        buf.write("\f\u01ea\3\2\2\2\16\u01f7\3\2\2\2\20\u0203\3\2\2\2\22")
        buf.write("\u024d\3\2\2\2\24\u0256\3\2\2\2\26\u02a4\3\2\2\2\30\u02a6")
        buf.write("\3\2\2\2\32\u02b6\3\2\2\2\34\u02cf\3\2\2\2\36\u02d1\3")
        buf.write("\2\2\2 \u02e1\3\2\2\2\"\u030c\3\2\2\2$\u0327\3\2\2\2&")
        buf.write("\u032b\3\2\2\2(\u033c\3\2\2\2*\u0353\3\2\2\2,\u0365\3")
        buf.write("\2\2\2.\u0391\3\2\2\2\60\u03a8\3\2\2\2\62\u03bf\3\2\2")
        buf.write("\2\64\u03d6\3\2\2\2\66\u03ed\3\2\2\28\u0412\3\2\2\2:\u0429")
        buf.write("\3\2\2\2<\u044e\3\2\2\2>\u0473\3\2\2\2@\u0498\3\2\2\2")
        buf.write("B\u04bd\3\2\2\2D\u04d4\3\2\2\2F\u04eb\3\2\2\2H\u0515\3")
        buf.write("\2\2\2J\u052c\3\2\2\2L\u0543\3\2\2\2N\u055a\3\2\2\2P\u0571")
        buf.write("\3\2\2\2R\u0588\3\2\2\2T\u05a3\3\2\2\2V\u05a5\3\2\2\2")
        buf.write("X\u05ca\3\2\2\2Z\\\t\2\2\2[Z\3\2\2\2\\_\3\2\2\2][\3\2")
        buf.write("\2\2]^\3\2\2\2^\u009e\3\2\2\2_]\3\2\2\2`d\5$\23\2ac\t")
        buf.write("\2\2\2ba\3\2\2\2cf\3\2\2\2db\3\2\2\2de\3\2\2\2eg\3\2\2")
        buf.write("\2fd\3\2\2\2gk\7\3\2\2hj\t\2\2\2ih\3\2\2\2jm\3\2\2\2k")
        buf.write("i\3\2\2\2kl\3\2\2\2l\u008a\3\2\2\2mk\3\2\2\2n|\5$\23\2")
        buf.write("oq\7\64\2\2po\3\2\2\2qt\3\2\2\2rp\3\2\2\2rs\3\2\2\2su")
        buf.write("\3\2\2\2tr\3\2\2\2uy\7\65\2\2vx\7\64\2\2wv\3\2\2\2x{\3")
        buf.write("\2\2\2yw\3\2\2\2yz\3\2\2\2z}\3\2\2\2{y\3\2\2\2|r\3\2\2")
        buf.write("\2}~\3\2\2\2~|\3\2\2\2~\177\3\2\2\2\177\u008a\3\2\2\2")
        buf.write("\u0080\u0083\5\6\4\2\u0081\u0083\5\4\3\2\u0082\u0080\3")
        buf.write("\2\2\2\u0082\u0081\3\2\2\2\u0083\u0085\3\2\2\2\u0084\u0086")
        buf.write("\t\2\2\2\u0085\u0084\3\2\2\2\u0086\u0087\3\2\2\2\u0087")
        buf.write("\u0085\3\2\2\2\u0087\u0088\3\2\2\2\u0088\u008a\3\2\2\2")
        buf.write("\u0089`\3\2\2\2\u0089n\3\2\2\2\u0089\u0082\3\2\2\2\u008a")
        buf.write("\u008d\3\2\2\2\u008b\u0089\3\2\2\2\u008b\u008c\3\2\2\2")
        buf.write("\u008c\u009c\3\2\2\2\u008d\u008b\3\2\2\2\u008e\u0092\5")
        buf.write("$\23\2\u008f\u0091\t\2\2\2\u0090\u008f\3\2\2\2\u0091\u0094")
        buf.write("\3\2\2\2\u0092\u0090\3\2\2\2\u0092\u0093\3\2\2\2\u0093")
        buf.write("\u0096\3\2\2\2\u0094\u0092\3\2\2\2\u0095\u0097\7\3\2\2")
        buf.write("\u0096\u0095\3\2\2\2\u0096\u0097\3\2\2\2\u0097\u009d\3")
        buf.write("\2\2\2\u0098\u009b\5\6\4\2\u0099\u009b\5\4\3\2\u009a\u0098")
        buf.write("\3\2\2\2\u009a\u0099\3\2\2\2\u009b\u009d\3\2\2\2\u009c")
        buf.write("\u008e\3\2\2\2\u009c\u009a\3\2\2\2\u009d\u009f\3\2\2\2")
        buf.write("\u009e\u008b\3\2\2\2\u009e\u009f\3\2\2\2\u009f\u00a3\3")
        buf.write("\2\2\2\u00a0\u00a2\t\2\2\2\u00a1\u00a0\3\2\2\2\u00a2\u00a5")
        buf.write("\3\2\2\2\u00a3\u00a1\3\2\2\2\u00a3\u00a4\3\2\2\2\u00a4")
        buf.write("\u00a7\3\2\2\2\u00a5\u00a3\3\2\2\2\u00a6\u00a8\7\66\2")
        buf.write("\2\u00a7\u00a6\3\2\2\2\u00a7\u00a8\3\2\2\2\u00a8\u00a9")
        buf.write("\3\2\2\2\u00a9\u00aa\7\2\2\3\u00aa\3\3\2\2\2\u00ab\u00ad")
        buf.write("\7\n\2\2\u00ac\u00ae\t\2\2\2\u00ad\u00ac\3\2\2\2\u00ae")
        buf.write("\u00af\3\2\2\2\u00af\u00ad\3\2\2\2\u00af\u00b0\3\2\2\2")
        buf.write("\u00b0\u00b1\3\2\2\2\u00b1\u00b5\7\62\2\2\u00b2\u00b4")
        buf.write("\t\2\2\2\u00b3\u00b2\3\2\2\2\u00b4\u00b7\3\2\2\2\u00b5")
        buf.write("\u00b3\3\2\2\2\u00b5\u00b6\3\2\2\2\u00b6\u00b8\3\2\2\2")
        buf.write("\u00b7\u00b5\3\2\2\2\u00b8\u00bc\7\4\2\2\u00b9\u00bb\t")
        buf.write("\2\2\2\u00ba\u00b9\3\2\2\2\u00bb\u00be\3\2\2\2\u00bc\u00ba")
        buf.write("\3\2\2\2\u00bc\u00bd\3\2\2\2\u00bd\u00d9\3\2\2\2\u00be")
        buf.write("\u00bc\3\2\2\2\u00bf\u00c3\7\62\2\2\u00c0\u00c2\t\2\2")
        buf.write("\2\u00c1\u00c0\3\2\2\2\u00c2\u00c5\3\2\2\2\u00c3\u00c1")
        buf.write("\3\2\2\2\u00c3\u00c4\3\2\2\2\u00c4\u00d6\3\2\2\2\u00c5")
        buf.write("\u00c3\3\2\2\2\u00c6\u00ca\7\5\2\2\u00c7\u00c9\t\2\2\2")
        buf.write("\u00c8\u00c7\3\2\2\2\u00c9\u00cc\3\2\2\2\u00ca\u00c8\3")
        buf.write("\2\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00cd\3\2\2\2\u00cc\u00ca")
        buf.write("\3\2\2\2\u00cd\u00d1\7\62\2\2\u00ce\u00d0\t\2\2\2\u00cf")
        buf.write("\u00ce\3\2\2\2\u00d0\u00d3\3\2\2\2\u00d1\u00cf\3\2\2\2")
        buf.write("\u00d1\u00d2\3\2\2\2\u00d2\u00d5\3\2\2\2\u00d3\u00d1\3")
        buf.write("\2\2\2\u00d4\u00c6\3\2\2\2\u00d5\u00d8\3\2\2\2\u00d6\u00d4")
        buf.write("\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7\u00da\3\2\2\2\u00d8")
        buf.write("\u00d6\3\2\2\2\u00d9\u00bf\3\2\2\2\u00d9\u00da\3\2\2\2")
        buf.write("\u00da\u00db\3\2\2\2\u00db\u00df\7\6\2\2\u00dc\u00de\t")
        buf.write("\2\2\2\u00dd\u00dc\3\2\2\2\u00de\u00e1\3\2\2\2\u00df\u00dd")
        buf.write("\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0\u00e2\3\2\2\2\u00e1")
        buf.write("\u00df\3\2\2\2\u00e2\u00e4\7\22\2\2\u00e3\u00e5\t\2\2")
        buf.write("\2\u00e4\u00e3\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00e4")
        buf.write("\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7\u0125\3\2\2\2\u00e8")
        buf.write("\u00ec\5$\23\2\u00e9\u00eb\t\2\2\2\u00ea\u00e9\3\2\2\2")
        buf.write("\u00eb\u00ee\3\2\2\2\u00ec\u00ea\3\2\2\2\u00ec\u00ed\3")
        buf.write("\2\2\2\u00ed\u00ef\3\2\2\2\u00ee\u00ec\3\2\2\2\u00ef\u00f3")
        buf.write("\7\3\2\2\u00f0\u00f2\t\2\2\2\u00f1\u00f0\3\2\2\2\u00f2")
        buf.write("\u00f5\3\2\2\2\u00f3\u00f1\3\2\2\2\u00f3\u00f4\3\2\2\2")
        buf.write("\u00f4\u010f\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f6\u0104\5")
        buf.write("$\23\2\u00f7\u00f9\7\64\2\2\u00f8\u00f7\3\2\2\2\u00f9")
        buf.write("\u00fc\3\2\2\2\u00fa\u00f8\3\2\2\2\u00fa\u00fb\3\2\2\2")
        buf.write("\u00fb\u00fd\3\2\2\2\u00fc\u00fa\3\2\2\2\u00fd\u0101\7")
        buf.write("\65\2\2\u00fe\u0100\7\64\2\2\u00ff\u00fe\3\2\2\2\u0100")
        buf.write("\u0103\3\2\2\2\u0101\u00ff\3\2\2\2\u0101\u0102\3\2\2\2")
        buf.write("\u0102\u0105\3\2\2\2\u0103\u0101\3\2\2\2\u0104\u00fa\3")
        buf.write("\2\2\2\u0105\u0106\3\2\2\2\u0106\u0104\3\2\2\2\u0106\u0107")
        buf.write("\3\2\2\2\u0107\u010f\3\2\2\2\u0108\u010a\5\6\4\2\u0109")
        buf.write("\u010b\t\2\2\2\u010a\u0109\3\2\2\2\u010b\u010c\3\2\2\2")
        buf.write("\u010c\u010a\3\2\2\2\u010c\u010d\3\2\2\2\u010d\u010f\3")
        buf.write("\2\2\2\u010e\u00e8\3\2\2\2\u010e\u00f6\3\2\2\2\u010e\u0108")
        buf.write("\3\2\2\2\u010f\u0112\3\2\2\2\u0110\u010e\3\2\2\2\u0110")
        buf.write("\u0111\3\2\2\2\u0111\u011e\3\2\2\2\u0112\u0110\3\2\2\2")
        buf.write("\u0113\u0117\5$\23\2\u0114\u0116\t\2\2\2\u0115\u0114\3")
        buf.write("\2\2\2\u0116\u0119\3\2\2\2\u0117\u0115\3\2\2\2\u0117\u0118")
        buf.write("\3\2\2\2\u0118\u011b\3\2\2\2\u0119\u0117\3\2\2\2\u011a")
        buf.write("\u011c\7\3\2\2\u011b\u011a\3\2\2\2\u011b\u011c\3\2\2\2")
        buf.write("\u011c\u011f\3\2\2\2\u011d\u011f\5\6\4\2\u011e\u0113\3")
        buf.write("\2\2\2\u011e\u011d\3\2\2\2\u011f\u0121\3\2\2\2\u0120\u0122")
        buf.write("\t\2\2\2\u0121\u0120\3\2\2\2\u0122\u0123\3\2\2\2\u0123")
        buf.write("\u0121\3\2\2\2\u0123\u0124\3\2\2\2\u0124\u0126\3\2\2\2")
        buf.write("\u0125\u0110\3\2\2\2\u0125\u0126\3\2\2\2\u0126\u0127\3")
        buf.write("\2\2\2\u0127\u0128\7\23\2\2\u0128\5\3\2\2\2\u0129\u012d")
        buf.write("\5\f\7\2\u012a\u012d\5\n\6\2\u012b\u012d\5\b\5\2\u012c")
        buf.write("\u0129\3\2\2\2\u012c\u012a\3\2\2\2\u012c\u012b\3\2\2\2")
        buf.write("\u012d\7\3\2\2\2\u012e\u0130\7\f\2\2\u012f\u0131\t\2\2")
        buf.write("\2\u0130\u012f\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0130")
        buf.write("\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0134\3\2\2\2\u0134")
        buf.write("\u0136\7\62\2\2\u0135\u0137\t\2\2\2\u0136\u0135\3\2\2")
        buf.write("\2\u0137\u0138\3\2\2\2\u0138\u0136\3\2\2\2\u0138\u0139")
        buf.write("\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u013c\7\r\2\2\u013b")
        buf.write("\u013d\t\2\2\2\u013c\u013b\3\2\2\2\u013d\u013e\3\2\2\2")
        buf.write("\u013e\u013c\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u0140\3")
        buf.write("\2\2\2\u0140\u0142\7\62\2\2\u0141\u0143\t\2\2\2\u0142")
        buf.write("\u0141\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0142\3\2\2\2")
        buf.write("\u0144\u0145\3\2\2\2\u0145\u0146\3\2\2\2\u0146\u0148\7")
        buf.write("\16\2\2\u0147\u0149\t\2\2\2\u0148\u0147\3\2\2\2\u0149")
        buf.write("\u014a\3\2\2\2\u014a\u0148\3\2\2\2\u014a\u014b\3\2\2\2")
        buf.write("\u014b\u018e\3\2\2\2\u014c\u0150\5$\23\2\u014d\u014f\t")
        buf.write("\2\2\2\u014e\u014d\3\2\2\2\u014f\u0152\3\2\2\2\u0150\u014e")
        buf.write("\3\2\2\2\u0150\u0151\3\2\2\2\u0151\u0153\3\2\2\2\u0152")
        buf.write("\u0150\3\2\2\2\u0153\u0157\7\3\2\2\u0154\u0156\t\2\2\2")
        buf.write("\u0155\u0154\3\2\2\2\u0156\u0159\3\2\2\2\u0157\u0155\3")
        buf.write("\2\2\2\u0157\u0158\3\2\2\2\u0158\u0173\3\2\2\2\u0159\u0157")
        buf.write("\3\2\2\2\u015a\u0168\5$\23\2\u015b\u015d\7\64\2\2\u015c")
        buf.write("\u015b\3\2\2\2\u015d\u0160\3\2\2\2\u015e\u015c\3\2\2\2")
        buf.write("\u015e\u015f\3\2\2\2\u015f\u0161\3\2\2\2\u0160\u015e\3")
        buf.write("\2\2\2\u0161\u0165\7\65\2\2\u0162\u0164\7\64\2\2\u0163")
        buf.write("\u0162\3\2\2\2\u0164\u0167\3\2\2\2\u0165\u0163\3\2\2\2")
        buf.write("\u0165\u0166\3\2\2\2\u0166\u0169\3\2\2\2\u0167\u0165\3")
        buf.write("\2\2\2\u0168\u015e\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u0168")
        buf.write("\3\2\2\2\u016a\u016b\3\2\2\2\u016b\u0173\3\2\2\2\u016c")
        buf.write("\u016e\5\6\4\2\u016d\u016f\t\2\2\2\u016e\u016d\3\2\2\2")
        buf.write("\u016f\u0170\3\2\2\2\u0170\u016e\3\2\2\2\u0170\u0171\3")
        buf.write("\2\2\2\u0171\u0173\3\2\2\2\u0172\u014c\3\2\2\2\u0172\u015a")
        buf.write("\3\2\2\2\u0172\u016c\3\2\2\2\u0173\u0176\3\2\2\2\u0174")
        buf.write("\u0172\3\2\2\2\u0174\u0175\3\2\2\2\u0175\u018c\3\2\2\2")
        buf.write("\u0176\u0174\3\2\2\2\u0177\u017b\5$\23\2\u0178\u017a\t")
        buf.write("\2\2\2\u0179\u0178\3\2\2\2\u017a\u017d\3\2\2\2\u017b\u0179")
        buf.write("\3\2\2\2\u017b\u017c\3\2\2\2\u017c\u0184\3\2\2\2\u017d")
        buf.write("\u017b\3\2\2\2\u017e\u0185\7\3\2\2\u017f\u0181\t\2\2\2")
        buf.write("\u0180\u017f\3\2\2\2\u0181\u0182\3\2\2\2\u0182\u0180\3")
        buf.write("\2\2\2\u0182\u0183\3\2\2\2\u0183\u0185\3\2\2\2\u0184\u017e")
        buf.write("\3\2\2\2\u0184\u0180\3\2\2\2\u0185\u018d\3\2\2\2\u0186")
        buf.write("\u0188\5\6\4\2\u0187\u0189\t\2\2\2\u0188\u0187\3\2\2\2")
        buf.write("\u0189\u018a\3\2\2\2\u018a\u0188\3\2\2\2\u018a\u018b\3")
        buf.write("\2\2\2\u018b\u018d\3\2\2\2\u018c\u0177\3\2\2\2\u018c\u0186")
        buf.write("\3\2\2\2\u018d\u018f\3\2\2\2\u018e\u0174\3\2\2\2\u018e")
        buf.write("\u018f\3\2\2\2\u018f\u0190\3\2\2\2\u0190\u0191\7\23\2")
        buf.write("\2\u0191\t\3\2\2\2\u0192\u0194\7\13\2\2\u0193\u0195\t")
        buf.write("\2\2\2\u0194\u0193\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0194")
        buf.write("\3\2\2\2\u0196\u0197\3\2\2\2\u0197\u0198\3\2\2\2\u0198")
        buf.write("\u019a\5\26\f\2\u0199\u019b\t\2\2\2\u019a\u0199\3\2\2")
        buf.write("\2\u019b\u019c\3\2\2\2\u019c\u019a\3\2\2\2\u019c\u019d")
        buf.write("\3\2\2\2\u019d\u019e\3\2\2\2\u019e\u01a0\7\16\2\2\u019f")
        buf.write("\u01a1\t\2\2\2\u01a0\u019f\3\2\2\2\u01a1\u01a2\3\2\2\2")
        buf.write("\u01a2\u01a0\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01e6\3")
        buf.write("\2\2\2\u01a4\u01a8\5$\23\2\u01a5\u01a7\t\2\2\2\u01a6\u01a5")
        buf.write("\3\2\2\2\u01a7\u01aa\3\2\2\2\u01a8\u01a6\3\2\2\2\u01a8")
        buf.write("\u01a9\3\2\2\2\u01a9\u01ab\3\2\2\2\u01aa\u01a8\3\2\2\2")
        buf.write("\u01ab\u01af\7\3\2\2\u01ac\u01ae\t\2\2\2\u01ad\u01ac\3")
        buf.write("\2\2\2\u01ae\u01b1\3\2\2\2\u01af\u01ad\3\2\2\2\u01af\u01b0")
        buf.write("\3\2\2\2\u01b0\u01cb\3\2\2\2\u01b1\u01af\3\2\2\2\u01b2")
        buf.write("\u01c0\5$\23\2\u01b3\u01b5\7\64\2\2\u01b4\u01b3\3\2\2")
        buf.write("\2\u01b5\u01b8\3\2\2\2\u01b6\u01b4\3\2\2\2\u01b6\u01b7")
        buf.write("\3\2\2\2\u01b7\u01b9\3\2\2\2\u01b8\u01b6\3\2\2\2\u01b9")
        buf.write("\u01bd\7\65\2\2\u01ba\u01bc\7\64\2\2\u01bb\u01ba\3\2\2")
        buf.write("\2\u01bc\u01bf\3\2\2\2\u01bd\u01bb\3\2\2\2\u01bd\u01be")
        buf.write("\3\2\2\2\u01be\u01c1\3\2\2\2\u01bf\u01bd\3\2\2\2\u01c0")
        buf.write("\u01b6\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2\u01c0\3\2\2\2")
        buf.write("\u01c2\u01c3\3\2\2\2\u01c3\u01cb\3\2\2\2\u01c4\u01c6\5")
        buf.write("\6\4\2\u01c5\u01c7\t\2\2\2\u01c6\u01c5\3\2\2\2\u01c7\u01c8")
        buf.write("\3\2\2\2\u01c8\u01c6\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9")
        buf.write("\u01cb\3\2\2\2\u01ca\u01a4\3\2\2\2\u01ca\u01b2\3\2\2\2")
        buf.write("\u01ca\u01c4\3\2\2\2\u01cb\u01ce\3\2\2\2\u01cc\u01ca\3")
        buf.write("\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01e4\3\2\2\2\u01ce\u01cc")
        buf.write("\3\2\2\2\u01cf\u01d3\5$\23\2\u01d0\u01d2\t\2\2\2\u01d1")
        buf.write("\u01d0\3\2\2\2\u01d2\u01d5\3\2\2\2\u01d3\u01d1\3\2\2\2")
        buf.write("\u01d3\u01d4\3\2\2\2\u01d4\u01dc\3\2\2\2\u01d5\u01d3\3")
        buf.write("\2\2\2\u01d6\u01dd\7\3\2\2\u01d7\u01d9\t\2\2\2\u01d8\u01d7")
        buf.write("\3\2\2\2\u01d9\u01da\3\2\2\2\u01da\u01d8\3\2\2\2\u01da")
        buf.write("\u01db\3\2\2\2\u01db\u01dd\3\2\2\2\u01dc\u01d6\3\2\2\2")
        buf.write("\u01dc\u01d8\3\2\2\2\u01dd\u01e5\3\2\2\2\u01de\u01e0\5")
        buf.write("\6\4\2\u01df\u01e1\t\2\2\2\u01e0\u01df\3\2\2\2\u01e1\u01e2")
        buf.write("\3\2\2\2\u01e2\u01e0\3\2\2\2\u01e2\u01e3\3\2\2\2\u01e3")
        buf.write("\u01e5\3\2\2\2\u01e4\u01cf\3\2\2\2\u01e4\u01de\3\2\2\2")
        buf.write("\u01e5\u01e7\3\2\2\2\u01e6\u01cc\3\2\2\2\u01e6\u01e7\3")
        buf.write("\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\u01e9\7\23\2\2\u01e9")
        buf.write("\13\3\2\2\2\u01ea\u01eb\5\16\b\2\u01eb\u01ef\5\20\t\2")
        buf.write("\u01ec\u01ee\5\22\n\2\u01ed\u01ec\3\2\2\2\u01ee\u01f1")
        buf.write("\3\2\2\2\u01ef\u01ed\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0")
        buf.write("\u01f3\3\2\2\2\u01f1\u01ef\3\2\2\2\u01f2\u01f4\5\24\13")
        buf.write("\2\u01f3\u01f2\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4\u01f5")
        buf.write("\3\2\2\2\u01f5\u01f6\7\23\2\2\u01f6\r\3\2\2\2\u01f7\u01f9")
        buf.write("\7\17\2\2\u01f8\u01fa\t\2\2\2\u01f9\u01f8\3\2\2\2\u01fa")
        buf.write("\u01fb\3\2\2\2\u01fb\u01f9\3\2\2\2\u01fb\u01fc\3\2\2\2")
        buf.write("\u01fc\u01fd\3\2\2\2\u01fd\u01ff\5\26\f\2\u01fe\u0200")
        buf.write("\t\2\2\2\u01ff\u01fe\3\2\2\2\u0200\u0201\3\2\2\2\u0201")
        buf.write("\u01ff\3\2\2\2\u0201\u0202\3\2\2\2\u0202\17\3\2\2\2\u0203")
        buf.write("\u0205\7\20\2\2\u0204\u0206\t\2\2\2\u0205\u0204\3\2\2")
        buf.write("\2\u0206\u0207\3\2\2\2\u0207\u0205\3\2\2\2\u0207\u0208")
        buf.write("\3\2\2\2\u0208\u024b\3\2\2\2\u0209\u020d\5$\23\2\u020a")
        buf.write("\u020c\t\2\2\2\u020b\u020a\3\2\2\2\u020c\u020f\3\2\2\2")
        buf.write("\u020d\u020b\3\2\2\2\u020d\u020e\3\2\2\2\u020e\u0210\3")
        buf.write("\2\2\2\u020f\u020d\3\2\2\2\u0210\u0214\7\3\2\2\u0211\u0213")
        buf.write("\t\2\2\2\u0212\u0211\3\2\2\2\u0213\u0216\3\2\2\2\u0214")
        buf.write("\u0212\3\2\2\2\u0214\u0215\3\2\2\2\u0215\u0230\3\2\2\2")
        buf.write("\u0216\u0214\3\2\2\2\u0217\u0225\5$\23\2\u0218\u021a\7")
        buf.write("\64\2\2\u0219\u0218\3\2\2\2\u021a\u021d\3\2\2\2\u021b")
        buf.write("\u0219\3\2\2\2\u021b\u021c\3\2\2\2\u021c\u021e\3\2\2\2")
        buf.write("\u021d\u021b\3\2\2\2\u021e\u0222\7\65\2\2\u021f\u0221")
        buf.write("\7\64\2\2\u0220\u021f\3\2\2\2\u0221\u0224\3\2\2\2\u0222")
        buf.write("\u0220\3\2\2\2\u0222\u0223\3\2\2\2\u0223\u0226\3\2\2\2")
        buf.write("\u0224\u0222\3\2\2\2\u0225\u021b\3\2\2\2\u0226\u0227\3")
        buf.write("\2\2\2\u0227\u0225\3\2\2\2\u0227\u0228\3\2\2\2\u0228\u0230")
        buf.write("\3\2\2\2\u0229\u022b\5\6\4\2\u022a\u022c\t\2\2\2\u022b")
        buf.write("\u022a\3\2\2\2\u022c\u022d\3\2\2\2\u022d\u022b\3\2\2\2")
        buf.write("\u022d\u022e\3\2\2\2\u022e\u0230\3\2\2\2\u022f\u0209\3")
        buf.write("\2\2\2\u022f\u0217\3\2\2\2\u022f\u0229\3\2\2\2\u0230\u0233")
        buf.write("\3\2\2\2\u0231\u022f\3\2\2\2\u0231\u0232\3\2\2\2\u0232")
        buf.write("\u0249\3\2\2\2\u0233\u0231\3\2\2\2\u0234\u0238\5$\23\2")
        buf.write("\u0235\u0237\t\2\2\2\u0236\u0235\3\2\2\2\u0237\u023a\3")
        buf.write("\2\2\2\u0238\u0236\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u0241")
        buf.write("\3\2\2\2\u023a\u0238\3\2\2\2\u023b\u0242\7\3\2\2\u023c")
        buf.write("\u023e\t\2\2\2\u023d\u023c\3\2\2\2\u023e\u023f\3\2\2\2")
        buf.write("\u023f\u023d\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0242\3")
        buf.write("\2\2\2\u0241\u023b\3\2\2\2\u0241\u023d\3\2\2\2\u0242\u024a")
        buf.write("\3\2\2\2\u0243\u0245\5\6\4\2\u0244\u0246\t\2\2\2\u0245")
        buf.write("\u0244\3\2\2\2\u0246\u0247\3\2\2\2\u0247\u0245\3\2\2\2")
        buf.write("\u0247\u0248\3\2\2\2\u0248\u024a\3\2\2\2\u0249\u0234\3")
        buf.write("\2\2\2\u0249\u0243\3\2\2\2\u024a\u024c\3\2\2\2\u024b\u0231")
        buf.write("\3\2\2\2\u024b\u024c\3\2\2\2\u024c\21\3\2\2\2\u024d\u024f")
        buf.write("\7\21\2\2\u024e\u0250\t\2\2\2\u024f\u024e\3\2\2\2\u0250")
        buf.write("\u0251\3\2\2\2\u0251\u024f\3\2\2\2\u0251\u0252\3\2\2\2")
        buf.write("\u0252\u0253\3\2\2\2\u0253\u0254\5\16\b\2\u0254\u0255")
        buf.write("\5\20\t\2\u0255\23\3\2\2\2\u0256\u0258\7\21\2\2\u0257")
        buf.write("\u0259\t\2\2\2\u0258\u0257\3\2\2\2\u0259\u025a\3\2\2\2")
        buf.write("\u025a\u0258\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u029e\3")
        buf.write("\2\2\2\u025c\u0260\5$\23\2\u025d\u025f\t\2\2\2\u025e\u025d")
        buf.write("\3\2\2\2\u025f\u0262\3\2\2\2\u0260\u025e\3\2\2\2\u0260")
        buf.write("\u0261\3\2\2\2\u0261\u0263\3\2\2\2\u0262\u0260\3\2\2\2")
        buf.write("\u0263\u0267\7\3\2\2\u0264\u0266\t\2\2\2\u0265\u0264\3")
        buf.write("\2\2\2\u0266\u0269\3\2\2\2\u0267\u0265\3\2\2\2\u0267\u0268")
        buf.write("\3\2\2\2\u0268\u0283\3\2\2\2\u0269\u0267\3\2\2\2\u026a")
        buf.write("\u0278\5$\23\2\u026b\u026d\7\64\2\2\u026c\u026b\3\2\2")
        buf.write("\2\u026d\u0270\3\2\2\2\u026e\u026c\3\2\2\2\u026e\u026f")
        buf.write("\3\2\2\2\u026f\u0271\3\2\2\2\u0270\u026e\3\2\2\2\u0271")
        buf.write("\u0275\7\65\2\2\u0272\u0274\7\64\2\2\u0273\u0272\3\2\2")
        buf.write("\2\u0274\u0277\3\2\2\2\u0275\u0273\3\2\2\2\u0275\u0276")
        buf.write("\3\2\2\2\u0276\u0279\3\2\2\2\u0277\u0275\3\2\2\2\u0278")
        buf.write("\u026e\3\2\2\2\u0279\u027a\3\2\2\2\u027a\u0278\3\2\2\2")
        buf.write("\u027a\u027b\3\2\2\2\u027b\u0283\3\2\2\2\u027c\u027e\5")
        buf.write("\6\4\2\u027d\u027f\t\2\2\2\u027e\u027d\3\2\2\2\u027f\u0280")
        buf.write("\3\2\2\2\u0280\u027e\3\2\2\2\u0280\u0281\3\2\2\2\u0281")
        buf.write("\u0283\3\2\2\2\u0282\u025c\3\2\2\2\u0282\u026a\3\2\2\2")
        buf.write("\u0282\u027c\3\2\2\2\u0283\u0286\3\2\2\2\u0284\u0282\3")
        buf.write("\2\2\2\u0284\u0285\3\2\2\2\u0285\u029c\3\2\2\2\u0286\u0284")
        buf.write("\3\2\2\2\u0287\u028b\5$\23\2\u0288\u028a\t\2\2\2\u0289")
        buf.write("\u0288\3\2\2\2\u028a\u028d\3\2\2\2\u028b\u0289\3\2\2\2")
        buf.write("\u028b\u028c\3\2\2\2\u028c\u0294\3\2\2\2\u028d\u028b\3")
        buf.write("\2\2\2\u028e\u0295\7\3\2\2\u028f\u0291\t\2\2\2\u0290\u028f")
        buf.write("\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0290\3\2\2\2\u0292")
        buf.write("\u0293\3\2\2\2\u0293\u0295\3\2\2\2\u0294\u028e\3\2\2\2")
        buf.write("\u0294\u0290\3\2\2\2\u0295\u029d\3\2\2\2\u0296\u0298\5")
        buf.write("\6\4\2\u0297\u0299\t\2\2\2\u0298\u0297\3\2\2\2\u0299\u029a")
        buf.write("\3\2\2\2\u029a\u0298\3\2\2\2\u029a\u029b\3\2\2\2\u029b")
        buf.write("\u029d\3\2\2\2\u029c\u0287\3\2\2\2\u029c\u0296\3\2\2\2")
        buf.write("\u029d\u029f\3\2\2\2\u029e\u0284\3\2\2\2\u029e\u029f\3")
        buf.write("\2\2\2\u029f\25\3\2\2\2\u02a0\u02a5\5\"\22\2\u02a1\u02a5")
        buf.write("\7\60\2\2\u02a2\u02a5\5\30\r\2\u02a3\u02a5\5\32\16\2\u02a4")
        buf.write("\u02a0\3\2\2\2\u02a4\u02a1\3\2\2\2\u02a4\u02a2\3\2\2\2")
        buf.write("\u02a4\u02a3\3\2\2\2\u02a5\27\3\2\2\2\u02a6\u02aa\5\34")
        buf.write("\17\2\u02a7\u02a9\t\2\2\2\u02a8\u02a7\3\2\2\2\u02a9\u02ac")
        buf.write("\3\2\2\2\u02aa\u02a8\3\2\2\2\u02aa\u02ab\3\2\2\2\u02ab")
        buf.write("\u02ad\3\2\2\2\u02ac\u02aa\3\2\2\2\u02ad\u02b1\7,\2\2")
        buf.write("\u02ae\u02b0\t\2\2\2\u02af\u02ae\3\2\2\2\u02b0\u02b3\3")
        buf.write("\2\2\2\u02b1\u02af\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2\u02b4")
        buf.write("\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b4\u02b5\5\34\17\2\u02b5")
        buf.write("\31\3\2\2\2\u02b6\u02ba\5\30\r\2\u02b7\u02b9\t\2\2\2\u02b8")
        buf.write("\u02b7\3\2\2\2\u02b9\u02bc\3\2\2\2\u02ba\u02b8\3\2\2\2")
        buf.write("\u02ba\u02bb\3\2\2\2\u02bb\u02bd\3\2\2\2\u02bc\u02ba\3")
        buf.write("\2\2\2\u02bd\u02c1\7/\2\2\u02be\u02c0\t\2\2\2\u02bf\u02be")
        buf.write("\3\2\2\2\u02c0\u02c3\3\2\2\2\u02c1\u02bf\3\2\2\2\u02c1")
        buf.write("\u02c2\3\2\2\2\u02c2\u02c4\3\2\2\2\u02c3\u02c1\3\2\2\2")
        buf.write("\u02c4\u02c5\5\30\r\2\u02c5\33\3\2\2\2\u02c6\u02d0\5\"")
        buf.write("\22\2\u02c7\u02d0\7\61\2\2\u02c8\u02d0\7\63\2\2\u02c9")
        buf.write("\u02d0\7\62\2\2\u02ca\u02d0\7\60\2\2\u02cb\u02d0\5\36")
        buf.write("\20\2\u02cc\u02d0\5V,\2\u02cd\u02d0\5*\26\2\u02ce\u02d0")
        buf.write("\5 \21\2\u02cf\u02c6\3\2\2\2\u02cf\u02c7\3\2\2\2\u02cf")
        buf.write("\u02c8\3\2\2\2\u02cf\u02c9\3\2\2\2\u02cf\u02ca\3\2\2\2")
        buf.write("\u02cf\u02cb\3\2\2\2\u02cf\u02cc\3\2\2\2\u02cf\u02cd\3")
        buf.write("\2\2\2\u02cf\u02ce\3\2\2\2\u02d0\35\3\2\2\2\u02d1\u02d5")
        buf.write("\5X-\2\u02d2\u02d4\t\2\2\2\u02d3\u02d2\3\2\2\2\u02d4\u02d7")
        buf.write("\3\2\2\2\u02d5\u02d3\3\2\2\2\u02d5\u02d6\3\2\2\2\u02d6")
        buf.write("\u02d8\3\2\2\2\u02d7\u02d5\3\2\2\2\u02d8\u02dc\7-\2\2")
        buf.write("\u02d9\u02db\t\2\2\2\u02da\u02d9\3\2\2\2\u02db\u02de\3")
        buf.write("\2\2\2\u02dc\u02da\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd\u02df")
        buf.write("\3\2\2\2\u02de\u02dc\3\2\2\2\u02df\u02e0\5X-\2\u02e0\37")
        buf.write("\3\2\2\2\u02e1\u02f0\5X-\2\u02e2\u02e4\t\2\2\2\u02e3\u02e2")
        buf.write("\3\2\2\2\u02e4\u02e7\3\2\2\2\u02e5\u02e3\3\2\2\2\u02e5")
        buf.write("\u02e6\3\2\2\2\u02e6\u02e8\3\2\2\2\u02e7\u02e5\3\2\2\2")
        buf.write("\u02e8\u02ec\7.\2\2\u02e9\u02eb\t\2\2\2\u02ea\u02e9\3")
        buf.write("\2\2\2\u02eb\u02ee\3\2\2\2\u02ec\u02ea\3\2\2\2\u02ec\u02ed")
        buf.write("\3\2\2\2\u02ed\u02ef\3\2\2\2\u02ee\u02ec\3\2\2\2\u02ef")
        buf.write("\u02f1\5X-\2\u02f0\u02e5\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2")
        buf.write("\u02f0\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3!\3\2\2\2\u02f4")
        buf.write("\u030d\5,\27\2\u02f5\u030d\5.\30\2\u02f6\u030d\5\64\33")
        buf.write("\2\u02f7\u030d\5\66\34\2\u02f8\u030d\58\35\2\u02f9\u030d")
        buf.write("\5:\36\2\u02fa\u030d\5<\37\2\u02fb\u030d\5> \2\u02fc\u030d")
        buf.write("\5@!\2\u02fd\u030d\5B\"\2\u02fe\u030d\5D#\2\u02ff\u030d")
        buf.write("\5F$\2\u0300\u030d\5H%\2\u0301\u030d\5J&\2\u0302\u030d")
        buf.write("\5L\'\2\u0303\u030d\5N(\2\u0304\u030d\5P)\2\u0305\u030d")
        buf.write("\5R*\2\u0306\u030d\5\62\32\2\u0307\u030d\5\60\31\2\u0308")
        buf.write("\u030d\7\37\2\2\u0309\u030d\7$\2\2\u030a\u030d\7%\2\2")
        buf.write("\u030b\u030d\5T+\2\u030c\u02f4\3\2\2\2\u030c\u02f5\3\2")
        buf.write("\2\2\u030c\u02f6\3\2\2\2\u030c\u02f7\3\2\2\2\u030c\u02f8")
        buf.write("\3\2\2\2\u030c\u02f9\3\2\2\2\u030c\u02fa\3\2\2\2\u030c")
        buf.write("\u02fb\3\2\2\2\u030c\u02fc\3\2\2\2\u030c\u02fd\3\2\2\2")
        buf.write("\u030c\u02fe\3\2\2\2\u030c\u02ff\3\2\2\2\u030c\u0300\3")
        buf.write("\2\2\2\u030c\u0301\3\2\2\2\u030c\u0302\3\2\2\2\u030c\u0303")
        buf.write("\3\2\2\2\u030c\u0304\3\2\2\2\u030c\u0305\3\2\2\2\u030c")
        buf.write("\u0306\3\2\2\2\u030c\u0307\3\2\2\2\u030c\u0308\3\2\2\2")
        buf.write("\u030c\u0309\3\2\2\2\u030c\u030a\3\2\2\2\u030c\u030b\3")
        buf.write("\2\2\2\u030d#\3\2\2\2\u030e\u0328\5,\27\2\u030f\u0328")
        buf.write("\5.\30\2\u0310\u0328\5\64\33\2\u0311\u0328\5\66\34\2\u0312")
        buf.write("\u0328\58\35\2\u0313\u0328\5:\36\2\u0314\u0328\5<\37\2")
        buf.write("\u0315\u0328\5> \2\u0316\u0328\5@!\2\u0317\u0328\5B\"")
        buf.write("\2\u0318\u0328\5D#\2\u0319\u0328\5F$\2\u031a\u0328\5H")
        buf.write("%\2\u031b\u0328\5J&\2\u031c\u0328\5L\'\2\u031d\u0328\5")
        buf.write("N(\2\u031e\u0328\5P)\2\u031f\u0328\5(\25\2\u0320\u0328")
        buf.write("\5&\24\2\u0321\u0328\5\62\32\2\u0322\u0328\5\60\31\2\u0323")
        buf.write("\u0328\7\37\2\2\u0324\u0328\7$\2\2\u0325\u0328\7%\2\2")
        buf.write("\u0326\u0328\5T+\2\u0327\u030e\3\2\2\2\u0327\u030f\3\2")
        buf.write("\2\2\u0327\u0310\3\2\2\2\u0327\u0311\3\2\2\2\u0327\u0312")
        buf.write("\3\2\2\2\u0327\u0313\3\2\2\2\u0327\u0314\3\2\2\2\u0327")
        buf.write("\u0315\3\2\2\2\u0327\u0316\3\2\2\2\u0327\u0317\3\2\2\2")
        buf.write("\u0327\u0318\3\2\2\2\u0327\u0319\3\2\2\2\u0327\u031a\3")
        buf.write("\2\2\2\u0327\u031b\3\2\2\2\u0327\u031c\3\2\2\2\u0327\u031d")
        buf.write("\3\2\2\2\u0327\u031e\3\2\2\2\u0327\u031f\3\2\2\2\u0327")
        buf.write("\u0320\3\2\2\2\u0327\u0321\3\2\2\2\u0327\u0322\3\2\2\2")
        buf.write("\u0327\u0323\3\2\2\2\u0327\u0324\3\2\2\2\u0327\u0325\3")
        buf.write("\2\2\2\u0327\u0326\3\2\2\2\u0328%\3\2\2\2\u0329\u032c")
        buf.write("\7\62\2\2\u032a\u032c\5*\26\2\u032b\u0329\3\2\2\2\u032b")
        buf.write("\u032a\3\2\2\2\u032c\u0330\3\2\2\2\u032d\u032f\t\2\2\2")
        buf.write("\u032e\u032d\3\2\2\2\u032f\u0332\3\2\2\2\u0330\u032e\3")
        buf.write("\2\2\2\u0330\u0331\3\2\2\2\u0331\u0333\3\2\2\2\u0332\u0330")
        buf.write("\3\2\2\2\u0333\u0337\7\7\2\2\u0334\u0336\t\2\2\2\u0335")
        buf.write("\u0334\3\2\2\2\u0336\u0339\3\2\2\2\u0337\u0335\3\2\2\2")
        buf.write("\u0337\u0338\3\2\2\2\u0338\u033a\3\2\2\2\u0339\u0337\3")
        buf.write("\2\2\2\u033a\u033b\5\34\17\2\u033b\'\3\2\2\2\u033c\u0340")
        buf.write("\7\62\2\2\u033d\u033f\t\2\2\2\u033e\u033d\3\2\2\2\u033f")
        buf.write("\u0342\3\2\2\2\u0340\u033e\3\2\2\2\u0340\u0341\3\2\2\2")
        buf.write("\u0341\u0343\3\2\2\2\u0342\u0340\3\2\2\2\u0343\u0347\7")
        buf.write("+\2\2\u0344\u0346\t\2\2\2\u0345\u0344\3\2\2\2\u0346\u0349")
        buf.write("\3\2\2\2\u0347\u0345\3\2\2\2\u0347\u0348\3\2\2\2\u0348")
        buf.write("\u034a\3\2\2\2\u0349\u0347\3\2\2\2\u034a\u034e\5\34\17")
        buf.write("\2\u034b\u034d\t\2\2\2\u034c\u034b\3\2\2\2\u034d\u0350")
        buf.write("\3\2\2\2\u034e\u034c\3\2\2\2\u034e\u034f\3\2\2\2\u034f")
        buf.write(")\3\2\2\2\u0350\u034e\3\2\2\2\u0351\u0354\7\62\2\2\u0352")
        buf.write("\u0354\5T+\2\u0353\u0351\3\2\2\2\u0353\u0352\3\2\2\2\u0354")
        buf.write("\u0355\3\2\2\2\u0355\u0359\7\b\2\2\u0356\u0358\t\2\2\2")
        buf.write("\u0357\u0356\3\2\2\2\u0358\u035b\3\2\2\2\u0359\u0357\3")
        buf.write("\2\2\2\u0359\u035a\3\2\2\2\u035a\u035c\3\2\2\2\u035b\u0359")
        buf.write("\3\2\2\2\u035c\u0360\5\34\17\2\u035d\u035f\t\2\2\2\u035e")
        buf.write("\u035d\3\2\2\2\u035f\u0362\3\2\2\2\u0360\u035e\3\2\2\2")
        buf.write("\u0360\u0361\3\2\2\2\u0361\u0363\3\2\2\2\u0362\u0360\3")
        buf.write("\2\2\2\u0363\u0364\7\t\2\2\u0364+\3\2\2\2\u0365\u0369")
        buf.write("\7\62\2\2\u0366\u0368\t\2\2\2\u0367\u0366\3\2\2\2\u0368")
        buf.write("\u036b\3\2\2\2\u0369\u0367\3\2\2\2\u0369\u036a\3\2\2\2")
        buf.write("\u036a\u036c\3\2\2\2\u036b\u0369\3\2\2\2\u036c\u0370\7")
        buf.write("\4\2\2\u036d\u036f\t\2\2\2\u036e\u036d\3\2\2\2\u036f\u0372")
        buf.write("\3\2\2\2\u0370\u036e\3\2\2\2\u0370\u0371\3\2\2\2\u0371")
        buf.write("\u038d\3\2\2\2\u0372\u0370\3\2\2\2\u0373\u0377\5\34\17")
        buf.write("\2\u0374\u0376\t\2\2\2\u0375\u0374\3\2\2\2\u0376\u0379")
        buf.write("\3\2\2\2\u0377\u0375\3\2\2\2\u0377\u0378\3\2\2\2\u0378")
        buf.write("\u038a\3\2\2\2\u0379\u0377\3\2\2\2\u037a\u037e\7\5\2\2")
        buf.write("\u037b\u037d\t\2\2\2\u037c\u037b\3\2\2\2\u037d\u0380\3")
        buf.write("\2\2\2\u037e\u037c\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0381")
        buf.write("\3\2\2\2\u0380\u037e\3\2\2\2\u0381\u0385\5\34\17\2\u0382")
        buf.write("\u0384\t\2\2\2\u0383\u0382\3\2\2\2\u0384\u0387\3\2\2\2")
        buf.write("\u0385\u0383\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0389\3")
        buf.write("\2\2\2\u0387\u0385\3\2\2\2\u0388\u037a\3\2\2\2\u0389\u038c")
        buf.write("\3\2\2\2\u038a\u0388\3\2\2\2\u038a\u038b\3\2\2\2\u038b")
        buf.write("\u038e\3\2\2\2\u038c\u038a\3\2\2\2\u038d\u0373\3\2\2\2")
        buf.write("\u038d\u038e\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0390\7")
        buf.write("\6\2\2\u0390-\3\2\2\2\u0391\u0395\7\24\2\2\u0392\u0394")
        buf.write("\t\2\2\2\u0393\u0392\3\2\2\2\u0394\u0397\3\2\2\2\u0395")
        buf.write("\u0393\3\2\2\2\u0395\u0396\3\2\2\2\u0396\u0398\3\2\2\2")
        buf.write("\u0397\u0395\3\2\2\2\u0398\u039c\7\4\2\2\u0399\u039b\t")
        buf.write("\2\2\2\u039a\u0399\3\2\2\2\u039b\u039e\3\2\2\2\u039c\u039a")
        buf.write("\3\2\2\2\u039c\u039d\3\2\2\2\u039d\u039f\3\2\2\2\u039e")
        buf.write("\u039c\3\2\2\2\u039f\u03a3\5\34\17\2\u03a0\u03a2\t\2\2")
        buf.write("\2\u03a1\u03a0\3\2\2\2\u03a2\u03a5\3\2\2\2\u03a3\u03a1")
        buf.write("\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03a6\3\2\2\2\u03a5")
        buf.write("\u03a3\3\2\2\2\u03a6\u03a7\7\6\2\2\u03a7/\3\2\2\2\u03a8")
        buf.write("\u03ac\7#\2\2\u03a9\u03ab\t\2\2\2\u03aa\u03a9\3\2\2\2")
        buf.write("\u03ab\u03ae\3\2\2\2\u03ac\u03aa\3\2\2\2\u03ac\u03ad\3")
        buf.write("\2\2\2\u03ad\u03af\3\2\2\2\u03ae\u03ac\3\2\2\2\u03af\u03b3")
        buf.write("\7\4\2\2\u03b0\u03b2\t\2\2\2\u03b1\u03b0\3\2\2\2\u03b2")
        buf.write("\u03b5\3\2\2\2\u03b3\u03b1\3\2\2\2\u03b3\u03b4\3\2\2\2")
        buf.write("\u03b4\u03b6\3\2\2\2\u03b5\u03b3\3\2\2\2\u03b6\u03ba\5")
        buf.write("\34\17\2\u03b7\u03b9\t\2\2\2\u03b8\u03b7\3\2\2\2\u03b9")
        buf.write("\u03bc\3\2\2\2\u03ba\u03b8\3\2\2\2\u03ba\u03bb\3\2\2\2")
        buf.write("\u03bb\u03bd\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bd\u03be\7")
        buf.write("\6\2\2\u03be\61\3\2\2\2\u03bf\u03c3\7\"\2\2\u03c0\u03c2")
        buf.write("\t\2\2\2\u03c1\u03c0\3\2\2\2\u03c2\u03c5\3\2\2\2\u03c3")
        buf.write("\u03c1\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03c6\3\2\2\2")
        buf.write("\u03c5\u03c3\3\2\2\2\u03c6\u03ca\7\4\2\2\u03c7\u03c9\t")
        buf.write("\2\2\2\u03c8\u03c7\3\2\2\2\u03c9\u03cc\3\2\2\2\u03ca\u03c8")
        buf.write("\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03cd\3\2\2\2\u03cc")
        buf.write("\u03ca\3\2\2\2\u03cd\u03d1\5\34\17\2\u03ce\u03d0\t\2\2")
        buf.write("\2\u03cf\u03ce\3\2\2\2\u03d0\u03d3\3\2\2\2\u03d1\u03cf")
        buf.write("\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d4\3\2\2\2\u03d3")
        buf.write("\u03d1\3\2\2\2\u03d4\u03d5\7\6\2\2\u03d5\63\3\2\2\2\u03d6")
        buf.write("\u03da\7\25\2\2\u03d7\u03d9\t\2\2\2\u03d8\u03d7\3\2\2")
        buf.write("\2\u03d9\u03dc\3\2\2\2\u03da\u03d8\3\2\2\2\u03da\u03db")
        buf.write("\3\2\2\2\u03db\u03dd\3\2\2\2\u03dc\u03da\3\2\2\2\u03dd")
        buf.write("\u03e1\7\4\2\2\u03de\u03e0\t\2\2\2\u03df\u03de\3\2\2\2")
        buf.write("\u03e0\u03e3\3\2\2\2\u03e1\u03df\3\2\2\2\u03e1\u03e2\3")
        buf.write("\2\2\2\u03e2\u03e4\3\2\2\2\u03e3\u03e1\3\2\2\2\u03e4\u03e8")
        buf.write("\5\34\17\2\u03e5\u03e7\t\2\2\2\u03e6\u03e5\3\2\2\2\u03e7")
        buf.write("\u03ea\3\2\2\2\u03e8\u03e6\3\2\2\2\u03e8\u03e9\3\2\2\2")
        buf.write("\u03e9\u03eb\3\2\2\2\u03ea\u03e8\3\2\2\2\u03eb\u03ec\7")
        buf.write("\6\2\2\u03ec\65\3\2\2\2\u03ed\u03f1\7\26\2\2\u03ee\u03f0")
        buf.write("\t\2\2\2\u03ef\u03ee\3\2\2\2\u03f0\u03f3\3\2\2\2\u03f1")
        buf.write("\u03ef\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f4\3\2\2\2")
        buf.write("\u03f3\u03f1\3\2\2\2\u03f4\u03f8\7\4\2\2\u03f5\u03f7\t")
        buf.write("\2\2\2\u03f6\u03f5\3\2\2\2\u03f7\u03fa\3\2\2\2\u03f8\u03f6")
        buf.write("\3\2\2\2\u03f8\u03f9\3\2\2\2\u03f9\u03fb\3\2\2\2\u03fa")
        buf.write("\u03f8\3\2\2\2\u03fb\u03ff\5\34\17\2\u03fc\u03fe\t\2\2")
        buf.write("\2\u03fd\u03fc\3\2\2\2\u03fe\u0401\3\2\2\2\u03ff\u03fd")
        buf.write("\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u0402\3\2\2\2\u0401")
        buf.write("\u03ff\3\2\2\2\u0402\u0406\7\5\2\2\u0403\u0405\t\2\2\2")
        buf.write("\u0404\u0403\3\2\2\2\u0405\u0408\3\2\2\2\u0406\u0404\3")
        buf.write("\2\2\2\u0406\u0407\3\2\2\2\u0407\u0409\3\2\2\2\u0408\u0406")
        buf.write("\3\2\2\2\u0409\u040d\5\34\17\2\u040a\u040c\t\2\2\2\u040b")
        buf.write("\u040a\3\2\2\2\u040c\u040f\3\2\2\2\u040d\u040b\3\2\2\2")
        buf.write("\u040d\u040e\3\2\2\2\u040e\u0410\3\2\2\2\u040f\u040d\3")
        buf.write("\2\2\2\u0410\u0411\7\6\2\2\u0411\67\3\2\2\2\u0412\u0416")
        buf.write("\7\27\2\2\u0413\u0415\t\2\2\2\u0414\u0413\3\2\2\2\u0415")
        buf.write("\u0418\3\2\2\2\u0416\u0414\3\2\2\2\u0416\u0417\3\2\2\2")
        buf.write("\u0417\u0419\3\2\2\2\u0418\u0416\3\2\2\2\u0419\u041d\7")
        buf.write("\4\2\2\u041a\u041c\t\2\2\2\u041b\u041a\3\2\2\2\u041c\u041f")
        buf.write("\3\2\2\2\u041d\u041b\3\2\2\2\u041d\u041e\3\2\2\2\u041e")
        buf.write("\u0420\3\2\2\2\u041f\u041d\3\2\2\2\u0420\u0424\5\34\17")
        buf.write("\2\u0421\u0423\t\2\2\2\u0422\u0421\3\2\2\2\u0423\u0426")
        buf.write("\3\2\2\2\u0424\u0422\3\2\2\2\u0424\u0425\3\2\2\2\u0425")
        buf.write("\u0427\3\2\2\2\u0426\u0424\3\2\2\2\u0427\u0428\7\6\2\2")
        buf.write("\u04289\3\2\2\2\u0429\u042d\7\30\2\2\u042a\u042c\t\2\2")
        buf.write("\2\u042b\u042a\3\2\2\2\u042c\u042f\3\2\2\2\u042d\u042b")
        buf.write("\3\2\2\2\u042d\u042e\3\2\2\2\u042e\u0430\3\2\2\2\u042f")
        buf.write("\u042d\3\2\2\2\u0430\u0434\7\4\2\2\u0431\u0433\t\2\2\2")
        buf.write("\u0432\u0431\3\2\2\2\u0433\u0436\3\2\2\2\u0434\u0432\3")
        buf.write("\2\2\2\u0434\u0435\3\2\2\2\u0435\u0437\3\2\2\2\u0436\u0434")
        buf.write("\3\2\2\2\u0437\u043b\5\34\17\2\u0438\u043a\t\2\2\2\u0439")
        buf.write("\u0438\3\2\2\2\u043a\u043d\3\2\2\2\u043b\u0439\3\2\2\2")
        buf.write("\u043b\u043c\3\2\2\2\u043c\u043e\3\2\2\2\u043d\u043b\3")
        buf.write("\2\2\2\u043e\u0442\7\5\2\2\u043f\u0441\t\2\2\2\u0440\u043f")
        buf.write("\3\2\2\2\u0441\u0444\3\2\2\2\u0442\u0440\3\2\2\2\u0442")
        buf.write("\u0443\3\2\2\2\u0443\u0445\3\2\2\2\u0444\u0442\3\2\2\2")
        buf.write("\u0445\u0449\5\34\17\2\u0446\u0448\t\2\2\2\u0447\u0446")
        buf.write("\3\2\2\2\u0448\u044b\3\2\2\2\u0449\u0447\3\2\2\2\u0449")
        buf.write("\u044a\3\2\2\2\u044a\u044c\3\2\2\2\u044b\u0449\3\2\2\2")
        buf.write("\u044c\u044d\7\6\2\2\u044d;\3\2\2\2\u044e\u0452\7\31\2")
        buf.write("\2\u044f\u0451\t\2\2\2\u0450\u044f\3\2\2\2\u0451\u0454")
        buf.write("\3\2\2\2\u0452\u0450\3\2\2\2\u0452\u0453\3\2\2\2\u0453")
        buf.write("\u0455\3\2\2\2\u0454\u0452\3\2\2\2\u0455\u0459\7\4\2\2")
        buf.write("\u0456\u0458\t\2\2\2\u0457\u0456\3\2\2\2\u0458\u045b\3")
        buf.write("\2\2\2\u0459\u0457\3\2\2\2\u0459\u045a\3\2\2\2\u045a\u045c")
        buf.write("\3\2\2\2\u045b\u0459\3\2\2\2\u045c\u0460\5\34\17\2\u045d")
        buf.write("\u045f\t\2\2\2\u045e\u045d\3\2\2\2\u045f\u0462\3\2\2\2")
        buf.write("\u0460\u045e\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0463\3")
        buf.write("\2\2\2\u0462\u0460\3\2\2\2\u0463\u0467\7\5\2\2\u0464\u0466")
        buf.write("\t\2\2\2\u0465\u0464\3\2\2\2\u0466\u0469\3\2\2\2\u0467")
        buf.write("\u0465\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u046a\3\2\2\2")
        buf.write("\u0469\u0467\3\2\2\2\u046a\u046e\5\34\17\2\u046b\u046d")
        buf.write("\t\2\2\2\u046c\u046b\3\2\2\2\u046d\u0470\3\2\2\2\u046e")
        buf.write("\u046c\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u0471\3\2\2\2")
        buf.write("\u0470\u046e\3\2\2\2\u0471\u0472\7\6\2\2\u0472=\3\2\2")
        buf.write("\2\u0473\u0477\7\32\2\2\u0474\u0476\t\2\2\2\u0475\u0474")
        buf.write("\3\2\2\2\u0476\u0479\3\2\2\2\u0477\u0475\3\2\2\2\u0477")
        buf.write("\u0478\3\2\2\2\u0478\u047a\3\2\2\2\u0479\u0477\3\2\2\2")
        buf.write("\u047a\u047e\7\4\2\2\u047b\u047d\t\2\2\2\u047c\u047b\3")
        buf.write("\2\2\2\u047d\u0480\3\2\2\2\u047e\u047c\3\2\2\2\u047e\u047f")
        buf.write("\3\2\2\2\u047f\u0481\3\2\2\2\u0480\u047e\3\2\2\2\u0481")
        buf.write("\u0485\5\34\17\2\u0482\u0484\t\2\2\2\u0483\u0482\3\2\2")
        buf.write("\2\u0484\u0487\3\2\2\2\u0485\u0483\3\2\2\2\u0485\u0486")
        buf.write("\3\2\2\2\u0486\u0488\3\2\2\2\u0487\u0485\3\2\2\2\u0488")
        buf.write("\u048c\7\5\2\2\u0489\u048b\t\2\2\2\u048a\u0489\3\2\2\2")
        buf.write("\u048b\u048e\3\2\2\2\u048c\u048a\3\2\2\2\u048c\u048d\3")
        buf.write("\2\2\2\u048d\u048f\3\2\2\2\u048e\u048c\3\2\2\2\u048f\u0493")
        buf.write("\5\34\17\2\u0490\u0492\t\2\2\2\u0491\u0490\3\2\2\2\u0492")
        buf.write("\u0495\3\2\2\2\u0493\u0491\3\2\2\2\u0493\u0494\3\2\2\2")
        buf.write("\u0494\u0496\3\2\2\2\u0495\u0493\3\2\2\2\u0496\u0497\7")
        buf.write("\6\2\2\u0497?\3\2\2\2\u0498\u049c\7\33\2\2\u0499\u049b")
        buf.write("\t\2\2\2\u049a\u0499\3\2\2\2\u049b\u049e\3\2\2\2\u049c")
        buf.write("\u049a\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u049f\3\2\2\2")
        buf.write("\u049e\u049c\3\2\2\2\u049f\u04a3\7\4\2\2\u04a0\u04a2\t")
        buf.write("\2\2\2\u04a1\u04a0\3\2\2\2\u04a2\u04a5\3\2\2\2\u04a3\u04a1")
        buf.write("\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a6\3\2\2\2\u04a5")
        buf.write("\u04a3\3\2\2\2\u04a6\u04aa\5\34\17\2\u04a7\u04a9\t\2\2")
        buf.write("\2\u04a8\u04a7\3\2\2\2\u04a9\u04ac\3\2\2\2\u04aa\u04a8")
        buf.write("\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab\u04ad\3\2\2\2\u04ac")
        buf.write("\u04aa\3\2\2\2\u04ad\u04b1\7\5\2\2\u04ae\u04b0\t\2\2\2")
        buf.write("\u04af\u04ae\3\2\2\2\u04b0\u04b3\3\2\2\2\u04b1\u04af\3")
        buf.write("\2\2\2\u04b1\u04b2\3\2\2\2\u04b2\u04b4\3\2\2\2\u04b3\u04b1")
        buf.write("\3\2\2\2\u04b4\u04b8\5\34\17\2\u04b5\u04b7\t\2\2\2\u04b6")
        buf.write("\u04b5\3\2\2\2\u04b7\u04ba\3\2\2\2\u04b8\u04b6\3\2\2\2")
        buf.write("\u04b8\u04b9\3\2\2\2\u04b9\u04bb\3\2\2\2\u04ba\u04b8\3")
        buf.write("\2\2\2\u04bb\u04bc\7\6\2\2\u04bcA\3\2\2\2\u04bd\u04c1")
        buf.write("\7(\2\2\u04be\u04c0\t\2\2\2\u04bf\u04be\3\2\2\2\u04c0")
        buf.write("\u04c3\3\2\2\2\u04c1\u04bf\3\2\2\2\u04c1\u04c2\3\2\2\2")
        buf.write("\u04c2\u04c4\3\2\2\2\u04c3\u04c1\3\2\2\2\u04c4\u04c8\7")
        buf.write("\4\2\2\u04c5\u04c7\t\2\2\2\u04c6\u04c5\3\2\2\2\u04c7\u04ca")
        buf.write("\3\2\2\2\u04c8\u04c6\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9")
        buf.write("\u04cb\3\2\2\2\u04ca\u04c8\3\2\2\2\u04cb\u04cf\5\34\17")
        buf.write("\2\u04cc\u04ce\t\2\2\2\u04cd\u04cc\3\2\2\2\u04ce\u04d1")
        buf.write("\3\2\2\2\u04cf\u04cd\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0")
        buf.write("\u04d2\3\2\2\2\u04d1\u04cf\3\2\2\2\u04d2\u04d3\7\6\2\2")
        buf.write("\u04d3C\3\2\2\2\u04d4\u04d8\7\34\2\2\u04d5\u04d7\t\2\2")
        buf.write("\2\u04d6\u04d5\3\2\2\2\u04d7\u04da\3\2\2\2\u04d8\u04d6")
        buf.write("\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04db\3\2\2\2\u04da")
        buf.write("\u04d8\3\2\2\2\u04db\u04df\7\4\2\2\u04dc\u04de\t\2\2\2")
        buf.write("\u04dd\u04dc\3\2\2\2\u04de\u04e1\3\2\2\2\u04df\u04dd\3")
        buf.write("\2\2\2\u04df\u04e0\3\2\2\2\u04e0\u04e2\3\2\2\2\u04e1\u04df")
        buf.write("\3\2\2\2\u04e2\u04e6\5\34\17\2\u04e3\u04e5\t\2\2\2\u04e4")
        buf.write("\u04e3\3\2\2\2\u04e5\u04e8\3\2\2\2\u04e6\u04e4\3\2\2\2")
        buf.write("\u04e6\u04e7\3\2\2\2\u04e7\u04e9\3\2\2\2\u04e8\u04e6\3")
        buf.write("\2\2\2\u04e9\u04ea\7\6\2\2\u04eaE\3\2\2\2\u04eb\u04ef")
        buf.write("\7\35\2\2\u04ec\u04ee\t\2\2\2\u04ed\u04ec\3\2\2\2\u04ee")
        buf.write("\u04f1\3\2\2\2\u04ef\u04ed\3\2\2\2\u04ef\u04f0\3\2\2\2")
        buf.write("\u04f0\u04f2\3\2\2\2\u04f1\u04ef\3\2\2\2\u04f2\u04f6\7")
        buf.write("\4\2\2\u04f3\u04f5\t\2\2\2\u04f4\u04f3\3\2\2\2\u04f5\u04f8")
        buf.write("\3\2\2\2\u04f6\u04f4\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7")
        buf.write("\u0509\3\2\2\2\u04f8\u04f6\3\2\2\2\u04f9\u04fd\5\34\17")
        buf.write("\2\u04fa\u04fc\t\2\2\2\u04fb\u04fa\3\2\2\2\u04fc\u04ff")
        buf.write("\3\2\2\2\u04fd\u04fb\3\2\2\2\u04fd\u04fe\3\2\2\2\u04fe")
        buf.write("\u0500\3\2\2\2\u04ff\u04fd\3\2\2\2\u0500\u0504\7\5\2\2")
        buf.write("\u0501\u0503\t\2\2\2\u0502\u0501\3\2\2\2\u0503\u0506\3")
        buf.write("\2\2\2\u0504\u0502\3\2\2\2\u0504\u0505\3\2\2\2\u0505\u0508")
        buf.write("\3\2\2\2\u0506\u0504\3\2\2\2\u0507\u04f9\3\2\2\2\u0508")
        buf.write("\u050b\3\2\2\2\u0509\u0507\3\2\2\2\u0509\u050a\3\2\2\2")
        buf.write("\u050a\u050c\3\2\2\2\u050b\u0509\3\2\2\2\u050c\u0510\5")
        buf.write("\34\17\2\u050d\u050f\t\2\2\2\u050e\u050d\3\2\2\2\u050f")
        buf.write("\u0512\3\2\2\2\u0510\u050e\3\2\2\2\u0510\u0511\3\2\2\2")
        buf.write("\u0511\u0513\3\2\2\2\u0512\u0510\3\2\2\2\u0513\u0514\7")
        buf.write("\6\2\2\u0514G\3\2\2\2\u0515\u0519\7 \2\2\u0516\u0518\t")
        buf.write("\2\2\2\u0517\u0516\3\2\2\2\u0518\u051b\3\2\2\2\u0519\u0517")
        buf.write("\3\2\2\2\u0519\u051a\3\2\2\2\u051a\u051c\3\2\2\2\u051b")
        buf.write("\u0519\3\2\2\2\u051c\u0520\7\4\2\2\u051d\u051f\t\2\2\2")
        buf.write("\u051e\u051d\3\2\2\2\u051f\u0522\3\2\2\2\u0520\u051e\3")
        buf.write("\2\2\2\u0520\u0521\3\2\2\2\u0521\u0523\3\2\2\2\u0522\u0520")
        buf.write("\3\2\2\2\u0523\u0527\5\34\17\2\u0524\u0526\t\2\2\2\u0525")
        buf.write("\u0524\3\2\2\2\u0526\u0529\3\2\2\2\u0527\u0525\3\2\2\2")
        buf.write("\u0527\u0528\3\2\2\2\u0528\u052a\3\2\2\2\u0529\u0527\3")
        buf.write("\2\2\2\u052a\u052b\7\6\2\2\u052bI\3\2\2\2\u052c\u0530")
        buf.write("\7!\2\2\u052d\u052f\t\2\2\2\u052e\u052d\3\2\2\2\u052f")
        buf.write("\u0532\3\2\2\2\u0530\u052e\3\2\2\2\u0530\u0531\3\2\2\2")
        buf.write("\u0531\u0533\3\2\2\2\u0532\u0530\3\2\2\2\u0533\u0537\7")
        buf.write("\4\2\2\u0534\u0536\t\2\2\2\u0535\u0534\3\2\2\2\u0536\u0539")
        buf.write("\3\2\2\2\u0537\u0535\3\2\2\2\u0537\u0538\3\2\2\2\u0538")
        buf.write("\u053a\3\2\2\2\u0539\u0537\3\2\2\2\u053a\u053e\5\34\17")
        buf.write("\2\u053b\u053d\t\2\2\2\u053c\u053b\3\2\2\2\u053d\u0540")
        buf.write("\3\2\2\2\u053e\u053c\3\2\2\2\u053e\u053f\3\2\2\2\u053f")
        buf.write("\u0541\3\2\2\2\u0540\u053e\3\2\2\2\u0541\u0542\7\6\2\2")
        buf.write("\u0542K\3\2\2\2\u0543\u0547\7\'\2\2\u0544\u0546\t\2\2")
        buf.write("\2\u0545\u0544\3\2\2\2\u0546\u0549\3\2\2\2\u0547\u0545")
        buf.write("\3\2\2\2\u0547\u0548\3\2\2\2\u0548\u054a\3\2\2\2\u0549")
        buf.write("\u0547\3\2\2\2\u054a\u054e\7\4\2\2\u054b\u054d\t\2\2\2")
        buf.write("\u054c\u054b\3\2\2\2\u054d\u0550\3\2\2\2\u054e\u054c\3")
        buf.write("\2\2\2\u054e\u054f\3\2\2\2\u054f\u0551\3\2\2\2\u0550\u054e")
        buf.write("\3\2\2\2\u0551\u0555\5\34\17\2\u0552\u0554\t\2\2\2\u0553")
        buf.write("\u0552\3\2\2\2\u0554\u0557\3\2\2\2\u0555\u0553\3\2\2\2")
        buf.write("\u0555\u0556\3\2\2\2\u0556\u0558\3\2\2\2\u0557\u0555\3")
        buf.write("\2\2\2\u0558\u0559\7\6\2\2\u0559M\3\2\2\2\u055a\u055e")
        buf.write("\7\36\2\2\u055b\u055d\t\2\2\2\u055c\u055b\3\2\2\2\u055d")
        buf.write("\u0560\3\2\2\2\u055e\u055c\3\2\2\2\u055e\u055f\3\2\2\2")
        buf.write("\u055f\u0561\3\2\2\2\u0560\u055e\3\2\2\2\u0561\u0565\7")
        buf.write("\4\2\2\u0562\u0564\t\2\2\2\u0563\u0562\3\2\2\2\u0564\u0567")
        buf.write("\3\2\2\2\u0565\u0563\3\2\2\2\u0565\u0566\3\2\2\2\u0566")
        buf.write("\u0568\3\2\2\2\u0567\u0565\3\2\2\2\u0568\u056c\5\34\17")
        buf.write("\2\u0569\u056b\t\2\2\2\u056a\u0569\3\2\2\2\u056b\u056e")
        buf.write("\3\2\2\2\u056c\u056a\3\2\2\2\u056c\u056d\3\2\2\2\u056d")
        buf.write("\u056f\3\2\2\2\u056e\u056c\3\2\2\2\u056f\u0570\7\6\2\2")
        buf.write("\u0570O\3\2\2\2\u0571\u0575\7)\2\2\u0572\u0574\t\2\2\2")
        buf.write("\u0573\u0572\3\2\2\2\u0574\u0577\3\2\2\2\u0575\u0573\3")
        buf.write("\2\2\2\u0575\u0576\3\2\2\2\u0576\u0578\3\2\2\2\u0577\u0575")
        buf.write("\3\2\2\2\u0578\u057c\7\4\2\2\u0579\u057b\t\2\2\2\u057a")
        buf.write("\u0579\3\2\2\2\u057b\u057e\3\2\2\2\u057c\u057a\3\2\2\2")
        buf.write("\u057c\u057d\3\2\2\2\u057d\u057f\3\2\2\2\u057e\u057c\3")
        buf.write("\2\2\2\u057f\u0583\5\34\17\2\u0580\u0582\t\2\2\2\u0581")
        buf.write("\u0580\3\2\2\2\u0582\u0585\3\2\2\2\u0583\u0581\3\2\2\2")
        buf.write("\u0583\u0584\3\2\2\2\u0584\u0586\3\2\2\2\u0585\u0583\3")
        buf.write("\2\2\2\u0586\u0587\7\6\2\2\u0587Q\3\2\2\2\u0588\u058c")
        buf.write("\7*\2\2\u0589\u058b\t\2\2\2\u058a\u0589\3\2\2\2\u058b")
        buf.write("\u058e\3\2\2\2\u058c\u058a\3\2\2\2\u058c\u058d\3\2\2\2")
        buf.write("\u058d\u058f\3\2\2\2\u058e\u058c\3\2\2\2\u058f\u0593\7")
        buf.write("\4\2\2\u0590\u0592\t\2\2\2\u0591\u0590\3\2\2\2\u0592\u0595")
        buf.write("\3\2\2\2\u0593\u0591\3\2\2\2\u0593\u0594\3\2\2\2\u0594")
        buf.write("\u0599\3\2\2\2\u0595\u0593\3\2\2\2\u0596\u059a\7\62\2")
        buf.write("\2\u0597\u059a\5V,\2\u0598\u059a\5T+\2\u0599\u0596\3\2")
        buf.write("\2\2\u0599\u0597\3\2\2\2\u0599\u0598\3\2\2\2\u059a\u059e")
        buf.write("\3\2\2\2\u059b\u059d\t\2\2\2\u059c\u059b\3\2\2\2\u059d")
        buf.write("\u05a0\3\2\2\2\u059e\u059c\3\2\2\2\u059e\u059f\3\2\2\2")
        buf.write("\u059f\u05a1\3\2\2\2\u05a0\u059e\3\2\2\2\u05a1\u05a2\7")
        buf.write("\6\2\2\u05a2S\3\2\2\2\u05a3\u05a4\7&\2\2\u05a4U\3\2\2")
        buf.write("\2\u05a5\u05a9\7\b\2\2\u05a6\u05a8\t\2\2\2\u05a7\u05a6")
        buf.write("\3\2\2\2\u05a8\u05ab\3\2\2\2\u05a9\u05a7\3\2\2\2\u05a9")
        buf.write("\u05aa\3\2\2\2\u05aa\u05c6\3\2\2\2\u05ab\u05a9\3\2\2\2")
        buf.write("\u05ac\u05bd\5X-\2\u05ad\u05af\t\2\2\2\u05ae\u05ad\3\2")
        buf.write("\2\2\u05af\u05b2\3\2\2\2\u05b0\u05ae\3\2\2\2\u05b0\u05b1")
        buf.write("\3\2\2\2\u05b1\u05b3\3\2\2\2\u05b2\u05b0\3\2\2\2\u05b3")
        buf.write("\u05b7\7\5\2\2\u05b4\u05b6\t\2\2\2\u05b5\u05b4\3\2\2\2")
        buf.write("\u05b6\u05b9\3\2\2\2\u05b7\u05b5\3\2\2\2\u05b7\u05b8\3")
        buf.write("\2\2\2\u05b8\u05ba\3\2\2\2\u05b9\u05b7\3\2\2\2\u05ba\u05bc")
        buf.write("\5X-\2\u05bb\u05b0\3\2\2\2\u05bc\u05bf\3\2\2\2\u05bd\u05bb")
        buf.write("\3\2\2\2\u05bd\u05be\3\2\2\2\u05be\u05c3\3\2\2\2\u05bf")
        buf.write("\u05bd\3\2\2\2\u05c0\u05c2\t\2\2\2\u05c1\u05c0\3\2\2\2")
        buf.write("\u05c2\u05c5\3\2\2\2\u05c3\u05c1\3\2\2\2\u05c3\u05c4\3")
        buf.write("\2\2\2\u05c4\u05c7\3\2\2\2\u05c5\u05c3\3\2\2\2\u05c6\u05ac")
        buf.write("\3\2\2\2\u05c6\u05c7\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8")
        buf.write("\u05c9\7\t\2\2\u05c9W\3\2\2\2\u05ca\u05cb\t\3\2\2\u05cb")
        buf.write("Y\3\2\2\2\u00dc]dkry~\u0082\u0087\u0089\u008b\u0092\u0096")
        buf.write("\u009a\u009c\u009e\u00a3\u00a7\u00af\u00b5\u00bc\u00c3")
        buf.write("\u00ca\u00d1\u00d6\u00d9\u00df\u00e6\u00ec\u00f3\u00fa")
        buf.write("\u0101\u0106\u010c\u010e\u0110\u0117\u011b\u011e\u0123")
        buf.write("\u0125\u012c\u0132\u0138\u013e\u0144\u014a\u0150\u0157")
        buf.write("\u015e\u0165\u016a\u0170\u0172\u0174\u017b\u0182\u0184")
        buf.write("\u018a\u018c\u018e\u0196\u019c\u01a2\u01a8\u01af\u01b6")
        buf.write("\u01bd\u01c2\u01c8\u01ca\u01cc\u01d3\u01da\u01dc\u01e2")
        buf.write("\u01e4\u01e6\u01ef\u01f3\u01fb\u0201\u0207\u020d\u0214")
        buf.write("\u021b\u0222\u0227\u022d\u022f\u0231\u0238\u023f\u0241")
        buf.write("\u0247\u0249\u024b\u0251\u025a\u0260\u0267\u026e\u0275")
        buf.write("\u027a\u0280\u0282\u0284\u028b\u0292\u0294\u029a\u029c")
        buf.write("\u029e\u02a4\u02aa\u02b1\u02ba\u02c1\u02cf\u02d5\u02dc")
        buf.write("\u02e5\u02ec\u02f2\u030c\u0327\u032b\u0330\u0337\u0340")
        buf.write("\u0347\u034e\u0353\u0359\u0360\u0369\u0370\u0377\u037e")
        buf.write("\u0385\u038a\u038d\u0395\u039c\u03a3\u03ac\u03b3\u03ba")
        buf.write("\u03c3\u03ca\u03d1\u03da\u03e1\u03e8\u03f1\u03f8\u03ff")
        buf.write("\u0406\u040d\u0416\u041d\u0424\u042d\u0434\u043b\u0442")
        buf.write("\u0449\u0452\u0459\u0460\u0467\u046e\u0477\u047e\u0485")
        buf.write("\u048c\u0493\u049c\u04a3\u04aa\u04b1\u04b8\u04c1\u04c8")
        buf.write("\u04cf\u04d8\u04df\u04e6\u04ef\u04f6\u04fd\u0504\u0509")
        buf.write("\u0510\u0519\u0520\u0527\u0530\u0537\u053e\u0547\u054e")
        buf.write("\u0555\u055e\u0565\u056c\u0575\u057c\u0583\u058c\u0593")
        buf.write("\u0599\u059e\u05a9\u05b0\u05b7\u05bd\u05c3\u05c6")
        return buf.getvalue()


class WordlifyParser ( Parser ):

    grammarFileName = "Wordlify.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'('", "','", "')'", "'='", "'['", 
                     "']'", "'fn'", "'while'", "'foreach'", "'in'", "'do'", 
                     "'if'", "'then'", "'else'", "'begin'", "'end'", "'exist'", 
                     "'print'", "'rename'", "'remove'", "'move'", "'copy'", 
                     "'download'", "'write'", "'wait'", "'execute'", "'exit'", 
                     "'time'", "'getFiles'", "'dateModified'", "'isDir'", 
                     "'isFile'", "'file'", "'folder'", "'args'", "'size'", 
                     "'read'", "'create'", "'length'", "'<-'", "<INVALID>", 
                     "<INVALID>", "'.'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "FN", "WHILE", "FOREACH", "IN", "DO", "IF", "THEN", 
                      "ELSE", "BEGIN", "END", "EXIST", "PRINT", "RENAME", 
                      "REMOVE", "MOVE", "COPY", "DOWNLOAD", "WRITE", "WAIT", 
                      "EXECUTE", "EXIT", "TIME", "GET_FILES", "DATE_MODIFIED", 
                      "IS_DIR", "IS_FILE", "FILE", "FOLDER", "ARGS", "SIZE", 
                      "READ", "CREATE", "LENGTH", "APPEND", "CMP_OP", "ARITH_OP", 
                      "CONCAT_OP", "LOG_OP", "BOOL", "STR", "ID", "NUM", 
                      "WS", "NL", "END_COMMENT" ]

    RULE_program = 0
    RULE_fn_def = 1
    RULE_block_instr = 2
    RULE_foreach = 3
    RULE_while_instr = 4
    RULE_if_instr = 5
    RULE_if_cond = 6
    RULE_then = 7
    RULE_else_if = 8
    RULE_else_block = 9
    RULE_cond = 10
    RULE_comparison = 11
    RULE_double_comparsion = 12
    RULE_expr = 13
    RULE_arith_expr = 14
    RULE_concat = 15
    RULE_fn_call = 16
    RULE_atom_instr = 17
    RULE_assign = 18
    RULE_array_append = 19
    RULE_array_elem = 20
    RULE_own_fn_call = 21
    RULE_exist = 22
    RULE_is_file = 23
    RULE_is_dir = 24
    RULE_print_instr = 25
    RULE_rename = 26
    RULE_remove = 27
    RULE_move = 28
    RULE_copy = 29
    RULE_download = 30
    RULE_write = 31
    RULE_read = 32
    RULE_wait_instr = 33
    RULE_execute = 34
    RULE_get_files = 35
    RULE_date_modified = 36
    RULE_size = 37
    RULE_exit = 38
    RULE_create = 39
    RULE_length = 40
    RULE_args = 41
    RULE_array = 42
    RULE_value_or_id = 43

    ruleNames =  [ "program", "fn_def", "block_instr", "foreach", "while_instr", 
                   "if_instr", "if_cond", "then", "else_if", "else_block", 
                   "cond", "comparison", "double_comparsion", "expr", "arith_expr", 
                   "concat", "fn_call", "atom_instr", "assign", "array_append", 
                   "array_elem", "own_fn_call", "exist", "is_file", "is_dir", 
                   "print_instr", "rename", "remove", "move", "copy", "download", 
                   "write", "read", "wait_instr", "execute", "get_files", 
                   "date_modified", "size", "exit", "create", "length", 
                   "args", "array", "value_or_id" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    FN=8
    WHILE=9
    FOREACH=10
    IN=11
    DO=12
    IF=13
    THEN=14
    ELSE=15
    BEGIN=16
    END=17
    EXIST=18
    PRINT=19
    RENAME=20
    REMOVE=21
    MOVE=22
    COPY=23
    DOWNLOAD=24
    WRITE=25
    WAIT=26
    EXECUTE=27
    EXIT=28
    TIME=29
    GET_FILES=30
    DATE_MODIFIED=31
    IS_DIR=32
    IS_FILE=33
    FILE=34
    FOLDER=35
    ARGS=36
    SIZE=37
    READ=38
    CREATE=39
    LENGTH=40
    APPEND=41
    CMP_OP=42
    ARITH_OP=43
    CONCAT_OP=44
    LOG_OP=45
    BOOL=46
    STR=47
    ID=48
    NUM=49
    WS=50
    NL=51
    END_COMMENT=52

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(WordlifyParser.EOF, 0)

        def END_COMMENT(self):
            return self.getToken(WordlifyParser.END_COMMENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def fn_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Fn_defContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Fn_defContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = WordlifyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 91
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 88
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 93
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.FN) | (1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 137
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 135
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                        if la_ == 1:
                            self.state = 94
                            self.atom_instr()
                            self.state = 98
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 95
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 100
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 101
                            self.match(WordlifyParser.T__0)
                            self.state = 105
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 102
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 107
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 108
                            self.atom_instr()
                            self.state = 122 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 112
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 109
                                    self.match(WordlifyParser.WS)
                                    self.state = 114
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 115
                                self.match(WordlifyParser.NL)
                                self.state = 119
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 116
                                        self.match(WordlifyParser.WS) 
                                    self.state = 121
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                                self.state = 124 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 128
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                                self.state = 126
                                self.block_instr()
                                pass
                            elif token in [WordlifyParser.FN]:
                                self.state = 127
                                self.fn_def()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 131 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 130
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 133 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 139
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                self.state = 154
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 140
                    self.atom_instr()
                    self.state = 144
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 141
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 146
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                    self.state = 148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==WordlifyParser.T__0:
                        self.state = 147
                        self.match(WordlifyParser.T__0)


                    pass
                elif token in [WordlifyParser.FN, WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 152
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 150
                        self.block_instr()
                        pass
                    elif token in [WordlifyParser.FN]:
                        self.state = 151
                        self.fn_def()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 158
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 163
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 165
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.END_COMMENT:
                self.state = 164
                self.match(WordlifyParser.END_COMMENT)


            self.state = 167
            self.match(WordlifyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FN(self):
            return self.getToken(WordlifyParser.FN, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def BEGIN(self):
            return self.getToken(WordlifyParser.BEGIN, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_def" ):
                listener.enterFn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_def" ):
                listener.exitFn_def(self)




    def fn_def(self):

        localctx = WordlifyParser.Fn_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fn_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 169
            self.match(WordlifyParser.FN)
            self.state = 171 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 170
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 173 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 175
            self.match(WordlifyParser.ID)
            self.state = 179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 176
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 181
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 182
            self.match(WordlifyParser.T__1)
            self.state = 186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 183
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 188
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.ID:
                self.state = 189
                self.match(WordlifyParser.ID)
                self.state = 193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 190
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 195
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.T__2:
                    self.state = 196
                    self.match(WordlifyParser.T__2)
                    self.state = 200
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 197
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 202
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 203
                    self.match(WordlifyParser.ID)
                    self.state = 207
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 204
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 209
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 214
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 217
            self.match(WordlifyParser.T__3)
            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 218
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 223
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 224
            self.match(WordlifyParser.BEGIN)
            self.state = 226 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 225
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 228 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 270
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 268
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                        if la_ == 1:
                            self.state = 230
                            self.atom_instr()
                            self.state = 234
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 231
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 236
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 237
                            self.match(WordlifyParser.T__0)
                            self.state = 241
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 238
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 243
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 244
                            self.atom_instr()
                            self.state = 258 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 248
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 245
                                    self.match(WordlifyParser.WS)
                                    self.state = 250
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 251
                                self.match(WordlifyParser.NL)
                                self.state = 255
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 252
                                        self.match(WordlifyParser.WS) 
                                    self.state = 257
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                                self.state = 260 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 262
                            self.block_instr()
                            self.state = 264 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 263
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 266 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 272
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                self.state = 284
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 273
                    self.atom_instr()
                    self.state = 277
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 274
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 279
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                    self.state = 281
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==WordlifyParser.T__0:
                        self.state = 280
                        self.match(WordlifyParser.T__0)


                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 283
                    self.block_instr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 287 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 286
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 289 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break



            self.state = 293
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_instr(self):
            return self.getTypedRuleContext(WordlifyParser.If_instrContext,0)


        def while_instr(self):
            return self.getTypedRuleContext(WordlifyParser.While_instrContext,0)


        def foreach(self):
            return self.getTypedRuleContext(WordlifyParser.ForeachContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_block_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_instr" ):
                listener.enterBlock_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_instr" ):
                listener.exitBlock_instr(self)




    def block_instr(self):

        localctx = WordlifyParser.Block_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block_instr)
        try:
            self.state = 298
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 295
                self.if_instr()
                pass
            elif token in [WordlifyParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 296
                self.while_instr()
                pass
            elif token in [WordlifyParser.FOREACH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 297
                self.foreach()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeachContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(WordlifyParser.FOREACH, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def IN(self):
            return self.getToken(WordlifyParser.IN, 0)

        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_foreach

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeach" ):
                listener.enterForeach(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeach" ):
                listener.exitForeach(self)




    def foreach(self):

        localctx = WordlifyParser.ForeachContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_foreach)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(WordlifyParser.FOREACH)
            self.state = 302 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 301
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 304 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 306
            self.match(WordlifyParser.ID)
            self.state = 308 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 307
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 310 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 312
            self.match(WordlifyParser.IN)
            self.state = 314 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 313
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 316 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 318
            self.match(WordlifyParser.ID)
            self.state = 320 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 319
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 322 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 324
            self.match(WordlifyParser.DO)
            self.state = 326 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 325
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 328 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 370
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 368
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                        if la_ == 1:
                            self.state = 330
                            self.atom_instr()
                            self.state = 334
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 331
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 336
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 337
                            self.match(WordlifyParser.T__0)
                            self.state = 341
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 338
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 343
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 344
                            self.atom_instr()
                            self.state = 358 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 348
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 345
                                    self.match(WordlifyParser.WS)
                                    self.state = 350
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 351
                                self.match(WordlifyParser.NL)
                                self.state = 355
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 352
                                        self.match(WordlifyParser.WS) 
                                    self.state = 357
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                                self.state = 360 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 362
                            self.block_instr()
                            self.state = 364 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 363
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 366 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 372
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

                self.state = 394
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 373
                    self.atom_instr()
                    self.state = 377
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 374
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 379
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

                    self.state = 386
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 380
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 382 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 381
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 384 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 388
                    self.block_instr()
                    self.state = 390 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 389
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 392 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 398
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(WordlifyParser.WHILE, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_while_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_instr" ):
                listener.enterWhile_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_instr" ):
                listener.exitWhile_instr(self)




    def while_instr(self):

        localctx = WordlifyParser.While_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_while_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(WordlifyParser.WHILE)
            self.state = 402 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 401
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 404 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 406
            self.cond()
            self.state = 408 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 407
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 410 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 412
            self.match(WordlifyParser.DO)
            self.state = 414 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 413
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 416 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 458
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 456
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                        if la_ == 1:
                            self.state = 418
                            self.atom_instr()
                            self.state = 422
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 419
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 424
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 425
                            self.match(WordlifyParser.T__0)
                            self.state = 429
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 426
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 431
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 432
                            self.atom_instr()
                            self.state = 446 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 436
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 433
                                    self.match(WordlifyParser.WS)
                                    self.state = 438
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 439
                                self.match(WordlifyParser.NL)
                                self.state = 443
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 440
                                        self.match(WordlifyParser.WS) 
                                    self.state = 445
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

                                self.state = 448 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 450
                            self.block_instr()
                            self.state = 452 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 451
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 454 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 460
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

                self.state = 482
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 461
                    self.atom_instr()
                    self.state = 465
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 462
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 467
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                    self.state = 474
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 468
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 470 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 469
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 472 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 476
                    self.block_instr()
                    self.state = 478 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 477
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 480 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 486
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def else_if(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Else_ifContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Else_ifContext,i)


        def else_block(self):
            return self.getTypedRuleContext(WordlifyParser.Else_blockContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_if_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_instr" ):
                listener.enterIf_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_instr" ):
                listener.exitIf_instr(self)




    def if_instr(self):

        localctx = WordlifyParser.If_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_if_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            self.if_cond()
            self.state = 489
            self.then()
            self.state = 493
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 490
                    self.else_if() 
                self.state = 495
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.ELSE:
                self.state = 496
                self.else_block()


            self.state = 499
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(WordlifyParser.IF, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_if_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_cond" ):
                listener.enterIf_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_cond" ):
                listener.exitIf_cond(self)




    def if_cond(self):

        localctx = WordlifyParser.If_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_if_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.match(WordlifyParser.IF)
            self.state = 503 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 502
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 505 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 507
            self.cond()
            self.state = 509 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 508
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 511 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEN(self):
            return self.getToken(WordlifyParser.THEN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_then

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThen" ):
                listener.enterThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThen" ):
                listener.exitThen(self)




    def then(self):

        localctx = WordlifyParser.ThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_then)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.match(WordlifyParser.THEN)
            self.state = 515 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 514
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 517 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 559
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 557
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                        if la_ == 1:
                            self.state = 519
                            self.atom_instr()
                            self.state = 523
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 520
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 525
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 526
                            self.match(WordlifyParser.T__0)
                            self.state = 530
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 527
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 532
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 533
                            self.atom_instr()
                            self.state = 547 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 537
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 534
                                    self.match(WordlifyParser.WS)
                                    self.state = 539
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 540
                                self.match(WordlifyParser.NL)
                                self.state = 544
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 541
                                        self.match(WordlifyParser.WS) 
                                    self.state = 546
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

                                self.state = 549 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 551
                            self.block_instr()
                            self.state = 553 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 552
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 555 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 561
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                self.state = 583
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 562
                    self.atom_instr()
                    self.state = 566
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 563
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 568
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                    self.state = 575
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 569
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 571 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 570
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 573 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 577
                    self.block_instr()
                    self.state = 579 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 578
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 581 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_else_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_if" ):
                listener.enterElse_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_if" ):
                listener.exitElse_if(self)




    def else_if(self):

        localctx = WordlifyParser.Else_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_else_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.match(WordlifyParser.ELSE)
            self.state = 589 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 588
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 591 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 593
            self.if_cond()
            self.state = 594
            self.then()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_else_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_block" ):
                listener.enterElse_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_block" ):
                listener.exitElse_block(self)




    def else_block(self):

        localctx = WordlifyParser.Else_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_else_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self.match(WordlifyParser.ELSE)
            self.state = 598 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 597
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 600 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 642
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 640
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                        if la_ == 1:
                            self.state = 602
                            self.atom_instr()
                            self.state = 606
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 603
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 608
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 609
                            self.match(WordlifyParser.T__0)
                            self.state = 613
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 610
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 615
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 616
                            self.atom_instr()
                            self.state = 630 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 620
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 617
                                    self.match(WordlifyParser.WS)
                                    self.state = 622
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 623
                                self.match(WordlifyParser.NL)
                                self.state = 627
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 624
                                        self.match(WordlifyParser.WS) 
                                    self.state = 629
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

                                self.state = 632 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 634
                            self.block_instr()
                            self.state = 636 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 635
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 638 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 644
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                self.state = 666
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.IS_FILE, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 645
                    self.atom_instr()
                    self.state = 649
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 646
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 651
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

                    self.state = 658
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 652
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 654 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 653
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 656 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 660
                    self.block_instr()
                    self.state = 662 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 661
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 664 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def comparison(self):
            return self.getTypedRuleContext(WordlifyParser.ComparisonContext,0)


        def double_comparsion(self):
            return self.getTypedRuleContext(WordlifyParser.Double_comparsionContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)




    def cond(self):

        localctx = WordlifyParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_cond)
        try:
            self.state = 674
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 670
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 671
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 672
                self.comparison()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 673
                self.double_comparsion()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def CMP_OP(self):
            return self.getToken(WordlifyParser.CMP_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = WordlifyParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.expr()
            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 677
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 682
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 683
            self.match(WordlifyParser.CMP_OP)
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 684
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 690
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_comparsionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ComparisonContext,i)


        def LOG_OP(self):
            return self.getToken(WordlifyParser.LOG_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_double_comparsion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_comparsion" ):
                listener.enterDouble_comparsion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_comparsion" ):
                listener.exitDouble_comparsion(self)




    def double_comparsion(self):

        localctx = WordlifyParser.Double_comparsionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_double_comparsion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.comparison()
            self.state = 696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 693
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 699
            self.match(WordlifyParser.LOG_OP)
            self.state = 703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 700
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 705
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 706
            self.comparison()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def arith_expr(self):
            return self.getTypedRuleContext(WordlifyParser.Arith_exprContext,0)


        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def array_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Array_elemContext,0)


        def concat(self):
            return self.getTypedRuleContext(WordlifyParser.ConcatContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = WordlifyParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_expr)
        try:
            self.state = 717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 708
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 709
                self.match(WordlifyParser.STR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 710
                self.match(WordlifyParser.NUM)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 711
                self.match(WordlifyParser.ID)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 712
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 713
                self.arith_expr()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 714
                self.array()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 715
                self.array_elem()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 716
                self.concat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def ARITH_OP(self):
            return self.getToken(WordlifyParser.ARITH_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)




    def arith_expr(self):

        localctx = WordlifyParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.value_or_id()
            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 720
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 725
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 726
            self.match(WordlifyParser.ARITH_OP)
            self.state = 730
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 727
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 732
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 733
            self.value_or_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConcatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def CONCAT_OP(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.CONCAT_OP)
            else:
                return self.getToken(WordlifyParser.CONCAT_OP, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_concat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcat" ):
                listener.enterConcat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcat" ):
                listener.exitConcat(self)




    def concat(self):

        localctx = WordlifyParser.ConcatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_concat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.value_or_id()
            self.state = 750 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 739
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 736
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 741
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 742
                    self.match(WordlifyParser.CONCAT_OP)
                    self.state = 746
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 743
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 748
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 749
                    self.value_or_id()

                else:
                    raise NoViableAltException(self)
                self.state = 752 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def length(self):
            return self.getTypedRuleContext(WordlifyParser.LengthContext,0)


        def is_dir(self):
            return self.getTypedRuleContext(WordlifyParser.Is_dirContext,0)


        def is_file(self):
            return self.getTypedRuleContext(WordlifyParser.Is_fileContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_call" ):
                listener.enterFn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_call" ):
                listener.exitFn_call(self)




    def fn_call(self):

        localctx = WordlifyParser.Fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_fn_call)
        try:
            self.state = 778
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 754
                self.own_fn_call()
                pass
            elif token in [WordlifyParser.EXIST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 755
                self.exist()
                pass
            elif token in [WordlifyParser.PRINT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 756
                self.print_instr()
                pass
            elif token in [WordlifyParser.RENAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 757
                self.rename()
                pass
            elif token in [WordlifyParser.REMOVE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 758
                self.remove()
                pass
            elif token in [WordlifyParser.MOVE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 759
                self.move()
                pass
            elif token in [WordlifyParser.COPY]:
                self.enterOuterAlt(localctx, 7)
                self.state = 760
                self.copy()
                pass
            elif token in [WordlifyParser.DOWNLOAD]:
                self.enterOuterAlt(localctx, 8)
                self.state = 761
                self.download()
                pass
            elif token in [WordlifyParser.WRITE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 762
                self.write()
                pass
            elif token in [WordlifyParser.READ]:
                self.enterOuterAlt(localctx, 10)
                self.state = 763
                self.read()
                pass
            elif token in [WordlifyParser.WAIT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 764
                self.wait_instr()
                pass
            elif token in [WordlifyParser.EXECUTE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 765
                self.execute()
                pass
            elif token in [WordlifyParser.GET_FILES]:
                self.enterOuterAlt(localctx, 13)
                self.state = 766
                self.get_files()
                pass
            elif token in [WordlifyParser.DATE_MODIFIED]:
                self.enterOuterAlt(localctx, 14)
                self.state = 767
                self.date_modified()
                pass
            elif token in [WordlifyParser.SIZE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 768
                self.size()
                pass
            elif token in [WordlifyParser.EXIT]:
                self.enterOuterAlt(localctx, 16)
                self.state = 769
                self.exit()
                pass
            elif token in [WordlifyParser.CREATE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 770
                self.create()
                pass
            elif token in [WordlifyParser.LENGTH]:
                self.enterOuterAlt(localctx, 18)
                self.state = 771
                self.length()
                pass
            elif token in [WordlifyParser.IS_DIR]:
                self.enterOuterAlt(localctx, 19)
                self.state = 772
                self.is_dir()
                pass
            elif token in [WordlifyParser.IS_FILE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 773
                self.is_file()
                pass
            elif token in [WordlifyParser.TIME]:
                self.enterOuterAlt(localctx, 21)
                self.state = 774
                self.match(WordlifyParser.TIME)
                pass
            elif token in [WordlifyParser.FILE]:
                self.enterOuterAlt(localctx, 22)
                self.state = 775
                self.match(WordlifyParser.FILE)
                pass
            elif token in [WordlifyParser.FOLDER]:
                self.enterOuterAlt(localctx, 23)
                self.state = 776
                self.match(WordlifyParser.FOLDER)
                pass
            elif token in [WordlifyParser.ARGS]:
                self.enterOuterAlt(localctx, 24)
                self.state = 777
                self.args()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def array_append(self):
            return self.getTypedRuleContext(WordlifyParser.Array_appendContext,0)


        def assign(self):
            return self.getTypedRuleContext(WordlifyParser.AssignContext,0)


        def is_dir(self):
            return self.getTypedRuleContext(WordlifyParser.Is_dirContext,0)


        def is_file(self):
            return self.getTypedRuleContext(WordlifyParser.Is_fileContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_atom_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_instr" ):
                listener.enterAtom_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_instr" ):
                listener.exitAtom_instr(self)




    def atom_instr(self):

        localctx = WordlifyParser.Atom_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_atom_instr)
        try:
            self.state = 805
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 780
                self.own_fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 781
                self.exist()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 782
                self.print_instr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 783
                self.rename()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 784
                self.remove()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 785
                self.move()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 786
                self.copy()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 787
                self.download()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 788
                self.write()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 789
                self.read()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 790
                self.wait_instr()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 791
                self.execute()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 792
                self.get_files()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 793
                self.date_modified()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 794
                self.size()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 795
                self.exit()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 796
                self.create()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 797
                self.array_append()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 798
                self.assign()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 799
                self.is_dir()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 800
                self.is_file()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 801
                self.match(WordlifyParser.TIME)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 802
                self.match(WordlifyParser.FILE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 803
                self.match(WordlifyParser.FOLDER)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 804
                self.args()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def array_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Array_elemContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)




    def assign(self):

        localctx = WordlifyParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 807
                self.match(WordlifyParser.ID)
                pass

            elif la_ == 2:
                self.state = 808
                self.array_elem()
                pass


            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 811
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 817
            self.match(WordlifyParser.T__4)
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 818
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 824
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_appendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def APPEND(self):
            return self.getToken(WordlifyParser.APPEND, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array_append

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_append" ):
                listener.enterArray_append(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_append" ):
                listener.exitArray_append(self)




    def array_append(self):

        localctx = WordlifyParser.Array_appendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_array_append)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.match(WordlifyParser.ID)
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 827
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 833
            self.match(WordlifyParser.APPEND)
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 834
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 840
            self.expr()
            self.state = 844
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 841
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 846
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_elem" ):
                listener.enterArray_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_elem" ):
                listener.exitArray_elem(self)




    def array_elem(self):

        localctx = WordlifyParser.Array_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_array_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.state = 847
                self.match(WordlifyParser.ID)
                pass
            elif token in [WordlifyParser.ARGS]:
                self.state = 848
                self.args()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 851
            self.match(WordlifyParser.T__5)
            self.state = 855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 852
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 857
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 858
            self.expr()
            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 859
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 864
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 865
            self.match(WordlifyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Own_fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_own_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOwn_fn_call" ):
                listener.enterOwn_fn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOwn_fn_call" ):
                listener.exitOwn_fn_call(self)




    def own_fn_call(self):

        localctx = WordlifyParser.Own_fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_own_fn_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.match(WordlifyParser.ID)
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 868
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 874
            self.match(WordlifyParser.T__1)
            self.state = 878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 875
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 880
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.T__5) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.IS_FILE) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.LENGTH) | (1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 881
                self.expr()
                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 882
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.T__2:
                    self.state = 888
                    self.match(WordlifyParser.T__2)
                    self.state = 892
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 889
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 894
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 895
                    self.expr()
                    self.state = 899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 896
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 901
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 909
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIST(self):
            return self.getToken(WordlifyParser.EXIST, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExist" ):
                listener.enterExist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExist" ):
                listener.exitExist(self)




    def exist(self):

        localctx = WordlifyParser.ExistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_exist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.match(WordlifyParser.EXIST)
            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 912
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 918
            self.match(WordlifyParser.T__1)
            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 919
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 924
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 925
            self.expr()
            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 926
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 932
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS_FILE(self):
            return self.getToken(WordlifyParser.IS_FILE, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_is_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_file" ):
                listener.enterIs_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_file" ):
                listener.exitIs_file(self)




    def is_file(self):

        localctx = WordlifyParser.Is_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_is_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.match(WordlifyParser.IS_FILE)
            self.state = 938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 935
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 941
            self.match(WordlifyParser.T__1)
            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 942
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 948
            self.expr()
            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 949
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 955
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_dirContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS_DIR(self):
            return self.getToken(WordlifyParser.IS_DIR, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_is_dir

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_dir" ):
                listener.enterIs_dir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_dir" ):
                listener.exitIs_dir(self)




    def is_dir(self):

        localctx = WordlifyParser.Is_dirContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_is_dir)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.match(WordlifyParser.IS_DIR)
            self.state = 961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 958
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 963
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 964
            self.match(WordlifyParser.T__1)
            self.state = 968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 965
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 970
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 971
            self.expr()
            self.state = 975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 972
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 977
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 978
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(WordlifyParser.PRINT, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_print_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_instr" ):
                listener.enterPrint_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_instr" ):
                listener.exitPrint_instr(self)




    def print_instr(self):

        localctx = WordlifyParser.Print_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_print_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.match(WordlifyParser.PRINT)
            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 981
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 987
            self.match(WordlifyParser.T__1)
            self.state = 991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 988
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 994
            self.expr()
            self.state = 998
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 995
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1001
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(WordlifyParser.RENAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_rename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename" ):
                listener.enterRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename" ):
                listener.exitRename(self)




    def rename(self):

        localctx = WordlifyParser.RenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_rename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            self.match(WordlifyParser.RENAME)
            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1004
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1010
            self.match(WordlifyParser.T__1)
            self.state = 1014
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1011
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1017
            self.expr()
            self.state = 1021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1018
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1024
            self.match(WordlifyParser.T__2)
            self.state = 1028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1025
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1030
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1031
            self.expr()
            self.state = 1035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1032
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1037
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1038
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(WordlifyParser.REMOVE, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove" ):
                listener.enterRemove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove" ):
                listener.exitRemove(self)




    def remove(self):

        localctx = WordlifyParser.RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(WordlifyParser.REMOVE)
            self.state = 1044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1041
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1046
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1047
            self.match(WordlifyParser.T__1)
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1048
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1053
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1054
            self.expr()
            self.state = 1058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1055
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1061
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOVE(self):
            return self.getToken(WordlifyParser.MOVE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)




    def move(self):

        localctx = WordlifyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.match(WordlifyParser.MOVE)
            self.state = 1067
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1064
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1069
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1070
            self.match(WordlifyParser.T__1)
            self.state = 1074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1071
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1076
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1077
            self.expr()
            self.state = 1081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1078
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1084
            self.match(WordlifyParser.T__2)
            self.state = 1088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1085
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1090
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1091
            self.expr()
            self.state = 1095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1092
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1097
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1098
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(WordlifyParser.COPY, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_copy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy" ):
                listener.enterCopy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy" ):
                listener.exitCopy(self)




    def copy(self):

        localctx = WordlifyParser.CopyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_copy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.match(WordlifyParser.COPY)
            self.state = 1104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1101
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1106
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1107
            self.match(WordlifyParser.T__1)
            self.state = 1111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1108
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1113
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1114
            self.expr()
            self.state = 1118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1115
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1121
            self.match(WordlifyParser.T__2)
            self.state = 1125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1122
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1127
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1128
            self.expr()
            self.state = 1132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1129
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1134
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1135
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DownloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOWNLOAD(self):
            return self.getToken(WordlifyParser.DOWNLOAD, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_download

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDownload" ):
                listener.enterDownload(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDownload" ):
                listener.exitDownload(self)




    def download(self):

        localctx = WordlifyParser.DownloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_download)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.match(WordlifyParser.DOWNLOAD)
            self.state = 1141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1138
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1143
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1144
            self.match(WordlifyParser.T__1)
            self.state = 1148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1145
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1150
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1151
            self.expr()
            self.state = 1155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1152
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1157
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1158
            self.match(WordlifyParser.T__2)
            self.state = 1162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1159
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1164
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1165
            self.expr()
            self.state = 1169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1166
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1172
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(WordlifyParser.WRITE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_write

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite" ):
                listener.enterWrite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite" ):
                listener.exitWrite(self)




    def write(self):

        localctx = WordlifyParser.WriteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_write)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1174
            self.match(WordlifyParser.WRITE)
            self.state = 1178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1175
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1180
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1181
            self.match(WordlifyParser.T__1)
            self.state = 1185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1182
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1188
            self.expr()
            self.state = 1192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1189
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1194
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1195
            self.match(WordlifyParser.T__2)
            self.state = 1199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1196
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1201
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1202
            self.expr()
            self.state = 1206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1203
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1208
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1209
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(WordlifyParser.READ, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_read

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead" ):
                listener.enterRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead" ):
                listener.exitRead(self)




    def read(self):

        localctx = WordlifyParser.ReadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_read)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1211
            self.match(WordlifyParser.READ)
            self.state = 1215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1212
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1217
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1218
            self.match(WordlifyParser.T__1)
            self.state = 1222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1219
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1225
            self.expr()
            self.state = 1229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1226
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1232
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wait_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(WordlifyParser.WAIT, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_wait_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_instr" ):
                listener.enterWait_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_instr" ):
                listener.exitWait_instr(self)




    def wait_instr(self):

        localctx = WordlifyParser.Wait_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_wait_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self.match(WordlifyParser.WAIT)
            self.state = 1238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1235
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1240
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1241
            self.match(WordlifyParser.T__1)
            self.state = 1245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1242
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1247
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1248
            self.expr()
            self.state = 1252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1249
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1254
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1255
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(WordlifyParser.EXECUTE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_execute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)




    def execute(self):

        localctx = WordlifyParser.ExecuteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_execute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1257
            self.match(WordlifyParser.EXECUTE)
            self.state = 1261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1258
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1263
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1264
            self.match(WordlifyParser.T__1)
            self.state = 1268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1265
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1270
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1287
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,191,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1271
                    self.expr()
                    self.state = 1275
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1272
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1277
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1278
                    self.match(WordlifyParser.T__2)
                    self.state = 1282
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1279
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1284
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
             
                self.state = 1289
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,191,self._ctx)

            self.state = 1290
            self.expr()
            self.state = 1294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1291
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1296
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1297
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_filesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET_FILES(self):
            return self.getToken(WordlifyParser.GET_FILES, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_get_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_files" ):
                listener.enterGet_files(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_files" ):
                listener.exitGet_files(self)




    def get_files(self):

        localctx = WordlifyParser.Get_filesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_get_files)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1299
            self.match(WordlifyParser.GET_FILES)
            self.state = 1303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1300
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1305
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1306
            self.match(WordlifyParser.T__1)
            self.state = 1310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1307
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1312
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1313
            self.expr()
            self.state = 1317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1314
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1319
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1320
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_modifiedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_MODIFIED(self):
            return self.getToken(WordlifyParser.DATE_MODIFIED, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_date_modified

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_modified" ):
                listener.enterDate_modified(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_modified" ):
                listener.exitDate_modified(self)




    def date_modified(self):

        localctx = WordlifyParser.Date_modifiedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_date_modified)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1322
            self.match(WordlifyParser.DATE_MODIFIED)
            self.state = 1326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1323
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1328
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1329
            self.match(WordlifyParser.T__1)
            self.state = 1333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1330
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1335
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1336
            self.expr()
            self.state = 1340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1337
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1343
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIZE(self):
            return self.getToken(WordlifyParser.SIZE, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSize" ):
                listener.enterSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSize" ):
                listener.exitSize(self)




    def size(self):

        localctx = WordlifyParser.SizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1345
            self.match(WordlifyParser.SIZE)
            self.state = 1349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1346
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1351
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1352
            self.match(WordlifyParser.T__1)
            self.state = 1356
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1353
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1358
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1359
            self.expr()
            self.state = 1363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1360
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1365
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1366
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(WordlifyParser.EXIT, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit" ):
                listener.enterExit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit" ):
                listener.exitExit(self)




    def exit(self):

        localctx = WordlifyParser.ExitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_exit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            self.match(WordlifyParser.EXIT)
            self.state = 1372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1369
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1374
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1375
            self.match(WordlifyParser.T__1)
            self.state = 1379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1376
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1381
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1382
            self.expr()
            self.state = 1386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1383
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1388
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1389
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(WordlifyParser.CREATE, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate" ):
                listener.enterCreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate" ):
                listener.exitCreate(self)




    def create(self):

        localctx = WordlifyParser.CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1391
            self.match(WordlifyParser.CREATE)
            self.state = 1395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1392
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1397
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1398
            self.match(WordlifyParser.T__1)
            self.state = 1402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1399
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1404
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1405
            self.expr()
            self.state = 1409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1406
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1411
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1412
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LENGTH(self):
            return self.getToken(WordlifyParser.LENGTH, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def args(self):
            return self.getTypedRuleContext(WordlifyParser.ArgsContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLength" ):
                listener.enterLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLength" ):
                listener.exitLength(self)




    def length(self):

        localctx = WordlifyParser.LengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_length)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            self.match(WordlifyParser.LENGTH)
            self.state = 1418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1415
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1420
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1421
            self.match(WordlifyParser.T__1)
            self.state = 1425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1422
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1427
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1431
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.state = 1428
                self.match(WordlifyParser.ID)
                pass
            elif token in [WordlifyParser.T__5]:
                self.state = 1429
                self.array()
                pass
            elif token in [WordlifyParser.ARGS]:
                self.state = 1430
                self.args()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1433
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1438
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1439
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARGS(self):
            return self.getToken(WordlifyParser.ARGS, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)




    def args(self):

        localctx = WordlifyParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_args)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1441
            self.match(WordlifyParser.ARGS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray" ):
                listener.enterArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray" ):
                listener.exitArray(self)




    def array(self):

        localctx = WordlifyParser.ArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            self.match(WordlifyParser.T__5)
            self.state = 1447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1444
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1449
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 1450
                self.value_or_id()
                self.state = 1467
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,215,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1454
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 1451
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1456
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1457
                        self.match(WordlifyParser.T__2)
                        self.state = 1461
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 1458
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1463
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1464
                        self.value_or_id() 
                    self.state = 1469
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,215,self._ctx)

                self.state = 1473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1470
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1475
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1478
            self.match(WordlifyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_or_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_value_or_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_or_id" ):
                listener.enterValue_or_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_or_id" ):
                listener.exitValue_or_id(self)




    def value_or_id(self):

        localctx = WordlifyParser.Value_or_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_value_or_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





