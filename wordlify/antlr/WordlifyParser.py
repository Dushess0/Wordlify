# Generated from Wordlify.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\65")
        buf.write("\u05aa\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\3\2\7\2X\n\2\f\2\16")
        buf.write("\2[\13\2\3\2\3\2\7\2_\n\2\f\2\16\2b\13\2\3\2\3\2\7\2f")
        buf.write("\n\2\f\2\16\2i\13\2\3\2\3\2\7\2m\n\2\f\2\16\2p\13\2\3")
        buf.write("\2\3\2\7\2t\n\2\f\2\16\2w\13\2\6\2y\n\2\r\2\16\2z\3\2")
        buf.write("\3\2\5\2\177\n\2\3\2\6\2\u0082\n\2\r\2\16\2\u0083\7\2")
        buf.write("\u0086\n\2\f\2\16\2\u0089\13\2\3\2\3\2\7\2\u008d\n\2\f")
        buf.write("\2\16\2\u0090\13\2\3\2\5\2\u0093\n\2\3\2\3\2\5\2\u0097")
        buf.write("\n\2\5\2\u0099\n\2\5\2\u009b\n\2\3\2\7\2\u009e\n\2\f\2")
        buf.write("\16\2\u00a1\13\2\3\2\5\2\u00a4\n\2\3\2\3\2\3\3\3\3\6\3")
        buf.write("\u00aa\n\3\r\3\16\3\u00ab\3\3\3\3\7\3\u00b0\n\3\f\3\16")
        buf.write("\3\u00b3\13\3\3\3\3\3\7\3\u00b7\n\3\f\3\16\3\u00ba\13")
        buf.write("\3\3\3\3\3\7\3\u00be\n\3\f\3\16\3\u00c1\13\3\3\3\3\3\7")
        buf.write("\3\u00c5\n\3\f\3\16\3\u00c8\13\3\3\3\3\3\7\3\u00cc\n\3")
        buf.write("\f\3\16\3\u00cf\13\3\7\3\u00d1\n\3\f\3\16\3\u00d4\13\3")
        buf.write("\5\3\u00d6\n\3\3\3\3\3\7\3\u00da\n\3\f\3\16\3\u00dd\13")
        buf.write("\3\3\3\3\3\6\3\u00e1\n\3\r\3\16\3\u00e2\3\3\3\3\7\3\u00e7")
        buf.write("\n\3\f\3\16\3\u00ea\13\3\3\3\3\3\7\3\u00ee\n\3\f\3\16")
        buf.write("\3\u00f1\13\3\3\3\3\3\7\3\u00f5\n\3\f\3\16\3\u00f8\13")
        buf.write("\3\3\3\3\3\7\3\u00fc\n\3\f\3\16\3\u00ff\13\3\6\3\u0101")
        buf.write("\n\3\r\3\16\3\u0102\3\3\3\3\6\3\u0107\n\3\r\3\16\3\u0108")
        buf.write("\7\3\u010b\n\3\f\3\16\3\u010e\13\3\3\3\3\3\7\3\u0112\n")
        buf.write("\3\f\3\16\3\u0115\13\3\3\3\5\3\u0118\n\3\3\3\5\3\u011b")
        buf.write("\n\3\3\3\6\3\u011e\n\3\r\3\16\3\u011f\5\3\u0122\n\3\3")
        buf.write("\3\3\3\3\4\3\4\3\4\5\4\u0129\n\4\3\5\3\5\6\5\u012d\n\5")
        buf.write("\r\5\16\5\u012e\3\5\3\5\6\5\u0133\n\5\r\5\16\5\u0134\3")
        buf.write("\5\3\5\6\5\u0139\n\5\r\5\16\5\u013a\3\5\3\5\6\5\u013f")
        buf.write("\n\5\r\5\16\5\u0140\3\5\3\5\6\5\u0145\n\5\r\5\16\5\u0146")
        buf.write("\3\5\3\5\7\5\u014b\n\5\f\5\16\5\u014e\13\5\3\5\3\5\7\5")
        buf.write("\u0152\n\5\f\5\16\5\u0155\13\5\3\5\3\5\7\5\u0159\n\5\f")
        buf.write("\5\16\5\u015c\13\5\3\5\3\5\7\5\u0160\n\5\f\5\16\5\u0163")
        buf.write("\13\5\6\5\u0165\n\5\r\5\16\5\u0166\3\5\3\5\6\5\u016b\n")
        buf.write("\5\r\5\16\5\u016c\7\5\u016f\n\5\f\5\16\5\u0172\13\5\3")
        buf.write("\5\3\5\7\5\u0176\n\5\f\5\16\5\u0179\13\5\3\5\3\5\6\5\u017d")
        buf.write("\n\5\r\5\16\5\u017e\5\5\u0181\n\5\3\5\3\5\6\5\u0185\n")
        buf.write("\5\r\5\16\5\u0186\5\5\u0189\n\5\5\5\u018b\n\5\3\5\3\5")
        buf.write("\3\6\3\6\6\6\u0191\n\6\r\6\16\6\u0192\3\6\3\6\6\6\u0197")
        buf.write("\n\6\r\6\16\6\u0198\3\6\3\6\6\6\u019d\n\6\r\6\16\6\u019e")
        buf.write("\3\6\3\6\7\6\u01a3\n\6\f\6\16\6\u01a6\13\6\3\6\3\6\7\6")
        buf.write("\u01aa\n\6\f\6\16\6\u01ad\13\6\3\6\3\6\7\6\u01b1\n\6\f")
        buf.write("\6\16\6\u01b4\13\6\3\6\3\6\7\6\u01b8\n\6\f\6\16\6\u01bb")
        buf.write("\13\6\6\6\u01bd\n\6\r\6\16\6\u01be\3\6\3\6\6\6\u01c3\n")
        buf.write("\6\r\6\16\6\u01c4\7\6\u01c7\n\6\f\6\16\6\u01ca\13\6\3")
        buf.write("\6\3\6\7\6\u01ce\n\6\f\6\16\6\u01d1\13\6\3\6\3\6\6\6\u01d5")
        buf.write("\n\6\r\6\16\6\u01d6\5\6\u01d9\n\6\3\6\3\6\6\6\u01dd\n")
        buf.write("\6\r\6\16\6\u01de\5\6\u01e1\n\6\5\6\u01e3\n\6\3\6\3\6")
        buf.write("\3\7\3\7\3\7\7\7\u01ea\n\7\f\7\16\7\u01ed\13\7\3\7\5\7")
        buf.write("\u01f0\n\7\3\7\3\7\3\b\3\b\6\b\u01f6\n\b\r\b\16\b\u01f7")
        buf.write("\3\b\3\b\6\b\u01fc\n\b\r\b\16\b\u01fd\3\t\3\t\6\t\u0202")
        buf.write("\n\t\r\t\16\t\u0203\3\t\3\t\7\t\u0208\n\t\f\t\16\t\u020b")
        buf.write("\13\t\3\t\3\t\7\t\u020f\n\t\f\t\16\t\u0212\13\t\3\t\3")
        buf.write("\t\7\t\u0216\n\t\f\t\16\t\u0219\13\t\3\t\3\t\7\t\u021d")
        buf.write("\n\t\f\t\16\t\u0220\13\t\6\t\u0222\n\t\r\t\16\t\u0223")
        buf.write("\3\t\3\t\6\t\u0228\n\t\r\t\16\t\u0229\7\t\u022c\n\t\f")
        buf.write("\t\16\t\u022f\13\t\3\t\3\t\7\t\u0233\n\t\f\t\16\t\u0236")
        buf.write("\13\t\3\t\3\t\6\t\u023a\n\t\r\t\16\t\u023b\5\t\u023e\n")
        buf.write("\t\3\t\3\t\6\t\u0242\n\t\r\t\16\t\u0243\5\t\u0246\n\t")
        buf.write("\5\t\u0248\n\t\3\n\3\n\6\n\u024c\n\n\r\n\16\n\u024d\3")
        buf.write("\n\3\n\3\n\3\13\3\13\6\13\u0255\n\13\r\13\16\13\u0256")
        buf.write("\3\13\3\13\7\13\u025b\n\13\f\13\16\13\u025e\13\13\3\13")
        buf.write("\3\13\7\13\u0262\n\13\f\13\16\13\u0265\13\13\3\13\3\13")
        buf.write("\7\13\u0269\n\13\f\13\16\13\u026c\13\13\3\13\3\13\7\13")
        buf.write("\u0270\n\13\f\13\16\13\u0273\13\13\6\13\u0275\n\13\r\13")
        buf.write("\16\13\u0276\3\13\3\13\6\13\u027b\n\13\r\13\16\13\u027c")
        buf.write("\7\13\u027f\n\13\f\13\16\13\u0282\13\13\3\13\3\13\7\13")
        buf.write("\u0286\n\13\f\13\16\13\u0289\13\13\3\13\3\13\6\13\u028d")
        buf.write("\n\13\r\13\16\13\u028e\5\13\u0291\n\13\3\13\3\13\6\13")
        buf.write("\u0295\n\13\r\13\16\13\u0296\5\13\u0299\n\13\5\13\u029b")
        buf.write("\n\13\3\f\3\f\3\f\3\f\5\f\u02a1\n\f\3\r\3\r\7\r\u02a5")
        buf.write("\n\r\f\r\16\r\u02a8\13\r\3\r\3\r\7\r\u02ac\n\r\f\r\16")
        buf.write("\r\u02af\13\r\3\r\3\r\3\16\3\16\7\16\u02b5\n\16\f\16\16")
        buf.write("\16\u02b8\13\16\3\16\3\16\7\16\u02bc\n\16\f\16\16\16\u02bf")
        buf.write("\13\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\5\17\u02cc\n\17\3\20\3\20\7\20\u02d0\n\20\f\20")
        buf.write("\16\20\u02d3\13\20\3\20\3\20\7\20\u02d7\n\20\f\20\16\20")
        buf.write("\u02da\13\20\3\20\3\20\3\21\3\21\7\21\u02e0\n\21\f\21")
        buf.write("\16\21\u02e3\13\21\3\21\3\21\7\21\u02e7\n\21\f\21\16\21")
        buf.write("\u02ea\13\21\3\21\6\21\u02ed\n\21\r\21\16\21\u02ee\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\5\22\u0308\n\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u0322\n\23\3\24\3")
        buf.write("\24\5\24\u0326\n\24\3\24\7\24\u0329\n\24\f\24\16\24\u032c")
        buf.write("\13\24\3\24\3\24\7\24\u0330\n\24\f\24\16\24\u0333\13\24")
        buf.write("\3\24\3\24\3\25\3\25\7\25\u0339\n\25\f\25\16\25\u033c")
        buf.write("\13\25\3\25\3\25\7\25\u0340\n\25\f\25\16\25\u0343\13\25")
        buf.write("\3\25\3\25\7\25\u0347\n\25\f\25\16\25\u034a\13\25\3\26")
        buf.write("\3\26\3\26\7\26\u034f\n\26\f\26\16\26\u0352\13\26\3\26")
        buf.write("\3\26\7\26\u0356\n\26\f\26\16\26\u0359\13\26\3\26\3\26")
        buf.write("\3\27\3\27\7\27\u035f\n\27\f\27\16\27\u0362\13\27\3\27")
        buf.write("\3\27\7\27\u0366\n\27\f\27\16\27\u0369\13\27\3\27\3\27")
        buf.write("\7\27\u036d\n\27\f\27\16\27\u0370\13\27\3\27\3\27\7\27")
        buf.write("\u0374\n\27\f\27\16\27\u0377\13\27\3\27\3\27\7\27\u037b")
        buf.write("\n\27\f\27\16\27\u037e\13\27\7\27\u0380\n\27\f\27\16\27")
        buf.write("\u0383\13\27\5\27\u0385\n\27\3\27\3\27\3\30\3\30\7\30")
        buf.write("\u038b\n\30\f\30\16\30\u038e\13\30\3\30\3\30\7\30\u0392")
        buf.write("\n\30\f\30\16\30\u0395\13\30\3\30\3\30\7\30\u0399\n\30")
        buf.write("\f\30\16\30\u039c\13\30\3\30\3\30\3\31\3\31\7\31\u03a2")
        buf.write("\n\31\f\31\16\31\u03a5\13\31\3\31\3\31\7\31\u03a9\n\31")
        buf.write("\f\31\16\31\u03ac\13\31\3\31\3\31\7\31\u03b0\n\31\f\31")
        buf.write("\16\31\u03b3\13\31\3\31\3\31\3\32\3\32\7\32\u03b9\n\32")
        buf.write("\f\32\16\32\u03bc\13\32\3\32\3\32\7\32\u03c0\n\32\f\32")
        buf.write("\16\32\u03c3\13\32\3\32\3\32\7\32\u03c7\n\32\f\32\16\32")
        buf.write("\u03ca\13\32\3\32\3\32\3\33\3\33\7\33\u03d0\n\33\f\33")
        buf.write("\16\33\u03d3\13\33\3\33\3\33\7\33\u03d7\n\33\f\33\16\33")
        buf.write("\u03da\13\33\3\33\3\33\7\33\u03de\n\33\f\33\16\33\u03e1")
        buf.write("\13\33\3\33\3\33\7\33\u03e5\n\33\f\33\16\33\u03e8\13\33")
        buf.write("\3\33\3\33\7\33\u03ec\n\33\f\33\16\33\u03ef\13\33\3\33")
        buf.write("\3\33\3\34\3\34\7\34\u03f5\n\34\f\34\16\34\u03f8\13\34")
        buf.write("\3\34\3\34\7\34\u03fc\n\34\f\34\16\34\u03ff\13\34\3\34")
        buf.write("\3\34\7\34\u0403\n\34\f\34\16\34\u0406\13\34\3\34\3\34")
        buf.write("\3\35\3\35\7\35\u040c\n\35\f\35\16\35\u040f\13\35\3\35")
        buf.write("\3\35\7\35\u0413\n\35\f\35\16\35\u0416\13\35\3\35\3\35")
        buf.write("\7\35\u041a\n\35\f\35\16\35\u041d\13\35\3\35\3\35\7\35")
        buf.write("\u0421\n\35\f\35\16\35\u0424\13\35\3\35\3\35\7\35\u0428")
        buf.write("\n\35\f\35\16\35\u042b\13\35\3\35\3\35\3\36\3\36\7\36")
        buf.write("\u0431\n\36\f\36\16\36\u0434\13\36\3\36\3\36\7\36\u0438")
        buf.write("\n\36\f\36\16\36\u043b\13\36\3\36\3\36\7\36\u043f\n\36")
        buf.write("\f\36\16\36\u0442\13\36\3\36\3\36\7\36\u0446\n\36\f\36")
        buf.write("\16\36\u0449\13\36\3\36\3\36\7\36\u044d\n\36\f\36\16\36")
        buf.write("\u0450\13\36\3\36\3\36\3\37\3\37\7\37\u0456\n\37\f\37")
        buf.write("\16\37\u0459\13\37\3\37\3\37\7\37\u045d\n\37\f\37\16\37")
        buf.write("\u0460\13\37\3\37\3\37\7\37\u0464\n\37\f\37\16\37\u0467")
        buf.write("\13\37\3\37\3\37\7\37\u046b\n\37\f\37\16\37\u046e\13\37")
        buf.write("\3\37\3\37\7\37\u0472\n\37\f\37\16\37\u0475\13\37\3\37")
        buf.write("\3\37\3 \3 \7 \u047b\n \f \16 \u047e\13 \3 \3 \7 \u0482")
        buf.write("\n \f \16 \u0485\13 \3 \3 \7 \u0489\n \f \16 \u048c\13")
        buf.write(" \3 \3 \7 \u0490\n \f \16 \u0493\13 \3 \3 \7 \u0497\n")
        buf.write(" \f \16 \u049a\13 \3 \3 \3!\3!\7!\u04a0\n!\f!\16!\u04a3")
        buf.write("\13!\3!\3!\7!\u04a7\n!\f!\16!\u04aa\13!\3!\3!\7!\u04ae")
        buf.write("\n!\f!\16!\u04b1\13!\3!\3!\3\"\3\"\7\"\u04b7\n\"\f\"\16")
        buf.write("\"\u04ba\13\"\3\"\3\"\7\"\u04be\n\"\f\"\16\"\u04c1\13")
        buf.write("\"\3\"\3\"\7\"\u04c5\n\"\f\"\16\"\u04c8\13\"\3\"\3\"\3")
        buf.write("#\3#\7#\u04ce\n#\f#\16#\u04d1\13#\3#\3#\7#\u04d5\n#\f")
        buf.write("#\16#\u04d8\13#\3#\3#\7#\u04dc\n#\f#\16#\u04df\13#\3#")
        buf.write("\3#\7#\u04e3\n#\f#\16#\u04e6\13#\7#\u04e8\n#\f#\16#\u04eb")
        buf.write("\13#\3#\3#\7#\u04ef\n#\f#\16#\u04f2\13#\3#\3#\3$\3$\7")
        buf.write("$\u04f8\n$\f$\16$\u04fb\13$\3$\3$\7$\u04ff\n$\f$\16$\u0502")
        buf.write("\13$\3$\3$\7$\u0506\n$\f$\16$\u0509\13$\3$\3$\3%\3%\7")
        buf.write("%\u050f\n%\f%\16%\u0512\13%\3%\3%\7%\u0516\n%\f%\16%\u0519")
        buf.write("\13%\3%\3%\7%\u051d\n%\f%\16%\u0520\13%\3%\3%\3&\3&\7")
        buf.write("&\u0526\n&\f&\16&\u0529\13&\3&\3&\7&\u052d\n&\f&\16&\u0530")
        buf.write("\13&\3&\3&\7&\u0534\n&\f&\16&\u0537\13&\3&\3&\3\'\3\'")
        buf.write("\7\'\u053d\n\'\f\'\16\'\u0540\13\'\3\'\3\'\7\'\u0544\n")
        buf.write("\'\f\'\16\'\u0547\13\'\3\'\3\'\7\'\u054b\n\'\f\'\16\'")
        buf.write("\u054e\13\'\3\'\3\'\3(\3(\7(\u0554\n(\f(\16(\u0557\13")
        buf.write("(\3(\3(\7(\u055b\n(\f(\16(\u055e\13(\3(\3(\7(\u0562\n")
        buf.write("(\f(\16(\u0565\13(\3(\3(\3)\3)\7)\u056b\n)\f)\16)\u056e")
        buf.write("\13)\3)\3)\7)\u0572\n)\f)\16)\u0575\13)\3)\3)\5)\u0579")
        buf.write("\n)\3)\7)\u057c\n)\f)\16)\u057f\13)\3)\3)\3*\3*\7*\u0585")
        buf.write("\n*\f*\16*\u0588\13*\3*\3*\7*\u058c\n*\f*\16*\u058f\13")
        buf.write("*\3*\3*\7*\u0593\n*\f*\16*\u0596\13*\3*\7*\u0599\n*\f")
        buf.write("*\16*\u059c\13*\3*\7*\u059f\n*\f*\16*\u05a2\13*\5*\u05a4")
        buf.write("\n*\3*\3*\3+\3+\3+\2\2,\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRT\2\4\3\2")
        buf.write("\63\64\3\2/\62\2\u0690\2Y\3\2\2\2\4\u00a7\3\2\2\2\6\u0128")
        buf.write("\3\2\2\2\b\u012a\3\2\2\2\n\u018e\3\2\2\2\f\u01e6\3\2\2")
        buf.write("\2\16\u01f3\3\2\2\2\20\u01ff\3\2\2\2\22\u0249\3\2\2\2")
        buf.write("\24\u0252\3\2\2\2\26\u02a0\3\2\2\2\30\u02a2\3\2\2\2\32")
        buf.write("\u02b2\3\2\2\2\34\u02cb\3\2\2\2\36\u02cd\3\2\2\2 \u02dd")
        buf.write("\3\2\2\2\"\u0307\3\2\2\2$\u0321\3\2\2\2&\u0325\3\2\2\2")
        buf.write("(\u0336\3\2\2\2*\u034b\3\2\2\2,\u035c\3\2\2\2.\u0388\3")
        buf.write("\2\2\2\60\u039f\3\2\2\2\62\u03b6\3\2\2\2\64\u03cd\3\2")
        buf.write("\2\2\66\u03f2\3\2\2\28\u0409\3\2\2\2:\u042e\3\2\2\2<\u0453")
        buf.write("\3\2\2\2>\u0478\3\2\2\2@\u049d\3\2\2\2B\u04b4\3\2\2\2")
        buf.write("D\u04cb\3\2\2\2F\u04f5\3\2\2\2H\u050c\3\2\2\2J\u0523\3")
        buf.write("\2\2\2L\u053a\3\2\2\2N\u0551\3\2\2\2P\u0568\3\2\2\2R\u0582")
        buf.write("\3\2\2\2T\u05a7\3\2\2\2VX\t\2\2\2WV\3\2\2\2X[\3\2\2\2")
        buf.write("YW\3\2\2\2YZ\3\2\2\2Z\u009a\3\2\2\2[Y\3\2\2\2\\`\5$\23")
        buf.write("\2]_\t\2\2\2^]\3\2\2\2_b\3\2\2\2`^\3\2\2\2`a\3\2\2\2a")
        buf.write("c\3\2\2\2b`\3\2\2\2cg\7\3\2\2df\t\2\2\2ed\3\2\2\2fi\3")
        buf.write("\2\2\2ge\3\2\2\2gh\3\2\2\2h\u0086\3\2\2\2ig\3\2\2\2jx")
        buf.write("\5$\23\2km\7\63\2\2lk\3\2\2\2mp\3\2\2\2nl\3\2\2\2no\3")
        buf.write("\2\2\2oq\3\2\2\2pn\3\2\2\2qu\7\64\2\2rt\7\63\2\2sr\3\2")
        buf.write("\2\2tw\3\2\2\2us\3\2\2\2uv\3\2\2\2vy\3\2\2\2wu\3\2\2\2")
        buf.write("xn\3\2\2\2yz\3\2\2\2zx\3\2\2\2z{\3\2\2\2{\u0086\3\2\2")
        buf.write("\2|\177\5\6\4\2}\177\5\4\3\2~|\3\2\2\2~}\3\2\2\2\177\u0081")
        buf.write("\3\2\2\2\u0080\u0082\t\2\2\2\u0081\u0080\3\2\2\2\u0082")
        buf.write("\u0083\3\2\2\2\u0083\u0081\3\2\2\2\u0083\u0084\3\2\2\2")
        buf.write("\u0084\u0086\3\2\2\2\u0085\\\3\2\2\2\u0085j\3\2\2\2\u0085")
        buf.write("~\3\2\2\2\u0086\u0089\3\2\2\2\u0087\u0085\3\2\2\2\u0087")
        buf.write("\u0088\3\2\2\2\u0088\u0098\3\2\2\2\u0089\u0087\3\2\2\2")
        buf.write("\u008a\u008e\5$\23\2\u008b\u008d\t\2\2\2\u008c\u008b\3")
        buf.write("\2\2\2\u008d\u0090\3\2\2\2\u008e\u008c\3\2\2\2\u008e\u008f")
        buf.write("\3\2\2\2\u008f\u0092\3\2\2\2\u0090\u008e\3\2\2\2\u0091")
        buf.write("\u0093\7\3\2\2\u0092\u0091\3\2\2\2\u0092\u0093\3\2\2\2")
        buf.write("\u0093\u0099\3\2\2\2\u0094\u0097\5\6\4\2\u0095\u0097\5")
        buf.write("\4\3\2\u0096\u0094\3\2\2\2\u0096\u0095\3\2\2\2\u0097\u0099")
        buf.write("\3\2\2\2\u0098\u008a\3\2\2\2\u0098\u0096\3\2\2\2\u0099")
        buf.write("\u009b\3\2\2\2\u009a\u0087\3\2\2\2\u009a\u009b\3\2\2\2")
        buf.write("\u009b\u009f\3\2\2\2\u009c\u009e\t\2\2\2\u009d\u009c\3")
        buf.write("\2\2\2\u009e\u00a1\3\2\2\2\u009f\u009d\3\2\2\2\u009f\u00a0")
        buf.write("\3\2\2\2\u00a0\u00a3\3\2\2\2\u00a1\u009f\3\2\2\2\u00a2")
        buf.write("\u00a4\7\65\2\2\u00a3\u00a2\3\2\2\2\u00a3\u00a4\3\2\2")
        buf.write("\2\u00a4\u00a5\3\2\2\2\u00a5\u00a6\7\2\2\3\u00a6\3\3\2")
        buf.write("\2\2\u00a7\u00a9\7\n\2\2\u00a8\u00aa\t\2\2\2\u00a9\u00a8")
        buf.write("\3\2\2\2\u00aa\u00ab\3\2\2\2\u00ab\u00a9\3\2\2\2\u00ab")
        buf.write("\u00ac\3\2\2\2\u00ac\u00ad\3\2\2\2\u00ad\u00b1\7\61\2")
        buf.write("\2\u00ae\u00b0\t\2\2\2\u00af\u00ae\3\2\2\2\u00b0\u00b3")
        buf.write("\3\2\2\2\u00b1\u00af\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2")
        buf.write("\u00b4\3\2\2\2\u00b3\u00b1\3\2\2\2\u00b4\u00b8\7\4\2\2")
        buf.write("\u00b5\u00b7\t\2\2\2\u00b6\u00b5\3\2\2\2\u00b7\u00ba\3")
        buf.write("\2\2\2\u00b8\u00b6\3\2\2\2\u00b8\u00b9\3\2\2\2\u00b9\u00d5")
        buf.write("\3\2\2\2\u00ba\u00b8\3\2\2\2\u00bb\u00bf\7\61\2\2\u00bc")
        buf.write("\u00be\t\2\2\2\u00bd\u00bc\3\2\2\2\u00be\u00c1\3\2\2\2")
        buf.write("\u00bf\u00bd\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0\u00d2\3")
        buf.write("\2\2\2\u00c1\u00bf\3\2\2\2\u00c2\u00c6\7\5\2\2\u00c3\u00c5")
        buf.write("\t\2\2\2\u00c4\u00c3\3\2\2\2\u00c5\u00c8\3\2\2\2\u00c6")
        buf.write("\u00c4\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00c9\3\2\2\2")
        buf.write("\u00c8\u00c6\3\2\2\2\u00c9\u00cd\7\61\2\2\u00ca\u00cc")
        buf.write("\t\2\2\2\u00cb\u00ca\3\2\2\2\u00cc\u00cf\3\2\2\2\u00cd")
        buf.write("\u00cb\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce\u00d1\3\2\2\2")
        buf.write("\u00cf\u00cd\3\2\2\2\u00d0\u00c2\3\2\2\2\u00d1\u00d4\3")
        buf.write("\2\2\2\u00d2\u00d0\3\2\2\2\u00d2\u00d3\3\2\2\2\u00d3\u00d6")
        buf.write("\3\2\2\2\u00d4\u00d2\3\2\2\2\u00d5\u00bb\3\2\2\2\u00d5")
        buf.write("\u00d6\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7\u00db\7\6\2\2")
        buf.write("\u00d8\u00da\t\2\2\2\u00d9\u00d8\3\2\2\2\u00da\u00dd\3")
        buf.write("\2\2\2\u00db\u00d9\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc\u00de")
        buf.write("\3\2\2\2\u00dd\u00db\3\2\2\2\u00de\u00e0\7\22\2\2\u00df")
        buf.write("\u00e1\t\2\2\2\u00e0\u00df\3\2\2\2\u00e1\u00e2\3\2\2\2")
        buf.write("\u00e2\u00e0\3\2\2\2\u00e2\u00e3\3\2\2\2\u00e3\u0121\3")
        buf.write("\2\2\2\u00e4\u00e8\5$\23\2\u00e5\u00e7\t\2\2\2\u00e6\u00e5")
        buf.write("\3\2\2\2\u00e7\u00ea\3\2\2\2\u00e8\u00e6\3\2\2\2\u00e8")
        buf.write("\u00e9\3\2\2\2\u00e9\u00eb\3\2\2\2\u00ea\u00e8\3\2\2\2")
        buf.write("\u00eb\u00ef\7\3\2\2\u00ec\u00ee\t\2\2\2\u00ed\u00ec\3")
        buf.write("\2\2\2\u00ee\u00f1\3\2\2\2\u00ef\u00ed\3\2\2\2\u00ef\u00f0")
        buf.write("\3\2\2\2\u00f0\u010b\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f2")
        buf.write("\u0100\5$\23\2\u00f3\u00f5\7\63\2\2\u00f4\u00f3\3\2\2")
        buf.write("\2\u00f5\u00f8\3\2\2\2\u00f6\u00f4\3\2\2\2\u00f6\u00f7")
        buf.write("\3\2\2\2\u00f7\u00f9\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f9")
        buf.write("\u00fd\7\64\2\2\u00fa\u00fc\7\63\2\2\u00fb\u00fa\3\2\2")
        buf.write("\2\u00fc\u00ff\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fd\u00fe")
        buf.write("\3\2\2\2\u00fe\u0101\3\2\2\2\u00ff\u00fd\3\2\2\2\u0100")
        buf.write("\u00f6\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u0100\3\2\2\2")
        buf.write("\u0102\u0103\3\2\2\2\u0103\u010b\3\2\2\2\u0104\u0106\5")
        buf.write("\6\4\2\u0105\u0107\t\2\2\2\u0106\u0105\3\2\2\2\u0107\u0108")
        buf.write("\3\2\2\2\u0108\u0106\3\2\2\2\u0108\u0109\3\2\2\2\u0109")
        buf.write("\u010b\3\2\2\2\u010a\u00e4\3\2\2\2\u010a\u00f2\3\2\2\2")
        buf.write("\u010a\u0104\3\2\2\2\u010b\u010e\3\2\2\2\u010c\u010a\3")
        buf.write("\2\2\2\u010c\u010d\3\2\2\2\u010d\u011a\3\2\2\2\u010e\u010c")
        buf.write("\3\2\2\2\u010f\u0113\5$\23\2\u0110\u0112\t\2\2\2\u0111")
        buf.write("\u0110\3\2\2\2\u0112\u0115\3\2\2\2\u0113\u0111\3\2\2\2")
        buf.write("\u0113\u0114\3\2\2\2\u0114\u0117\3\2\2\2\u0115\u0113\3")
        buf.write("\2\2\2\u0116\u0118\7\3\2\2\u0117\u0116\3\2\2\2\u0117\u0118")
        buf.write("\3\2\2\2\u0118\u011b\3\2\2\2\u0119\u011b\5\6\4\2\u011a")
        buf.write("\u010f\3\2\2\2\u011a\u0119\3\2\2\2\u011b\u011d\3\2\2\2")
        buf.write("\u011c\u011e\t\2\2\2\u011d\u011c\3\2\2\2\u011e\u011f\3")
        buf.write("\2\2\2\u011f\u011d\3\2\2\2\u011f\u0120\3\2\2\2\u0120\u0122")
        buf.write("\3\2\2\2\u0121\u010c\3\2\2\2\u0121\u0122\3\2\2\2\u0122")
        buf.write("\u0123\3\2\2\2\u0123\u0124\7\23\2\2\u0124\5\3\2\2\2\u0125")
        buf.write("\u0129\5\f\7\2\u0126\u0129\5\n\6\2\u0127\u0129\5\b\5\2")
        buf.write("\u0128\u0125\3\2\2\2\u0128\u0126\3\2\2\2\u0128\u0127\3")
        buf.write("\2\2\2\u0129\7\3\2\2\2\u012a\u012c\7\f\2\2\u012b\u012d")
        buf.write("\t\2\2\2\u012c\u012b\3\2\2\2\u012d\u012e\3\2\2\2\u012e")
        buf.write("\u012c\3\2\2\2\u012e\u012f\3\2\2\2\u012f\u0130\3\2\2\2")
        buf.write("\u0130\u0132\7\61\2\2\u0131\u0133\t\2\2\2\u0132\u0131")
        buf.write("\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u0132\3\2\2\2\u0134")
        buf.write("\u0135\3\2\2\2\u0135\u0136\3\2\2\2\u0136\u0138\7\r\2\2")
        buf.write("\u0137\u0139\t\2\2\2\u0138\u0137\3\2\2\2\u0139\u013a\3")
        buf.write("\2\2\2\u013a\u0138\3\2\2\2\u013a\u013b\3\2\2\2\u013b\u013c")
        buf.write("\3\2\2\2\u013c\u013e\7\61\2\2\u013d\u013f\t\2\2\2\u013e")
        buf.write("\u013d\3\2\2\2\u013f\u0140\3\2\2\2\u0140\u013e\3\2\2\2")
        buf.write("\u0140\u0141\3\2\2\2\u0141\u0142\3\2\2\2\u0142\u0144\7")
        buf.write("\16\2\2\u0143\u0145\t\2\2\2\u0144\u0143\3\2\2\2\u0145")
        buf.write("\u0146\3\2\2\2\u0146\u0144\3\2\2\2\u0146\u0147\3\2\2\2")
        buf.write("\u0147\u018a\3\2\2\2\u0148\u014c\5$\23\2\u0149\u014b\t")
        buf.write("\2\2\2\u014a\u0149\3\2\2\2\u014b\u014e\3\2\2\2\u014c\u014a")
        buf.write("\3\2\2\2\u014c\u014d\3\2\2\2\u014d\u014f\3\2\2\2\u014e")
        buf.write("\u014c\3\2\2\2\u014f\u0153\7\3\2\2\u0150\u0152\t\2\2\2")
        buf.write("\u0151\u0150\3\2\2\2\u0152\u0155\3\2\2\2\u0153\u0151\3")
        buf.write("\2\2\2\u0153\u0154\3\2\2\2\u0154\u016f\3\2\2\2\u0155\u0153")
        buf.write("\3\2\2\2\u0156\u0164\5$\23\2\u0157\u0159\7\63\2\2\u0158")
        buf.write("\u0157\3\2\2\2\u0159\u015c\3\2\2\2\u015a\u0158\3\2\2\2")
        buf.write("\u015a\u015b\3\2\2\2\u015b\u015d\3\2\2\2\u015c\u015a\3")
        buf.write("\2\2\2\u015d\u0161\7\64\2\2\u015e\u0160\7\63\2\2\u015f")
        buf.write("\u015e\3\2\2\2\u0160\u0163\3\2\2\2\u0161\u015f\3\2\2\2")
        buf.write("\u0161\u0162\3\2\2\2\u0162\u0165\3\2\2\2\u0163\u0161\3")
        buf.write("\2\2\2\u0164\u015a\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0164")
        buf.write("\3\2\2\2\u0166\u0167\3\2\2\2\u0167\u016f\3\2\2\2\u0168")
        buf.write("\u016a\5\6\4\2\u0169\u016b\t\2\2\2\u016a\u0169\3\2\2\2")
        buf.write("\u016b\u016c\3\2\2\2\u016c\u016a\3\2\2\2\u016c\u016d\3")
        buf.write("\2\2\2\u016d\u016f\3\2\2\2\u016e\u0148\3\2\2\2\u016e\u0156")
        buf.write("\3\2\2\2\u016e\u0168\3\2\2\2\u016f\u0172\3\2\2\2\u0170")
        buf.write("\u016e\3\2\2\2\u0170\u0171\3\2\2\2\u0171\u0188\3\2\2\2")
        buf.write("\u0172\u0170\3\2\2\2\u0173\u0177\5$\23\2\u0174\u0176\t")
        buf.write("\2\2\2\u0175\u0174\3\2\2\2\u0176\u0179\3\2\2\2\u0177\u0175")
        buf.write("\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u0180\3\2\2\2\u0179")
        buf.write("\u0177\3\2\2\2\u017a\u0181\7\3\2\2\u017b\u017d\t\2\2\2")
        buf.write("\u017c\u017b\3\2\2\2\u017d\u017e\3\2\2\2\u017e\u017c\3")
        buf.write("\2\2\2\u017e\u017f\3\2\2\2\u017f\u0181\3\2\2\2\u0180\u017a")
        buf.write("\3\2\2\2\u0180\u017c\3\2\2\2\u0181\u0189\3\2\2\2\u0182")
        buf.write("\u0184\5\6\4\2\u0183\u0185\t\2\2\2\u0184\u0183\3\2\2\2")
        buf.write("\u0185\u0186\3\2\2\2\u0186\u0184\3\2\2\2\u0186\u0187\3")
        buf.write("\2\2\2\u0187\u0189\3\2\2\2\u0188\u0173\3\2\2\2\u0188\u0182")
        buf.write("\3\2\2\2\u0189\u018b\3\2\2\2\u018a\u0170\3\2\2\2\u018a")
        buf.write("\u018b\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u018d\7\23\2")
        buf.write("\2\u018d\t\3\2\2\2\u018e\u0190\7\13\2\2\u018f\u0191\t")
        buf.write("\2\2\2\u0190\u018f\3\2\2\2\u0191\u0192\3\2\2\2\u0192\u0190")
        buf.write("\3\2\2\2\u0192\u0193\3\2\2\2\u0193\u0194\3\2\2\2\u0194")
        buf.write("\u0196\5\26\f\2\u0195\u0197\t\2\2\2\u0196\u0195\3\2\2")
        buf.write("\2\u0197\u0198\3\2\2\2\u0198\u0196\3\2\2\2\u0198\u0199")
        buf.write("\3\2\2\2\u0199\u019a\3\2\2\2\u019a\u019c\7\16\2\2\u019b")
        buf.write("\u019d\t\2\2\2\u019c\u019b\3\2\2\2\u019d\u019e\3\2\2\2")
        buf.write("\u019e\u019c\3\2\2\2\u019e\u019f\3\2\2\2\u019f\u01e2\3")
        buf.write("\2\2\2\u01a0\u01a4\5$\23\2\u01a1\u01a3\t\2\2\2\u01a2\u01a1")
        buf.write("\3\2\2\2\u01a3\u01a6\3\2\2\2\u01a4\u01a2\3\2\2\2\u01a4")
        buf.write("\u01a5\3\2\2\2\u01a5\u01a7\3\2\2\2\u01a6\u01a4\3\2\2\2")
        buf.write("\u01a7\u01ab\7\3\2\2\u01a8\u01aa\t\2\2\2\u01a9\u01a8\3")
        buf.write("\2\2\2\u01aa\u01ad\3\2\2\2\u01ab\u01a9\3\2\2\2\u01ab\u01ac")
        buf.write("\3\2\2\2\u01ac\u01c7\3\2\2\2\u01ad\u01ab\3\2\2\2\u01ae")
        buf.write("\u01bc\5$\23\2\u01af\u01b1\7\63\2\2\u01b0\u01af\3\2\2")
        buf.write("\2\u01b1\u01b4\3\2\2\2\u01b2\u01b0\3\2\2\2\u01b2\u01b3")
        buf.write("\3\2\2\2\u01b3\u01b5\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b5")
        buf.write("\u01b9\7\64\2\2\u01b6\u01b8\7\63\2\2\u01b7\u01b6\3\2\2")
        buf.write("\2\u01b8\u01bb\3\2\2\2\u01b9\u01b7\3\2\2\2\u01b9\u01ba")
        buf.write("\3\2\2\2\u01ba\u01bd\3\2\2\2\u01bb\u01b9\3\2\2\2\u01bc")
        buf.write("\u01b2\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01bc\3\2\2\2")
        buf.write("\u01be\u01bf\3\2\2\2\u01bf\u01c7\3\2\2\2\u01c0\u01c2\5")
        buf.write("\6\4\2\u01c1\u01c3\t\2\2\2\u01c2\u01c1\3\2\2\2\u01c3\u01c4")
        buf.write("\3\2\2\2\u01c4\u01c2\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5")
        buf.write("\u01c7\3\2\2\2\u01c6\u01a0\3\2\2\2\u01c6\u01ae\3\2\2\2")
        buf.write("\u01c6\u01c0\3\2\2\2\u01c7\u01ca\3\2\2\2\u01c8\u01c6\3")
        buf.write("\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01e0\3\2\2\2\u01ca\u01c8")
        buf.write("\3\2\2\2\u01cb\u01cf\5$\23\2\u01cc\u01ce\t\2\2\2\u01cd")
        buf.write("\u01cc\3\2\2\2\u01ce\u01d1\3\2\2\2\u01cf\u01cd\3\2\2\2")
        buf.write("\u01cf\u01d0\3\2\2\2\u01d0\u01d8\3\2\2\2\u01d1\u01cf\3")
        buf.write("\2\2\2\u01d2\u01d9\7\3\2\2\u01d3\u01d5\t\2\2\2\u01d4\u01d3")
        buf.write("\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d4\3\2\2\2\u01d6")
        buf.write("\u01d7\3\2\2\2\u01d7\u01d9\3\2\2\2\u01d8\u01d2\3\2\2\2")
        buf.write("\u01d8\u01d4\3\2\2\2\u01d9\u01e1\3\2\2\2\u01da\u01dc\5")
        buf.write("\6\4\2\u01db\u01dd\t\2\2\2\u01dc\u01db\3\2\2\2\u01dd\u01de")
        buf.write("\3\2\2\2\u01de\u01dc\3\2\2\2\u01de\u01df\3\2\2\2\u01df")
        buf.write("\u01e1\3\2\2\2\u01e0\u01cb\3\2\2\2\u01e0\u01da\3\2\2\2")
        buf.write("\u01e1\u01e3\3\2\2\2\u01e2\u01c8\3\2\2\2\u01e2\u01e3\3")
        buf.write("\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01e5\7\23\2\2\u01e5")
        buf.write("\13\3\2\2\2\u01e6\u01e7\5\16\b\2\u01e7\u01eb\5\20\t\2")
        buf.write("\u01e8\u01ea\5\22\n\2\u01e9\u01e8\3\2\2\2\u01ea\u01ed")
        buf.write("\3\2\2\2\u01eb\u01e9\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec")
        buf.write("\u01ef\3\2\2\2\u01ed\u01eb\3\2\2\2\u01ee\u01f0\5\24\13")
        buf.write("\2\u01ef\u01ee\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u01f1")
        buf.write("\3\2\2\2\u01f1\u01f2\7\23\2\2\u01f2\r\3\2\2\2\u01f3\u01f5")
        buf.write("\7\17\2\2\u01f4\u01f6\t\2\2\2\u01f5\u01f4\3\2\2\2\u01f6")
        buf.write("\u01f7\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f7\u01f8\3\2\2\2")
        buf.write("\u01f8\u01f9\3\2\2\2\u01f9\u01fb\5\26\f\2\u01fa\u01fc")
        buf.write("\t\2\2\2\u01fb\u01fa\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd")
        buf.write("\u01fb\3\2\2\2\u01fd\u01fe\3\2\2\2\u01fe\17\3\2\2\2\u01ff")
        buf.write("\u0201\7\20\2\2\u0200\u0202\t\2\2\2\u0201\u0200\3\2\2")
        buf.write("\2\u0202\u0203\3\2\2\2\u0203\u0201\3\2\2\2\u0203\u0204")
        buf.write("\3\2\2\2\u0204\u0247\3\2\2\2\u0205\u0209\5$\23\2\u0206")
        buf.write("\u0208\t\2\2\2\u0207\u0206\3\2\2\2\u0208\u020b\3\2\2\2")
        buf.write("\u0209\u0207\3\2\2\2\u0209\u020a\3\2\2\2\u020a\u020c\3")
        buf.write("\2\2\2\u020b\u0209\3\2\2\2\u020c\u0210\7\3\2\2\u020d\u020f")
        buf.write("\t\2\2\2\u020e\u020d\3\2\2\2\u020f\u0212\3\2\2\2\u0210")
        buf.write("\u020e\3\2\2\2\u0210\u0211\3\2\2\2\u0211\u022c\3\2\2\2")
        buf.write("\u0212\u0210\3\2\2\2\u0213\u0221\5$\23\2\u0214\u0216\7")
        buf.write("\63\2\2\u0215\u0214\3\2\2\2\u0216\u0219\3\2\2\2\u0217")
        buf.write("\u0215\3\2\2\2\u0217\u0218\3\2\2\2\u0218\u021a\3\2\2\2")
        buf.write("\u0219\u0217\3\2\2\2\u021a\u021e\7\64\2\2\u021b\u021d")
        buf.write("\7\63\2\2\u021c\u021b\3\2\2\2\u021d\u0220\3\2\2\2\u021e")
        buf.write("\u021c\3\2\2\2\u021e\u021f\3\2\2\2\u021f\u0222\3\2\2\2")
        buf.write("\u0220\u021e\3\2\2\2\u0221\u0217\3\2\2\2\u0222\u0223\3")
        buf.write("\2\2\2\u0223\u0221\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u022c")
        buf.write("\3\2\2\2\u0225\u0227\5\6\4\2\u0226\u0228\t\2\2\2\u0227")
        buf.write("\u0226\3\2\2\2\u0228\u0229\3\2\2\2\u0229\u0227\3\2\2\2")
        buf.write("\u0229\u022a\3\2\2\2\u022a\u022c\3\2\2\2\u022b\u0205\3")
        buf.write("\2\2\2\u022b\u0213\3\2\2\2\u022b\u0225\3\2\2\2\u022c\u022f")
        buf.write("\3\2\2\2\u022d\u022b\3\2\2\2\u022d\u022e\3\2\2\2\u022e")
        buf.write("\u0245\3\2\2\2\u022f\u022d\3\2\2\2\u0230\u0234\5$\23\2")
        buf.write("\u0231\u0233\t\2\2\2\u0232\u0231\3\2\2\2\u0233\u0236\3")
        buf.write("\2\2\2\u0234\u0232\3\2\2\2\u0234\u0235\3\2\2\2\u0235\u023d")
        buf.write("\3\2\2\2\u0236\u0234\3\2\2\2\u0237\u023e\7\3\2\2\u0238")
        buf.write("\u023a\t\2\2\2\u0239\u0238\3\2\2\2\u023a\u023b\3\2\2\2")
        buf.write("\u023b\u0239\3\2\2\2\u023b\u023c\3\2\2\2\u023c\u023e\3")
        buf.write("\2\2\2\u023d\u0237\3\2\2\2\u023d\u0239\3\2\2\2\u023e\u0246")
        buf.write("\3\2\2\2\u023f\u0241\5\6\4\2\u0240\u0242\t\2\2\2\u0241")
        buf.write("\u0240\3\2\2\2\u0242\u0243\3\2\2\2\u0243\u0241\3\2\2\2")
        buf.write("\u0243\u0244\3\2\2\2\u0244\u0246\3\2\2\2\u0245\u0230\3")
        buf.write("\2\2\2\u0245\u023f\3\2\2\2\u0246\u0248\3\2\2\2\u0247\u022d")
        buf.write("\3\2\2\2\u0247\u0248\3\2\2\2\u0248\21\3\2\2\2\u0249\u024b")
        buf.write("\7\21\2\2\u024a\u024c\t\2\2\2\u024b\u024a\3\2\2\2\u024c")
        buf.write("\u024d\3\2\2\2\u024d\u024b\3\2\2\2\u024d\u024e\3\2\2\2")
        buf.write("\u024e\u024f\3\2\2\2\u024f\u0250\5\16\b\2\u0250\u0251")
        buf.write("\5\20\t\2\u0251\23\3\2\2\2\u0252\u0254\7\21\2\2\u0253")
        buf.write("\u0255\t\2\2\2\u0254\u0253\3\2\2\2\u0255\u0256\3\2\2\2")
        buf.write("\u0256\u0254\3\2\2\2\u0256\u0257\3\2\2\2\u0257\u029a\3")
        buf.write("\2\2\2\u0258\u025c\5$\23\2\u0259\u025b\t\2\2\2\u025a\u0259")
        buf.write("\3\2\2\2\u025b\u025e\3\2\2\2\u025c\u025a\3\2\2\2\u025c")
        buf.write("\u025d\3\2\2\2\u025d\u025f\3\2\2\2\u025e\u025c\3\2\2\2")
        buf.write("\u025f\u0263\7\3\2\2\u0260\u0262\t\2\2\2\u0261\u0260\3")
        buf.write("\2\2\2\u0262\u0265\3\2\2\2\u0263\u0261\3\2\2\2\u0263\u0264")
        buf.write("\3\2\2\2\u0264\u027f\3\2\2\2\u0265\u0263\3\2\2\2\u0266")
        buf.write("\u0274\5$\23\2\u0267\u0269\7\63\2\2\u0268\u0267\3\2\2")
        buf.write("\2\u0269\u026c\3\2\2\2\u026a\u0268\3\2\2\2\u026a\u026b")
        buf.write("\3\2\2\2\u026b\u026d\3\2\2\2\u026c\u026a\3\2\2\2\u026d")
        buf.write("\u0271\7\64\2\2\u026e\u0270\7\63\2\2\u026f\u026e\3\2\2")
        buf.write("\2\u0270\u0273\3\2\2\2\u0271\u026f\3\2\2\2\u0271\u0272")
        buf.write("\3\2\2\2\u0272\u0275\3\2\2\2\u0273\u0271\3\2\2\2\u0274")
        buf.write("\u026a\3\2\2\2\u0275\u0276\3\2\2\2\u0276\u0274\3\2\2\2")
        buf.write("\u0276\u0277\3\2\2\2\u0277\u027f\3\2\2\2\u0278\u027a\5")
        buf.write("\6\4\2\u0279\u027b\t\2\2\2\u027a\u0279\3\2\2\2\u027b\u027c")
        buf.write("\3\2\2\2\u027c\u027a\3\2\2\2\u027c\u027d\3\2\2\2\u027d")
        buf.write("\u027f\3\2\2\2\u027e\u0258\3\2\2\2\u027e\u0266\3\2\2\2")
        buf.write("\u027e\u0278\3\2\2\2\u027f\u0282\3\2\2\2\u0280\u027e\3")
        buf.write("\2\2\2\u0280\u0281\3\2\2\2\u0281\u0298\3\2\2\2\u0282\u0280")
        buf.write("\3\2\2\2\u0283\u0287\5$\23\2\u0284\u0286\t\2\2\2\u0285")
        buf.write("\u0284\3\2\2\2\u0286\u0289\3\2\2\2\u0287\u0285\3\2\2\2")
        buf.write("\u0287\u0288\3\2\2\2\u0288\u0290\3\2\2\2\u0289\u0287\3")
        buf.write("\2\2\2\u028a\u0291\7\3\2\2\u028b\u028d\t\2\2\2\u028c\u028b")
        buf.write("\3\2\2\2\u028d\u028e\3\2\2\2\u028e\u028c\3\2\2\2\u028e")
        buf.write("\u028f\3\2\2\2\u028f\u0291\3\2\2\2\u0290\u028a\3\2\2\2")
        buf.write("\u0290\u028c\3\2\2\2\u0291\u0299\3\2\2\2\u0292\u0294\5")
        buf.write("\6\4\2\u0293\u0295\t\2\2\2\u0294\u0293\3\2\2\2\u0295\u0296")
        buf.write("\3\2\2\2\u0296\u0294\3\2\2\2\u0296\u0297\3\2\2\2\u0297")
        buf.write("\u0299\3\2\2\2\u0298\u0283\3\2\2\2\u0298\u0292\3\2\2\2")
        buf.write("\u0299\u029b\3\2\2\2\u029a\u0280\3\2\2\2\u029a\u029b\3")
        buf.write("\2\2\2\u029b\25\3\2\2\2\u029c\u02a1\5\"\22\2\u029d\u02a1")
        buf.write("\7/\2\2\u029e\u02a1\5\30\r\2\u029f\u02a1\5\32\16\2\u02a0")
        buf.write("\u029c\3\2\2\2\u02a0\u029d\3\2\2\2\u02a0\u029e\3\2\2\2")
        buf.write("\u02a0\u029f\3\2\2\2\u02a1\27\3\2\2\2\u02a2\u02a6\5\34")
        buf.write("\17\2\u02a3\u02a5\t\2\2\2\u02a4\u02a3\3\2\2\2\u02a5\u02a8")
        buf.write("\3\2\2\2\u02a6\u02a4\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7")
        buf.write("\u02a9\3\2\2\2\u02a8\u02a6\3\2\2\2\u02a9\u02ad\7+\2\2")
        buf.write("\u02aa\u02ac\t\2\2\2\u02ab\u02aa\3\2\2\2\u02ac\u02af\3")
        buf.write("\2\2\2\u02ad\u02ab\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02b0")
        buf.write("\3\2\2\2\u02af\u02ad\3\2\2\2\u02b0\u02b1\5\34\17\2\u02b1")
        buf.write("\31\3\2\2\2\u02b2\u02b6\5\30\r\2\u02b3\u02b5\t\2\2\2\u02b4")
        buf.write("\u02b3\3\2\2\2\u02b5\u02b8\3\2\2\2\u02b6\u02b4\3\2\2\2")
        buf.write("\u02b6\u02b7\3\2\2\2\u02b7\u02b9\3\2\2\2\u02b8\u02b6\3")
        buf.write("\2\2\2\u02b9\u02bd\7.\2\2\u02ba\u02bc\t\2\2\2\u02bb\u02ba")
        buf.write("\3\2\2\2\u02bc\u02bf\3\2\2\2\u02bd\u02bb\3\2\2\2\u02bd")
        buf.write("\u02be\3\2\2\2\u02be\u02c0\3\2\2\2\u02bf\u02bd\3\2\2\2")
        buf.write("\u02c0\u02c1\5\30\r\2\u02c1\33\3\2\2\2\u02c2\u02cc\5\"")
        buf.write("\22\2\u02c3\u02cc\7\60\2\2\u02c4\u02cc\7\62\2\2\u02c5")
        buf.write("\u02cc\7\61\2\2\u02c6\u02cc\7/\2\2\u02c7\u02cc\5\36\20")
        buf.write("\2\u02c8\u02cc\5R*\2\u02c9\u02cc\5*\26\2\u02ca\u02cc\5")
        buf.write(" \21\2\u02cb\u02c2\3\2\2\2\u02cb\u02c3\3\2\2\2\u02cb\u02c4")
        buf.write("\3\2\2\2\u02cb\u02c5\3\2\2\2\u02cb\u02c6\3\2\2\2\u02cb")
        buf.write("\u02c7\3\2\2\2\u02cb\u02c8\3\2\2\2\u02cb\u02c9\3\2\2\2")
        buf.write("\u02cb\u02ca\3\2\2\2\u02cc\35\3\2\2\2\u02cd\u02d1\5T+")
        buf.write("\2\u02ce\u02d0\t\2\2\2\u02cf\u02ce\3\2\2\2\u02d0\u02d3")
        buf.write("\3\2\2\2\u02d1\u02cf\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2")
        buf.write("\u02d4\3\2\2\2\u02d3\u02d1\3\2\2\2\u02d4\u02d8\7,\2\2")
        buf.write("\u02d5\u02d7\t\2\2\2\u02d6\u02d5\3\2\2\2\u02d7\u02da\3")
        buf.write("\2\2\2\u02d8\u02d6\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u02db")
        buf.write("\3\2\2\2\u02da\u02d8\3\2\2\2\u02db\u02dc\5T+\2\u02dc\37")
        buf.write("\3\2\2\2\u02dd\u02ec\5T+\2\u02de\u02e0\t\2\2\2\u02df\u02de")
        buf.write("\3\2\2\2\u02e0\u02e3\3\2\2\2\u02e1\u02df\3\2\2\2\u02e1")
        buf.write("\u02e2\3\2\2\2\u02e2\u02e4\3\2\2\2\u02e3\u02e1\3\2\2\2")
        buf.write("\u02e4\u02e8\7-\2\2\u02e5\u02e7\t\2\2\2\u02e6\u02e5\3")
        buf.write("\2\2\2\u02e7\u02ea\3\2\2\2\u02e8\u02e6\3\2\2\2\u02e8\u02e9")
        buf.write("\3\2\2\2\u02e9\u02eb\3\2\2\2\u02ea\u02e8\3\2\2\2\u02eb")
        buf.write("\u02ed\5T+\2\u02ec\u02e1\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee")
        buf.write("\u02ec\3\2\2\2\u02ee\u02ef\3\2\2\2\u02ef!\3\2\2\2\u02f0")
        buf.write("\u0308\5,\27\2\u02f1\u0308\5.\30\2\u02f2\u0308\5\62\32")
        buf.write("\2\u02f3\u0308\5\64\33\2\u02f4\u0308\5\66\34\2\u02f5\u0308")
        buf.write("\58\35\2\u02f6\u0308\5:\36\2\u02f7\u0308\5<\37\2\u02f8")
        buf.write("\u0308\5> \2\u02f9\u0308\5@!\2\u02fa\u0308\5B\"\2\u02fb")
        buf.write("\u0308\5D#\2\u02fc\u0308\5F$\2\u02fd\u0308\5H%\2\u02fe")
        buf.write("\u0308\5J&\2\u02ff\u0308\5L\'\2\u0300\u0308\5N(\2\u0301")
        buf.write("\u0308\5P)\2\u0302\u0308\5\60\31\2\u0303\u0308\7\37\2")
        buf.write("\2\u0304\u0308\7#\2\2\u0305\u0308\7$\2\2\u0306\u0308\7")
        buf.write("%\2\2\u0307\u02f0\3\2\2\2\u0307\u02f1\3\2\2\2\u0307\u02f2")
        buf.write("\3\2\2\2\u0307\u02f3\3\2\2\2\u0307\u02f4\3\2\2\2\u0307")
        buf.write("\u02f5\3\2\2\2\u0307\u02f6\3\2\2\2\u0307\u02f7\3\2\2\2")
        buf.write("\u0307\u02f8\3\2\2\2\u0307\u02f9\3\2\2\2\u0307\u02fa\3")
        buf.write("\2\2\2\u0307\u02fb\3\2\2\2\u0307\u02fc\3\2\2\2\u0307\u02fd")
        buf.write("\3\2\2\2\u0307\u02fe\3\2\2\2\u0307\u02ff\3\2\2\2\u0307")
        buf.write("\u0300\3\2\2\2\u0307\u0301\3\2\2\2\u0307\u0302\3\2\2\2")
        buf.write("\u0307\u0303\3\2\2\2\u0307\u0304\3\2\2\2\u0307\u0305\3")
        buf.write("\2\2\2\u0307\u0306\3\2\2\2\u0308#\3\2\2\2\u0309\u0322")
        buf.write("\5,\27\2\u030a\u0322\5.\30\2\u030b\u0322\5\62\32\2\u030c")
        buf.write("\u0322\5\64\33\2\u030d\u0322\5\66\34\2\u030e\u0322\58")
        buf.write("\35\2\u030f\u0322\5:\36\2\u0310\u0322\5<\37\2\u0311\u0322")
        buf.write("\5> \2\u0312\u0322\5@!\2\u0313\u0322\5B\"\2\u0314\u0322")
        buf.write("\5D#\2\u0315\u0322\5F$\2\u0316\u0322\5H%\2\u0317\u0322")
        buf.write("\5J&\2\u0318\u0322\5L\'\2\u0319\u0322\5N(\2\u031a\u0322")
        buf.write("\5(\25\2\u031b\u0322\5&\24\2\u031c\u0322\5\60\31\2\u031d")
        buf.write("\u0322\7\37\2\2\u031e\u0322\7#\2\2\u031f\u0322\7$\2\2")
        buf.write("\u0320\u0322\7%\2\2\u0321\u0309\3\2\2\2\u0321\u030a\3")
        buf.write("\2\2\2\u0321\u030b\3\2\2\2\u0321\u030c\3\2\2\2\u0321\u030d")
        buf.write("\3\2\2\2\u0321\u030e\3\2\2\2\u0321\u030f\3\2\2\2\u0321")
        buf.write("\u0310\3\2\2\2\u0321\u0311\3\2\2\2\u0321\u0312\3\2\2\2")
        buf.write("\u0321\u0313\3\2\2\2\u0321\u0314\3\2\2\2\u0321\u0315\3")
        buf.write("\2\2\2\u0321\u0316\3\2\2\2\u0321\u0317\3\2\2\2\u0321\u0318")
        buf.write("\3\2\2\2\u0321\u0319\3\2\2\2\u0321\u031a\3\2\2\2\u0321")
        buf.write("\u031b\3\2\2\2\u0321\u031c\3\2\2\2\u0321\u031d\3\2\2\2")
        buf.write("\u0321\u031e\3\2\2\2\u0321\u031f\3\2\2\2\u0321\u0320\3")
        buf.write("\2\2\2\u0322%\3\2\2\2\u0323\u0326\7\61\2\2\u0324\u0326")
        buf.write("\5*\26\2\u0325\u0323\3\2\2\2\u0325\u0324\3\2\2\2\u0326")
        buf.write("\u032a\3\2\2\2\u0327\u0329\t\2\2\2\u0328\u0327\3\2\2\2")
        buf.write("\u0329\u032c\3\2\2\2\u032a\u0328\3\2\2\2\u032a\u032b\3")
        buf.write("\2\2\2\u032b\u032d\3\2\2\2\u032c\u032a\3\2\2\2\u032d\u0331")
        buf.write("\7\7\2\2\u032e\u0330\t\2\2\2\u032f\u032e\3\2\2\2\u0330")
        buf.write("\u0333\3\2\2\2\u0331\u032f\3\2\2\2\u0331\u0332\3\2\2\2")
        buf.write("\u0332\u0334\3\2\2\2\u0333\u0331\3\2\2\2\u0334\u0335\5")
        buf.write("\34\17\2\u0335\'\3\2\2\2\u0336\u033a\7\61\2\2\u0337\u0339")
        buf.write("\t\2\2\2\u0338\u0337\3\2\2\2\u0339\u033c\3\2\2\2\u033a")
        buf.write("\u0338\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u033d\3\2\2\2")
        buf.write("\u033c\u033a\3\2\2\2\u033d\u0341\7*\2\2\u033e\u0340\t")
        buf.write("\2\2\2\u033f\u033e\3\2\2\2\u0340\u0343\3\2\2\2\u0341\u033f")
        buf.write("\3\2\2\2\u0341\u0342\3\2\2\2\u0342\u0344\3\2\2\2\u0343")
        buf.write("\u0341\3\2\2\2\u0344\u0348\5\34\17\2\u0345\u0347\t\2\2")
        buf.write("\2\u0346\u0345\3\2\2\2\u0347\u034a\3\2\2\2\u0348\u0346")
        buf.write("\3\2\2\2\u0348\u0349\3\2\2\2\u0349)\3\2\2\2\u034a\u0348")
        buf.write("\3\2\2\2\u034b\u034c\7\61\2\2\u034c\u0350\7\b\2\2\u034d")
        buf.write("\u034f\t\2\2\2\u034e\u034d\3\2\2\2\u034f\u0352\3\2\2\2")
        buf.write("\u0350\u034e\3\2\2\2\u0350\u0351\3\2\2\2\u0351\u0353\3")
        buf.write("\2\2\2\u0352\u0350\3\2\2\2\u0353\u0357\5\34\17\2\u0354")
        buf.write("\u0356\t\2\2\2\u0355\u0354\3\2\2\2\u0356\u0359\3\2\2\2")
        buf.write("\u0357\u0355\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u035a\3")
        buf.write("\2\2\2\u0359\u0357\3\2\2\2\u035a\u035b\7\t\2\2\u035b+")
        buf.write("\3\2\2\2\u035c\u0360\7\61\2\2\u035d\u035f\t\2\2\2\u035e")
        buf.write("\u035d\3\2\2\2\u035f\u0362\3\2\2\2\u0360\u035e\3\2\2\2")
        buf.write("\u0360\u0361\3\2\2\2\u0361\u0363\3\2\2\2\u0362\u0360\3")
        buf.write("\2\2\2\u0363\u0367\7\4\2\2\u0364\u0366\t\2\2\2\u0365\u0364")
        buf.write("\3\2\2\2\u0366\u0369\3\2\2\2\u0367\u0365\3\2\2\2\u0367")
        buf.write("\u0368\3\2\2\2\u0368\u0384\3\2\2\2\u0369\u0367\3\2\2\2")
        buf.write("\u036a\u036e\5\34\17\2\u036b\u036d\t\2\2\2\u036c\u036b")
        buf.write("\3\2\2\2\u036d\u0370\3\2\2\2\u036e\u036c\3\2\2\2\u036e")
        buf.write("\u036f\3\2\2\2\u036f\u0381\3\2\2\2\u0370\u036e\3\2\2\2")
        buf.write("\u0371\u0375\7\5\2\2\u0372\u0374\t\2\2\2\u0373\u0372\3")
        buf.write("\2\2\2\u0374\u0377\3\2\2\2\u0375\u0373\3\2\2\2\u0375\u0376")
        buf.write("\3\2\2\2\u0376\u0378\3\2\2\2\u0377\u0375\3\2\2\2\u0378")
        buf.write("\u037c\5\34\17\2\u0379\u037b\t\2\2\2\u037a\u0379\3\2\2")
        buf.write("\2\u037b\u037e\3\2\2\2\u037c\u037a\3\2\2\2\u037c\u037d")
        buf.write("\3\2\2\2\u037d\u0380\3\2\2\2\u037e\u037c\3\2\2\2\u037f")
        buf.write("\u0371\3\2\2\2\u0380\u0383\3\2\2\2\u0381\u037f\3\2\2\2")
        buf.write("\u0381\u0382\3\2\2\2\u0382\u0385\3\2\2\2\u0383\u0381\3")
        buf.write("\2\2\2\u0384\u036a\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0386")
        buf.write("\3\2\2\2\u0386\u0387\7\6\2\2\u0387-\3\2\2\2\u0388\u038c")
        buf.write("\7\24\2\2\u0389\u038b\t\2\2\2\u038a\u0389\3\2\2\2\u038b")
        buf.write("\u038e\3\2\2\2\u038c\u038a\3\2\2\2\u038c\u038d\3\2\2\2")
        buf.write("\u038d\u038f\3\2\2\2\u038e\u038c\3\2\2\2\u038f\u0393\7")
        buf.write("\4\2\2\u0390\u0392\t\2\2\2\u0391\u0390\3\2\2\2\u0392\u0395")
        buf.write("\3\2\2\2\u0393\u0391\3\2\2\2\u0393\u0394\3\2\2\2\u0394")
        buf.write("\u0396\3\2\2\2\u0395\u0393\3\2\2\2\u0396\u039a\5\34\17")
        buf.write("\2\u0397\u0399\t\2\2\2\u0398\u0397\3\2\2\2\u0399\u039c")
        buf.write("\3\2\2\2\u039a\u0398\3\2\2\2\u039a\u039b\3\2\2\2\u039b")
        buf.write("\u039d\3\2\2\2\u039c\u039a\3\2\2\2\u039d\u039e\7\6\2\2")
        buf.write("\u039e/\3\2\2\2\u039f\u03a3\7\"\2\2\u03a0\u03a2\t\2\2")
        buf.write("\2\u03a1\u03a0\3\2\2\2\u03a2\u03a5\3\2\2\2\u03a3\u03a1")
        buf.write("\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03a6\3\2\2\2\u03a5")
        buf.write("\u03a3\3\2\2\2\u03a6\u03aa\7\4\2\2\u03a7\u03a9\t\2\2\2")
        buf.write("\u03a8\u03a7\3\2\2\2\u03a9\u03ac\3\2\2\2\u03aa\u03a8\3")
        buf.write("\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u03ad\3\2\2\2\u03ac\u03aa")
        buf.write("\3\2\2\2\u03ad\u03b1\5\34\17\2\u03ae\u03b0\t\2\2\2\u03af")
        buf.write("\u03ae\3\2\2\2\u03b0\u03b3\3\2\2\2\u03b1\u03af\3\2\2\2")
        buf.write("\u03b1\u03b2\3\2\2\2\u03b2\u03b4\3\2\2\2\u03b3\u03b1\3")
        buf.write("\2\2\2\u03b4\u03b5\7\6\2\2\u03b5\61\3\2\2\2\u03b6\u03ba")
        buf.write("\7\25\2\2\u03b7\u03b9\t\2\2\2\u03b8\u03b7\3\2\2\2\u03b9")
        buf.write("\u03bc\3\2\2\2\u03ba\u03b8\3\2\2\2\u03ba\u03bb\3\2\2\2")
        buf.write("\u03bb\u03bd\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bd\u03c1\7")
        buf.write("\4\2\2\u03be\u03c0\t\2\2\2\u03bf\u03be\3\2\2\2\u03c0\u03c3")
        buf.write("\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2")
        buf.write("\u03c4\3\2\2\2\u03c3\u03c1\3\2\2\2\u03c4\u03c8\5\34\17")
        buf.write("\2\u03c5\u03c7\t\2\2\2\u03c6\u03c5\3\2\2\2\u03c7\u03ca")
        buf.write("\3\2\2\2\u03c8\u03c6\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9")
        buf.write("\u03cb\3\2\2\2\u03ca\u03c8\3\2\2\2\u03cb\u03cc\7\6\2\2")
        buf.write("\u03cc\63\3\2\2\2\u03cd\u03d1\7\26\2\2\u03ce\u03d0\t\2")
        buf.write("\2\2\u03cf\u03ce\3\2\2\2\u03d0\u03d3\3\2\2\2\u03d1\u03cf")
        buf.write("\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d4\3\2\2\2\u03d3")
        buf.write("\u03d1\3\2\2\2\u03d4\u03d8\7\4\2\2\u03d5\u03d7\t\2\2\2")
        buf.write("\u03d6\u03d5\3\2\2\2\u03d7\u03da\3\2\2\2\u03d8\u03d6\3")
        buf.write("\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03db\3\2\2\2\u03da\u03d8")
        buf.write("\3\2\2\2\u03db\u03df\5\34\17\2\u03dc\u03de\t\2\2\2\u03dd")
        buf.write("\u03dc\3\2\2\2\u03de\u03e1\3\2\2\2\u03df\u03dd\3\2\2\2")
        buf.write("\u03df\u03e0\3\2\2\2\u03e0\u03e2\3\2\2\2\u03e1\u03df\3")
        buf.write("\2\2\2\u03e2\u03e6\7\5\2\2\u03e3\u03e5\t\2\2\2\u03e4\u03e3")
        buf.write("\3\2\2\2\u03e5\u03e8\3\2\2\2\u03e6\u03e4\3\2\2\2\u03e6")
        buf.write("\u03e7\3\2\2\2\u03e7\u03e9\3\2\2\2\u03e8\u03e6\3\2\2\2")
        buf.write("\u03e9\u03ed\5\34\17\2\u03ea\u03ec\t\2\2\2\u03eb\u03ea")
        buf.write("\3\2\2\2\u03ec\u03ef\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ed")
        buf.write("\u03ee\3\2\2\2\u03ee\u03f0\3\2\2\2\u03ef\u03ed\3\2\2\2")
        buf.write("\u03f0\u03f1\7\6\2\2\u03f1\65\3\2\2\2\u03f2\u03f6\7\27")
        buf.write("\2\2\u03f3\u03f5\t\2\2\2\u03f4\u03f3\3\2\2\2\u03f5\u03f8")
        buf.write("\3\2\2\2\u03f6\u03f4\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7")
        buf.write("\u03f9\3\2\2\2\u03f8\u03f6\3\2\2\2\u03f9\u03fd\7\4\2\2")
        buf.write("\u03fa\u03fc\t\2\2\2\u03fb\u03fa\3\2\2\2\u03fc\u03ff\3")
        buf.write("\2\2\2\u03fd\u03fb\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u0400")
        buf.write("\3\2\2\2\u03ff\u03fd\3\2\2\2\u0400\u0404\5\34\17\2\u0401")
        buf.write("\u0403\t\2\2\2\u0402\u0401\3\2\2\2\u0403\u0406\3\2\2\2")
        buf.write("\u0404\u0402\3\2\2\2\u0404\u0405\3\2\2\2\u0405\u0407\3")
        buf.write("\2\2\2\u0406\u0404\3\2\2\2\u0407\u0408\7\6\2\2\u0408\67")
        buf.write("\3\2\2\2\u0409\u040d\7\30\2\2\u040a\u040c\t\2\2\2\u040b")
        buf.write("\u040a\3\2\2\2\u040c\u040f\3\2\2\2\u040d\u040b\3\2\2\2")
        buf.write("\u040d\u040e\3\2\2\2\u040e\u0410\3\2\2\2\u040f\u040d\3")
        buf.write("\2\2\2\u0410\u0414\7\4\2\2\u0411\u0413\t\2\2\2\u0412\u0411")
        buf.write("\3\2\2\2\u0413\u0416\3\2\2\2\u0414\u0412\3\2\2\2\u0414")
        buf.write("\u0415\3\2\2\2\u0415\u0417\3\2\2\2\u0416\u0414\3\2\2\2")
        buf.write("\u0417\u041b\5\34\17\2\u0418\u041a\t\2\2\2\u0419\u0418")
        buf.write("\3\2\2\2\u041a\u041d\3\2\2\2\u041b\u0419\3\2\2\2\u041b")
        buf.write("\u041c\3\2\2\2\u041c\u041e\3\2\2\2\u041d\u041b\3\2\2\2")
        buf.write("\u041e\u0422\7\5\2\2\u041f\u0421\t\2\2\2\u0420\u041f\3")
        buf.write("\2\2\2\u0421\u0424\3\2\2\2\u0422\u0420\3\2\2\2\u0422\u0423")
        buf.write("\3\2\2\2\u0423\u0425\3\2\2\2\u0424\u0422\3\2\2\2\u0425")
        buf.write("\u0429\5\34\17\2\u0426\u0428\t\2\2\2\u0427\u0426\3\2\2")
        buf.write("\2\u0428\u042b\3\2\2\2\u0429\u0427\3\2\2\2\u0429\u042a")
        buf.write("\3\2\2\2\u042a\u042c\3\2\2\2\u042b\u0429\3\2\2\2\u042c")
        buf.write("\u042d\7\6\2\2\u042d9\3\2\2\2\u042e\u0432\7\31\2\2\u042f")
        buf.write("\u0431\t\2\2\2\u0430\u042f\3\2\2\2\u0431\u0434\3\2\2\2")
        buf.write("\u0432\u0430\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u0435\3")
        buf.write("\2\2\2\u0434\u0432\3\2\2\2\u0435\u0439\7\4\2\2\u0436\u0438")
        buf.write("\t\2\2\2\u0437\u0436\3\2\2\2\u0438\u043b\3\2\2\2\u0439")
        buf.write("\u0437\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u043c\3\2\2\2")
        buf.write("\u043b\u0439\3\2\2\2\u043c\u0440\5\34\17\2\u043d\u043f")
        buf.write("\t\2\2\2\u043e\u043d\3\2\2\2\u043f\u0442\3\2\2\2\u0440")
        buf.write("\u043e\3\2\2\2\u0440\u0441\3\2\2\2\u0441\u0443\3\2\2\2")
        buf.write("\u0442\u0440\3\2\2\2\u0443\u0447\7\5\2\2\u0444\u0446\t")
        buf.write("\2\2\2\u0445\u0444\3\2\2\2\u0446\u0449\3\2\2\2\u0447\u0445")
        buf.write("\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u044a\3\2\2\2\u0449")
        buf.write("\u0447\3\2\2\2\u044a\u044e\5\34\17\2\u044b\u044d\t\2\2")
        buf.write("\2\u044c\u044b\3\2\2\2\u044d\u0450\3\2\2\2\u044e\u044c")
        buf.write("\3\2\2\2\u044e\u044f\3\2\2\2\u044f\u0451\3\2\2\2\u0450")
        buf.write("\u044e\3\2\2\2\u0451\u0452\7\6\2\2\u0452;\3\2\2\2\u0453")
        buf.write("\u0457\7\32\2\2\u0454\u0456\t\2\2\2\u0455\u0454\3\2\2")
        buf.write("\2\u0456\u0459\3\2\2\2\u0457\u0455\3\2\2\2\u0457\u0458")
        buf.write("\3\2\2\2\u0458\u045a\3\2\2\2\u0459\u0457\3\2\2\2\u045a")
        buf.write("\u045e\7\4\2\2\u045b\u045d\t\2\2\2\u045c\u045b\3\2\2\2")
        buf.write("\u045d\u0460\3\2\2\2\u045e\u045c\3\2\2\2\u045e\u045f\3")
        buf.write("\2\2\2\u045f\u0461\3\2\2\2\u0460\u045e\3\2\2\2\u0461\u0465")
        buf.write("\5\34\17\2\u0462\u0464\t\2\2\2\u0463\u0462\3\2\2\2\u0464")
        buf.write("\u0467\3\2\2\2\u0465\u0463\3\2\2\2\u0465\u0466\3\2\2\2")
        buf.write("\u0466\u0468\3\2\2\2\u0467\u0465\3\2\2\2\u0468\u046c\7")
        buf.write("\5\2\2\u0469\u046b\t\2\2\2\u046a\u0469\3\2\2\2\u046b\u046e")
        buf.write("\3\2\2\2\u046c\u046a\3\2\2\2\u046c\u046d\3\2\2\2\u046d")
        buf.write("\u046f\3\2\2\2\u046e\u046c\3\2\2\2\u046f\u0473\5\34\17")
        buf.write("\2\u0470\u0472\t\2\2\2\u0471\u0470\3\2\2\2\u0472\u0475")
        buf.write("\3\2\2\2\u0473\u0471\3\2\2\2\u0473\u0474\3\2\2\2\u0474")
        buf.write("\u0476\3\2\2\2\u0475\u0473\3\2\2\2\u0476\u0477\7\6\2\2")
        buf.write("\u0477=\3\2\2\2\u0478\u047c\7\33\2\2\u0479\u047b\t\2\2")
        buf.write("\2\u047a\u0479\3\2\2\2\u047b\u047e\3\2\2\2\u047c\u047a")
        buf.write("\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u047f\3\2\2\2\u047e")
        buf.write("\u047c\3\2\2\2\u047f\u0483\7\4\2\2\u0480\u0482\t\2\2\2")
        buf.write("\u0481\u0480\3\2\2\2\u0482\u0485\3\2\2\2\u0483\u0481\3")
        buf.write("\2\2\2\u0483\u0484\3\2\2\2\u0484\u0486\3\2\2\2\u0485\u0483")
        buf.write("\3\2\2\2\u0486\u048a\5\34\17\2\u0487\u0489\t\2\2\2\u0488")
        buf.write("\u0487\3\2\2\2\u0489\u048c\3\2\2\2\u048a\u0488\3\2\2\2")
        buf.write("\u048a\u048b\3\2\2\2\u048b\u048d\3\2\2\2\u048c\u048a\3")
        buf.write("\2\2\2\u048d\u0491\7\5\2\2\u048e\u0490\t\2\2\2\u048f\u048e")
        buf.write("\3\2\2\2\u0490\u0493\3\2\2\2\u0491\u048f\3\2\2\2\u0491")
        buf.write("\u0492\3\2\2\2\u0492\u0494\3\2\2\2\u0493\u0491\3\2\2\2")
        buf.write("\u0494\u0498\5\34\17\2\u0495\u0497\t\2\2\2\u0496\u0495")
        buf.write("\3\2\2\2\u0497\u049a\3\2\2\2\u0498\u0496\3\2\2\2\u0498")
        buf.write("\u0499\3\2\2\2\u0499\u049b\3\2\2\2\u049a\u0498\3\2\2\2")
        buf.write("\u049b\u049c\7\6\2\2\u049c?\3\2\2\2\u049d\u04a1\7\'\2")
        buf.write("\2\u049e\u04a0\t\2\2\2\u049f\u049e\3\2\2\2\u04a0\u04a3")
        buf.write("\3\2\2\2\u04a1\u049f\3\2\2\2\u04a1\u04a2\3\2\2\2\u04a2")
        buf.write("\u04a4\3\2\2\2\u04a3\u04a1\3\2\2\2\u04a4\u04a8\7\4\2\2")
        buf.write("\u04a5\u04a7\t\2\2\2\u04a6\u04a5\3\2\2\2\u04a7\u04aa\3")
        buf.write("\2\2\2\u04a8\u04a6\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u04ab")
        buf.write("\3\2\2\2\u04aa\u04a8\3\2\2\2\u04ab\u04af\5\34\17\2\u04ac")
        buf.write("\u04ae\t\2\2\2\u04ad\u04ac\3\2\2\2\u04ae\u04b1\3\2\2\2")
        buf.write("\u04af\u04ad\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u04b2\3")
        buf.write("\2\2\2\u04b1\u04af\3\2\2\2\u04b2\u04b3\7\6\2\2\u04b3A")
        buf.write("\3\2\2\2\u04b4\u04b8\7\34\2\2\u04b5\u04b7\t\2\2\2\u04b6")
        buf.write("\u04b5\3\2\2\2\u04b7\u04ba\3\2\2\2\u04b8\u04b6\3\2\2\2")
        buf.write("\u04b8\u04b9\3\2\2\2\u04b9\u04bb\3\2\2\2\u04ba\u04b8\3")
        buf.write("\2\2\2\u04bb\u04bf\7\4\2\2\u04bc\u04be\t\2\2\2\u04bd\u04bc")
        buf.write("\3\2\2\2\u04be\u04c1\3\2\2\2\u04bf\u04bd\3\2\2\2\u04bf")
        buf.write("\u04c0\3\2\2\2\u04c0\u04c2\3\2\2\2\u04c1\u04bf\3\2\2\2")
        buf.write("\u04c2\u04c6\5\34\17\2\u04c3\u04c5\t\2\2\2\u04c4\u04c3")
        buf.write("\3\2\2\2\u04c5\u04c8\3\2\2\2\u04c6\u04c4\3\2\2\2\u04c6")
        buf.write("\u04c7\3\2\2\2\u04c7\u04c9\3\2\2\2\u04c8\u04c6\3\2\2\2")
        buf.write("\u04c9\u04ca\7\6\2\2\u04caC\3\2\2\2\u04cb\u04cf\7\35\2")
        buf.write("\2\u04cc\u04ce\t\2\2\2\u04cd\u04cc\3\2\2\2\u04ce\u04d1")
        buf.write("\3\2\2\2\u04cf\u04cd\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0")
        buf.write("\u04d2\3\2\2\2\u04d1\u04cf\3\2\2\2\u04d2\u04d6\7\4\2\2")
        buf.write("\u04d3\u04d5\t\2\2\2\u04d4\u04d3\3\2\2\2\u04d5\u04d8\3")
        buf.write("\2\2\2\u04d6\u04d4\3\2\2\2\u04d6\u04d7\3\2\2\2\u04d7\u04e9")
        buf.write("\3\2\2\2\u04d8\u04d6\3\2\2\2\u04d9\u04dd\5\34\17\2\u04da")
        buf.write("\u04dc\t\2\2\2\u04db\u04da\3\2\2\2\u04dc\u04df\3\2\2\2")
        buf.write("\u04dd\u04db\3\2\2\2\u04dd\u04de\3\2\2\2\u04de\u04e0\3")
        buf.write("\2\2\2\u04df\u04dd\3\2\2\2\u04e0\u04e4\7\5\2\2\u04e1\u04e3")
        buf.write("\t\2\2\2\u04e2\u04e1\3\2\2\2\u04e3\u04e6\3\2\2\2\u04e4")
        buf.write("\u04e2\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5\u04e8\3\2\2\2")
        buf.write("\u04e6\u04e4\3\2\2\2\u04e7\u04d9\3\2\2\2\u04e8\u04eb\3")
        buf.write("\2\2\2\u04e9\u04e7\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04ec")
        buf.write("\3\2\2\2\u04eb\u04e9\3\2\2\2\u04ec\u04f0\5\34\17\2\u04ed")
        buf.write("\u04ef\t\2\2\2\u04ee\u04ed\3\2\2\2\u04ef\u04f2\3\2\2\2")
        buf.write("\u04f0\u04ee\3\2\2\2\u04f0\u04f1\3\2\2\2\u04f1\u04f3\3")
        buf.write("\2\2\2\u04f2\u04f0\3\2\2\2\u04f3\u04f4\7\6\2\2\u04f4E")
        buf.write("\3\2\2\2\u04f5\u04f9\7 \2\2\u04f6\u04f8\t\2\2\2\u04f7")
        buf.write("\u04f6\3\2\2\2\u04f8\u04fb\3\2\2\2\u04f9\u04f7\3\2\2\2")
        buf.write("\u04f9\u04fa\3\2\2\2\u04fa\u04fc\3\2\2\2\u04fb\u04f9\3")
        buf.write("\2\2\2\u04fc\u0500\7\4\2\2\u04fd\u04ff\t\2\2\2\u04fe\u04fd")
        buf.write("\3\2\2\2\u04ff\u0502\3\2\2\2\u0500\u04fe\3\2\2\2\u0500")
        buf.write("\u0501\3\2\2\2\u0501\u0503\3\2\2\2\u0502\u0500\3\2\2\2")
        buf.write("\u0503\u0507\5\34\17\2\u0504\u0506\t\2\2\2\u0505\u0504")
        buf.write("\3\2\2\2\u0506\u0509\3\2\2\2\u0507\u0505\3\2\2\2\u0507")
        buf.write("\u0508\3\2\2\2\u0508\u050a\3\2\2\2\u0509\u0507\3\2\2\2")
        buf.write("\u050a\u050b\7\6\2\2\u050bG\3\2\2\2\u050c\u0510\7!\2\2")
        buf.write("\u050d\u050f\t\2\2\2\u050e\u050d\3\2\2\2\u050f\u0512\3")
        buf.write("\2\2\2\u0510\u050e\3\2\2\2\u0510\u0511\3\2\2\2\u0511\u0513")
        buf.write("\3\2\2\2\u0512\u0510\3\2\2\2\u0513\u0517\7\4\2\2\u0514")
        buf.write("\u0516\t\2\2\2\u0515\u0514\3\2\2\2\u0516\u0519\3\2\2\2")
        buf.write("\u0517\u0515\3\2\2\2\u0517\u0518\3\2\2\2\u0518\u051a\3")
        buf.write("\2\2\2\u0519\u0517\3\2\2\2\u051a\u051e\5\34\17\2\u051b")
        buf.write("\u051d\t\2\2\2\u051c\u051b\3\2\2\2\u051d\u0520\3\2\2\2")
        buf.write("\u051e\u051c\3\2\2\2\u051e\u051f\3\2\2\2\u051f\u0521\3")
        buf.write("\2\2\2\u0520\u051e\3\2\2\2\u0521\u0522\7\6\2\2\u0522I")
        buf.write("\3\2\2\2\u0523\u0527\7&\2\2\u0524\u0526\t\2\2\2\u0525")
        buf.write("\u0524\3\2\2\2\u0526\u0529\3\2\2\2\u0527\u0525\3\2\2\2")
        buf.write("\u0527\u0528\3\2\2\2\u0528\u052a\3\2\2\2\u0529\u0527\3")
        buf.write("\2\2\2\u052a\u052e\7\4\2\2\u052b\u052d\t\2\2\2\u052c\u052b")
        buf.write("\3\2\2\2\u052d\u0530\3\2\2\2\u052e\u052c\3\2\2\2\u052e")
        buf.write("\u052f\3\2\2\2\u052f\u0531\3\2\2\2\u0530\u052e\3\2\2\2")
        buf.write("\u0531\u0535\5\34\17\2\u0532\u0534\t\2\2\2\u0533\u0532")
        buf.write("\3\2\2\2\u0534\u0537\3\2\2\2\u0535\u0533\3\2\2\2\u0535")
        buf.write("\u0536\3\2\2\2\u0536\u0538\3\2\2\2\u0537\u0535\3\2\2\2")
        buf.write("\u0538\u0539\7\6\2\2\u0539K\3\2\2\2\u053a\u053e\7\36\2")
        buf.write("\2\u053b\u053d\t\2\2\2\u053c\u053b\3\2\2\2\u053d\u0540")
        buf.write("\3\2\2\2\u053e\u053c\3\2\2\2\u053e\u053f\3\2\2\2\u053f")
        buf.write("\u0541\3\2\2\2\u0540\u053e\3\2\2\2\u0541\u0545\7\4\2\2")
        buf.write("\u0542\u0544\t\2\2\2\u0543\u0542\3\2\2\2\u0544\u0547\3")
        buf.write("\2\2\2\u0545\u0543\3\2\2\2\u0545\u0546\3\2\2\2\u0546\u0548")
        buf.write("\3\2\2\2\u0547\u0545\3\2\2\2\u0548\u054c\5\34\17\2\u0549")
        buf.write("\u054b\t\2\2\2\u054a\u0549\3\2\2\2\u054b\u054e\3\2\2\2")
        buf.write("\u054c\u054a\3\2\2\2\u054c\u054d\3\2\2\2\u054d\u054f\3")
        buf.write("\2\2\2\u054e\u054c\3\2\2\2\u054f\u0550\7\6\2\2\u0550M")
        buf.write("\3\2\2\2\u0551\u0555\7(\2\2\u0552\u0554\t\2\2\2\u0553")
        buf.write("\u0552\3\2\2\2\u0554\u0557\3\2\2\2\u0555\u0553\3\2\2\2")
        buf.write("\u0555\u0556\3\2\2\2\u0556\u0558\3\2\2\2\u0557\u0555\3")
        buf.write("\2\2\2\u0558\u055c\7\4\2\2\u0559\u055b\t\2\2\2\u055a\u0559")
        buf.write("\3\2\2\2\u055b\u055e\3\2\2\2\u055c\u055a\3\2\2\2\u055c")
        buf.write("\u055d\3\2\2\2\u055d\u055f\3\2\2\2\u055e\u055c\3\2\2\2")
        buf.write("\u055f\u0563\5\34\17\2\u0560\u0562\t\2\2\2\u0561\u0560")
        buf.write("\3\2\2\2\u0562\u0565\3\2\2\2\u0563\u0561\3\2\2\2\u0563")
        buf.write("\u0564\3\2\2\2\u0564\u0566\3\2\2\2\u0565\u0563\3\2\2\2")
        buf.write("\u0566\u0567\7\6\2\2\u0567O\3\2\2\2\u0568\u056c\7)\2\2")
        buf.write("\u0569\u056b\t\2\2\2\u056a\u0569\3\2\2\2\u056b\u056e\3")
        buf.write("\2\2\2\u056c\u056a\3\2\2\2\u056c\u056d\3\2\2\2\u056d\u056f")
        buf.write("\3\2\2\2\u056e\u056c\3\2\2\2\u056f\u0573\7\4\2\2\u0570")
        buf.write("\u0572\t\2\2\2\u0571\u0570\3\2\2\2\u0572\u0575\3\2\2\2")
        buf.write("\u0573\u0571\3\2\2\2\u0573\u0574\3\2\2\2\u0574\u0578\3")
        buf.write("\2\2\2\u0575\u0573\3\2\2\2\u0576\u0579\7\61\2\2\u0577")
        buf.write("\u0579\5R*\2\u0578\u0576\3\2\2\2\u0578\u0577\3\2\2\2\u0579")
        buf.write("\u057d\3\2\2\2\u057a\u057c\t\2\2\2\u057b\u057a\3\2\2\2")
        buf.write("\u057c\u057f\3\2\2\2\u057d\u057b\3\2\2\2\u057d\u057e\3")
        buf.write("\2\2\2\u057e\u0580\3\2\2\2\u057f\u057d\3\2\2\2\u0580\u0581")
        buf.write("\7\6\2\2\u0581Q\3\2\2\2\u0582\u0586\7\b\2\2\u0583\u0585")
        buf.write("\t\2\2\2\u0584\u0583\3\2\2\2\u0585\u0588\3\2\2\2\u0586")
        buf.write("\u0584\3\2\2\2\u0586\u0587\3\2\2\2\u0587\u05a3\3\2\2\2")
        buf.write("\u0588\u0586\3\2\2\2\u0589\u059a\5T+\2\u058a\u058c\t\2")
        buf.write("\2\2\u058b\u058a\3\2\2\2\u058c\u058f\3\2\2\2\u058d\u058b")
        buf.write("\3\2\2\2\u058d\u058e\3\2\2\2\u058e\u0590\3\2\2\2\u058f")
        buf.write("\u058d\3\2\2\2\u0590\u0594\7\5\2\2\u0591\u0593\t\2\2\2")
        buf.write("\u0592\u0591\3\2\2\2\u0593\u0596\3\2\2\2\u0594\u0592\3")
        buf.write("\2\2\2\u0594\u0595\3\2\2\2\u0595\u0597\3\2\2\2\u0596\u0594")
        buf.write("\3\2\2\2\u0597\u0599\5T+\2\u0598\u058d\3\2\2\2\u0599\u059c")
        buf.write("\3\2\2\2\u059a\u0598\3\2\2\2\u059a\u059b\3\2\2\2\u059b")
        buf.write("\u05a0\3\2\2\2\u059c\u059a\3\2\2\2\u059d\u059f\t\2\2\2")
        buf.write("\u059e\u059d\3\2\2\2\u059f\u05a2\3\2\2\2\u05a0\u059e\3")
        buf.write("\2\2\2\u05a0\u05a1\3\2\2\2\u05a1\u05a4\3\2\2\2\u05a2\u05a0")
        buf.write("\3\2\2\2\u05a3\u0589\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4")
        buf.write("\u05a5\3\2\2\2\u05a5\u05a6\7\t\2\2\u05a6S\3\2\2\2\u05a7")
        buf.write("\u05a8\t\3\2\2\u05a8U\3\2\2\2\u00d8Y`gnuz~\u0083\u0085")
        buf.write("\u0087\u008e\u0092\u0096\u0098\u009a\u009f\u00a3\u00ab")
        buf.write("\u00b1\u00b8\u00bf\u00c6\u00cd\u00d2\u00d5\u00db\u00e2")
        buf.write("\u00e8\u00ef\u00f6\u00fd\u0102\u0108\u010a\u010c\u0113")
        buf.write("\u0117\u011a\u011f\u0121\u0128\u012e\u0134\u013a\u0140")
        buf.write("\u0146\u014c\u0153\u015a\u0161\u0166\u016c\u016e\u0170")
        buf.write("\u0177\u017e\u0180\u0186\u0188\u018a\u0192\u0198\u019e")
        buf.write("\u01a4\u01ab\u01b2\u01b9\u01be\u01c4\u01c6\u01c8\u01cf")
        buf.write("\u01d6\u01d8\u01de\u01e0\u01e2\u01eb\u01ef\u01f7\u01fd")
        buf.write("\u0203\u0209\u0210\u0217\u021e\u0223\u0229\u022b\u022d")
        buf.write("\u0234\u023b\u023d\u0243\u0245\u0247\u024d\u0256\u025c")
        buf.write("\u0263\u026a\u0271\u0276\u027c\u027e\u0280\u0287\u028e")
        buf.write("\u0290\u0296\u0298\u029a\u02a0\u02a6\u02ad\u02b6\u02bd")
        buf.write("\u02cb\u02d1\u02d8\u02e1\u02e8\u02ee\u0307\u0321\u0325")
        buf.write("\u032a\u0331\u033a\u0341\u0348\u0350\u0357\u0360\u0367")
        buf.write("\u036e\u0375\u037c\u0381\u0384\u038c\u0393\u039a\u03a3")
        buf.write("\u03aa\u03b1\u03ba\u03c1\u03c8\u03d1\u03d8\u03df\u03e6")
        buf.write("\u03ed\u03f6\u03fd\u0404\u040d\u0414\u041b\u0422\u0429")
        buf.write("\u0432\u0439\u0440\u0447\u044e\u0457\u045e\u0465\u046c")
        buf.write("\u0473\u047c\u0483\u048a\u0491\u0498\u04a1\u04a8\u04af")
        buf.write("\u04b8\u04bf\u04c6\u04cf\u04d6\u04dd\u04e4\u04e9\u04f0")
        buf.write("\u04f9\u0500\u0507\u0510\u0517\u051e\u0527\u052e\u0535")
        buf.write("\u053e\u0545\u054c\u0555\u055c\u0563\u056c\u0573\u0578")
        buf.write("\u057d\u0586\u058d\u0594\u059a\u05a0\u05a3")
        return buf.getvalue()


class WordlifyParser ( Parser ):

    grammarFileName = "Wordlify.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'('", "','", "')'", "'='", "'['", 
                     "']'", "'fn'", "'while'", "'foreach'", "'in'", "'do'", 
                     "'if'", "'then'", "'else'", "'begin'", "'end'", "'exist'", 
                     "'print'", "'rename'", "'remove'", "'move'", "'copy'", 
                     "'download'", "'write'", "'wait'", "'execute'", "'exit'", 
                     "'time'", "'getFiles'", "'dateModified'", "'isDir'", 
                     "'file'", "'folder'", "'args'", "'size'", "'read'", 
                     "'create'", "'length'", "'<-'", "<INVALID>", "<INVALID>", 
                     "'.'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "FN", "WHILE", "FOREACH", "IN", "DO", "IF", "THEN", 
                      "ELSE", "BEGIN", "END", "EXIST", "PRINT", "RENAME", 
                      "REMOVE", "MOVE", "COPY", "DOWNLOAD", "WRITE", "WAIT", 
                      "EXECUTE", "EXIT", "TIME", "GET_FILES", "DATE_MODIFIED", 
                      "IS_DIR", "FILE", "FOLDER", "ARGS", "SIZE", "READ", 
                      "CREATE", "LENGTH", "APPEND", "CMP_OP", "ARITH_OP", 
                      "CONCAT_OP", "LOG_OP", "BOOL", "STR", "ID", "NUM", 
                      "WS", "NL", "END_COMMENT" ]

    RULE_program = 0
    RULE_fn_def = 1
    RULE_block_instr = 2
    RULE_foreach = 3
    RULE_while_instr = 4
    RULE_if_instr = 5
    RULE_if_cond = 6
    RULE_then = 7
    RULE_else_if = 8
    RULE_else_block = 9
    RULE_cond = 10
    RULE_comparison = 11
    RULE_double_comparsion = 12
    RULE_expr = 13
    RULE_arith_expr = 14
    RULE_concat = 15
    RULE_fn_call = 16
    RULE_atom_instr = 17
    RULE_assign = 18
    RULE_array_append = 19
    RULE_array_elem = 20
    RULE_own_fn_call = 21
    RULE_exist = 22
    RULE_is_dir = 23
    RULE_print_instr = 24
    RULE_rename = 25
    RULE_remove = 26
    RULE_move = 27
    RULE_copy = 28
    RULE_download = 29
    RULE_write = 30
    RULE_read = 31
    RULE_wait_instr = 32
    RULE_execute = 33
    RULE_get_files = 34
    RULE_date_modified = 35
    RULE_size = 36
    RULE_exit = 37
    RULE_create = 38
    RULE_length = 39
    RULE_array = 40
    RULE_value_or_id = 41

    ruleNames =  [ "program", "fn_def", "block_instr", "foreach", "while_instr", 
                   "if_instr", "if_cond", "then", "else_if", "else_block", 
                   "cond", "comparison", "double_comparsion", "expr", "arith_expr", 
                   "concat", "fn_call", "atom_instr", "assign", "array_append", 
                   "array_elem", "own_fn_call", "exist", "is_dir", "print_instr", 
                   "rename", "remove", "move", "copy", "download", "write", 
                   "read", "wait_instr", "execute", "get_files", "date_modified", 
                   "size", "exit", "create", "length", "array", "value_or_id" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    FN=8
    WHILE=9
    FOREACH=10
    IN=11
    DO=12
    IF=13
    THEN=14
    ELSE=15
    BEGIN=16
    END=17
    EXIST=18
    PRINT=19
    RENAME=20
    REMOVE=21
    MOVE=22
    COPY=23
    DOWNLOAD=24
    WRITE=25
    WAIT=26
    EXECUTE=27
    EXIT=28
    TIME=29
    GET_FILES=30
    DATE_MODIFIED=31
    IS_DIR=32
    FILE=33
    FOLDER=34
    ARGS=35
    SIZE=36
    READ=37
    CREATE=38
    LENGTH=39
    APPEND=40
    CMP_OP=41
    ARITH_OP=42
    CONCAT_OP=43
    LOG_OP=44
    BOOL=45
    STR=46
    ID=47
    NUM=48
    WS=49
    NL=50
    END_COMMENT=51

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(WordlifyParser.EOF, 0)

        def END_COMMENT(self):
            return self.getToken(WordlifyParser.END_COMMENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def fn_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Fn_defContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Fn_defContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = WordlifyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 87
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 84
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 89
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.FN) | (1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 133
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 131
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                        if la_ == 1:
                            self.state = 90
                            self.atom_instr()
                            self.state = 94
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 91
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 96
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 97
                            self.match(WordlifyParser.T__0)
                            self.state = 101
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 98
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 103
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 104
                            self.atom_instr()
                            self.state = 118 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 108
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 105
                                    self.match(WordlifyParser.WS)
                                    self.state = 110
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 111
                                self.match(WordlifyParser.NL)
                                self.state = 115
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 112
                                        self.match(WordlifyParser.WS) 
                                    self.state = 117
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                                self.state = 120 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 124
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                                self.state = 122
                                self.block_instr()
                                pass
                            elif token in [WordlifyParser.FN]:
                                self.state = 123
                                self.fn_def()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 127 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 126
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 129 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 135
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                self.state = 150
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 136
                    self.atom_instr()
                    self.state = 140
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 137
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 142
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                    self.state = 144
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==WordlifyParser.T__0:
                        self.state = 143
                        self.match(WordlifyParser.T__0)


                    pass
                elif token in [WordlifyParser.FN, WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 148
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 146
                        self.block_instr()
                        pass
                    elif token in [WordlifyParser.FN]:
                        self.state = 147
                        self.fn_def()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 154
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 159
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.END_COMMENT:
                self.state = 160
                self.match(WordlifyParser.END_COMMENT)


            self.state = 163
            self.match(WordlifyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FN(self):
            return self.getToken(WordlifyParser.FN, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def BEGIN(self):
            return self.getToken(WordlifyParser.BEGIN, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_def" ):
                listener.enterFn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_def" ):
                listener.exitFn_def(self)




    def fn_def(self):

        localctx = WordlifyParser.Fn_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fn_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 165
            self.match(WordlifyParser.FN)
            self.state = 167 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 166
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 169 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 171
            self.match(WordlifyParser.ID)
            self.state = 175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 172
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 177
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 178
            self.match(WordlifyParser.T__1)
            self.state = 182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 179
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 184
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.ID:
                self.state = 185
                self.match(WordlifyParser.ID)
                self.state = 189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 186
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 191
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.T__2:
                    self.state = 192
                    self.match(WordlifyParser.T__2)
                    self.state = 196
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 193
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 198
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 199
                    self.match(WordlifyParser.ID)
                    self.state = 203
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 200
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 205
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 210
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 213
            self.match(WordlifyParser.T__3)
            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 214
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 220
            self.match(WordlifyParser.BEGIN)
            self.state = 222 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 221
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 224 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 266
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 264
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                        if la_ == 1:
                            self.state = 226
                            self.atom_instr()
                            self.state = 230
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 227
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 232
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 233
                            self.match(WordlifyParser.T__0)
                            self.state = 237
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 234
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 239
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 240
                            self.atom_instr()
                            self.state = 254 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 244
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 241
                                    self.match(WordlifyParser.WS)
                                    self.state = 246
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 247
                                self.match(WordlifyParser.NL)
                                self.state = 251
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 248
                                        self.match(WordlifyParser.WS) 
                                    self.state = 253
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                                self.state = 256 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 258
                            self.block_instr()
                            self.state = 260 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 259
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 262 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 268
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                self.state = 280
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 269
                    self.atom_instr()
                    self.state = 273
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 270
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 275
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                    self.state = 277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==WordlifyParser.T__0:
                        self.state = 276
                        self.match(WordlifyParser.T__0)


                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 279
                    self.block_instr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 283 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 282
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 285 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break



            self.state = 289
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_instr(self):
            return self.getTypedRuleContext(WordlifyParser.If_instrContext,0)


        def while_instr(self):
            return self.getTypedRuleContext(WordlifyParser.While_instrContext,0)


        def foreach(self):
            return self.getTypedRuleContext(WordlifyParser.ForeachContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_block_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_instr" ):
                listener.enterBlock_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_instr" ):
                listener.exitBlock_instr(self)




    def block_instr(self):

        localctx = WordlifyParser.Block_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block_instr)
        try:
            self.state = 294
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 291
                self.if_instr()
                pass
            elif token in [WordlifyParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 292
                self.while_instr()
                pass
            elif token in [WordlifyParser.FOREACH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 293
                self.foreach()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeachContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(WordlifyParser.FOREACH, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def IN(self):
            return self.getToken(WordlifyParser.IN, 0)

        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_foreach

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeach" ):
                listener.enterForeach(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeach" ):
                listener.exitForeach(self)




    def foreach(self):

        localctx = WordlifyParser.ForeachContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_foreach)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(WordlifyParser.FOREACH)
            self.state = 298 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 297
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 300 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 302
            self.match(WordlifyParser.ID)
            self.state = 304 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 303
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 306 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 308
            self.match(WordlifyParser.IN)
            self.state = 310 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 309
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 312 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 314
            self.match(WordlifyParser.ID)
            self.state = 316 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 315
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 318 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 320
            self.match(WordlifyParser.DO)
            self.state = 322 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 321
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 324 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 366
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 364
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                        if la_ == 1:
                            self.state = 326
                            self.atom_instr()
                            self.state = 330
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 327
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 332
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 333
                            self.match(WordlifyParser.T__0)
                            self.state = 337
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 334
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 339
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 340
                            self.atom_instr()
                            self.state = 354 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 344
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 341
                                    self.match(WordlifyParser.WS)
                                    self.state = 346
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 347
                                self.match(WordlifyParser.NL)
                                self.state = 351
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 348
                                        self.match(WordlifyParser.WS) 
                                    self.state = 353
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                                self.state = 356 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 358
                            self.block_instr()
                            self.state = 360 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 359
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 362 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 368
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

                self.state = 390
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 369
                    self.atom_instr()
                    self.state = 373
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 370
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 375
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

                    self.state = 382
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 376
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 378 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 377
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 380 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 384
                    self.block_instr()
                    self.state = 386 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 385
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 388 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 394
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(WordlifyParser.WHILE, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_while_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_instr" ):
                listener.enterWhile_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_instr" ):
                listener.exitWhile_instr(self)




    def while_instr(self):

        localctx = WordlifyParser.While_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_while_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.match(WordlifyParser.WHILE)
            self.state = 398 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 397
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 400 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 402
            self.cond()
            self.state = 404 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 403
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 406 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 408
            self.match(WordlifyParser.DO)
            self.state = 410 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 409
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 412 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 454
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 452
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                        if la_ == 1:
                            self.state = 414
                            self.atom_instr()
                            self.state = 418
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 415
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 420
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 421
                            self.match(WordlifyParser.T__0)
                            self.state = 425
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 422
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 427
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 428
                            self.atom_instr()
                            self.state = 442 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 432
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 429
                                    self.match(WordlifyParser.WS)
                                    self.state = 434
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 435
                                self.match(WordlifyParser.NL)
                                self.state = 439
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 436
                                        self.match(WordlifyParser.WS) 
                                    self.state = 441
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

                                self.state = 444 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 446
                            self.block_instr()
                            self.state = 448 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 447
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 450 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 456
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

                self.state = 478
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 457
                    self.atom_instr()
                    self.state = 461
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 458
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 463
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                    self.state = 470
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 464
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 466 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 465
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 468 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 472
                    self.block_instr()
                    self.state = 474 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 473
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 476 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 482
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def else_if(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Else_ifContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Else_ifContext,i)


        def else_block(self):
            return self.getTypedRuleContext(WordlifyParser.Else_blockContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_if_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_instr" ):
                listener.enterIf_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_instr" ):
                listener.exitIf_instr(self)




    def if_instr(self):

        localctx = WordlifyParser.If_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_if_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.if_cond()
            self.state = 485
            self.then()
            self.state = 489
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 486
                    self.else_if() 
                self.state = 491
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.ELSE:
                self.state = 492
                self.else_block()


            self.state = 495
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(WordlifyParser.IF, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_if_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_cond" ):
                listener.enterIf_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_cond" ):
                listener.exitIf_cond(self)




    def if_cond(self):

        localctx = WordlifyParser.If_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_if_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(WordlifyParser.IF)
            self.state = 499 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 498
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 501 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 503
            self.cond()
            self.state = 505 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 504
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 507 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEN(self):
            return self.getToken(WordlifyParser.THEN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_then

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThen" ):
                listener.enterThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThen" ):
                listener.exitThen(self)




    def then(self):

        localctx = WordlifyParser.ThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_then)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.match(WordlifyParser.THEN)
            self.state = 511 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 510
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 513 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 555
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 553
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                        if la_ == 1:
                            self.state = 515
                            self.atom_instr()
                            self.state = 519
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 516
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 521
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 522
                            self.match(WordlifyParser.T__0)
                            self.state = 526
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 523
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 528
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 529
                            self.atom_instr()
                            self.state = 543 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 533
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 530
                                    self.match(WordlifyParser.WS)
                                    self.state = 535
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 536
                                self.match(WordlifyParser.NL)
                                self.state = 540
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 537
                                        self.match(WordlifyParser.WS) 
                                    self.state = 542
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

                                self.state = 545 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 547
                            self.block_instr()
                            self.state = 549 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 548
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 551 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 557
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                self.state = 579
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 558
                    self.atom_instr()
                    self.state = 562
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 559
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 564
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                    self.state = 571
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 565
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 567 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 566
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 569 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 573
                    self.block_instr()
                    self.state = 575 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 574
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 577 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_else_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_if" ):
                listener.enterElse_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_if" ):
                listener.exitElse_if(self)




    def else_if(self):

        localctx = WordlifyParser.Else_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_else_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.match(WordlifyParser.ELSE)
            self.state = 585 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 584
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 587 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 589
            self.if_cond()
            self.state = 590
            self.then()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_else_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_block" ):
                listener.enterElse_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_block" ):
                listener.exitElse_block(self)




    def else_block(self):

        localctx = WordlifyParser.Else_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_else_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(WordlifyParser.ELSE)
            self.state = 594 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 593
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 596 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 638
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 636
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                        if la_ == 1:
                            self.state = 598
                            self.atom_instr()
                            self.state = 602
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 599
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 604
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 605
                            self.match(WordlifyParser.T__0)
                            self.state = 609
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 606
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 611
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 612
                            self.atom_instr()
                            self.state = 626 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 616
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 613
                                    self.match(WordlifyParser.WS)
                                    self.state = 618
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 619
                                self.match(WordlifyParser.NL)
                                self.state = 623
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 620
                                        self.match(WordlifyParser.WS) 
                                    self.state = 625
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

                                self.state = 628 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 630
                            self.block_instr()
                            self.state = 632 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 631
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 634 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 640
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                self.state = 662
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.IS_DIR, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 641
                    self.atom_instr()
                    self.state = 645
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 642
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 647
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

                    self.state = 654
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 648
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 650 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 649
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 652 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 656
                    self.block_instr()
                    self.state = 658 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 657
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 660 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def comparison(self):
            return self.getTypedRuleContext(WordlifyParser.ComparisonContext,0)


        def double_comparsion(self):
            return self.getTypedRuleContext(WordlifyParser.Double_comparsionContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)




    def cond(self):

        localctx = WordlifyParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_cond)
        try:
            self.state = 670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 666
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 667
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 668
                self.comparison()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 669
                self.double_comparsion()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def CMP_OP(self):
            return self.getToken(WordlifyParser.CMP_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = WordlifyParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.expr()
            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 673
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 679
            self.match(WordlifyParser.CMP_OP)
            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 680
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 686
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_comparsionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ComparisonContext,i)


        def LOG_OP(self):
            return self.getToken(WordlifyParser.LOG_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_double_comparsion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_comparsion" ):
                listener.enterDouble_comparsion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_comparsion" ):
                listener.exitDouble_comparsion(self)




    def double_comparsion(self):

        localctx = WordlifyParser.Double_comparsionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_double_comparsion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.comparison()
            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 689
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 695
            self.match(WordlifyParser.LOG_OP)
            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 696
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 702
            self.comparison()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def arith_expr(self):
            return self.getTypedRuleContext(WordlifyParser.Arith_exprContext,0)


        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def array_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Array_elemContext,0)


        def concat(self):
            return self.getTypedRuleContext(WordlifyParser.ConcatContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = WordlifyParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_expr)
        try:
            self.state = 713
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 704
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 705
                self.match(WordlifyParser.STR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 706
                self.match(WordlifyParser.NUM)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 707
                self.match(WordlifyParser.ID)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 708
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 709
                self.arith_expr()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 710
                self.array()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 711
                self.array_elem()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 712
                self.concat()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def ARITH_OP(self):
            return self.getToken(WordlifyParser.ARITH_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)




    def arith_expr(self):

        localctx = WordlifyParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self.value_or_id()
            self.state = 719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 716
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 722
            self.match(WordlifyParser.ARITH_OP)
            self.state = 726
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 723
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 728
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 729
            self.value_or_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConcatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def CONCAT_OP(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.CONCAT_OP)
            else:
                return self.getToken(WordlifyParser.CONCAT_OP, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_concat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcat" ):
                listener.enterConcat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcat" ):
                listener.exitConcat(self)




    def concat(self):

        localctx = WordlifyParser.ConcatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_concat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.value_or_id()
            self.state = 746 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 735
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 732
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 737
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 738
                    self.match(WordlifyParser.CONCAT_OP)
                    self.state = 742
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 739
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 744
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 745
                    self.value_or_id()

                else:
                    raise NoViableAltException(self)
                self.state = 748 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def length(self):
            return self.getTypedRuleContext(WordlifyParser.LengthContext,0)


        def is_dir(self):
            return self.getTypedRuleContext(WordlifyParser.Is_dirContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def ARGS(self):
            return self.getToken(WordlifyParser.ARGS, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_call" ):
                listener.enterFn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_call" ):
                listener.exitFn_call(self)




    def fn_call(self):

        localctx = WordlifyParser.Fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_fn_call)
        try:
            self.state = 773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 750
                self.own_fn_call()
                pass
            elif token in [WordlifyParser.EXIST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 751
                self.exist()
                pass
            elif token in [WordlifyParser.PRINT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 752
                self.print_instr()
                pass
            elif token in [WordlifyParser.RENAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 753
                self.rename()
                pass
            elif token in [WordlifyParser.REMOVE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 754
                self.remove()
                pass
            elif token in [WordlifyParser.MOVE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 755
                self.move()
                pass
            elif token in [WordlifyParser.COPY]:
                self.enterOuterAlt(localctx, 7)
                self.state = 756
                self.copy()
                pass
            elif token in [WordlifyParser.DOWNLOAD]:
                self.enterOuterAlt(localctx, 8)
                self.state = 757
                self.download()
                pass
            elif token in [WordlifyParser.WRITE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 758
                self.write()
                pass
            elif token in [WordlifyParser.READ]:
                self.enterOuterAlt(localctx, 10)
                self.state = 759
                self.read()
                pass
            elif token in [WordlifyParser.WAIT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 760
                self.wait_instr()
                pass
            elif token in [WordlifyParser.EXECUTE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 761
                self.execute()
                pass
            elif token in [WordlifyParser.GET_FILES]:
                self.enterOuterAlt(localctx, 13)
                self.state = 762
                self.get_files()
                pass
            elif token in [WordlifyParser.DATE_MODIFIED]:
                self.enterOuterAlt(localctx, 14)
                self.state = 763
                self.date_modified()
                pass
            elif token in [WordlifyParser.SIZE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 764
                self.size()
                pass
            elif token in [WordlifyParser.EXIT]:
                self.enterOuterAlt(localctx, 16)
                self.state = 765
                self.exit()
                pass
            elif token in [WordlifyParser.CREATE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 766
                self.create()
                pass
            elif token in [WordlifyParser.LENGTH]:
                self.enterOuterAlt(localctx, 18)
                self.state = 767
                self.length()
                pass
            elif token in [WordlifyParser.IS_DIR]:
                self.enterOuterAlt(localctx, 19)
                self.state = 768
                self.is_dir()
                pass
            elif token in [WordlifyParser.TIME]:
                self.enterOuterAlt(localctx, 20)
                self.state = 769
                self.match(WordlifyParser.TIME)
                pass
            elif token in [WordlifyParser.FILE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 770
                self.match(WordlifyParser.FILE)
                pass
            elif token in [WordlifyParser.FOLDER]:
                self.enterOuterAlt(localctx, 22)
                self.state = 771
                self.match(WordlifyParser.FOLDER)
                pass
            elif token in [WordlifyParser.ARGS]:
                self.enterOuterAlt(localctx, 23)
                self.state = 772
                self.match(WordlifyParser.ARGS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def array_append(self):
            return self.getTypedRuleContext(WordlifyParser.Array_appendContext,0)


        def assign(self):
            return self.getTypedRuleContext(WordlifyParser.AssignContext,0)


        def is_dir(self):
            return self.getTypedRuleContext(WordlifyParser.Is_dirContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def ARGS(self):
            return self.getToken(WordlifyParser.ARGS, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_atom_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_instr" ):
                listener.enterAtom_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_instr" ):
                listener.exitAtom_instr(self)




    def atom_instr(self):

        localctx = WordlifyParser.Atom_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_atom_instr)
        try:
            self.state = 799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 775
                self.own_fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 776
                self.exist()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 777
                self.print_instr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 778
                self.rename()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 779
                self.remove()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 780
                self.move()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 781
                self.copy()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 782
                self.download()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 783
                self.write()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 784
                self.read()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 785
                self.wait_instr()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 786
                self.execute()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 787
                self.get_files()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 788
                self.date_modified()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 789
                self.size()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 790
                self.exit()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 791
                self.create()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 792
                self.array_append()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 793
                self.assign()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 794
                self.is_dir()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 795
                self.match(WordlifyParser.TIME)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 796
                self.match(WordlifyParser.FILE)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 797
                self.match(WordlifyParser.FOLDER)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 798
                self.match(WordlifyParser.ARGS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def array_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Array_elemContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)




    def assign(self):

        localctx = WordlifyParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 801
                self.match(WordlifyParser.ID)
                pass

            elif la_ == 2:
                self.state = 802
                self.array_elem()
                pass


            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 805
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 811
            self.match(WordlifyParser.T__4)
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 812
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 818
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_appendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def APPEND(self):
            return self.getToken(WordlifyParser.APPEND, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array_append

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_append" ):
                listener.enterArray_append(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_append" ):
                listener.exitArray_append(self)




    def array_append(self):

        localctx = WordlifyParser.Array_appendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_array_append)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.match(WordlifyParser.ID)
            self.state = 824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 821
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 826
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 827
            self.match(WordlifyParser.APPEND)
            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 828
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 834
            self.expr()
            self.state = 838
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,130,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 835
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 840
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,130,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_elem" ):
                listener.enterArray_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_elem" ):
                listener.exitArray_elem(self)




    def array_elem(self):

        localctx = WordlifyParser.Array_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_array_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.match(WordlifyParser.ID)
            self.state = 842
            self.match(WordlifyParser.T__5)
            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 843
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 849
            self.expr()
            self.state = 853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 850
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 855
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 856
            self.match(WordlifyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Own_fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_own_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOwn_fn_call" ):
                listener.enterOwn_fn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOwn_fn_call" ):
                listener.exitOwn_fn_call(self)




    def own_fn_call(self):

        localctx = WordlifyParser.Own_fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_own_fn_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.match(WordlifyParser.ID)
            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 859
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 864
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 865
            self.match(WordlifyParser.T__1)
            self.state = 869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 866
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.T__5) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.IS_DIR) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.LENGTH) | (1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 872
                self.expr()
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 873
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 878
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.T__2:
                    self.state = 879
                    self.match(WordlifyParser.T__2)
                    self.state = 883
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 880
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 885
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 886
                    self.expr()
                    self.state = 890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 887
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 892
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 897
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 900
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIST(self):
            return self.getToken(WordlifyParser.EXIST, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExist" ):
                listener.enterExist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExist" ):
                listener.exitExist(self)




    def exist(self):

        localctx = WordlifyParser.ExistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_exist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.match(WordlifyParser.EXIST)
            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 903
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 909
            self.match(WordlifyParser.T__1)
            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 910
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 916
            self.expr()
            self.state = 920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 917
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 923
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_dirContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS_DIR(self):
            return self.getToken(WordlifyParser.IS_DIR, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_is_dir

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_dir" ):
                listener.enterIs_dir(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_dir" ):
                listener.exitIs_dir(self)




    def is_dir(self):

        localctx = WordlifyParser.Is_dirContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_is_dir)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.match(WordlifyParser.IS_DIR)
            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 926
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 932
            self.match(WordlifyParser.T__1)
            self.state = 936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 933
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 939
            self.expr()
            self.state = 943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 940
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 945
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 946
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(WordlifyParser.PRINT, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_print_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_instr" ):
                listener.enterPrint_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_instr" ):
                listener.exitPrint_instr(self)




    def print_instr(self):

        localctx = WordlifyParser.Print_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_print_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.match(WordlifyParser.PRINT)
            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 949
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 955
            self.match(WordlifyParser.T__1)
            self.state = 959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 956
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 962
            self.expr()
            self.state = 966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 963
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 969
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(WordlifyParser.RENAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_rename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename" ):
                listener.enterRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename" ):
                listener.exitRename(self)




    def rename(self):

        localctx = WordlifyParser.RenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_rename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.match(WordlifyParser.RENAME)
            self.state = 975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 972
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 977
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 978
            self.match(WordlifyParser.T__1)
            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 979
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 984
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 985
            self.expr()
            self.state = 989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 986
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 991
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 992
            self.match(WordlifyParser.T__2)
            self.state = 996
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 993
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 999
            self.expr()
            self.state = 1003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1000
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1005
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1006
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(WordlifyParser.REMOVE, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove" ):
                listener.enterRemove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove" ):
                listener.exitRemove(self)




    def remove(self):

        localctx = WordlifyParser.RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.match(WordlifyParser.REMOVE)
            self.state = 1012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1009
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1014
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1015
            self.match(WordlifyParser.T__1)
            self.state = 1019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1016
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1022
            self.expr()
            self.state = 1026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1023
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1029
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOVE(self):
            return self.getToken(WordlifyParser.MOVE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)




    def move(self):

        localctx = WordlifyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.match(WordlifyParser.MOVE)
            self.state = 1035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1032
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1037
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1038
            self.match(WordlifyParser.T__1)
            self.state = 1042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1039
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1044
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1045
            self.expr()
            self.state = 1049
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1046
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1051
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1052
            self.match(WordlifyParser.T__2)
            self.state = 1056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1053
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1059
            self.expr()
            self.state = 1063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1060
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1065
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1066
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(WordlifyParser.COPY, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_copy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy" ):
                listener.enterCopy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy" ):
                listener.exitCopy(self)




    def copy(self):

        localctx = WordlifyParser.CopyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_copy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1068
            self.match(WordlifyParser.COPY)
            self.state = 1072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1069
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1075
            self.match(WordlifyParser.T__1)
            self.state = 1079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1076
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1082
            self.expr()
            self.state = 1086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1083
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1088
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1089
            self.match(WordlifyParser.T__2)
            self.state = 1093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1090
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1096
            self.expr()
            self.state = 1100
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1097
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1102
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1103
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DownloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOWNLOAD(self):
            return self.getToken(WordlifyParser.DOWNLOAD, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_download

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDownload" ):
                listener.enterDownload(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDownload" ):
                listener.exitDownload(self)




    def download(self):

        localctx = WordlifyParser.DownloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_download)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            self.match(WordlifyParser.DOWNLOAD)
            self.state = 1109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1106
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1111
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1112
            self.match(WordlifyParser.T__1)
            self.state = 1116
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1113
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1118
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1119
            self.expr()
            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1120
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1125
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1126
            self.match(WordlifyParser.T__2)
            self.state = 1130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1127
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1132
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1133
            self.expr()
            self.state = 1137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1134
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1139
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1140
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(WordlifyParser.WRITE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_write

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite" ):
                listener.enterWrite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite" ):
                listener.exitWrite(self)




    def write(self):

        localctx = WordlifyParser.WriteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_write)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self.match(WordlifyParser.WRITE)
            self.state = 1146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1143
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1148
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1149
            self.match(WordlifyParser.T__1)
            self.state = 1153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1150
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1155
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1156
            self.expr()
            self.state = 1160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1157
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1162
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1163
            self.match(WordlifyParser.T__2)
            self.state = 1167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1164
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1169
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1170
            self.expr()
            self.state = 1174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1171
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1176
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1177
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(WordlifyParser.READ, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_read

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead" ):
                listener.enterRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead" ):
                listener.exitRead(self)




    def read(self):

        localctx = WordlifyParser.ReadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_read)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            self.match(WordlifyParser.READ)
            self.state = 1183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1180
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1186
            self.match(WordlifyParser.T__1)
            self.state = 1190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1187
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1192
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1193
            self.expr()
            self.state = 1197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1194
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1199
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1200
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wait_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(WordlifyParser.WAIT, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_wait_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_instr" ):
                listener.enterWait_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_instr" ):
                listener.exitWait_instr(self)




    def wait_instr(self):

        localctx = WordlifyParser.Wait_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_wait_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1202
            self.match(WordlifyParser.WAIT)
            self.state = 1206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1203
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1208
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1209
            self.match(WordlifyParser.T__1)
            self.state = 1213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1210
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1215
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1216
            self.expr()
            self.state = 1220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1217
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1223
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(WordlifyParser.EXECUTE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_execute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)




    def execute(self):

        localctx = WordlifyParser.ExecuteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_execute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.match(WordlifyParser.EXECUTE)
            self.state = 1229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1226
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1232
            self.match(WordlifyParser.T__1)
            self.state = 1236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1233
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1238
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1255
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1239
                    self.expr()
                    self.state = 1243
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1240
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1245
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1246
                    self.match(WordlifyParser.T__2)
                    self.state = 1250
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1247
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1252
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
             
                self.state = 1257
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

            self.state = 1258
            self.expr()
            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1259
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1265
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_filesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET_FILES(self):
            return self.getToken(WordlifyParser.GET_FILES, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_get_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_files" ):
                listener.enterGet_files(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_files" ):
                listener.exitGet_files(self)




    def get_files(self):

        localctx = WordlifyParser.Get_filesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_get_files)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.match(WordlifyParser.GET_FILES)
            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1268
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1273
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1274
            self.match(WordlifyParser.T__1)
            self.state = 1278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1275
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1281
            self.expr()
            self.state = 1285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1282
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1287
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1288
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_modifiedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_MODIFIED(self):
            return self.getToken(WordlifyParser.DATE_MODIFIED, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_date_modified

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_modified" ):
                listener.enterDate_modified(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_modified" ):
                listener.exitDate_modified(self)




    def date_modified(self):

        localctx = WordlifyParser.Date_modifiedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_date_modified)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.match(WordlifyParser.DATE_MODIFIED)
            self.state = 1294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1291
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1296
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1297
            self.match(WordlifyParser.T__1)
            self.state = 1301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1298
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1303
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1304
            self.expr()
            self.state = 1308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1305
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1310
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1311
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIZE(self):
            return self.getToken(WordlifyParser.SIZE, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSize" ):
                listener.enterSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSize" ):
                listener.exitSize(self)




    def size(self):

        localctx = WordlifyParser.SizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1313
            self.match(WordlifyParser.SIZE)
            self.state = 1317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1314
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1319
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1320
            self.match(WordlifyParser.T__1)
            self.state = 1324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1321
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1326
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1327
            self.expr()
            self.state = 1331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1328
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1333
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1334
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(WordlifyParser.EXIT, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit" ):
                listener.enterExit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit" ):
                listener.exitExit(self)




    def exit(self):

        localctx = WordlifyParser.ExitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_exit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1336
            self.match(WordlifyParser.EXIT)
            self.state = 1340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1337
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1343
            self.match(WordlifyParser.T__1)
            self.state = 1347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1344
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1349
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1350
            self.expr()
            self.state = 1354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1351
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1356
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1357
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(WordlifyParser.CREATE, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate" ):
                listener.enterCreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate" ):
                listener.exitCreate(self)




    def create(self):

        localctx = WordlifyParser.CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1359
            self.match(WordlifyParser.CREATE)
            self.state = 1363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1360
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1365
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1366
            self.match(WordlifyParser.T__1)
            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1367
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1373
            self.expr()
            self.state = 1377
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1374
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1379
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1380
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LENGTH(self):
            return self.getToken(WordlifyParser.LENGTH, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLength" ):
                listener.enterLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLength" ):
                listener.exitLength(self)




    def length(self):

        localctx = WordlifyParser.LengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_length)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1382
            self.match(WordlifyParser.LENGTH)
            self.state = 1386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1383
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1388
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1389
            self.match(WordlifyParser.T__1)
            self.state = 1393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1390
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1395
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.state = 1396
                self.match(WordlifyParser.ID)
                pass
            elif token in [WordlifyParser.T__5]:
                self.state = 1397
                self.array()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1400
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1405
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1406
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray" ):
                listener.enterArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray" ):
                listener.exitArray(self)




    def array(self):

        localctx = WordlifyParser.ArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            self.match(WordlifyParser.T__5)
            self.state = 1412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1409
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1414
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 1415
                self.value_or_id()
                self.state = 1432
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1419
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 1416
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1421
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1422
                        self.match(WordlifyParser.T__2)
                        self.state = 1426
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 1423
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1428
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1429
                        self.value_or_id() 
                    self.state = 1434
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

                self.state = 1438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1435
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1443
            self.match(WordlifyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_or_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_value_or_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_or_id" ):
                listener.enterValue_or_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_or_id" ):
                listener.exitValue_or_id(self)




    def value_or_id(self):

        localctx = WordlifyParser.Value_or_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_value_or_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





