# Generated from Wordlify.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3)")
        buf.write("\u03fd\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\3\2\7\2H\n\2\f\2")
        buf.write("\16\2K\13\2\3\2\3\2\7\2O\n\2\f\2\16\2R\13\2\3\2\3\2\7")
        buf.write("\2V\n\2\f\2\16\2Y\13\2\3\2\3\2\7\2]\n\2\f\2\16\2`\13\2")
        buf.write("\3\2\3\2\7\2d\n\2\f\2\16\2g\13\2\6\2i\n\2\r\2\16\2j\3")
        buf.write("\2\3\2\6\2o\n\2\r\2\16\2p\7\2s\n\2\f\2\16\2v\13\2\3\2")
        buf.write("\3\2\7\2z\n\2\f\2\16\2}\13\2\3\2\5\2\u0080\n\2\3\2\5\2")
        buf.write("\u0083\n\2\5\2\u0085\n\2\3\2\7\2\u0088\n\2\f\2\16\2\u008b")
        buf.write("\13\2\3\2\5\2\u008e\n\2\3\2\3\2\3\3\3\3\5\3\u0094\n\3")
        buf.write("\3\4\3\4\6\4\u0098\n\4\r\4\16\4\u0099\3\4\3\4\7\4\u009e")
        buf.write("\n\4\f\4\16\4\u00a1\13\4\3\4\3\4\7\4\u00a5\n\4\f\4\16")
        buf.write("\4\u00a8\13\4\3\4\3\4\7\4\u00ac\n\4\f\4\16\4\u00af\13")
        buf.write("\4\3\4\3\4\7\4\u00b3\n\4\f\4\16\4\u00b6\13\4\3\4\3\4\7")
        buf.write("\4\u00ba\n\4\f\4\16\4\u00bd\13\4\7\4\u00bf\n\4\f\4\16")
        buf.write("\4\u00c2\13\4\5\4\u00c4\n\4\3\4\3\4\7\4\u00c8\n\4\f\4")
        buf.write("\16\4\u00cb\13\4\3\4\3\4\6\4\u00cf\n\4\r\4\16\4\u00d0")
        buf.write("\3\4\3\4\7\4\u00d5\n\4\f\4\16\4\u00d8\13\4\3\4\3\4\7\4")
        buf.write("\u00dc\n\4\f\4\16\4\u00df\13\4\3\4\3\4\7\4\u00e3\n\4\f")
        buf.write("\4\16\4\u00e6\13\4\3\4\3\4\7\4\u00ea\n\4\f\4\16\4\u00ed")
        buf.write("\13\4\6\4\u00ef\n\4\r\4\16\4\u00f0\3\4\3\4\6\4\u00f5\n")
        buf.write("\4\r\4\16\4\u00f6\7\4\u00f9\n\4\f\4\16\4\u00fc\13\4\3")
        buf.write("\4\3\4\7\4\u0100\n\4\f\4\16\4\u0103\13\4\3\4\5\4\u0106")
        buf.write("\n\4\3\4\5\4\u0109\n\4\3\4\6\4\u010c\n\4\r\4\16\4\u010d")
        buf.write("\5\4\u0110\n\4\3\4\3\4\3\5\3\5\3\5\7\5\u0117\n\5\f\5\16")
        buf.write("\5\u011a\13\5\3\5\5\5\u011d\n\5\3\5\3\5\3\6\3\6\6\6\u0123")
        buf.write("\n\6\r\6\16\6\u0124\3\6\3\6\6\6\u0129\n\6\r\6\16\6\u012a")
        buf.write("\3\7\3\7\6\7\u012f\n\7\r\7\16\7\u0130\3\7\3\7\7\7\u0135")
        buf.write("\n\7\f\7\16\7\u0138\13\7\3\7\3\7\7\7\u013c\n\7\f\7\16")
        buf.write("\7\u013f\13\7\3\7\3\7\7\7\u0143\n\7\f\7\16\7\u0146\13")
        buf.write("\7\3\7\3\7\7\7\u014a\n\7\f\7\16\7\u014d\13\7\6\7\u014f")
        buf.write("\n\7\r\7\16\7\u0150\3\7\3\7\6\7\u0155\n\7\r\7\16\7\u0156")
        buf.write("\7\7\u0159\n\7\f\7\16\7\u015c\13\7\3\7\3\7\7\7\u0160\n")
        buf.write("\7\f\7\16\7\u0163\13\7\3\7\3\7\6\7\u0167\n\7\r\7\16\7")
        buf.write("\u0168\5\7\u016b\n\7\3\7\3\7\6\7\u016f\n\7\r\7\16\7\u0170")
        buf.write("\5\7\u0173\n\7\5\7\u0175\n\7\3\b\3\b\6\b\u0179\n\b\r\b")
        buf.write("\16\b\u017a\3\b\3\b\3\b\3\t\3\t\6\t\u0182\n\t\r\t\16\t")
        buf.write("\u0183\3\t\3\t\7\t\u0188\n\t\f\t\16\t\u018b\13\t\3\t\3")
        buf.write("\t\7\t\u018f\n\t\f\t\16\t\u0192\13\t\3\t\3\t\7\t\u0196")
        buf.write("\n\t\f\t\16\t\u0199\13\t\3\t\3\t\7\t\u019d\n\t\f\t\16")
        buf.write("\t\u01a0\13\t\6\t\u01a2\n\t\r\t\16\t\u01a3\3\t\3\t\6\t")
        buf.write("\u01a8\n\t\r\t\16\t\u01a9\7\t\u01ac\n\t\f\t\16\t\u01af")
        buf.write("\13\t\3\t\3\t\7\t\u01b3\n\t\f\t\16\t\u01b6\13\t\3\t\3")
        buf.write("\t\6\t\u01ba\n\t\r\t\16\t\u01bb\5\t\u01be\n\t\3\t\3\t")
        buf.write("\6\t\u01c2\n\t\r\t\16\t\u01c3\5\t\u01c6\n\t\5\t\u01c8")
        buf.write("\n\t\3\n\3\n\3\n\5\n\u01cd\n\n\3\13\3\13\7\13\u01d1\n")
        buf.write("\13\f\13\16\13\u01d4\13\13\3\13\3\13\7\13\u01d8\n\13\f")
        buf.write("\13\16\13\u01db\13\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\5\f\u01f4\n\f\3\r\3\r\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\5\16\u0201\n\16\3\17\3\17\7\17\u0205")
        buf.write("\n\17\f\17\16\17\u0208\13\17\3\17\3\17\7\17\u020c\n\17")
        buf.write("\f\17\16\17\u020f\13\17\3\17\3\17\3\20\3\20\3\20\3\20")
        buf.write("\5\20\u0217\n\20\3\21\3\21\7\21\u021b\n\21\f\21\16\21")
        buf.write("\u021e\13\21\3\21\3\21\7\21\u0222\n\21\f\21\16\21\u0225")
        buf.write("\13\21\3\21\3\21\7\21\u0229\n\21\f\21\16\21\u022c\13\21")
        buf.write("\3\21\3\21\7\21\u0230\n\21\f\21\16\21\u0233\13\21\3\21")
        buf.write("\3\21\7\21\u0237\n\21\f\21\16\21\u023a\13\21\7\21\u023c")
        buf.write("\n\21\f\21\16\21\u023f\13\21\5\21\u0241\n\21\3\21\3\21")
        buf.write("\3\22\3\22\7\22\u0247\n\22\f\22\16\22\u024a\13\22\3\22")
        buf.write("\3\22\7\22\u024e\n\22\f\22\16\22\u0251\13\22\3\22\3\22")
        buf.write("\7\22\u0255\n\22\f\22\16\22\u0258\13\22\3\22\3\22\3\23")
        buf.write("\3\23\7\23\u025e\n\23\f\23\16\23\u0261\13\23\3\23\3\23")
        buf.write("\7\23\u0265\n\23\f\23\16\23\u0268\13\23\3\23\3\23\7\23")
        buf.write("\u026c\n\23\f\23\16\23\u026f\13\23\3\23\3\23\3\24\3\24")
        buf.write("\7\24\u0275\n\24\f\24\16\24\u0278\13\24\3\24\3\24\7\24")
        buf.write("\u027c\n\24\f\24\16\24\u027f\13\24\3\24\3\24\7\24\u0283")
        buf.write("\n\24\f\24\16\24\u0286\13\24\3\24\3\24\7\24\u028a\n\24")
        buf.write("\f\24\16\24\u028d\13\24\3\24\3\24\7\24\u0291\n\24\f\24")
        buf.write("\16\24\u0294\13\24\3\24\3\24\3\25\3\25\7\25\u029a\n\25")
        buf.write("\f\25\16\25\u029d\13\25\3\25\3\25\7\25\u02a1\n\25\f\25")
        buf.write("\16\25\u02a4\13\25\3\25\3\25\7\25\u02a8\n\25\f\25\16\25")
        buf.write("\u02ab\13\25\3\25\3\25\3\26\3\26\7\26\u02b1\n\26\f\26")
        buf.write("\16\26\u02b4\13\26\3\26\3\26\7\26\u02b8\n\26\f\26\16\26")
        buf.write("\u02bb\13\26\3\26\3\26\7\26\u02bf\n\26\f\26\16\26\u02c2")
        buf.write("\13\26\3\26\3\26\7\26\u02c6\n\26\f\26\16\26\u02c9\13\26")
        buf.write("\3\26\3\26\7\26\u02cd\n\26\f\26\16\26\u02d0\13\26\3\26")
        buf.write("\3\26\3\27\3\27\7\27\u02d6\n\27\f\27\16\27\u02d9\13\27")
        buf.write("\3\27\3\27\7\27\u02dd\n\27\f\27\16\27\u02e0\13\27\3\27")
        buf.write("\3\27\7\27\u02e4\n\27\f\27\16\27\u02e7\13\27\3\27\3\27")
        buf.write("\7\27\u02eb\n\27\f\27\16\27\u02ee\13\27\3\27\3\27\7\27")
        buf.write("\u02f2\n\27\f\27\16\27\u02f5\13\27\3\27\3\27\3\30\3\30")
        buf.write("\7\30\u02fb\n\30\f\30\16\30\u02fe\13\30\3\30\3\30\7\30")
        buf.write("\u0302\n\30\f\30\16\30\u0305\13\30\3\30\3\30\7\30\u0309")
        buf.write("\n\30\f\30\16\30\u030c\13\30\3\30\3\30\7\30\u0310\n\30")
        buf.write("\f\30\16\30\u0313\13\30\3\30\3\30\7\30\u0317\n\30\f\30")
        buf.write("\16\30\u031a\13\30\3\30\3\30\3\31\3\31\7\31\u0320\n\31")
        buf.write("\f\31\16\31\u0323\13\31\3\31\3\31\7\31\u0327\n\31\f\31")
        buf.write("\16\31\u032a\13\31\3\31\3\31\7\31\u032e\n\31\f\31\16\31")
        buf.write("\u0331\13\31\3\31\3\31\7\31\u0335\n\31\f\31\16\31\u0338")
        buf.write("\13\31\3\31\3\31\7\31\u033c\n\31\f\31\16\31\u033f\13\31")
        buf.write("\3\31\3\31\3\32\3\32\7\32\u0345\n\32\f\32\16\32\u0348")
        buf.write("\13\32\3\32\3\32\7\32\u034c\n\32\f\32\16\32\u034f\13\32")
        buf.write("\3\32\3\32\7\32\u0353\n\32\f\32\16\32\u0356\13\32\3\32")
        buf.write("\3\32\3\33\3\33\7\33\u035c\n\33\f\33\16\33\u035f\13\33")
        buf.write("\3\33\3\33\7\33\u0363\n\33\f\33\16\33\u0366\13\33\3\33")
        buf.write("\3\33\7\33\u036a\n\33\f\33\16\33\u036d\13\33\3\33\3\33")
        buf.write("\3\34\3\34\7\34\u0373\n\34\f\34\16\34\u0376\13\34\3\34")
        buf.write("\3\34\7\34\u037a\n\34\f\34\16\34\u037d\13\34\3\34\3\34")
        buf.write("\7\34\u0381\n\34\f\34\16\34\u0384\13\34\3\34\3\34\7\34")
        buf.write("\u0388\n\34\f\34\16\34\u038b\13\34\7\34\u038d\n\34\f\34")
        buf.write("\16\34\u0390\13\34\3\34\3\34\7\34\u0394\n\34\f\34\16\34")
        buf.write("\u0397\13\34\3\34\3\34\3\35\3\35\7\35\u039d\n\35\f\35")
        buf.write("\16\35\u03a0\13\35\3\35\3\35\7\35\u03a4\n\35\f\35\16\35")
        buf.write("\u03a7\13\35\3\35\3\35\7\35\u03ab\n\35\f\35\16\35\u03ae")
        buf.write("\13\35\3\35\3\35\3\36\3\36\7\36\u03b4\n\36\f\36\16\36")
        buf.write("\u03b7\13\36\3\36\3\36\7\36\u03bb\n\36\f\36\16\36\u03be")
        buf.write("\13\36\3\36\3\36\7\36\u03c2\n\36\f\36\16\36\u03c5\13\36")
        buf.write("\3\36\3\36\3\37\3\37\7\37\u03cb\n\37\f\37\16\37\u03ce")
        buf.write("\13\37\3\37\3\37\7\37\u03d2\n\37\f\37\16\37\u03d5\13\37")
        buf.write("\3\37\3\37\7\37\u03d9\n\37\f\37\16\37\u03dc\13\37\3\37")
        buf.write("\3\37\3 \3 \7 \u03e2\n \f \16 \u03e5\13 \3 \3 \7 \u03e9")
        buf.write("\n \f \16 \u03ec\13 \3 \3 \7 \u03f0\n \f \16 \u03f3\13")
        buf.write(" \3 \3 \3!\3!\3\"\3\"\3#\3#\3#\2\2$\2\4\6\b\n\f\16\20")
        buf.write("\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BD\2\6")
        buf.write("\3\2\'(\3\2$%\3\2%&\3\2$&\2\u048e\2I\3\2\2\2\4\u0093\3")
        buf.write("\2\2\2\6\u0095\3\2\2\2\b\u0113\3\2\2\2\n\u0120\3\2\2\2")
        buf.write("\f\u012c\3\2\2\2\16\u0176\3\2\2\2\20\u017f\3\2\2\2\22")
        buf.write("\u01cc\3\2\2\2\24\u01ce\3\2\2\2\26\u01f3\3\2\2\2\30\u01f5")
        buf.write("\3\2\2\2\32\u0200\3\2\2\2\34\u0202\3\2\2\2\36\u0216\3")
        buf.write("\2\2\2 \u0218\3\2\2\2\"\u0244\3\2\2\2$\u025b\3\2\2\2&")
        buf.write("\u0272\3\2\2\2(\u0297\3\2\2\2*\u02ae\3\2\2\2,\u02d3\3")
        buf.write("\2\2\2.\u02f8\3\2\2\2\60\u031d\3\2\2\2\62\u0342\3\2\2")
        buf.write("\2\64\u0359\3\2\2\2\66\u0370\3\2\2\28\u039a\3\2\2\2:\u03b1")
        buf.write("\3\2\2\2<\u03c8\3\2\2\2>\u03df\3\2\2\2@\u03f6\3\2\2\2")
        buf.write("B\u03f8\3\2\2\2D\u03fa\3\2\2\2FH\t\2\2\2GF\3\2\2\2HK\3")
        buf.write("\2\2\2IG\3\2\2\2IJ\3\2\2\2J\u0084\3\2\2\2KI\3\2\2\2LP")
        buf.write("\5\26\f\2MO\t\2\2\2NM\3\2\2\2OR\3\2\2\2PN\3\2\2\2PQ\3")
        buf.write("\2\2\2QS\3\2\2\2RP\3\2\2\2SW\7\3\2\2TV\t\2\2\2UT\3\2\2")
        buf.write("\2VY\3\2\2\2WU\3\2\2\2WX\3\2\2\2Xs\3\2\2\2YW\3\2\2\2Z")
        buf.write("h\5\26\f\2[]\7\'\2\2\\[\3\2\2\2]`\3\2\2\2^\\\3\2\2\2^")
        buf.write("_\3\2\2\2_a\3\2\2\2`^\3\2\2\2ae\7(\2\2bd\7\'\2\2cb\3\2")
        buf.write("\2\2dg\3\2\2\2ec\3\2\2\2ef\3\2\2\2fi\3\2\2\2ge\3\2\2\2")
        buf.write("h^\3\2\2\2ij\3\2\2\2jh\3\2\2\2jk\3\2\2\2ks\3\2\2\2ln\5")
        buf.write("\4\3\2mo\t\2\2\2nm\3\2\2\2op\3\2\2\2pn\3\2\2\2pq\3\2\2")
        buf.write("\2qs\3\2\2\2rL\3\2\2\2rZ\3\2\2\2rl\3\2\2\2sv\3\2\2\2t")
        buf.write("r\3\2\2\2tu\3\2\2\2u\u0082\3\2\2\2vt\3\2\2\2w{\5\26\f")
        buf.write("\2xz\t\2\2\2yx\3\2\2\2z}\3\2\2\2{y\3\2\2\2{|\3\2\2\2|")
        buf.write("\177\3\2\2\2}{\3\2\2\2~\u0080\7\3\2\2\177~\3\2\2\2\177")
        buf.write("\u0080\3\2\2\2\u0080\u0083\3\2\2\2\u0081\u0083\5\4\3\2")
        buf.write("\u0082w\3\2\2\2\u0082\u0081\3\2\2\2\u0083\u0085\3\2\2")
        buf.write("\2\u0084t\3\2\2\2\u0084\u0085\3\2\2\2\u0085\u0089\3\2")
        buf.write("\2\2\u0086\u0088\t\2\2\2\u0087\u0086\3\2\2\2\u0088\u008b")
        buf.write("\3\2\2\2\u0089\u0087\3\2\2\2\u0089\u008a\3\2\2\2\u008a")
        buf.write("\u008d\3\2\2\2\u008b\u0089\3\2\2\2\u008c\u008e\7)\2\2")
        buf.write("\u008d\u008c\3\2\2\2\u008d\u008e\3\2\2\2\u008e\u008f\3")
        buf.write("\2\2\2\u008f\u0090\7\2\2\3\u0090\3\3\2\2\2\u0091\u0094")
        buf.write("\5\b\5\2\u0092\u0094\5\6\4\2\u0093\u0091\3\2\2\2\u0093")
        buf.write("\u0092\3\2\2\2\u0094\5\3\2\2\2\u0095\u0097\7\b\2\2\u0096")
        buf.write("\u0098\t\2\2\2\u0097\u0096\3\2\2\2\u0098\u0099\3\2\2\2")
        buf.write("\u0099\u0097\3\2\2\2\u0099\u009a\3\2\2\2\u009a\u009b\3")
        buf.write("\2\2\2\u009b\u009f\7%\2\2\u009c\u009e\t\2\2\2\u009d\u009c")
        buf.write("\3\2\2\2\u009e\u00a1\3\2\2\2\u009f\u009d\3\2\2\2\u009f")
        buf.write("\u00a0\3\2\2\2\u00a0\u00a2\3\2\2\2\u00a1\u009f\3\2\2\2")
        buf.write("\u00a2\u00a6\7\4\2\2\u00a3\u00a5\t\2\2\2\u00a4\u00a3\3")
        buf.write("\2\2\2\u00a5\u00a8\3\2\2\2\u00a6\u00a4\3\2\2\2\u00a6\u00a7")
        buf.write("\3\2\2\2\u00a7\u00c3\3\2\2\2\u00a8\u00a6\3\2\2\2\u00a9")
        buf.write("\u00ad\7%\2\2\u00aa\u00ac\t\2\2\2\u00ab\u00aa\3\2\2\2")
        buf.write("\u00ac\u00af\3\2\2\2\u00ad\u00ab\3\2\2\2\u00ad\u00ae\3")
        buf.write("\2\2\2\u00ae\u00c0\3\2\2\2\u00af\u00ad\3\2\2\2\u00b0\u00b4")
        buf.write("\7\5\2\2\u00b1\u00b3\t\2\2\2\u00b2\u00b1\3\2\2\2\u00b3")
        buf.write("\u00b6\3\2\2\2\u00b4\u00b2\3\2\2\2\u00b4\u00b5\3\2\2\2")
        buf.write("\u00b5\u00b7\3\2\2\2\u00b6\u00b4\3\2\2\2\u00b7\u00bb\7")
        buf.write("%\2\2\u00b8\u00ba\t\2\2\2\u00b9\u00b8\3\2\2\2\u00ba\u00bd")
        buf.write("\3\2\2\2\u00bb\u00b9\3\2\2\2\u00bb\u00bc\3\2\2\2\u00bc")
        buf.write("\u00bf\3\2\2\2\u00bd\u00bb\3\2\2\2\u00be\u00b0\3\2\2\2")
        buf.write("\u00bf\u00c2\3\2\2\2\u00c0\u00be\3\2\2\2\u00c0\u00c1\3")
        buf.write("\2\2\2\u00c1\u00c4\3\2\2\2\u00c2\u00c0\3\2\2\2\u00c3\u00a9")
        buf.write("\3\2\2\2\u00c3\u00c4\3\2\2\2\u00c4\u00c5\3\2\2\2\u00c5")
        buf.write("\u00c9\7\6\2\2\u00c6\u00c8\t\2\2\2\u00c7\u00c6\3\2\2\2")
        buf.write("\u00c8\u00cb\3\2\2\2\u00c9\u00c7\3\2\2\2\u00c9\u00ca\3")
        buf.write("\2\2\2\u00ca\u00cc\3\2\2\2\u00cb\u00c9\3\2\2\2\u00cc\u00ce")
        buf.write("\7\f\2\2\u00cd\u00cf\t\2\2\2\u00ce\u00cd\3\2\2\2\u00cf")
        buf.write("\u00d0\3\2\2\2\u00d0\u00ce\3\2\2\2\u00d0\u00d1\3\2\2\2")
        buf.write("\u00d1\u010f\3\2\2\2\u00d2\u00d6\5\26\f\2\u00d3\u00d5")
        buf.write("\t\2\2\2\u00d4\u00d3\3\2\2\2\u00d5\u00d8\3\2\2\2\u00d6")
        buf.write("\u00d4\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7\u00d9\3\2\2\2")
        buf.write("\u00d8\u00d6\3\2\2\2\u00d9\u00dd\7\3\2\2\u00da\u00dc\t")
        buf.write("\2\2\2\u00db\u00da\3\2\2\2\u00dc\u00df\3\2\2\2\u00dd\u00db")
        buf.write("\3\2\2\2\u00dd\u00de\3\2\2\2\u00de\u00f9\3\2\2\2\u00df")
        buf.write("\u00dd\3\2\2\2\u00e0\u00ee\5\26\f\2\u00e1\u00e3\7\'\2")
        buf.write("\2\u00e2\u00e1\3\2\2\2\u00e3\u00e6\3\2\2\2\u00e4\u00e2")
        buf.write("\3\2\2\2\u00e4\u00e5\3\2\2\2\u00e5\u00e7\3\2\2\2\u00e6")
        buf.write("\u00e4\3\2\2\2\u00e7\u00eb\7(\2\2\u00e8\u00ea\7\'\2\2")
        buf.write("\u00e9\u00e8\3\2\2\2\u00ea\u00ed\3\2\2\2\u00eb\u00e9\3")
        buf.write("\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00ef\3\2\2\2\u00ed\u00eb")
        buf.write("\3\2\2\2\u00ee\u00e4\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0")
        buf.write("\u00ee\3\2\2\2\u00f0\u00f1\3\2\2\2\u00f1\u00f9\3\2\2\2")
        buf.write("\u00f2\u00f4\5\b\5\2\u00f3\u00f5\t\2\2\2\u00f4\u00f3\3")
        buf.write("\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\u00f4\3\2\2\2\u00f6\u00f7")
        buf.write("\3\2\2\2\u00f7\u00f9\3\2\2\2\u00f8\u00d2\3\2\2\2\u00f8")
        buf.write("\u00e0\3\2\2\2\u00f8\u00f2\3\2\2\2\u00f9\u00fc\3\2\2\2")
        buf.write("\u00fa\u00f8\3\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\u0108\3")
        buf.write("\2\2\2\u00fc\u00fa\3\2\2\2\u00fd\u0101\5\26\f\2\u00fe")
        buf.write("\u0100\t\2\2\2\u00ff\u00fe\3\2\2\2\u0100\u0103\3\2\2\2")
        buf.write("\u0101\u00ff\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u0105\3")
        buf.write("\2\2\2\u0103\u0101\3\2\2\2\u0104\u0106\7\3\2\2\u0105\u0104")
        buf.write("\3\2\2\2\u0105\u0106\3\2\2\2\u0106\u0109\3\2\2\2\u0107")
        buf.write("\u0109\5\b\5\2\u0108\u00fd\3\2\2\2\u0108\u0107\3\2\2\2")
        buf.write("\u0109\u010b\3\2\2\2\u010a\u010c\t\2\2\2\u010b\u010a\3")
        buf.write("\2\2\2\u010c\u010d\3\2\2\2\u010d\u010b\3\2\2\2\u010d\u010e")
        buf.write("\3\2\2\2\u010e\u0110\3\2\2\2\u010f\u00fa\3\2\2\2\u010f")
        buf.write("\u0110\3\2\2\2\u0110\u0111\3\2\2\2\u0111\u0112\7\r\2\2")
        buf.write("\u0112\7\3\2\2\2\u0113\u0114\5\n\6\2\u0114\u0118\5\f\7")
        buf.write("\2\u0115\u0117\5\16\b\2\u0116\u0115\3\2\2\2\u0117\u011a")
        buf.write("\3\2\2\2\u0118\u0116\3\2\2\2\u0118\u0119\3\2\2\2\u0119")
        buf.write("\u011c\3\2\2\2\u011a\u0118\3\2\2\2\u011b\u011d\5\20\t")
        buf.write("\2\u011c\u011b\3\2\2\2\u011c\u011d\3\2\2\2\u011d\u011e")
        buf.write("\3\2\2\2\u011e\u011f\7\r\2\2\u011f\t\3\2\2\2\u0120\u0122")
        buf.write("\7\t\2\2\u0121\u0123\t\2\2\2\u0122\u0121\3\2\2\2\u0123")
        buf.write("\u0124\3\2\2\2\u0124\u0122\3\2\2\2\u0124\u0125\3\2\2\2")
        buf.write("\u0125\u0126\3\2\2\2\u0126\u0128\5\22\n\2\u0127\u0129")
        buf.write("\t\2\2\2\u0128\u0127\3\2\2\2\u0129\u012a\3\2\2\2\u012a")
        buf.write("\u0128\3\2\2\2\u012a\u012b\3\2\2\2\u012b\13\3\2\2\2\u012c")
        buf.write("\u012e\7\n\2\2\u012d\u012f\t\2\2\2\u012e\u012d\3\2\2\2")
        buf.write("\u012f\u0130\3\2\2\2\u0130\u012e\3\2\2\2\u0130\u0131\3")
        buf.write("\2\2\2\u0131\u0174\3\2\2\2\u0132\u0136\5\26\f\2\u0133")
        buf.write("\u0135\t\2\2\2\u0134\u0133\3\2\2\2\u0135\u0138\3\2\2\2")
        buf.write("\u0136\u0134\3\2\2\2\u0136\u0137\3\2\2\2\u0137\u0139\3")
        buf.write("\2\2\2\u0138\u0136\3\2\2\2\u0139\u013d\7\3\2\2\u013a\u013c")
        buf.write("\t\2\2\2\u013b\u013a\3\2\2\2\u013c\u013f\3\2\2\2\u013d")
        buf.write("\u013b\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u0159\3\2\2\2")
        buf.write("\u013f\u013d\3\2\2\2\u0140\u014e\5\26\f\2\u0141\u0143")
        buf.write("\7\'\2\2\u0142\u0141\3\2\2\2\u0143\u0146\3\2\2\2\u0144")
        buf.write("\u0142\3\2\2\2\u0144\u0145\3\2\2\2\u0145\u0147\3\2\2\2")
        buf.write("\u0146\u0144\3\2\2\2\u0147\u014b\7(\2\2\u0148\u014a\7")
        buf.write("\'\2\2\u0149\u0148\3\2\2\2\u014a\u014d\3\2\2\2\u014b\u0149")
        buf.write("\3\2\2\2\u014b\u014c\3\2\2\2\u014c\u014f\3\2\2\2\u014d")
        buf.write("\u014b\3\2\2\2\u014e\u0144\3\2\2\2\u014f\u0150\3\2\2\2")
        buf.write("\u0150\u014e\3\2\2\2\u0150\u0151\3\2\2\2\u0151\u0159\3")
        buf.write("\2\2\2\u0152\u0154\5\b\5\2\u0153\u0155\t\2\2\2\u0154\u0153")
        buf.write("\3\2\2\2\u0155\u0156\3\2\2\2\u0156\u0154\3\2\2\2\u0156")
        buf.write("\u0157\3\2\2\2\u0157\u0159\3\2\2\2\u0158\u0132\3\2\2\2")
        buf.write("\u0158\u0140\3\2\2\2\u0158\u0152\3\2\2\2\u0159\u015c\3")
        buf.write("\2\2\2\u015a\u0158\3\2\2\2\u015a\u015b\3\2\2\2\u015b\u0172")
        buf.write("\3\2\2\2\u015c\u015a\3\2\2\2\u015d\u0161\5\26\f\2\u015e")
        buf.write("\u0160\t\2\2\2\u015f\u015e\3\2\2\2\u0160\u0163\3\2\2\2")
        buf.write("\u0161\u015f\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u016a\3")
        buf.write("\2\2\2\u0163\u0161\3\2\2\2\u0164\u016b\7\3\2\2\u0165\u0167")
        buf.write("\t\2\2\2\u0166\u0165\3\2\2\2\u0167\u0168\3\2\2\2\u0168")
        buf.write("\u0166\3\2\2\2\u0168\u0169\3\2\2\2\u0169\u016b\3\2\2\2")
        buf.write("\u016a\u0164\3\2\2\2\u016a\u0166\3\2\2\2\u016b\u0173\3")
        buf.write("\2\2\2\u016c\u016e\5\b\5\2\u016d\u016f\t\2\2\2\u016e\u016d")
        buf.write("\3\2\2\2\u016f\u0170\3\2\2\2\u0170\u016e\3\2\2\2\u0170")
        buf.write("\u0171\3\2\2\2\u0171\u0173\3\2\2\2\u0172\u015d\3\2\2\2")
        buf.write("\u0172\u016c\3\2\2\2\u0173\u0175\3\2\2\2\u0174\u015a\3")
        buf.write("\2\2\2\u0174\u0175\3\2\2\2\u0175\r\3\2\2\2\u0176\u0178")
        buf.write("\7\13\2\2\u0177\u0179\t\2\2\2\u0178\u0177\3\2\2\2\u0179")
        buf.write("\u017a\3\2\2\2\u017a\u0178\3\2\2\2\u017a\u017b\3\2\2\2")
        buf.write("\u017b\u017c\3\2\2\2\u017c\u017d\5\n\6\2\u017d\u017e\5")
        buf.write("\f\7\2\u017e\17\3\2\2\2\u017f\u0181\7\13\2\2\u0180\u0182")
        buf.write("\t\2\2\2\u0181\u0180\3\2\2\2\u0182\u0183\3\2\2\2\u0183")
        buf.write("\u0181\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u01c7\3\2\2\2")
        buf.write("\u0185\u0189\5\26\f\2\u0186\u0188\t\2\2\2\u0187\u0186")
        buf.write("\3\2\2\2\u0188\u018b\3\2\2\2\u0189\u0187\3\2\2\2\u0189")
        buf.write("\u018a\3\2\2\2\u018a\u018c\3\2\2\2\u018b\u0189\3\2\2\2")
        buf.write("\u018c\u0190\7\3\2\2\u018d\u018f\t\2\2\2\u018e\u018d\3")
        buf.write("\2\2\2\u018f\u0192\3\2\2\2\u0190\u018e\3\2\2\2\u0190\u0191")
        buf.write("\3\2\2\2\u0191\u01ac\3\2\2\2\u0192\u0190\3\2\2\2\u0193")
        buf.write("\u01a1\5\26\f\2\u0194\u0196\7\'\2\2\u0195\u0194\3\2\2")
        buf.write("\2\u0196\u0199\3\2\2\2\u0197\u0195\3\2\2\2\u0197\u0198")
        buf.write("\3\2\2\2\u0198\u019a\3\2\2\2\u0199\u0197\3\2\2\2\u019a")
        buf.write("\u019e\7(\2\2\u019b\u019d\7\'\2\2\u019c\u019b\3\2\2\2")
        buf.write("\u019d\u01a0\3\2\2\2\u019e\u019c\3\2\2\2\u019e\u019f\3")
        buf.write("\2\2\2\u019f\u01a2\3\2\2\2\u01a0\u019e\3\2\2\2\u01a1\u0197")
        buf.write("\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a3")
        buf.write("\u01a4\3\2\2\2\u01a4\u01ac\3\2\2\2\u01a5\u01a7\5\b\5\2")
        buf.write("\u01a6\u01a8\t\2\2\2\u01a7\u01a6\3\2\2\2\u01a8\u01a9\3")
        buf.write("\2\2\2\u01a9\u01a7\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa\u01ac")
        buf.write("\3\2\2\2\u01ab\u0185\3\2\2\2\u01ab\u0193\3\2\2\2\u01ab")
        buf.write("\u01a5\3\2\2\2\u01ac\u01af\3\2\2\2\u01ad\u01ab\3\2\2\2")
        buf.write("\u01ad\u01ae\3\2\2\2\u01ae\u01c5\3\2\2\2\u01af\u01ad\3")
        buf.write("\2\2\2\u01b0\u01b4\5\26\f\2\u01b1\u01b3\t\2\2\2\u01b2")
        buf.write("\u01b1\3\2\2\2\u01b3\u01b6\3\2\2\2\u01b4\u01b2\3\2\2\2")
        buf.write("\u01b4\u01b5\3\2\2\2\u01b5\u01bd\3\2\2\2\u01b6\u01b4\3")
        buf.write("\2\2\2\u01b7\u01be\7\3\2\2\u01b8\u01ba\t\2\2\2\u01b9\u01b8")
        buf.write("\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01b9\3\2\2\2\u01bb")
        buf.write("\u01bc\3\2\2\2\u01bc\u01be\3\2\2\2\u01bd\u01b7\3\2\2\2")
        buf.write("\u01bd\u01b9\3\2\2\2\u01be\u01c6\3\2\2\2\u01bf\u01c1\5")
        buf.write("\b\5\2\u01c0\u01c2\t\2\2\2\u01c1\u01c0\3\2\2\2\u01c2\u01c3")
        buf.write("\3\2\2\2\u01c3\u01c1\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4")
        buf.write("\u01c6\3\2\2\2\u01c5\u01b0\3\2\2\2\u01c5\u01bf\3\2\2\2")
        buf.write("\u01c6\u01c8\3\2\2\2\u01c7\u01ad\3\2\2\2\u01c7\u01c8\3")
        buf.write("\2\2\2\u01c8\21\3\2\2\2\u01c9\u01cd\5\30\r\2\u01ca\u01cd")
        buf.write("\7#\2\2\u01cb\u01cd\5\24\13\2\u01cc\u01c9\3\2\2\2\u01cc")
        buf.write("\u01ca\3\2\2\2\u01cc\u01cb\3\2\2\2\u01cd\23\3\2\2\2\u01ce")
        buf.write("\u01d2\5\36\20\2\u01cf\u01d1\t\2\2\2\u01d0\u01cf\3\2\2")
        buf.write("\2\u01d1\u01d4\3\2\2\2\u01d2\u01d0\3\2\2\2\u01d2\u01d3")
        buf.write("\3\2\2\2\u01d3\u01d5\3\2\2\2\u01d4\u01d2\3\2\2\2\u01d5")
        buf.write("\u01d9\7!\2\2\u01d6\u01d8\t\2\2\2\u01d7\u01d6\3\2\2\2")
        buf.write("\u01d8\u01db\3\2\2\2\u01d9\u01d7\3\2\2\2\u01d9\u01da\3")
        buf.write("\2\2\2\u01da\u01dc\3\2\2\2\u01db\u01d9\3\2\2\2\u01dc\u01dd")
        buf.write("\5\36\20\2\u01dd\25\3\2\2\2\u01de\u01f4\5 \21\2\u01df")
        buf.write("\u01f4\5\"\22\2\u01e0\u01f4\5$\23\2\u01e1\u01f4\5&\24")
        buf.write("\2\u01e2\u01f4\5(\25\2\u01e3\u01f4\5*\26\2\u01e4\u01f4")
        buf.write("\5,\27\2\u01e5\u01f4\5.\30\2\u01e6\u01f4\5\60\31\2\u01e7")
        buf.write("\u01f4\5\62\32\2\u01e8\u01f4\5\64\33\2\u01e9\u01f4\5\66")
        buf.write("\34\2\u01ea\u01f4\58\35\2\u01eb\u01f4\5:\36\2\u01ec\u01f4")
        buf.write("\5<\37\2\u01ed\u01f4\5> \2\u01ee\u01f4\5\34\17\2\u01ef")
        buf.write("\u01f4\7\31\2\2\u01f0\u01f4\7\34\2\2\u01f1\u01f4\7\35")
        buf.write("\2\2\u01f2\u01f4\7\36\2\2\u01f3\u01de\3\2\2\2\u01f3\u01df")
        buf.write("\3\2\2\2\u01f3\u01e0\3\2\2\2\u01f3\u01e1\3\2\2\2\u01f3")
        buf.write("\u01e2\3\2\2\2\u01f3\u01e3\3\2\2\2\u01f3\u01e4\3\2\2\2")
        buf.write("\u01f3\u01e5\3\2\2\2\u01f3\u01e6\3\2\2\2\u01f3\u01e7\3")
        buf.write("\2\2\2\u01f3\u01e8\3\2\2\2\u01f3\u01e9\3\2\2\2\u01f3\u01ea")
        buf.write("\3\2\2\2\u01f3\u01eb\3\2\2\2\u01f3\u01ec\3\2\2\2\u01f3")
        buf.write("\u01ed\3\2\2\2\u01f3\u01ee\3\2\2\2\u01f3\u01ef\3\2\2\2")
        buf.write("\u01f3\u01f0\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f3\u01f2\3")
        buf.write("\2\2\2\u01f4\27\3\2\2\2\u01f5\u01f6\5\"\22\2\u01f6\31")
        buf.write("\3\2\2\2\u01f7\u0201\5\"\22\2\u01f8\u0201\5\62\32\2\u01f9")
        buf.write("\u0201\7\31\2\2\u01fa\u0201\58\35\2\u01fb\u0201\5:\36")
        buf.write("\2\u01fc\u0201\5<\37\2\u01fd\u0201\7\34\2\2\u01fe\u0201")
        buf.write("\7\35\2\2\u01ff\u0201\7\36\2\2\u0200\u01f7\3\2\2\2\u0200")
        buf.write("\u01f8\3\2\2\2\u0200\u01f9\3\2\2\2\u0200\u01fa\3\2\2\2")
        buf.write("\u0200\u01fb\3\2\2\2\u0200\u01fc\3\2\2\2\u0200\u01fd\3")
        buf.write("\2\2\2\u0200\u01fe\3\2\2\2\u0200\u01ff\3\2\2\2\u0201\33")
        buf.write("\3\2\2\2\u0202\u0206\7%\2\2\u0203\u0205\t\2\2\2\u0204")
        buf.write("\u0203\3\2\2\2\u0205\u0208\3\2\2\2\u0206\u0204\3\2\2\2")
        buf.write("\u0206\u0207\3\2\2\2\u0207\u0209\3\2\2\2\u0208\u0206\3")
        buf.write("\2\2\2\u0209\u020d\7\7\2\2\u020a\u020c\t\2\2\2\u020b\u020a")
        buf.write("\3\2\2\2\u020c\u020f\3\2\2\2\u020d\u020b\3\2\2\2\u020d")
        buf.write("\u020e\3\2\2\2\u020e\u0210\3\2\2\2\u020f\u020d\3\2\2\2")
        buf.write("\u0210\u0211\5\36\20\2\u0211\35\3\2\2\2\u0212\u0217\5")
        buf.write("\32\16\2\u0213\u0217\7$\2\2\u0214\u0217\7&\2\2\u0215\u0217")
        buf.write("\7%\2\2\u0216\u0212\3\2\2\2\u0216\u0213\3\2\2\2\u0216")
        buf.write("\u0214\3\2\2\2\u0216\u0215\3\2\2\2\u0217\37\3\2\2\2\u0218")
        buf.write("\u021c\7%\2\2\u0219\u021b\t\2\2\2\u021a\u0219\3\2\2\2")
        buf.write("\u021b\u021e\3\2\2\2\u021c\u021a\3\2\2\2\u021c\u021d\3")
        buf.write("\2\2\2\u021d\u021f\3\2\2\2\u021e\u021c\3\2\2\2\u021f\u0223")
        buf.write("\7\4\2\2\u0220\u0222\t\2\2\2\u0221\u0220\3\2\2\2\u0222")
        buf.write("\u0225\3\2\2\2\u0223\u0221\3\2\2\2\u0223\u0224\3\2\2\2")
        buf.write("\u0224\u0240\3\2\2\2\u0225\u0223\3\2\2\2\u0226\u022a\5")
        buf.write("D#\2\u0227\u0229\t\2\2\2\u0228\u0227\3\2\2\2\u0229\u022c")
        buf.write("\3\2\2\2\u022a\u0228\3\2\2\2\u022a\u022b\3\2\2\2\u022b")
        buf.write("\u023d\3\2\2\2\u022c\u022a\3\2\2\2\u022d\u0231\7\5\2\2")
        buf.write("\u022e\u0230\t\2\2\2\u022f\u022e\3\2\2\2\u0230\u0233\3")
        buf.write("\2\2\2\u0231\u022f\3\2\2\2\u0231\u0232\3\2\2\2\u0232\u0234")
        buf.write("\3\2\2\2\u0233\u0231\3\2\2\2\u0234\u0238\5D#\2\u0235\u0237")
        buf.write("\t\2\2\2\u0236\u0235\3\2\2\2\u0237\u023a\3\2\2\2\u0238")
        buf.write("\u0236\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u023c\3\2\2\2")
        buf.write("\u023a\u0238\3\2\2\2\u023b\u022d\3\2\2\2\u023c\u023f\3")
        buf.write("\2\2\2\u023d\u023b\3\2\2\2\u023d\u023e\3\2\2\2\u023e\u0241")
        buf.write("\3\2\2\2\u023f\u023d\3\2\2\2\u0240\u0226\3\2\2\2\u0240")
        buf.write("\u0241\3\2\2\2\u0241\u0242\3\2\2\2\u0242\u0243\7\6\2\2")
        buf.write("\u0243!\3\2\2\2\u0244\u0248\7\16\2\2\u0245\u0247\t\2\2")
        buf.write("\2\u0246\u0245\3\2\2\2\u0247\u024a\3\2\2\2\u0248\u0246")
        buf.write("\3\2\2\2\u0248\u0249\3\2\2\2\u0249\u024b\3\2\2\2\u024a")
        buf.write("\u0248\3\2\2\2\u024b\u024f\7\4\2\2\u024c\u024e\t\2\2\2")
        buf.write("\u024d\u024c\3\2\2\2\u024e\u0251\3\2\2\2\u024f\u024d\3")
        buf.write("\2\2\2\u024f\u0250\3\2\2\2\u0250\u0252\3\2\2\2\u0251\u024f")
        buf.write("\3\2\2\2\u0252\u0256\5@!\2\u0253\u0255\t\2\2\2\u0254\u0253")
        buf.write("\3\2\2\2\u0255\u0258\3\2\2\2\u0256\u0254\3\2\2\2\u0256")
        buf.write("\u0257\3\2\2\2\u0257\u0259\3\2\2\2\u0258\u0256\3\2\2\2")
        buf.write("\u0259\u025a\7\6\2\2\u025a#\3\2\2\2\u025b\u025f\7\17\2")
        buf.write("\2\u025c\u025e\t\2\2\2\u025d\u025c\3\2\2\2\u025e\u0261")
        buf.write("\3\2\2\2\u025f\u025d\3\2\2\2\u025f\u0260\3\2\2\2\u0260")
        buf.write("\u0262\3\2\2\2\u0261\u025f\3\2\2\2\u0262\u0266\7\4\2\2")
        buf.write("\u0263\u0265\t\2\2\2\u0264\u0263\3\2\2\2\u0265\u0268\3")
        buf.write("\2\2\2\u0266\u0264\3\2\2\2\u0266\u0267\3\2\2\2\u0267\u0269")
        buf.write("\3\2\2\2\u0268\u0266\3\2\2\2\u0269\u026d\5@!\2\u026a\u026c")
        buf.write("\t\2\2\2\u026b\u026a\3\2\2\2\u026c\u026f\3\2\2\2\u026d")
        buf.write("\u026b\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u0270\3\2\2\2")
        buf.write("\u026f\u026d\3\2\2\2\u0270\u0271\7\6\2\2\u0271%\3\2\2")
        buf.write("\2\u0272\u0276\7\20\2\2\u0273\u0275\t\2\2\2\u0274\u0273")
        buf.write("\3\2\2\2\u0275\u0278\3\2\2\2\u0276\u0274\3\2\2\2\u0276")
        buf.write("\u0277\3\2\2\2\u0277\u0279\3\2\2\2\u0278\u0276\3\2\2\2")
        buf.write("\u0279\u027d\7\4\2\2\u027a\u027c\t\2\2\2\u027b\u027a\3")
        buf.write("\2\2\2\u027c\u027f\3\2\2\2\u027d\u027b\3\2\2\2\u027d\u027e")
        buf.write("\3\2\2\2\u027e\u0280\3\2\2\2\u027f\u027d\3\2\2\2\u0280")
        buf.write("\u0284\5@!\2\u0281\u0283\t\2\2\2\u0282\u0281\3\2\2\2\u0283")
        buf.write("\u0286\3\2\2\2\u0284\u0282\3\2\2\2\u0284\u0285\3\2\2\2")
        buf.write("\u0285\u0287\3\2\2\2\u0286\u0284\3\2\2\2\u0287\u028b\7")
        buf.write("\5\2\2\u0288\u028a\t\2\2\2\u0289\u0288\3\2\2\2\u028a\u028d")
        buf.write("\3\2\2\2\u028b\u0289\3\2\2\2\u028b\u028c\3\2\2\2\u028c")
        buf.write("\u028e\3\2\2\2\u028d\u028b\3\2\2\2\u028e\u0292\5@!\2\u028f")
        buf.write("\u0291\t\2\2\2\u0290\u028f\3\2\2\2\u0291\u0294\3\2\2\2")
        buf.write("\u0292\u0290\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0295\3")
        buf.write("\2\2\2\u0294\u0292\3\2\2\2\u0295\u0296\7\6\2\2\u0296\'")
        buf.write("\3\2\2\2\u0297\u029b\7\21\2\2\u0298\u029a\t\2\2\2\u0299")
        buf.write("\u0298\3\2\2\2\u029a\u029d\3\2\2\2\u029b\u0299\3\2\2\2")
        buf.write("\u029b\u029c\3\2\2\2\u029c\u029e\3\2\2\2\u029d\u029b\3")
        buf.write("\2\2\2\u029e\u02a2\7\4\2\2\u029f\u02a1\t\2\2\2\u02a0\u029f")
        buf.write("\3\2\2\2\u02a1\u02a4\3\2\2\2\u02a2\u02a0\3\2\2\2\u02a2")
        buf.write("\u02a3\3\2\2\2\u02a3\u02a5\3\2\2\2\u02a4\u02a2\3\2\2\2")
        buf.write("\u02a5\u02a9\5@!\2\u02a6\u02a8\t\2\2\2\u02a7\u02a6\3\2")
        buf.write("\2\2\u02a8\u02ab\3\2\2\2\u02a9\u02a7\3\2\2\2\u02a9\u02aa")
        buf.write("\3\2\2\2\u02aa\u02ac\3\2\2\2\u02ab\u02a9\3\2\2\2\u02ac")
        buf.write("\u02ad\7\6\2\2\u02ad)\3\2\2\2\u02ae\u02b2\7\22\2\2\u02af")
        buf.write("\u02b1\t\2\2\2\u02b0\u02af\3\2\2\2\u02b1\u02b4\3\2\2\2")
        buf.write("\u02b2\u02b0\3\2\2\2\u02b2\u02b3\3\2\2\2\u02b3\u02b5\3")
        buf.write("\2\2\2\u02b4\u02b2\3\2\2\2\u02b5\u02b9\7\4\2\2\u02b6\u02b8")
        buf.write("\t\2\2\2\u02b7\u02b6\3\2\2\2\u02b8\u02bb\3\2\2\2\u02b9")
        buf.write("\u02b7\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02bc\3\2\2\2")
        buf.write("\u02bb\u02b9\3\2\2\2\u02bc\u02c0\5@!\2\u02bd\u02bf\t\2")
        buf.write("\2\2\u02be\u02bd\3\2\2\2\u02bf\u02c2\3\2\2\2\u02c0\u02be")
        buf.write("\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1\u02c3\3\2\2\2\u02c2")
        buf.write("\u02c0\3\2\2\2\u02c3\u02c7\7\5\2\2\u02c4\u02c6\t\2\2\2")
        buf.write("\u02c5\u02c4\3\2\2\2\u02c6\u02c9\3\2\2\2\u02c7\u02c5\3")
        buf.write("\2\2\2\u02c7\u02c8\3\2\2\2\u02c8\u02ca\3\2\2\2\u02c9\u02c7")
        buf.write("\3\2\2\2\u02ca\u02ce\5@!\2\u02cb\u02cd\t\2\2\2\u02cc\u02cb")
        buf.write("\3\2\2\2\u02cd\u02d0\3\2\2\2\u02ce\u02cc\3\2\2\2\u02ce")
        buf.write("\u02cf\3\2\2\2\u02cf\u02d1\3\2\2\2\u02d0\u02ce\3\2\2\2")
        buf.write("\u02d1\u02d2\7\6\2\2\u02d2+\3\2\2\2\u02d3\u02d7\7\23\2")
        buf.write("\2\u02d4\u02d6\t\2\2\2\u02d5\u02d4\3\2\2\2\u02d6\u02d9")
        buf.write("\3\2\2\2\u02d7\u02d5\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8")
        buf.write("\u02da\3\2\2\2\u02d9\u02d7\3\2\2\2\u02da\u02de\7\4\2\2")
        buf.write("\u02db\u02dd\t\2\2\2\u02dc\u02db\3\2\2\2\u02dd\u02e0\3")
        buf.write("\2\2\2\u02de\u02dc\3\2\2\2\u02de\u02df\3\2\2\2\u02df\u02e1")
        buf.write("\3\2\2\2\u02e0\u02de\3\2\2\2\u02e1\u02e5\5@!\2\u02e2\u02e4")
        buf.write("\t\2\2\2\u02e3\u02e2\3\2\2\2\u02e4\u02e7\3\2\2\2\u02e5")
        buf.write("\u02e3\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e8\3\2\2\2")
        buf.write("\u02e7\u02e5\3\2\2\2\u02e8\u02ec\7\5\2\2\u02e9\u02eb\t")
        buf.write("\2\2\2\u02ea\u02e9\3\2\2\2\u02eb\u02ee\3\2\2\2\u02ec\u02ea")
        buf.write("\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed\u02ef\3\2\2\2\u02ee")
        buf.write("\u02ec\3\2\2\2\u02ef\u02f3\5@!\2\u02f0\u02f2\t\2\2\2\u02f1")
        buf.write("\u02f0\3\2\2\2\u02f2\u02f5\3\2\2\2\u02f3\u02f1\3\2\2\2")
        buf.write("\u02f3\u02f4\3\2\2\2\u02f4\u02f6\3\2\2\2\u02f5\u02f3\3")
        buf.write("\2\2\2\u02f6\u02f7\7\6\2\2\u02f7-\3\2\2\2\u02f8\u02fc")
        buf.write("\7\24\2\2\u02f9\u02fb\t\2\2\2\u02fa\u02f9\3\2\2\2\u02fb")
        buf.write("\u02fe\3\2\2\2\u02fc\u02fa\3\2\2\2\u02fc\u02fd\3\2\2\2")
        buf.write("\u02fd\u02ff\3\2\2\2\u02fe\u02fc\3\2\2\2\u02ff\u0303\7")
        buf.write("\4\2\2\u0300\u0302\t\2\2\2\u0301\u0300\3\2\2\2\u0302\u0305")
        buf.write("\3\2\2\2\u0303\u0301\3\2\2\2\u0303\u0304\3\2\2\2\u0304")
        buf.write("\u0306\3\2\2\2\u0305\u0303\3\2\2\2\u0306\u030a\5@!\2\u0307")
        buf.write("\u0309\t\2\2\2\u0308\u0307\3\2\2\2\u0309\u030c\3\2\2\2")
        buf.write("\u030a\u0308\3\2\2\2\u030a\u030b\3\2\2\2\u030b\u030d\3")
        buf.write("\2\2\2\u030c\u030a\3\2\2\2\u030d\u0311\7\5\2\2\u030e\u0310")
        buf.write("\t\2\2\2\u030f\u030e\3\2\2\2\u0310\u0313\3\2\2\2\u0311")
        buf.write("\u030f\3\2\2\2\u0311\u0312\3\2\2\2\u0312\u0314\3\2\2\2")
        buf.write("\u0313\u0311\3\2\2\2\u0314\u0318\5@!\2\u0315\u0317\t\2")
        buf.write("\2\2\u0316\u0315\3\2\2\2\u0317\u031a\3\2\2\2\u0318\u0316")
        buf.write("\3\2\2\2\u0318\u0319\3\2\2\2\u0319\u031b\3\2\2\2\u031a")
        buf.write("\u0318\3\2\2\2\u031b\u031c\7\6\2\2\u031c/\3\2\2\2\u031d")
        buf.write("\u0321\7\25\2\2\u031e\u0320\t\2\2\2\u031f\u031e\3\2\2")
        buf.write("\2\u0320\u0323\3\2\2\2\u0321\u031f\3\2\2\2\u0321\u0322")
        buf.write("\3\2\2\2\u0322\u0324\3\2\2\2\u0323\u0321\3\2\2\2\u0324")
        buf.write("\u0328\7\4\2\2\u0325\u0327\t\2\2\2\u0326\u0325\3\2\2\2")
        buf.write("\u0327\u032a\3\2\2\2\u0328\u0326\3\2\2\2\u0328\u0329\3")
        buf.write("\2\2\2\u0329\u032b\3\2\2\2\u032a\u0328\3\2\2\2\u032b\u032f")
        buf.write("\5@!\2\u032c\u032e\t\2\2\2\u032d\u032c\3\2\2\2\u032e\u0331")
        buf.write("\3\2\2\2\u032f\u032d\3\2\2\2\u032f\u0330\3\2\2\2\u0330")
        buf.write("\u0332\3\2\2\2\u0331\u032f\3\2\2\2\u0332\u0336\7\5\2\2")
        buf.write("\u0333\u0335\t\2\2\2\u0334\u0333\3\2\2\2\u0335\u0338\3")
        buf.write("\2\2\2\u0336\u0334\3\2\2\2\u0336\u0337\3\2\2\2\u0337\u0339")
        buf.write("\3\2\2\2\u0338\u0336\3\2\2\2\u0339\u033d\5@!\2\u033a\u033c")
        buf.write("\t\2\2\2\u033b\u033a\3\2\2\2\u033c\u033f\3\2\2\2\u033d")
        buf.write("\u033b\3\2\2\2\u033d\u033e\3\2\2\2\u033e\u0340\3\2\2\2")
        buf.write("\u033f\u033d\3\2\2\2\u0340\u0341\7\6\2\2\u0341\61\3\2")
        buf.write("\2\2\u0342\u0346\7 \2\2\u0343\u0345\t\2\2\2\u0344\u0343")
        buf.write("\3\2\2\2\u0345\u0348\3\2\2\2\u0346\u0344\3\2\2\2\u0346")
        buf.write("\u0347\3\2\2\2\u0347\u0349\3\2\2\2\u0348\u0346\3\2\2\2")
        buf.write("\u0349\u034d\7\4\2\2\u034a\u034c\t\2\2\2\u034b\u034a\3")
        buf.write("\2\2\2\u034c\u034f\3\2\2\2\u034d\u034b\3\2\2\2\u034d\u034e")
        buf.write("\3\2\2\2\u034e\u0350\3\2\2\2\u034f\u034d\3\2\2\2\u0350")
        buf.write("\u0354\5@!\2\u0351\u0353\t\2\2\2\u0352\u0351\3\2\2\2\u0353")
        buf.write("\u0356\3\2\2\2\u0354\u0352\3\2\2\2\u0354\u0355\3\2\2\2")
        buf.write("\u0355\u0357\3\2\2\2\u0356\u0354\3\2\2\2\u0357\u0358\7")
        buf.write("\6\2\2\u0358\63\3\2\2\2\u0359\u035d\7\26\2\2\u035a\u035c")
        buf.write("\t\2\2\2\u035b\u035a\3\2\2\2\u035c\u035f\3\2\2\2\u035d")
        buf.write("\u035b\3\2\2\2\u035d\u035e\3\2\2\2\u035e\u0360\3\2\2\2")
        buf.write("\u035f\u035d\3\2\2\2\u0360\u0364\7\4\2\2\u0361\u0363\t")
        buf.write("\2\2\2\u0362\u0361\3\2\2\2\u0363\u0366\3\2\2\2\u0364\u0362")
        buf.write("\3\2\2\2\u0364\u0365\3\2\2\2\u0365\u0367\3\2\2\2\u0366")
        buf.write("\u0364\3\2\2\2\u0367\u036b\5B\"\2\u0368\u036a\t\2\2\2")
        buf.write("\u0369\u0368\3\2\2\2\u036a\u036d\3\2\2\2\u036b\u0369\3")
        buf.write("\2\2\2\u036b\u036c\3\2\2\2\u036c\u036e\3\2\2\2\u036d\u036b")
        buf.write("\3\2\2\2\u036e\u036f\7\6\2\2\u036f\65\3\2\2\2\u0370\u0374")
        buf.write("\7\27\2\2\u0371\u0373\t\2\2\2\u0372\u0371\3\2\2\2\u0373")
        buf.write("\u0376\3\2\2\2\u0374\u0372\3\2\2\2\u0374\u0375\3\2\2\2")
        buf.write("\u0375\u0377\3\2\2\2\u0376\u0374\3\2\2\2\u0377\u037b\7")
        buf.write("\4\2\2\u0378\u037a\t\2\2\2\u0379\u0378\3\2\2\2\u037a\u037d")
        buf.write("\3\2\2\2\u037b\u0379\3\2\2\2\u037b\u037c\3\2\2\2\u037c")
        buf.write("\u038e\3\2\2\2\u037d\u037b\3\2\2\2\u037e\u0382\5@!\2\u037f")
        buf.write("\u0381\t\2\2\2\u0380\u037f\3\2\2\2\u0381\u0384\3\2\2\2")
        buf.write("\u0382\u0380\3\2\2\2\u0382\u0383\3\2\2\2\u0383\u0385\3")
        buf.write("\2\2\2\u0384\u0382\3\2\2\2\u0385\u0389\7\5\2\2\u0386\u0388")
        buf.write("\t\2\2\2\u0387\u0386\3\2\2\2\u0388\u038b\3\2\2\2\u0389")
        buf.write("\u0387\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u038d\3\2\2\2")
        buf.write("\u038b\u0389\3\2\2\2\u038c\u037e\3\2\2\2\u038d\u0390\3")
        buf.write("\2\2\2\u038e\u038c\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0391")
        buf.write("\3\2\2\2\u0390\u038e\3\2\2\2\u0391\u0395\5@!\2\u0392\u0394")
        buf.write("\t\2\2\2\u0393\u0392\3\2\2\2\u0394\u0397\3\2\2\2\u0395")
        buf.write("\u0393\3\2\2\2\u0395\u0396\3\2\2\2\u0396\u0398\3\2\2\2")
        buf.write("\u0397\u0395\3\2\2\2\u0398\u0399\7\6\2\2\u0399\67\3\2")
        buf.write("\2\2\u039a\u039e\7\32\2\2\u039b\u039d\t\2\2\2\u039c\u039b")
        buf.write("\3\2\2\2\u039d\u03a0\3\2\2\2\u039e\u039c\3\2\2\2\u039e")
        buf.write("\u039f\3\2\2\2\u039f\u03a1\3\2\2\2\u03a0\u039e\3\2\2\2")
        buf.write("\u03a1\u03a5\7\4\2\2\u03a2\u03a4\t\2\2\2\u03a3\u03a2\3")
        buf.write("\2\2\2\u03a4\u03a7\3\2\2\2\u03a5\u03a3\3\2\2\2\u03a5\u03a6")
        buf.write("\3\2\2\2\u03a6\u03a8\3\2\2\2\u03a7\u03a5\3\2\2\2\u03a8")
        buf.write("\u03ac\5@!\2\u03a9\u03ab\t\2\2\2\u03aa\u03a9\3\2\2\2\u03ab")
        buf.write("\u03ae\3\2\2\2\u03ac\u03aa\3\2\2\2\u03ac\u03ad\3\2\2\2")
        buf.write("\u03ad\u03af\3\2\2\2\u03ae\u03ac\3\2\2\2\u03af\u03b0\7")
        buf.write("\6\2\2\u03b09\3\2\2\2\u03b1\u03b5\7\33\2\2\u03b2\u03b4")
        buf.write("\t\2\2\2\u03b3\u03b2\3\2\2\2\u03b4\u03b7\3\2\2\2\u03b5")
        buf.write("\u03b3\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b8\3\2\2\2")
        buf.write("\u03b7\u03b5\3\2\2\2\u03b8\u03bc\7\4\2\2\u03b9\u03bb\t")
        buf.write("\2\2\2\u03ba\u03b9\3\2\2\2\u03bb\u03be\3\2\2\2\u03bc\u03ba")
        buf.write("\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd\u03bf\3\2\2\2\u03be")
        buf.write("\u03bc\3\2\2\2\u03bf\u03c3\5@!\2\u03c0\u03c2\t\2\2\2\u03c1")
        buf.write("\u03c0\3\2\2\2\u03c2\u03c5\3\2\2\2\u03c3\u03c1\3\2\2\2")
        buf.write("\u03c3\u03c4\3\2\2\2\u03c4\u03c6\3\2\2\2\u03c5\u03c3\3")
        buf.write("\2\2\2\u03c6\u03c7\7\6\2\2\u03c7;\3\2\2\2\u03c8\u03cc")
        buf.write("\7\37\2\2\u03c9\u03cb\t\2\2\2\u03ca\u03c9\3\2\2\2\u03cb")
        buf.write("\u03ce\3\2\2\2\u03cc\u03ca\3\2\2\2\u03cc\u03cd\3\2\2\2")
        buf.write("\u03cd\u03cf\3\2\2\2\u03ce\u03cc\3\2\2\2\u03cf\u03d3\7")
        buf.write("\4\2\2\u03d0\u03d2\t\2\2\2\u03d1\u03d0\3\2\2\2\u03d2\u03d5")
        buf.write("\3\2\2\2\u03d3\u03d1\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4")
        buf.write("\u03d6\3\2\2\2\u03d5\u03d3\3\2\2\2\u03d6\u03da\5@!\2\u03d7")
        buf.write("\u03d9\t\2\2\2\u03d8\u03d7\3\2\2\2\u03d9\u03dc\3\2\2\2")
        buf.write("\u03da\u03d8\3\2\2\2\u03da\u03db\3\2\2\2\u03db\u03dd\3")
        buf.write("\2\2\2\u03dc\u03da\3\2\2\2\u03dd\u03de\7\6\2\2\u03de=")
        buf.write("\3\2\2\2\u03df\u03e3\7\30\2\2\u03e0\u03e2\t\2\2\2\u03e1")
        buf.write("\u03e0\3\2\2\2\u03e2\u03e5\3\2\2\2\u03e3\u03e1\3\2\2\2")
        buf.write("\u03e3\u03e4\3\2\2\2\u03e4\u03e6\3\2\2\2\u03e5\u03e3\3")
        buf.write("\2\2\2\u03e6\u03ea\7\4\2\2\u03e7\u03e9\t\2\2\2\u03e8\u03e7")
        buf.write("\3\2\2\2\u03e9\u03ec\3\2\2\2\u03ea\u03e8\3\2\2\2\u03ea")
        buf.write("\u03eb\3\2\2\2\u03eb\u03ed\3\2\2\2\u03ec\u03ea\3\2\2\2")
        buf.write("\u03ed\u03f1\5D#\2\u03ee\u03f0\t\2\2\2\u03ef\u03ee\3\2")
        buf.write("\2\2\u03f0\u03f3\3\2\2\2\u03f1\u03ef\3\2\2\2\u03f1\u03f2")
        buf.write("\3\2\2\2\u03f2\u03f4\3\2\2\2\u03f3\u03f1\3\2\2\2\u03f4")
        buf.write("\u03f5\7\6\2\2\u03f5?\3\2\2\2\u03f6\u03f7\t\3\2\2\u03f7")
        buf.write("A\3\2\2\2\u03f8\u03f9\t\4\2\2\u03f9C\3\2\2\2\u03fa\u03fb")
        buf.write("\t\5\2\2\u03fbE\3\2\2\2\u0095IPW^ejprt{\177\u0082\u0084")
        buf.write("\u0089\u008d\u0093\u0099\u009f\u00a6\u00ad\u00b4\u00bb")
        buf.write("\u00c0\u00c3\u00c9\u00d0\u00d6\u00dd\u00e4\u00eb\u00f0")
        buf.write("\u00f6\u00f8\u00fa\u0101\u0105\u0108\u010d\u010f\u0118")
        buf.write("\u011c\u0124\u012a\u0130\u0136\u013d\u0144\u014b\u0150")
        buf.write("\u0156\u0158\u015a\u0161\u0168\u016a\u0170\u0172\u0174")
        buf.write("\u017a\u0183\u0189\u0190\u0197\u019e\u01a3\u01a9\u01ab")
        buf.write("\u01ad\u01b4\u01bb\u01bd\u01c3\u01c5\u01c7\u01cc\u01d2")
        buf.write("\u01d9\u01f3\u0200\u0206\u020d\u0216\u021c\u0223\u022a")
        buf.write("\u0231\u0238\u023d\u0240\u0248\u024f\u0256\u025f\u0266")
        buf.write("\u026d\u0276\u027d\u0284\u028b\u0292\u029b\u02a2\u02a9")
        buf.write("\u02b2\u02b9\u02c0\u02c7\u02ce\u02d7\u02de\u02e5\u02ec")
        buf.write("\u02f3\u02fc\u0303\u030a\u0311\u0318\u0321\u0328\u032f")
        buf.write("\u0336\u033d\u0346\u034d\u0354\u035d\u0364\u036b\u0374")
        buf.write("\u037b\u0382\u0389\u038e\u0395\u039e\u03a5\u03ac\u03b5")
        buf.write("\u03bc\u03c3\u03cc\u03d3\u03da\u03e3\u03ea\u03f1")
        return buf.getvalue()


class WordlifyParser ( Parser ):

    grammarFileName = "Wordlify.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'('", "','", "')'", "'='", "'fn'", 
                     "'if'", "'then'", "'else'", "'begin'", "'end'", "'exist'", 
                     "'print'", "'rename'", "'remove'", "'move'", "'copy'", 
                     "'download'", "'write'", "'wait'", "'execute'", "'exit'", 
                     "'time'", "'getFiles'", "'dateModified'", "'file'", 
                     "'folder'", "'args'", "'size'", "'read'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "FN", "IF", "THEN", "ELSE", 
                      "BEGIN", "END", "EXIST", "PRINT", "RENAME", "REMOVE", 
                      "MOVE", "COPY", "DOWNLOAD", "WRITE", "WAIT", "EXECUTE", 
                      "EXIT", "TIME", "GET_FILES", "DATE_MODIFIED", "FILE", 
                      "FOLDER", "ARGS", "SIZE", "READ", "CMP_OP", "LOG_OP", 
                      "BOOL", "STR", "ID", "NUM", "WS", "NL", "END_COMMENT" ]

    RULE_program = 0
    RULE_block = 1
    RULE_fn_def = 2
    RULE_if_instr = 3
    RULE_if_cond = 4
    RULE_then = 5
    RULE_else_if = 6
    RULE_else_block = 7
    RULE_cond = 8
    RULE_comparison = 9
    RULE_atom_instr = 10
    RULE_bool_fn = 11
    RULE_return_fn = 12
    RULE_assign = 13
    RULE_value = 14
    RULE_fn_call = 15
    RULE_exist = 16
    RULE_print_instr = 17
    RULE_rename = 18
    RULE_remove = 19
    RULE_move = 20
    RULE_copy = 21
    RULE_download = 22
    RULE_write = 23
    RULE_read = 24
    RULE_wait_instr = 25
    RULE_execute = 26
    RULE_get_files = 27
    RULE_date_modified = 28
    RULE_size = 29
    RULE_exit = 30
    RULE_str_or_id = 31
    RULE_num_or_id = 32
    RULE_value_or_id = 33

    ruleNames =  [ "program", "block", "fn_def", "if_instr", "if_cond", 
                   "then", "else_if", "else_block", "cond", "comparison", 
                   "atom_instr", "bool_fn", "return_fn", "assign", "value", 
                   "fn_call", "exist", "print_instr", "rename", "remove", 
                   "move", "copy", "download", "write", "read", "wait_instr", 
                   "execute", "get_files", "date_modified", "size", "exit", 
                   "str_or_id", "num_or_id", "value_or_id" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    FN=6
    IF=7
    THEN=8
    ELSE=9
    BEGIN=10
    END=11
    EXIST=12
    PRINT=13
    RENAME=14
    REMOVE=15
    MOVE=16
    COPY=17
    DOWNLOAD=18
    WRITE=19
    WAIT=20
    EXECUTE=21
    EXIT=22
    TIME=23
    GET_FILES=24
    DATE_MODIFIED=25
    FILE=26
    FOLDER=27
    ARGS=28
    SIZE=29
    READ=30
    CMP_OP=31
    LOG_OP=32
    BOOL=33
    STR=34
    ID=35
    NUM=36
    WS=37
    NL=38
    END_COMMENT=39

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(WordlifyParser.EOF, 0)

        def END_COMMENT(self):
            return self.getToken(WordlifyParser.END_COMMENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.BlockContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.BlockContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = WordlifyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 71
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 68
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 73
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.FN) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.ID))) != 0):
                self.state = 114
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 112
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                        if la_ == 1:
                            self.state = 74
                            self.atom_instr()
                            self.state = 78
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 75
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 80
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 81
                            self.match(WordlifyParser.T__0)
                            self.state = 85
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 82
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 87
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 88
                            self.atom_instr()
                            self.state = 102 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 92
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 89
                                    self.match(WordlifyParser.WS)
                                    self.state = 94
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 95
                                self.match(WordlifyParser.NL)
                                self.state = 99
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 96
                                        self.match(WordlifyParser.WS) 
                                    self.state = 101
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                                self.state = 104 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 106
                            self.block()
                            self.state = 108 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 107
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 110 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 116
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                self.state = 128
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.ID]:
                    self.state = 117
                    self.atom_instr()
                    self.state = 121
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 118
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 123
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                    self.state = 125
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==WordlifyParser.T__0:
                        self.state = 124
                        self.match(WordlifyParser.T__0)


                    pass
                elif token in [WordlifyParser.FN, WordlifyParser.IF]:
                    self.state = 127
                    self.block()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 132
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 137
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.END_COMMENT:
                self.state = 138
                self.match(WordlifyParser.END_COMMENT)


            self.state = 141
            self.match(WordlifyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_instr(self):
            return self.getTypedRuleContext(WordlifyParser.If_instrContext,0)


        def fn_def(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_defContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = WordlifyParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_block)
        try:
            self.state = 145
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 143
                self.if_instr()
                pass
            elif token in [WordlifyParser.FN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 144
                self.fn_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FN(self):
            return self.getToken(WordlifyParser.FN, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def BEGIN(self):
            return self.getToken(WordlifyParser.BEGIN, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def if_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.If_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.If_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_def" ):
                listener.enterFn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_def" ):
                listener.exitFn_def(self)




    def fn_def(self):

        localctx = WordlifyParser.Fn_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_fn_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 147
            self.match(WordlifyParser.FN)
            self.state = 149 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 148
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 151 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 153
            self.match(WordlifyParser.ID)
            self.state = 157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 154
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 159
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 160
            self.match(WordlifyParser.T__1)
            self.state = 164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 161
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 166
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.ID:
                self.state = 167
                self.match(WordlifyParser.ID)
                self.state = 171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 168
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 173
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.T__2:
                    self.state = 174
                    self.match(WordlifyParser.T__2)
                    self.state = 178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 175
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 180
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 181
                    self.match(WordlifyParser.ID)
                    self.state = 185
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 182
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 187
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 192
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 195
            self.match(WordlifyParser.T__3)
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 196
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 201
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 202
            self.match(WordlifyParser.BEGIN)
            self.state = 204 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 203
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 206 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.ID))) != 0):
                self.state = 248
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 246
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                        if la_ == 1:
                            self.state = 208
                            self.atom_instr()
                            self.state = 212
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 209
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 214
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 215
                            self.match(WordlifyParser.T__0)
                            self.state = 219
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 216
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 221
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 222
                            self.atom_instr()
                            self.state = 236 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 226
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 223
                                    self.match(WordlifyParser.WS)
                                    self.state = 228
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 229
                                self.match(WordlifyParser.NL)
                                self.state = 233
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 230
                                        self.match(WordlifyParser.WS) 
                                    self.state = 235
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

                                self.state = 238 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 240
                            self.if_instr()
                            self.state = 242 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 241
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 244 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 250
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                self.state = 262
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.ID]:
                    self.state = 251
                    self.atom_instr()
                    self.state = 255
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 252
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 257
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                    self.state = 259
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==WordlifyParser.T__0:
                        self.state = 258
                        self.match(WordlifyParser.T__0)


                    pass
                elif token in [WordlifyParser.IF]:
                    self.state = 261
                    self.if_instr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 265 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 264
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 267 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break



            self.state = 271
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def else_if(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Else_ifContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Else_ifContext,i)


        def else_block(self):
            return self.getTypedRuleContext(WordlifyParser.Else_blockContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_if_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_instr" ):
                listener.enterIf_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_instr" ):
                listener.exitIf_instr(self)




    def if_instr(self):

        localctx = WordlifyParser.If_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_if_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.if_cond()
            self.state = 274
            self.then()
            self.state = 278
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 275
                    self.else_if() 
                self.state = 280
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.ELSE:
                self.state = 281
                self.else_block()


            self.state = 284
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(WordlifyParser.IF, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_if_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_cond" ):
                listener.enterIf_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_cond" ):
                listener.exitIf_cond(self)




    def if_cond(self):

        localctx = WordlifyParser.If_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_if_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.match(WordlifyParser.IF)
            self.state = 288 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 287
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 290 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 292
            self.cond()
            self.state = 294 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 293
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 296 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEN(self):
            return self.getToken(WordlifyParser.THEN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def if_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.If_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.If_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_then

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThen" ):
                listener.enterThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThen" ):
                listener.exitThen(self)




    def then(self):

        localctx = WordlifyParser.ThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_then)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 298
            self.match(WordlifyParser.THEN)
            self.state = 300 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 299
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 302 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.ID))) != 0):
                self.state = 344
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 342
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                        if la_ == 1:
                            self.state = 304
                            self.atom_instr()
                            self.state = 308
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 305
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 310
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 311
                            self.match(WordlifyParser.T__0)
                            self.state = 315
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 312
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 317
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 318
                            self.atom_instr()
                            self.state = 332 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 322
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 319
                                    self.match(WordlifyParser.WS)
                                    self.state = 324
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 325
                                self.match(WordlifyParser.NL)
                                self.state = 329
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 326
                                        self.match(WordlifyParser.WS) 
                                    self.state = 331
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

                                self.state = 334 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 336
                            self.if_instr()
                            self.state = 338 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 337
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 340 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 346
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

                self.state = 368
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.ID]:
                    self.state = 347
                    self.atom_instr()
                    self.state = 351
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 348
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 353
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

                    self.state = 360
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 354
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 356 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 355
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 358 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.IF]:
                    self.state = 362
                    self.if_instr()
                    self.state = 364 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 363
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 366 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_else_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_if" ):
                listener.enterElse_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_if" ):
                listener.exitElse_if(self)




    def else_if(self):

        localctx = WordlifyParser.Else_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_else_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(WordlifyParser.ELSE)
            self.state = 374 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 373
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 376 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 378
            self.if_cond()
            self.state = 379
            self.then()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def if_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.If_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.If_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_else_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_block" ):
                listener.enterElse_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_block" ):
                listener.exitElse_block(self)




    def else_block(self):

        localctx = WordlifyParser.Else_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_else_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(WordlifyParser.ELSE)
            self.state = 383 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 382
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 385 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.ID))) != 0):
                self.state = 427
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 425
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                        if la_ == 1:
                            self.state = 387
                            self.atom_instr()
                            self.state = 391
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 388
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 393
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 394
                            self.match(WordlifyParser.T__0)
                            self.state = 398
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 395
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 400
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 401
                            self.atom_instr()
                            self.state = 415 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 405
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 402
                                    self.match(WordlifyParser.WS)
                                    self.state = 407
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 408
                                self.match(WordlifyParser.NL)
                                self.state = 412
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 409
                                        self.match(WordlifyParser.WS) 
                                    self.state = 414
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

                                self.state = 417 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 419
                            self.if_instr()
                            self.state = 421 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 420
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 423 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 429
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

                self.state = 451
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.ID]:
                    self.state = 430
                    self.atom_instr()
                    self.state = 434
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,68,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 431
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 436
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,68,self._ctx)

                    self.state = 443
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 437
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 439 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 438
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 441 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.IF]:
                    self.state = 445
                    self.if_instr()
                    self.state = 447 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 446
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 449 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bool_fn(self):
            return self.getTypedRuleContext(WordlifyParser.Bool_fnContext,0)


        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def comparison(self):
            return self.getTypedRuleContext(WordlifyParser.ComparisonContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)




    def cond(self):

        localctx = WordlifyParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_cond)
        try:
            self.state = 458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 455
                self.bool_fn()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 456
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 457
                self.comparison()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ValueContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ValueContext,i)


        def CMP_OP(self):
            return self.getToken(WordlifyParser.CMP_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = WordlifyParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.value()
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 461
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 467
            self.match(WordlifyParser.CMP_OP)
            self.state = 471
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 468
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 474
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def assign(self):
            return self.getTypedRuleContext(WordlifyParser.AssignContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def ARGS(self):
            return self.getToken(WordlifyParser.ARGS, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_atom_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_instr" ):
                listener.enterAtom_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_instr" ):
                listener.exitAtom_instr(self)




    def atom_instr(self):

        localctx = WordlifyParser.Atom_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_atom_instr)
        try:
            self.state = 497
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 476
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 477
                self.exist()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 478
                self.print_instr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 479
                self.rename()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 480
                self.remove()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 481
                self.move()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 482
                self.copy()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 483
                self.download()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 484
                self.write()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 485
                self.read()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 486
                self.wait_instr()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 487
                self.execute()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 488
                self.get_files()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 489
                self.date_modified()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 490
                self.size()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 491
                self.exit()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 492
                self.assign()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 493
                self.match(WordlifyParser.TIME)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 494
                self.match(WordlifyParser.FILE)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 495
                self.match(WordlifyParser.FOLDER)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 496
                self.match(WordlifyParser.ARGS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bool_fnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_bool_fn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_fn" ):
                listener.enterBool_fn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_fn" ):
                listener.exitBool_fn(self)




    def bool_fn(self):

        localctx = WordlifyParser.Bool_fnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_bool_fn)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.exist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_fnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def ARGS(self):
            return self.getToken(WordlifyParser.ARGS, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_return_fn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_fn" ):
                listener.enterReturn_fn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_fn" ):
                listener.exitReturn_fn(self)




    def return_fn(self):

        localctx = WordlifyParser.Return_fnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_return_fn)
        try:
            self.state = 510
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.EXIST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 501
                self.exist()
                pass
            elif token in [WordlifyParser.READ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 502
                self.read()
                pass
            elif token in [WordlifyParser.TIME]:
                self.enterOuterAlt(localctx, 3)
                self.state = 503
                self.match(WordlifyParser.TIME)
                pass
            elif token in [WordlifyParser.GET_FILES]:
                self.enterOuterAlt(localctx, 4)
                self.state = 504
                self.get_files()
                pass
            elif token in [WordlifyParser.DATE_MODIFIED]:
                self.enterOuterAlt(localctx, 5)
                self.state = 505
                self.date_modified()
                pass
            elif token in [WordlifyParser.SIZE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 506
                self.size()
                pass
            elif token in [WordlifyParser.FILE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 507
                self.match(WordlifyParser.FILE)
                pass
            elif token in [WordlifyParser.FOLDER]:
                self.enterOuterAlt(localctx, 8)
                self.state = 508
                self.match(WordlifyParser.FOLDER)
                pass
            elif token in [WordlifyParser.ARGS]:
                self.enterOuterAlt(localctx, 9)
                self.state = 509
                self.match(WordlifyParser.ARGS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def value(self):
            return self.getTypedRuleContext(WordlifyParser.ValueContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)




    def assign(self):

        localctx = WordlifyParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.match(WordlifyParser.ID)
            self.state = 516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 513
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 518
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 519
            self.match(WordlifyParser.T__4)
            self.state = 523
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 520
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 526
            self.value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def return_fn(self):
            return self.getTypedRuleContext(WordlifyParser.Return_fnContext,0)


        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)




    def value(self):

        localctx = WordlifyParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_value)
        try:
            self.state = 532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.EXIST, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 528
                self.return_fn()
                pass
            elif token in [WordlifyParser.STR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 529
                self.match(WordlifyParser.STR)
                pass
            elif token in [WordlifyParser.NUM]:
                self.enterOuterAlt(localctx, 3)
                self.state = 530
                self.match(WordlifyParser.NUM)
                pass
            elif token in [WordlifyParser.ID]:
                self.enterOuterAlt(localctx, 4)
                self.state = 531
                self.match(WordlifyParser.ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_call" ):
                listener.enterFn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_call" ):
                listener.exitFn_call(self)




    def fn_call(self):

        localctx = WordlifyParser.Fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_fn_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.match(WordlifyParser.ID)
            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 535
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 541
            self.match(WordlifyParser.T__1)
            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 542
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 548
                self.value_or_id()
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 549
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.T__2:
                    self.state = 555
                    self.match(WordlifyParser.T__2)
                    self.state = 559
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 556
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 561
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 562
                    self.value_or_id()
                    self.state = 566
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 563
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 568
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 573
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 576
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIST(self):
            return self.getToken(WordlifyParser.EXIST, 0)

        def str_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Str_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExist" ):
                listener.enterExist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExist" ):
                listener.exitExist(self)




    def exist(self):

        localctx = WordlifyParser.ExistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_exist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(WordlifyParser.EXIST)
            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 579
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 585
            self.match(WordlifyParser.T__1)
            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 586
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 592
            self.str_or_id()
            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 593
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 599
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(WordlifyParser.PRINT, 0)

        def str_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Str_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_print_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_instr" ):
                listener.enterPrint_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_instr" ):
                listener.exitPrint_instr(self)




    def print_instr(self):

        localctx = WordlifyParser.Print_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_print_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(WordlifyParser.PRINT)
            self.state = 605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 602
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 608
            self.match(WordlifyParser.T__1)
            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 609
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 615
            self.str_or_id()
            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 616
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 622
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(WordlifyParser.RENAME, 0)

        def str_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Str_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Str_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_rename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename" ):
                listener.enterRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename" ):
                listener.exitRename(self)




    def rename(self):

        localctx = WordlifyParser.RenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_rename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.match(WordlifyParser.RENAME)
            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 625
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 631
            self.match(WordlifyParser.T__1)
            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 632
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 638
            self.str_or_id()
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 639
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 645
            self.match(WordlifyParser.T__2)
            self.state = 649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 646
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 652
            self.str_or_id()
            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 653
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 659
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(WordlifyParser.REMOVE, 0)

        def str_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Str_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove" ):
                listener.enterRemove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove" ):
                listener.exitRemove(self)




    def remove(self):

        localctx = WordlifyParser.RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.match(WordlifyParser.REMOVE)
            self.state = 665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 662
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 668
            self.match(WordlifyParser.T__1)
            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 669
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 675
            self.str_or_id()
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 676
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 682
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOVE(self):
            return self.getToken(WordlifyParser.MOVE, 0)

        def str_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Str_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Str_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)




    def move(self):

        localctx = WordlifyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.match(WordlifyParser.MOVE)
            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 685
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 690
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 691
            self.match(WordlifyParser.T__1)
            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 692
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 698
            self.str_or_id()
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 699
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 705
            self.match(WordlifyParser.T__2)
            self.state = 709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 706
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 712
            self.str_or_id()
            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 713
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 719
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(WordlifyParser.COPY, 0)

        def str_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Str_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Str_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_copy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy" ):
                listener.enterCopy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy" ):
                listener.exitCopy(self)




    def copy(self):

        localctx = WordlifyParser.CopyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_copy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.match(WordlifyParser.COPY)
            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 722
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 728
            self.match(WordlifyParser.T__1)
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 729
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 735
            self.str_or_id()
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 736
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 742
            self.match(WordlifyParser.T__2)
            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 743
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 749
            self.str_or_id()
            self.state = 753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 750
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 756
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DownloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOWNLOAD(self):
            return self.getToken(WordlifyParser.DOWNLOAD, 0)

        def str_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Str_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Str_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_download

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDownload" ):
                listener.enterDownload(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDownload" ):
                listener.exitDownload(self)




    def download(self):

        localctx = WordlifyParser.DownloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_download)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(WordlifyParser.DOWNLOAD)
            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 759
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 765
            self.match(WordlifyParser.T__1)
            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 766
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 772
            self.str_or_id()
            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 773
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 779
            self.match(WordlifyParser.T__2)
            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 780
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 786
            self.str_or_id()
            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 787
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 793
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(WordlifyParser.WRITE, 0)

        def str_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Str_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Str_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_write

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite" ):
                listener.enterWrite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite" ):
                listener.exitWrite(self)




    def write(self):

        localctx = WordlifyParser.WriteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_write)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(WordlifyParser.WRITE)
            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 796
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 802
            self.match(WordlifyParser.T__1)
            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 803
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 808
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 809
            self.str_or_id()
            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 810
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 815
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 816
            self.match(WordlifyParser.T__2)
            self.state = 820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 817
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 823
            self.str_or_id()
            self.state = 827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 824
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 830
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(WordlifyParser.READ, 0)

        def str_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Str_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_read

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead" ):
                listener.enterRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead" ):
                listener.exitRead(self)




    def read(self):

        localctx = WordlifyParser.ReadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_read)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.match(WordlifyParser.READ)
            self.state = 836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 833
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 838
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 839
            self.match(WordlifyParser.T__1)
            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 840
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 845
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 846
            self.str_or_id()
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 847
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 853
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wait_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(WordlifyParser.WAIT, 0)

        def num_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Num_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_wait_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_instr" ):
                listener.enterWait_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_instr" ):
                listener.exitWait_instr(self)




    def wait_instr(self):

        localctx = WordlifyParser.Wait_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_wait_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.match(WordlifyParser.WAIT)
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 856
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 862
            self.match(WordlifyParser.T__1)
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 863
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 869
            self.num_or_id()
            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 870
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 875
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 876
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(WordlifyParser.EXECUTE, 0)

        def str_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Str_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Str_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_execute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)




    def execute(self):

        localctx = WordlifyParser.ExecuteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_execute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.match(WordlifyParser.EXECUTE)
            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 879
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 885
            self.match(WordlifyParser.T__1)
            self.state = 889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 886
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 891
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 908
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 892
                    self.str_or_id()
                    self.state = 896
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 893
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 898
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 899
                    self.match(WordlifyParser.T__2)
                    self.state = 903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 900
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 905
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
             
                self.state = 910
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

            self.state = 911
            self.str_or_id()
            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 912
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 918
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_filesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET_FILES(self):
            return self.getToken(WordlifyParser.GET_FILES, 0)

        def str_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Str_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_get_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_files" ):
                listener.enterGet_files(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_files" ):
                listener.exitGet_files(self)




    def get_files(self):

        localctx = WordlifyParser.Get_filesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_get_files)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.match(WordlifyParser.GET_FILES)
            self.state = 924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 921
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 927
            self.match(WordlifyParser.T__1)
            self.state = 931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 928
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 934
            self.str_or_id()
            self.state = 938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 935
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 941
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_modifiedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_MODIFIED(self):
            return self.getToken(WordlifyParser.DATE_MODIFIED, 0)

        def str_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Str_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_date_modified

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_modified" ):
                listener.enterDate_modified(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_modified" ):
                listener.exitDate_modified(self)




    def date_modified(self):

        localctx = WordlifyParser.Date_modifiedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_date_modified)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.match(WordlifyParser.DATE_MODIFIED)
            self.state = 947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 944
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 950
            self.match(WordlifyParser.T__1)
            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 951
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 956
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 957
            self.str_or_id()
            self.state = 961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 958
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 963
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 964
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIZE(self):
            return self.getToken(WordlifyParser.SIZE, 0)

        def str_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Str_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSize" ):
                listener.enterSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSize" ):
                listener.exitSize(self)




    def size(self):

        localctx = WordlifyParser.SizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.match(WordlifyParser.SIZE)
            self.state = 970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 967
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 973
            self.match(WordlifyParser.T__1)
            self.state = 977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 974
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 980
            self.str_or_id()
            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 981
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 987
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(WordlifyParser.EXIT, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit" ):
                listener.enterExit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit" ):
                listener.exitExit(self)




    def exit(self):

        localctx = WordlifyParser.ExitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_exit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(WordlifyParser.EXIT)
            self.state = 993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 990
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 996
            self.match(WordlifyParser.T__1)
            self.state = 1000
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 997
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1002
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1003
            self.value_or_id()
            self.state = 1007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1004
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1010
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Str_or_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_str_or_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStr_or_id" ):
                listener.enterStr_or_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStr_or_id" ):
                listener.exitStr_or_id(self)




    def str_or_id(self):

        localctx = WordlifyParser.Str_or_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_str_or_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            _la = self._input.LA(1)
            if not(_la==WordlifyParser.STR or _la==WordlifyParser.ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Num_or_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_num_or_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum_or_id" ):
                listener.enterNum_or_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum_or_id" ):
                listener.exitNum_or_id(self)




    def num_or_id(self):

        localctx = WordlifyParser.Num_or_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_num_or_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            _la = self._input.LA(1)
            if not(_la==WordlifyParser.ID or _la==WordlifyParser.NUM):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_or_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_value_or_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_or_id" ):
                listener.enterValue_or_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_or_id" ):
                listener.exitValue_or_id(self)




    def value_or_id(self):

        localctx = WordlifyParser.Value_or_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_value_or_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





