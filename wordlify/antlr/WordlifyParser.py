# Generated from Wordlify.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\63")
        buf.write("\u055d\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\3\2\7\2R\n\2\f\2\16\2U\13\2\3\2\3\2\7")
        buf.write("\2Y\n\2\f\2\16\2\\\13\2\3\2\3\2\7\2`\n\2\f\2\16\2c\13")
        buf.write("\2\3\2\3\2\7\2g\n\2\f\2\16\2j\13\2\3\2\3\2\7\2n\n\2\f")
        buf.write("\2\16\2q\13\2\6\2s\n\2\r\2\16\2t\3\2\3\2\5\2y\n\2\3\2")
        buf.write("\6\2|\n\2\r\2\16\2}\7\2\u0080\n\2\f\2\16\2\u0083\13\2")
        buf.write("\3\2\3\2\7\2\u0087\n\2\f\2\16\2\u008a\13\2\3\2\5\2\u008d")
        buf.write("\n\2\3\2\3\2\5\2\u0091\n\2\5\2\u0093\n\2\5\2\u0095\n\2")
        buf.write("\3\2\7\2\u0098\n\2\f\2\16\2\u009b\13\2\3\2\5\2\u009e\n")
        buf.write("\2\3\2\3\2\3\3\3\3\6\3\u00a4\n\3\r\3\16\3\u00a5\3\3\3")
        buf.write("\3\7\3\u00aa\n\3\f\3\16\3\u00ad\13\3\3\3\3\3\7\3\u00b1")
        buf.write("\n\3\f\3\16\3\u00b4\13\3\3\3\3\3\7\3\u00b8\n\3\f\3\16")
        buf.write("\3\u00bb\13\3\3\3\3\3\7\3\u00bf\n\3\f\3\16\3\u00c2\13")
        buf.write("\3\3\3\3\3\7\3\u00c6\n\3\f\3\16\3\u00c9\13\3\7\3\u00cb")
        buf.write("\n\3\f\3\16\3\u00ce\13\3\5\3\u00d0\n\3\3\3\3\3\7\3\u00d4")
        buf.write("\n\3\f\3\16\3\u00d7\13\3\3\3\3\3\6\3\u00db\n\3\r\3\16")
        buf.write("\3\u00dc\3\3\3\3\7\3\u00e1\n\3\f\3\16\3\u00e4\13\3\3\3")
        buf.write("\3\3\7\3\u00e8\n\3\f\3\16\3\u00eb\13\3\3\3\3\3\7\3\u00ef")
        buf.write("\n\3\f\3\16\3\u00f2\13\3\3\3\3\3\7\3\u00f6\n\3\f\3\16")
        buf.write("\3\u00f9\13\3\6\3\u00fb\n\3\r\3\16\3\u00fc\3\3\3\3\6\3")
        buf.write("\u0101\n\3\r\3\16\3\u0102\7\3\u0105\n\3\f\3\16\3\u0108")
        buf.write("\13\3\3\3\3\3\7\3\u010c\n\3\f\3\16\3\u010f\13\3\3\3\5")
        buf.write("\3\u0112\n\3\3\3\5\3\u0115\n\3\3\3\6\3\u0118\n\3\r\3\16")
        buf.write("\3\u0119\5\3\u011c\n\3\3\3\3\3\3\4\3\4\3\4\5\4\u0123\n")
        buf.write("\4\3\5\3\5\6\5\u0127\n\5\r\5\16\5\u0128\3\5\3\5\6\5\u012d")
        buf.write("\n\5\r\5\16\5\u012e\3\5\3\5\6\5\u0133\n\5\r\5\16\5\u0134")
        buf.write("\3\5\3\5\6\5\u0139\n\5\r\5\16\5\u013a\3\5\3\5\6\5\u013f")
        buf.write("\n\5\r\5\16\5\u0140\3\5\3\5\7\5\u0145\n\5\f\5\16\5\u0148")
        buf.write("\13\5\3\5\3\5\7\5\u014c\n\5\f\5\16\5\u014f\13\5\3\5\3")
        buf.write("\5\7\5\u0153\n\5\f\5\16\5\u0156\13\5\3\5\3\5\7\5\u015a")
        buf.write("\n\5\f\5\16\5\u015d\13\5\6\5\u015f\n\5\r\5\16\5\u0160")
        buf.write("\3\5\3\5\6\5\u0165\n\5\r\5\16\5\u0166\7\5\u0169\n\5\f")
        buf.write("\5\16\5\u016c\13\5\3\5\3\5\7\5\u0170\n\5\f\5\16\5\u0173")
        buf.write("\13\5\3\5\3\5\6\5\u0177\n\5\r\5\16\5\u0178\5\5\u017b\n")
        buf.write("\5\3\5\3\5\6\5\u017f\n\5\r\5\16\5\u0180\5\5\u0183\n\5")
        buf.write("\5\5\u0185\n\5\3\5\3\5\3\6\3\6\6\6\u018b\n\6\r\6\16\6")
        buf.write("\u018c\3\6\3\6\6\6\u0191\n\6\r\6\16\6\u0192\3\6\3\6\6")
        buf.write("\6\u0197\n\6\r\6\16\6\u0198\3\6\3\6\7\6\u019d\n\6\f\6")
        buf.write("\16\6\u01a0\13\6\3\6\3\6\7\6\u01a4\n\6\f\6\16\6\u01a7")
        buf.write("\13\6\3\6\3\6\7\6\u01ab\n\6\f\6\16\6\u01ae\13\6\3\6\3")
        buf.write("\6\7\6\u01b2\n\6\f\6\16\6\u01b5\13\6\6\6\u01b7\n\6\r\6")
        buf.write("\16\6\u01b8\3\6\3\6\6\6\u01bd\n\6\r\6\16\6\u01be\7\6\u01c1")
        buf.write("\n\6\f\6\16\6\u01c4\13\6\3\6\3\6\7\6\u01c8\n\6\f\6\16")
        buf.write("\6\u01cb\13\6\3\6\3\6\6\6\u01cf\n\6\r\6\16\6\u01d0\5\6")
        buf.write("\u01d3\n\6\3\6\3\6\6\6\u01d7\n\6\r\6\16\6\u01d8\5\6\u01db")
        buf.write("\n\6\5\6\u01dd\n\6\3\6\3\6\3\7\3\7\3\7\7\7\u01e4\n\7\f")
        buf.write("\7\16\7\u01e7\13\7\3\7\5\7\u01ea\n\7\3\7\3\7\3\b\3\b\6")
        buf.write("\b\u01f0\n\b\r\b\16\b\u01f1\3\b\3\b\6\b\u01f6\n\b\r\b")
        buf.write("\16\b\u01f7\3\t\3\t\6\t\u01fc\n\t\r\t\16\t\u01fd\3\t\3")
        buf.write("\t\7\t\u0202\n\t\f\t\16\t\u0205\13\t\3\t\3\t\7\t\u0209")
        buf.write("\n\t\f\t\16\t\u020c\13\t\3\t\3\t\7\t\u0210\n\t\f\t\16")
        buf.write("\t\u0213\13\t\3\t\3\t\7\t\u0217\n\t\f\t\16\t\u021a\13")
        buf.write("\t\6\t\u021c\n\t\r\t\16\t\u021d\3\t\3\t\6\t\u0222\n\t")
        buf.write("\r\t\16\t\u0223\7\t\u0226\n\t\f\t\16\t\u0229\13\t\3\t")
        buf.write("\3\t\7\t\u022d\n\t\f\t\16\t\u0230\13\t\3\t\3\t\6\t\u0234")
        buf.write("\n\t\r\t\16\t\u0235\5\t\u0238\n\t\3\t\3\t\6\t\u023c\n")
        buf.write("\t\r\t\16\t\u023d\5\t\u0240\n\t\5\t\u0242\n\t\3\n\3\n")
        buf.write("\6\n\u0246\n\n\r\n\16\n\u0247\3\n\3\n\3\n\3\13\3\13\6")
        buf.write("\13\u024f\n\13\r\13\16\13\u0250\3\13\3\13\7\13\u0255\n")
        buf.write("\13\f\13\16\13\u0258\13\13\3\13\3\13\7\13\u025c\n\13\f")
        buf.write("\13\16\13\u025f\13\13\3\13\3\13\7\13\u0263\n\13\f\13\16")
        buf.write("\13\u0266\13\13\3\13\3\13\7\13\u026a\n\13\f\13\16\13\u026d")
        buf.write("\13\13\6\13\u026f\n\13\r\13\16\13\u0270\3\13\3\13\6\13")
        buf.write("\u0275\n\13\r\13\16\13\u0276\7\13\u0279\n\13\f\13\16\13")
        buf.write("\u027c\13\13\3\13\3\13\7\13\u0280\n\13\f\13\16\13\u0283")
        buf.write("\13\13\3\13\3\13\6\13\u0287\n\13\r\13\16\13\u0288\5\13")
        buf.write("\u028b\n\13\3\13\3\13\6\13\u028f\n\13\r\13\16\13\u0290")
        buf.write("\5\13\u0293\n\13\5\13\u0295\n\13\3\f\3\f\3\f\5\f\u029a")
        buf.write("\n\f\3\r\3\r\7\r\u029e\n\r\f\r\16\r\u02a1\13\r\3\r\3\r")
        buf.write("\7\r\u02a5\n\r\f\r\16\r\u02a8\13\r\3\r\3\r\3\16\3\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\5\16\u02b3\n\16\3\17\3\17\7\17")
        buf.write("\u02b7\n\17\f\17\16\17\u02ba\13\17\3\17\3\17\7\17\u02be")
        buf.write("\n\17\f\17\16\17\u02c1\13\17\3\17\3\17\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u02db\n")
        buf.write("\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\5\21\u02f4\n\21\3\22\3\22\7\22\u02f8\n\22\f")
        buf.write("\22\16\22\u02fb\13\22\3\22\3\22\7\22\u02ff\n\22\f\22\16")
        buf.write("\22\u0302\13\22\3\22\3\22\3\23\3\23\7\23\u0308\n\23\f")
        buf.write("\23\16\23\u030b\13\23\3\23\3\23\7\23\u030f\n\23\f\23\16")
        buf.write("\23\u0312\13\23\3\23\3\23\3\24\3\24\3\24\7\24\u0319\n")
        buf.write("\24\f\24\16\24\u031c\13\24\3\24\3\24\7\24\u0320\n\24\f")
        buf.write("\24\16\24\u0323\13\24\3\24\3\24\3\25\3\25\7\25\u0329\n")
        buf.write("\25\f\25\16\25\u032c\13\25\3\25\3\25\7\25\u0330\n\25\f")
        buf.write("\25\16\25\u0333\13\25\3\25\3\25\7\25\u0337\n\25\f\25\16")
        buf.write("\25\u033a\13\25\3\25\3\25\7\25\u033e\n\25\f\25\16\25\u0341")
        buf.write("\13\25\3\25\3\25\7\25\u0345\n\25\f\25\16\25\u0348\13\25")
        buf.write("\7\25\u034a\n\25\f\25\16\25\u034d\13\25\5\25\u034f\n\25")
        buf.write("\3\25\3\25\3\26\3\26\7\26\u0355\n\26\f\26\16\26\u0358")
        buf.write("\13\26\3\26\3\26\7\26\u035c\n\26\f\26\16\26\u035f\13\26")
        buf.write("\3\26\3\26\7\26\u0363\n\26\f\26\16\26\u0366\13\26\3\26")
        buf.write("\3\26\3\27\3\27\7\27\u036c\n\27\f\27\16\27\u036f\13\27")
        buf.write("\3\27\3\27\7\27\u0373\n\27\f\27\16\27\u0376\13\27\3\27")
        buf.write("\3\27\7\27\u037a\n\27\f\27\16\27\u037d\13\27\3\27\3\27")
        buf.write("\3\30\3\30\7\30\u0383\n\30\f\30\16\30\u0386\13\30\3\30")
        buf.write("\3\30\7\30\u038a\n\30\f\30\16\30\u038d\13\30\3\30\3\30")
        buf.write("\7\30\u0391\n\30\f\30\16\30\u0394\13\30\3\30\3\30\7\30")
        buf.write("\u0398\n\30\f\30\16\30\u039b\13\30\3\30\3\30\7\30\u039f")
        buf.write("\n\30\f\30\16\30\u03a2\13\30\3\30\3\30\3\31\3\31\7\31")
        buf.write("\u03a8\n\31\f\31\16\31\u03ab\13\31\3\31\3\31\7\31\u03af")
        buf.write("\n\31\f\31\16\31\u03b2\13\31\3\31\3\31\7\31\u03b6\n\31")
        buf.write("\f\31\16\31\u03b9\13\31\3\31\3\31\3\32\3\32\7\32\u03bf")
        buf.write("\n\32\f\32\16\32\u03c2\13\32\3\32\3\32\7\32\u03c6\n\32")
        buf.write("\f\32\16\32\u03c9\13\32\3\32\3\32\7\32\u03cd\n\32\f\32")
        buf.write("\16\32\u03d0\13\32\3\32\3\32\7\32\u03d4\n\32\f\32\16\32")
        buf.write("\u03d7\13\32\3\32\3\32\7\32\u03db\n\32\f\32\16\32\u03de")
        buf.write("\13\32\3\32\3\32\3\33\3\33\7\33\u03e4\n\33\f\33\16\33")
        buf.write("\u03e7\13\33\3\33\3\33\7\33\u03eb\n\33\f\33\16\33\u03ee")
        buf.write("\13\33\3\33\3\33\7\33\u03f2\n\33\f\33\16\33\u03f5\13\33")
        buf.write("\3\33\3\33\7\33\u03f9\n\33\f\33\16\33\u03fc\13\33\3\33")
        buf.write("\3\33\7\33\u0400\n\33\f\33\16\33\u0403\13\33\3\33\3\33")
        buf.write("\3\34\3\34\7\34\u0409\n\34\f\34\16\34\u040c\13\34\3\34")
        buf.write("\3\34\7\34\u0410\n\34\f\34\16\34\u0413\13\34\3\34\3\34")
        buf.write("\7\34\u0417\n\34\f\34\16\34\u041a\13\34\3\34\3\34\7\34")
        buf.write("\u041e\n\34\f\34\16\34\u0421\13\34\3\34\3\34\7\34\u0425")
        buf.write("\n\34\f\34\16\34\u0428\13\34\3\34\3\34\3\35\3\35\7\35")
        buf.write("\u042e\n\35\f\35\16\35\u0431\13\35\3\35\3\35\7\35\u0435")
        buf.write("\n\35\f\35\16\35\u0438\13\35\3\35\3\35\7\35\u043c\n\35")
        buf.write("\f\35\16\35\u043f\13\35\3\35\3\35\7\35\u0443\n\35\f\35")
        buf.write("\16\35\u0446\13\35\3\35\3\35\7\35\u044a\n\35\f\35\16\35")
        buf.write("\u044d\13\35\3\35\3\35\3\36\3\36\7\36\u0453\n\36\f\36")
        buf.write("\16\36\u0456\13\36\3\36\3\36\7\36\u045a\n\36\f\36\16\36")
        buf.write("\u045d\13\36\3\36\3\36\7\36\u0461\n\36\f\36\16\36\u0464")
        buf.write("\13\36\3\36\3\36\3\37\3\37\7\37\u046a\n\37\f\37\16\37")
        buf.write("\u046d\13\37\3\37\3\37\7\37\u0471\n\37\f\37\16\37\u0474")
        buf.write("\13\37\3\37\3\37\7\37\u0478\n\37\f\37\16\37\u047b\13\37")
        buf.write("\3\37\3\37\3 \3 \7 \u0481\n \f \16 \u0484\13 \3 \3 \7")
        buf.write(" \u0488\n \f \16 \u048b\13 \3 \3 \7 \u048f\n \f \16 \u0492")
        buf.write("\13 \3 \3 \7 \u0496\n \f \16 \u0499\13 \7 \u049b\n \f")
        buf.write(" \16 \u049e\13 \3 \3 \7 \u04a2\n \f \16 \u04a5\13 \3 ")
        buf.write("\3 \3!\3!\7!\u04ab\n!\f!\16!\u04ae\13!\3!\3!\7!\u04b2")
        buf.write("\n!\f!\16!\u04b5\13!\3!\3!\7!\u04b9\n!\f!\16!\u04bc\13")
        buf.write("!\3!\3!\3\"\3\"\7\"\u04c2\n\"\f\"\16\"\u04c5\13\"\3\"")
        buf.write("\3\"\7\"\u04c9\n\"\f\"\16\"\u04cc\13\"\3\"\3\"\7\"\u04d0")
        buf.write("\n\"\f\"\16\"\u04d3\13\"\3\"\3\"\3#\3#\7#\u04d9\n#\f#")
        buf.write("\16#\u04dc\13#\3#\3#\7#\u04e0\n#\f#\16#\u04e3\13#\3#\3")
        buf.write("#\7#\u04e7\n#\f#\16#\u04ea\13#\3#\3#\3$\3$\7$\u04f0\n")
        buf.write("$\f$\16$\u04f3\13$\3$\3$\7$\u04f7\n$\f$\16$\u04fa\13$")
        buf.write("\3$\3$\7$\u04fe\n$\f$\16$\u0501\13$\3$\3$\3%\3%\7%\u0507")
        buf.write("\n%\f%\16%\u050a\13%\3%\3%\7%\u050e\n%\f%\16%\u0511\13")
        buf.write("%\3%\3%\7%\u0515\n%\f%\16%\u0518\13%\3%\3%\3&\3&\7&\u051e")
        buf.write("\n&\f&\16&\u0521\13&\3&\3&\7&\u0525\n&\f&\16&\u0528\13")
        buf.write("&\3&\3&\5&\u052c\n&\3&\7&\u052f\n&\f&\16&\u0532\13&\3")
        buf.write("&\3&\3\'\3\'\7\'\u0538\n\'\f\'\16\'\u053b\13\'\3\'\3\'")
        buf.write("\7\'\u053f\n\'\f\'\16\'\u0542\13\'\3\'\3\'\7\'\u0546\n")
        buf.write("\'\f\'\16\'\u0549\13\'\3\'\7\'\u054c\n\'\f\'\16\'\u054f")
        buf.write("\13\'\3\'\7\'\u0552\n\'\f\'\16\'\u0555\13\'\5\'\u0557")
        buf.write("\n\'\3\'\3\'\3(\3(\3(\2\2)\2\4\6\b\n\f\16\20\22\24\26")
        buf.write("\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLN\2\4\3\2")
        buf.write("\61\62\3\2-\60\2\u0637\2S\3\2\2\2\4\u00a1\3\2\2\2\6\u0122")
        buf.write("\3\2\2\2\b\u0124\3\2\2\2\n\u0188\3\2\2\2\f\u01e0\3\2\2")
        buf.write("\2\16\u01ed\3\2\2\2\20\u01f9\3\2\2\2\22\u0243\3\2\2\2")
        buf.write("\24\u024c\3\2\2\2\26\u0299\3\2\2\2\30\u029b\3\2\2\2\32")
        buf.write("\u02b2\3\2\2\2\34\u02b4\3\2\2\2\36\u02da\3\2\2\2 \u02f3")
        buf.write("\3\2\2\2\"\u02f5\3\2\2\2$\u0305\3\2\2\2&\u0315\3\2\2\2")
        buf.write("(\u0326\3\2\2\2*\u0352\3\2\2\2,\u0369\3\2\2\2.\u0380\3")
        buf.write("\2\2\2\60\u03a5\3\2\2\2\62\u03bc\3\2\2\2\64\u03e1\3\2")
        buf.write("\2\2\66\u0406\3\2\2\28\u042b\3\2\2\2:\u0450\3\2\2\2<\u0467")
        buf.write("\3\2\2\2>\u047e\3\2\2\2@\u04a8\3\2\2\2B\u04bf\3\2\2\2")
        buf.write("D\u04d6\3\2\2\2F\u04ed\3\2\2\2H\u0504\3\2\2\2J\u051b\3")
        buf.write("\2\2\2L\u0535\3\2\2\2N\u055a\3\2\2\2PR\t\2\2\2QP\3\2\2")
        buf.write("\2RU\3\2\2\2SQ\3\2\2\2ST\3\2\2\2T\u0094\3\2\2\2US\3\2")
        buf.write("\2\2VZ\5 \21\2WY\t\2\2\2XW\3\2\2\2Y\\\3\2\2\2ZX\3\2\2")
        buf.write("\2Z[\3\2\2\2[]\3\2\2\2\\Z\3\2\2\2]a\7\3\2\2^`\t\2\2\2")
        buf.write("_^\3\2\2\2`c\3\2\2\2a_\3\2\2\2ab\3\2\2\2b\u0080\3\2\2")
        buf.write("\2ca\3\2\2\2dr\5 \21\2eg\7\61\2\2fe\3\2\2\2gj\3\2\2\2")
        buf.write("hf\3\2\2\2hi\3\2\2\2ik\3\2\2\2jh\3\2\2\2ko\7\62\2\2ln")
        buf.write("\7\61\2\2ml\3\2\2\2nq\3\2\2\2om\3\2\2\2op\3\2\2\2ps\3")
        buf.write("\2\2\2qo\3\2\2\2rh\3\2\2\2st\3\2\2\2tr\3\2\2\2tu\3\2\2")
        buf.write("\2u\u0080\3\2\2\2vy\5\6\4\2wy\5\4\3\2xv\3\2\2\2xw\3\2")
        buf.write("\2\2y{\3\2\2\2z|\t\2\2\2{z\3\2\2\2|}\3\2\2\2}{\3\2\2\2")
        buf.write("}~\3\2\2\2~\u0080\3\2\2\2\177V\3\2\2\2\177d\3\2\2\2\177")
        buf.write("x\3\2\2\2\u0080\u0083\3\2\2\2\u0081\177\3\2\2\2\u0081")
        buf.write("\u0082\3\2\2\2\u0082\u0092\3\2\2\2\u0083\u0081\3\2\2\2")
        buf.write("\u0084\u0088\5 \21\2\u0085\u0087\t\2\2\2\u0086\u0085\3")
        buf.write("\2\2\2\u0087\u008a\3\2\2\2\u0088\u0086\3\2\2\2\u0088\u0089")
        buf.write("\3\2\2\2\u0089\u008c\3\2\2\2\u008a\u0088\3\2\2\2\u008b")
        buf.write("\u008d\7\3\2\2\u008c\u008b\3\2\2\2\u008c\u008d\3\2\2\2")
        buf.write("\u008d\u0093\3\2\2\2\u008e\u0091\5\6\4\2\u008f\u0091\5")
        buf.write("\4\3\2\u0090\u008e\3\2\2\2\u0090\u008f\3\2\2\2\u0091\u0093")
        buf.write("\3\2\2\2\u0092\u0084\3\2\2\2\u0092\u0090\3\2\2\2\u0093")
        buf.write("\u0095\3\2\2\2\u0094\u0081\3\2\2\2\u0094\u0095\3\2\2\2")
        buf.write("\u0095\u0099\3\2\2\2\u0096\u0098\t\2\2\2\u0097\u0096\3")
        buf.write("\2\2\2\u0098\u009b\3\2\2\2\u0099\u0097\3\2\2\2\u0099\u009a")
        buf.write("\3\2\2\2\u009a\u009d\3\2\2\2\u009b\u0099\3\2\2\2\u009c")
        buf.write("\u009e\7\63\2\2\u009d\u009c\3\2\2\2\u009d\u009e\3\2\2")
        buf.write("\2\u009e\u009f\3\2\2\2\u009f\u00a0\7\2\2\3\u00a0\3\3\2")
        buf.write("\2\2\u00a1\u00a3\7\n\2\2\u00a2\u00a4\t\2\2\2\u00a3\u00a2")
        buf.write("\3\2\2\2\u00a4\u00a5\3\2\2\2\u00a5\u00a3\3\2\2\2\u00a5")
        buf.write("\u00a6\3\2\2\2\u00a6\u00a7\3\2\2\2\u00a7\u00ab\7/\2\2")
        buf.write("\u00a8\u00aa\t\2\2\2\u00a9\u00a8\3\2\2\2\u00aa\u00ad\3")
        buf.write("\2\2\2\u00ab\u00a9\3\2\2\2\u00ab\u00ac\3\2\2\2\u00ac\u00ae")
        buf.write("\3\2\2\2\u00ad\u00ab\3\2\2\2\u00ae\u00b2\7\4\2\2\u00af")
        buf.write("\u00b1\t\2\2\2\u00b0\u00af\3\2\2\2\u00b1\u00b4\3\2\2\2")
        buf.write("\u00b2\u00b0\3\2\2\2\u00b2\u00b3\3\2\2\2\u00b3\u00cf\3")
        buf.write("\2\2\2\u00b4\u00b2\3\2\2\2\u00b5\u00b9\7/\2\2\u00b6\u00b8")
        buf.write("\t\2\2\2\u00b7\u00b6\3\2\2\2\u00b8\u00bb\3\2\2\2\u00b9")
        buf.write("\u00b7\3\2\2\2\u00b9\u00ba\3\2\2\2\u00ba\u00cc\3\2\2\2")
        buf.write("\u00bb\u00b9\3\2\2\2\u00bc\u00c0\7\5\2\2\u00bd\u00bf\t")
        buf.write("\2\2\2\u00be\u00bd\3\2\2\2\u00bf\u00c2\3\2\2\2\u00c0\u00be")
        buf.write("\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1\u00c3\3\2\2\2\u00c2")
        buf.write("\u00c0\3\2\2\2\u00c3\u00c7\7/\2\2\u00c4\u00c6\t\2\2\2")
        buf.write("\u00c5\u00c4\3\2\2\2\u00c6\u00c9\3\2\2\2\u00c7\u00c5\3")
        buf.write("\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00cb\3\2\2\2\u00c9\u00c7")
        buf.write("\3\2\2\2\u00ca\u00bc\3\2\2\2\u00cb\u00ce\3\2\2\2\u00cc")
        buf.write("\u00ca\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd\u00d0\3\2\2\2")
        buf.write("\u00ce\u00cc\3\2\2\2\u00cf\u00b5\3\2\2\2\u00cf\u00d0\3")
        buf.write("\2\2\2\u00d0\u00d1\3\2\2\2\u00d1\u00d5\7\6\2\2\u00d2\u00d4")
        buf.write("\t\2\2\2\u00d3\u00d2\3\2\2\2\u00d4\u00d7\3\2\2\2\u00d5")
        buf.write("\u00d3\3\2\2\2\u00d5\u00d6\3\2\2\2\u00d6\u00d8\3\2\2\2")
        buf.write("\u00d7\u00d5\3\2\2\2\u00d8\u00da\7\22\2\2\u00d9\u00db")
        buf.write("\t\2\2\2\u00da\u00d9\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc")
        buf.write("\u00da\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd\u011b\3\2\2\2")
        buf.write("\u00de\u00e2\5 \21\2\u00df\u00e1\t\2\2\2\u00e0\u00df\3")
        buf.write("\2\2\2\u00e1\u00e4\3\2\2\2\u00e2\u00e0\3\2\2\2\u00e2\u00e3")
        buf.write("\3\2\2\2\u00e3\u00e5\3\2\2\2\u00e4\u00e2\3\2\2\2\u00e5")
        buf.write("\u00e9\7\3\2\2\u00e6\u00e8\t\2\2\2\u00e7\u00e6\3\2\2\2")
        buf.write("\u00e8\u00eb\3\2\2\2\u00e9\u00e7\3\2\2\2\u00e9\u00ea\3")
        buf.write("\2\2\2\u00ea\u0105\3\2\2\2\u00eb\u00e9\3\2\2\2\u00ec\u00fa")
        buf.write("\5 \21\2\u00ed\u00ef\7\61\2\2\u00ee\u00ed\3\2\2\2\u00ef")
        buf.write("\u00f2\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f0\u00f1\3\2\2\2")
        buf.write("\u00f1\u00f3\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f3\u00f7\7")
        buf.write("\62\2\2\u00f4\u00f6\7\61\2\2\u00f5\u00f4\3\2\2\2\u00f6")
        buf.write("\u00f9\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f7\u00f8\3\2\2\2")
        buf.write("\u00f8\u00fb\3\2\2\2\u00f9\u00f7\3\2\2\2\u00fa\u00f0\3")
        buf.write("\2\2\2\u00fb\u00fc\3\2\2\2\u00fc\u00fa\3\2\2\2\u00fc\u00fd")
        buf.write("\3\2\2\2\u00fd\u0105\3\2\2\2\u00fe\u0100\5\6\4\2\u00ff")
        buf.write("\u0101\t\2\2\2\u0100\u00ff\3\2\2\2\u0101\u0102\3\2\2\2")
        buf.write("\u0102\u0100\3\2\2\2\u0102\u0103\3\2\2\2\u0103\u0105\3")
        buf.write("\2\2\2\u0104\u00de\3\2\2\2\u0104\u00ec\3\2\2\2\u0104\u00fe")
        buf.write("\3\2\2\2\u0105\u0108\3\2\2\2\u0106\u0104\3\2\2\2\u0106")
        buf.write("\u0107\3\2\2\2\u0107\u0114\3\2\2\2\u0108\u0106\3\2\2\2")
        buf.write("\u0109\u010d\5 \21\2\u010a\u010c\t\2\2\2\u010b\u010a\3")
        buf.write("\2\2\2\u010c\u010f\3\2\2\2\u010d\u010b\3\2\2\2\u010d\u010e")
        buf.write("\3\2\2\2\u010e\u0111\3\2\2\2\u010f\u010d\3\2\2\2\u0110")
        buf.write("\u0112\7\3\2\2\u0111\u0110\3\2\2\2\u0111\u0112\3\2\2\2")
        buf.write("\u0112\u0115\3\2\2\2\u0113\u0115\5\6\4\2\u0114\u0109\3")
        buf.write("\2\2\2\u0114\u0113\3\2\2\2\u0115\u0117\3\2\2\2\u0116\u0118")
        buf.write("\t\2\2\2\u0117\u0116\3\2\2\2\u0118\u0119\3\2\2\2\u0119")
        buf.write("\u0117\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u011c\3\2\2\2")
        buf.write("\u011b\u0106\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011d\3")
        buf.write("\2\2\2\u011d\u011e\7\23\2\2\u011e\5\3\2\2\2\u011f\u0123")
        buf.write("\5\f\7\2\u0120\u0123\5\n\6\2\u0121\u0123\5\b\5\2\u0122")
        buf.write("\u011f\3\2\2\2\u0122\u0120\3\2\2\2\u0122\u0121\3\2\2\2")
        buf.write("\u0123\7\3\2\2\2\u0124\u0126\7\f\2\2\u0125\u0127\t\2\2")
        buf.write("\2\u0126\u0125\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u0126")
        buf.write("\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u012a\3\2\2\2\u012a")
        buf.write("\u012c\7/\2\2\u012b\u012d\t\2\2\2\u012c\u012b\3\2\2\2")
        buf.write("\u012d\u012e\3\2\2\2\u012e\u012c\3\2\2\2\u012e\u012f\3")
        buf.write("\2\2\2\u012f\u0130\3\2\2\2\u0130\u0132\7\r\2\2\u0131\u0133")
        buf.write("\t\2\2\2\u0132\u0131\3\2\2\2\u0133\u0134\3\2\2\2\u0134")
        buf.write("\u0132\3\2\2\2\u0134\u0135\3\2\2\2\u0135\u0136\3\2\2\2")
        buf.write("\u0136\u0138\7/\2\2\u0137\u0139\t\2\2\2\u0138\u0137\3")
        buf.write("\2\2\2\u0139\u013a\3\2\2\2\u013a\u0138\3\2\2\2\u013a\u013b")
        buf.write("\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u013e\7\16\2\2\u013d")
        buf.write("\u013f\t\2\2\2\u013e\u013d\3\2\2\2\u013f\u0140\3\2\2\2")
        buf.write("\u0140\u013e\3\2\2\2\u0140\u0141\3\2\2\2\u0141\u0184\3")
        buf.write("\2\2\2\u0142\u0146\5 \21\2\u0143\u0145\t\2\2\2\u0144\u0143")
        buf.write("\3\2\2\2\u0145\u0148\3\2\2\2\u0146\u0144\3\2\2\2\u0146")
        buf.write("\u0147\3\2\2\2\u0147\u0149\3\2\2\2\u0148\u0146\3\2\2\2")
        buf.write("\u0149\u014d\7\3\2\2\u014a\u014c\t\2\2\2\u014b\u014a\3")
        buf.write("\2\2\2\u014c\u014f\3\2\2\2\u014d\u014b\3\2\2\2\u014d\u014e")
        buf.write("\3\2\2\2\u014e\u0169\3\2\2\2\u014f\u014d\3\2\2\2\u0150")
        buf.write("\u015e\5 \21\2\u0151\u0153\7\61\2\2\u0152\u0151\3\2\2")
        buf.write("\2\u0153\u0156\3\2\2\2\u0154\u0152\3\2\2\2\u0154\u0155")
        buf.write("\3\2\2\2\u0155\u0157\3\2\2\2\u0156\u0154\3\2\2\2\u0157")
        buf.write("\u015b\7\62\2\2\u0158\u015a\7\61\2\2\u0159\u0158\3\2\2")
        buf.write("\2\u015a\u015d\3\2\2\2\u015b\u0159\3\2\2\2\u015b\u015c")
        buf.write("\3\2\2\2\u015c\u015f\3\2\2\2\u015d\u015b\3\2\2\2\u015e")
        buf.write("\u0154\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u015e\3\2\2\2")
        buf.write("\u0160\u0161\3\2\2\2\u0161\u0169\3\2\2\2\u0162\u0164\5")
        buf.write("\6\4\2\u0163\u0165\t\2\2\2\u0164\u0163\3\2\2\2\u0165\u0166")
        buf.write("\3\2\2\2\u0166\u0164\3\2\2\2\u0166\u0167\3\2\2\2\u0167")
        buf.write("\u0169\3\2\2\2\u0168\u0142\3\2\2\2\u0168\u0150\3\2\2\2")
        buf.write("\u0168\u0162\3\2\2\2\u0169\u016c\3\2\2\2\u016a\u0168\3")
        buf.write("\2\2\2\u016a\u016b\3\2\2\2\u016b\u0182\3\2\2\2\u016c\u016a")
        buf.write("\3\2\2\2\u016d\u0171\5 \21\2\u016e\u0170\t\2\2\2\u016f")
        buf.write("\u016e\3\2\2\2\u0170\u0173\3\2\2\2\u0171\u016f\3\2\2\2")
        buf.write("\u0171\u0172\3\2\2\2\u0172\u017a\3\2\2\2\u0173\u0171\3")
        buf.write("\2\2\2\u0174\u017b\7\3\2\2\u0175\u0177\t\2\2\2\u0176\u0175")
        buf.write("\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u0176\3\2\2\2\u0178")
        buf.write("\u0179\3\2\2\2\u0179\u017b\3\2\2\2\u017a\u0174\3\2\2\2")
        buf.write("\u017a\u0176\3\2\2\2\u017b\u0183\3\2\2\2\u017c\u017e\5")
        buf.write("\6\4\2\u017d\u017f\t\2\2\2\u017e\u017d\3\2\2\2\u017f\u0180")
        buf.write("\3\2\2\2\u0180\u017e\3\2\2\2\u0180\u0181\3\2\2\2\u0181")
        buf.write("\u0183\3\2\2\2\u0182\u016d\3\2\2\2\u0182\u017c\3\2\2\2")
        buf.write("\u0183\u0185\3\2\2\2\u0184\u016a\3\2\2\2\u0184\u0185\3")
        buf.write("\2\2\2\u0185\u0186\3\2\2\2\u0186\u0187\7\23\2\2\u0187")
        buf.write("\t\3\2\2\2\u0188\u018a\7\13\2\2\u0189\u018b\t\2\2\2\u018a")
        buf.write("\u0189\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u018a\3\2\2\2")
        buf.write("\u018c\u018d\3\2\2\2\u018d\u018e\3\2\2\2\u018e\u0190\5")
        buf.write("\26\f\2\u018f\u0191\t\2\2\2\u0190\u018f\3\2\2\2\u0191")
        buf.write("\u0192\3\2\2\2\u0192\u0190\3\2\2\2\u0192\u0193\3\2\2\2")
        buf.write("\u0193\u0194\3\2\2\2\u0194\u0196\7\16\2\2\u0195\u0197")
        buf.write("\t\2\2\2\u0196\u0195\3\2\2\2\u0197\u0198\3\2\2\2\u0198")
        buf.write("\u0196\3\2\2\2\u0198\u0199\3\2\2\2\u0199\u01dc\3\2\2\2")
        buf.write("\u019a\u019e\5 \21\2\u019b\u019d\t\2\2\2\u019c\u019b\3")
        buf.write("\2\2\2\u019d\u01a0\3\2\2\2\u019e\u019c\3\2\2\2\u019e\u019f")
        buf.write("\3\2\2\2\u019f\u01a1\3\2\2\2\u01a0\u019e\3\2\2\2\u01a1")
        buf.write("\u01a5\7\3\2\2\u01a2\u01a4\t\2\2\2\u01a3\u01a2\3\2\2\2")
        buf.write("\u01a4\u01a7\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a5\u01a6\3")
        buf.write("\2\2\2\u01a6\u01c1\3\2\2\2\u01a7\u01a5\3\2\2\2\u01a8\u01b6")
        buf.write("\5 \21\2\u01a9\u01ab\7\61\2\2\u01aa\u01a9\3\2\2\2\u01ab")
        buf.write("\u01ae\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ac\u01ad\3\2\2\2")
        buf.write("\u01ad\u01af\3\2\2\2\u01ae\u01ac\3\2\2\2\u01af\u01b3\7")
        buf.write("\62\2\2\u01b0\u01b2\7\61\2\2\u01b1\u01b0\3\2\2\2\u01b2")
        buf.write("\u01b5\3\2\2\2\u01b3\u01b1\3\2\2\2\u01b3\u01b4\3\2\2\2")
        buf.write("\u01b4\u01b7\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b6\u01ac\3")
        buf.write("\2\2\2\u01b7\u01b8\3\2\2\2\u01b8\u01b6\3\2\2\2\u01b8\u01b9")
        buf.write("\3\2\2\2\u01b9\u01c1\3\2\2\2\u01ba\u01bc\5\6\4\2\u01bb")
        buf.write("\u01bd\t\2\2\2\u01bc\u01bb\3\2\2\2\u01bd\u01be\3\2\2\2")
        buf.write("\u01be\u01bc\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\u01c1\3")
        buf.write("\2\2\2\u01c0\u019a\3\2\2\2\u01c0\u01a8\3\2\2\2\u01c0\u01ba")
        buf.write("\3\2\2\2\u01c1\u01c4\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c2")
        buf.write("\u01c3\3\2\2\2\u01c3\u01da\3\2\2\2\u01c4\u01c2\3\2\2\2")
        buf.write("\u01c5\u01c9\5 \21\2\u01c6\u01c8\t\2\2\2\u01c7\u01c6\3")
        buf.write("\2\2\2\u01c8\u01cb\3\2\2\2\u01c9\u01c7\3\2\2\2\u01c9\u01ca")
        buf.write("\3\2\2\2\u01ca\u01d2\3\2\2\2\u01cb\u01c9\3\2\2\2\u01cc")
        buf.write("\u01d3\7\3\2\2\u01cd\u01cf\t\2\2\2\u01ce\u01cd\3\2\2\2")
        buf.write("\u01cf\u01d0\3\2\2\2\u01d0\u01ce\3\2\2\2\u01d0\u01d1\3")
        buf.write("\2\2\2\u01d1\u01d3\3\2\2\2\u01d2\u01cc\3\2\2\2\u01d2\u01ce")
        buf.write("\3\2\2\2\u01d3\u01db\3\2\2\2\u01d4\u01d6\5\6\4\2\u01d5")
        buf.write("\u01d7\t\2\2\2\u01d6\u01d5\3\2\2\2\u01d7\u01d8\3\2\2\2")
        buf.write("\u01d8\u01d6\3\2\2\2\u01d8\u01d9\3\2\2\2\u01d9\u01db\3")
        buf.write("\2\2\2\u01da\u01c5\3\2\2\2\u01da\u01d4\3\2\2\2\u01db\u01dd")
        buf.write("\3\2\2\2\u01dc\u01c2\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd")
        buf.write("\u01de\3\2\2\2\u01de\u01df\7\23\2\2\u01df\13\3\2\2\2\u01e0")
        buf.write("\u01e1\5\16\b\2\u01e1\u01e5\5\20\t\2\u01e2\u01e4\5\22")
        buf.write("\n\2\u01e3\u01e2\3\2\2\2\u01e4\u01e7\3\2\2\2\u01e5\u01e3")
        buf.write("\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01e9\3\2\2\2\u01e7")
        buf.write("\u01e5\3\2\2\2\u01e8\u01ea\5\24\13\2\u01e9\u01e8\3\2\2")
        buf.write("\2\u01e9\u01ea\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ec")
        buf.write("\7\23\2\2\u01ec\r\3\2\2\2\u01ed\u01ef\7\17\2\2\u01ee\u01f0")
        buf.write("\t\2\2\2\u01ef\u01ee\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1")
        buf.write("\u01ef\3\2\2\2\u01f1\u01f2\3\2\2\2\u01f2\u01f3\3\2\2\2")
        buf.write("\u01f3\u01f5\5\26\f\2\u01f4\u01f6\t\2\2\2\u01f5\u01f4")
        buf.write("\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f7")
        buf.write("\u01f8\3\2\2\2\u01f8\17\3\2\2\2\u01f9\u01fb\7\20\2\2\u01fa")
        buf.write("\u01fc\t\2\2\2\u01fb\u01fa\3\2\2\2\u01fc\u01fd\3\2\2\2")
        buf.write("\u01fd\u01fb\3\2\2\2\u01fd\u01fe\3\2\2\2\u01fe\u0241\3")
        buf.write("\2\2\2\u01ff\u0203\5 \21\2\u0200\u0202\t\2\2\2\u0201\u0200")
        buf.write("\3\2\2\2\u0202\u0205\3\2\2\2\u0203\u0201\3\2\2\2\u0203")
        buf.write("\u0204\3\2\2\2\u0204\u0206\3\2\2\2\u0205\u0203\3\2\2\2")
        buf.write("\u0206\u020a\7\3\2\2\u0207\u0209\t\2\2\2\u0208\u0207\3")
        buf.write("\2\2\2\u0209\u020c\3\2\2\2\u020a\u0208\3\2\2\2\u020a\u020b")
        buf.write("\3\2\2\2\u020b\u0226\3\2\2\2\u020c\u020a\3\2\2\2\u020d")
        buf.write("\u021b\5 \21\2\u020e\u0210\7\61\2\2\u020f\u020e\3\2\2")
        buf.write("\2\u0210\u0213\3\2\2\2\u0211\u020f\3\2\2\2\u0211\u0212")
        buf.write("\3\2\2\2\u0212\u0214\3\2\2\2\u0213\u0211\3\2\2\2\u0214")
        buf.write("\u0218\7\62\2\2\u0215\u0217\7\61\2\2\u0216\u0215\3\2\2")
        buf.write("\2\u0217\u021a\3\2\2\2\u0218\u0216\3\2\2\2\u0218\u0219")
        buf.write("\3\2\2\2\u0219\u021c\3\2\2\2\u021a\u0218\3\2\2\2\u021b")
        buf.write("\u0211\3\2\2\2\u021c\u021d\3\2\2\2\u021d\u021b\3\2\2\2")
        buf.write("\u021d\u021e\3\2\2\2\u021e\u0226\3\2\2\2\u021f\u0221\5")
        buf.write("\6\4\2\u0220\u0222\t\2\2\2\u0221\u0220\3\2\2\2\u0222\u0223")
        buf.write("\3\2\2\2\u0223\u0221\3\2\2\2\u0223\u0224\3\2\2\2\u0224")
        buf.write("\u0226\3\2\2\2\u0225\u01ff\3\2\2\2\u0225\u020d\3\2\2\2")
        buf.write("\u0225\u021f\3\2\2\2\u0226\u0229\3\2\2\2\u0227\u0225\3")
        buf.write("\2\2\2\u0227\u0228\3\2\2\2\u0228\u023f\3\2\2\2\u0229\u0227")
        buf.write("\3\2\2\2\u022a\u022e\5 \21\2\u022b\u022d\t\2\2\2\u022c")
        buf.write("\u022b\3\2\2\2\u022d\u0230\3\2\2\2\u022e\u022c\3\2\2\2")
        buf.write("\u022e\u022f\3\2\2\2\u022f\u0237\3\2\2\2\u0230\u022e\3")
        buf.write("\2\2\2\u0231\u0238\7\3\2\2\u0232\u0234\t\2\2\2\u0233\u0232")
        buf.write("\3\2\2\2\u0234\u0235\3\2\2\2\u0235\u0233\3\2\2\2\u0235")
        buf.write("\u0236\3\2\2\2\u0236\u0238\3\2\2\2\u0237\u0231\3\2\2\2")
        buf.write("\u0237\u0233\3\2\2\2\u0238\u0240\3\2\2\2\u0239\u023b\5")
        buf.write("\6\4\2\u023a\u023c\t\2\2\2\u023b\u023a\3\2\2\2\u023c\u023d")
        buf.write("\3\2\2\2\u023d\u023b\3\2\2\2\u023d\u023e\3\2\2\2\u023e")
        buf.write("\u0240\3\2\2\2\u023f\u022a\3\2\2\2\u023f\u0239\3\2\2\2")
        buf.write("\u0240\u0242\3\2\2\2\u0241\u0227\3\2\2\2\u0241\u0242\3")
        buf.write("\2\2\2\u0242\21\3\2\2\2\u0243\u0245\7\21\2\2\u0244\u0246")
        buf.write("\t\2\2\2\u0245\u0244\3\2\2\2\u0246\u0247\3\2\2\2\u0247")
        buf.write("\u0245\3\2\2\2\u0247\u0248\3\2\2\2\u0248\u0249\3\2\2\2")
        buf.write("\u0249\u024a\5\16\b\2\u024a\u024b\5\20\t\2\u024b\23\3")
        buf.write("\2\2\2\u024c\u024e\7\21\2\2\u024d\u024f\t\2\2\2\u024e")
        buf.write("\u024d\3\2\2\2\u024f\u0250\3\2\2\2\u0250\u024e\3\2\2\2")
        buf.write("\u0250\u0251\3\2\2\2\u0251\u0294\3\2\2\2\u0252\u0256\5")
        buf.write(" \21\2\u0253\u0255\t\2\2\2\u0254\u0253\3\2\2\2\u0255\u0258")
        buf.write("\3\2\2\2\u0256\u0254\3\2\2\2\u0256\u0257\3\2\2\2\u0257")
        buf.write("\u0259\3\2\2\2\u0258\u0256\3\2\2\2\u0259\u025d\7\3\2\2")
        buf.write("\u025a\u025c\t\2\2\2\u025b\u025a\3\2\2\2\u025c\u025f\3")
        buf.write("\2\2\2\u025d\u025b\3\2\2\2\u025d\u025e\3\2\2\2\u025e\u0279")
        buf.write("\3\2\2\2\u025f\u025d\3\2\2\2\u0260\u026e\5 \21\2\u0261")
        buf.write("\u0263\7\61\2\2\u0262\u0261\3\2\2\2\u0263\u0266\3\2\2")
        buf.write("\2\u0264\u0262\3\2\2\2\u0264\u0265\3\2\2\2\u0265\u0267")
        buf.write("\3\2\2\2\u0266\u0264\3\2\2\2\u0267\u026b\7\62\2\2\u0268")
        buf.write("\u026a\7\61\2\2\u0269\u0268\3\2\2\2\u026a\u026d\3\2\2")
        buf.write("\2\u026b\u0269\3\2\2\2\u026b\u026c\3\2\2\2\u026c\u026f")
        buf.write("\3\2\2\2\u026d\u026b\3\2\2\2\u026e\u0264\3\2\2\2\u026f")
        buf.write("\u0270\3\2\2\2\u0270\u026e\3\2\2\2\u0270\u0271\3\2\2\2")
        buf.write("\u0271\u0279\3\2\2\2\u0272\u0274\5\6\4\2\u0273\u0275\t")
        buf.write("\2\2\2\u0274\u0273\3\2\2\2\u0275\u0276\3\2\2\2\u0276\u0274")
        buf.write("\3\2\2\2\u0276\u0277\3\2\2\2\u0277\u0279\3\2\2\2\u0278")
        buf.write("\u0252\3\2\2\2\u0278\u0260\3\2\2\2\u0278\u0272\3\2\2\2")
        buf.write("\u0279\u027c\3\2\2\2\u027a\u0278\3\2\2\2\u027a\u027b\3")
        buf.write("\2\2\2\u027b\u0292\3\2\2\2\u027c\u027a\3\2\2\2\u027d\u0281")
        buf.write("\5 \21\2\u027e\u0280\t\2\2\2\u027f\u027e\3\2\2\2\u0280")
        buf.write("\u0283\3\2\2\2\u0281\u027f\3\2\2\2\u0281\u0282\3\2\2\2")
        buf.write("\u0282\u028a\3\2\2\2\u0283\u0281\3\2\2\2\u0284\u028b\7")
        buf.write("\3\2\2\u0285\u0287\t\2\2\2\u0286\u0285\3\2\2\2\u0287\u0288")
        buf.write("\3\2\2\2\u0288\u0286\3\2\2\2\u0288\u0289\3\2\2\2\u0289")
        buf.write("\u028b\3\2\2\2\u028a\u0284\3\2\2\2\u028a\u0286\3\2\2\2")
        buf.write("\u028b\u0293\3\2\2\2\u028c\u028e\5\6\4\2\u028d\u028f\t")
        buf.write("\2\2\2\u028e\u028d\3\2\2\2\u028f\u0290\3\2\2\2\u0290\u028e")
        buf.write("\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u0293\3\2\2\2\u0292")
        buf.write("\u027d\3\2\2\2\u0292\u028c\3\2\2\2\u0293\u0295\3\2\2\2")
        buf.write("\u0294\u027a\3\2\2\2\u0294\u0295\3\2\2\2\u0295\25\3\2")
        buf.write("\2\2\u0296\u029a\5\36\20\2\u0297\u029a\7-\2\2\u0298\u029a")
        buf.write("\5\30\r\2\u0299\u0296\3\2\2\2\u0299\u0297\3\2\2\2\u0299")
        buf.write("\u0298\3\2\2\2\u029a\27\3\2\2\2\u029b\u029f\5\32\16\2")
        buf.write("\u029c\u029e\t\2\2\2\u029d\u029c\3\2\2\2\u029e\u02a1\3")
        buf.write("\2\2\2\u029f\u029d\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0\u02a2")
        buf.write("\3\2\2\2\u02a1\u029f\3\2\2\2\u02a2\u02a6\7*\2\2\u02a3")
        buf.write("\u02a5\t\2\2\2\u02a4\u02a3\3\2\2\2\u02a5\u02a8\3\2\2\2")
        buf.write("\u02a6\u02a4\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02a9\3")
        buf.write("\2\2\2\u02a8\u02a6\3\2\2\2\u02a9\u02aa\5\32\16\2\u02aa")
        buf.write("\31\3\2\2\2\u02ab\u02b3\5\36\20\2\u02ac\u02b3\7.\2\2\u02ad")
        buf.write("\u02b3\7\60\2\2\u02ae\u02b3\7/\2\2\u02af\u02b3\5\34\17")
        buf.write("\2\u02b0\u02b3\5L\'\2\u02b1\u02b3\5&\24\2\u02b2\u02ab")
        buf.write("\3\2\2\2\u02b2\u02ac\3\2\2\2\u02b2\u02ad\3\2\2\2\u02b2")
        buf.write("\u02ae\3\2\2\2\u02b2\u02af\3\2\2\2\u02b2\u02b0\3\2\2\2")
        buf.write("\u02b2\u02b1\3\2\2\2\u02b3\33\3\2\2\2\u02b4\u02b8\5N(")
        buf.write("\2\u02b5\u02b7\t\2\2\2\u02b6\u02b5\3\2\2\2\u02b7\u02ba")
        buf.write("\3\2\2\2\u02b8\u02b6\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9")
        buf.write("\u02bb\3\2\2\2\u02ba\u02b8\3\2\2\2\u02bb\u02bf\7+\2\2")
        buf.write("\u02bc\u02be\t\2\2\2\u02bd\u02bc\3\2\2\2\u02be\u02c1\3")
        buf.write("\2\2\2\u02bf\u02bd\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0\u02c2")
        buf.write("\3\2\2\2\u02c1\u02bf\3\2\2\2\u02c2\u02c3\5N(\2\u02c3\35")
        buf.write("\3\2\2\2\u02c4\u02db\5(\25\2\u02c5\u02db\5*\26\2\u02c6")
        buf.write("\u02db\5,\27\2\u02c7\u02db\5.\30\2\u02c8\u02db\5\60\31")
        buf.write("\2\u02c9\u02db\5\62\32\2\u02ca\u02db\5\64\33\2\u02cb\u02db")
        buf.write("\5\66\34\2\u02cc\u02db\58\35\2\u02cd\u02db\5:\36\2\u02ce")
        buf.write("\u02db\5<\37\2\u02cf\u02db\5> \2\u02d0\u02db\5@!\2\u02d1")
        buf.write("\u02db\5B\"\2\u02d2\u02db\5D#\2\u02d3\u02db\5F$\2\u02d4")
        buf.write("\u02db\5H%\2\u02d5\u02db\5J&\2\u02d6\u02db\7\37\2\2\u02d7")
        buf.write("\u02db\7\"\2\2\u02d8\u02db\7#\2\2\u02d9\u02db\7$\2\2\u02da")
        buf.write("\u02c4\3\2\2\2\u02da\u02c5\3\2\2\2\u02da\u02c6\3\2\2\2")
        buf.write("\u02da\u02c7\3\2\2\2\u02da\u02c8\3\2\2\2\u02da\u02c9\3")
        buf.write("\2\2\2\u02da\u02ca\3\2\2\2\u02da\u02cb\3\2\2\2\u02da\u02cc")
        buf.write("\3\2\2\2\u02da\u02cd\3\2\2\2\u02da\u02ce\3\2\2\2\u02da")
        buf.write("\u02cf\3\2\2\2\u02da\u02d0\3\2\2\2\u02da\u02d1\3\2\2\2")
        buf.write("\u02da\u02d2\3\2\2\2\u02da\u02d3\3\2\2\2\u02da\u02d4\3")
        buf.write("\2\2\2\u02da\u02d5\3\2\2\2\u02da\u02d6\3\2\2\2\u02da\u02d7")
        buf.write("\3\2\2\2\u02da\u02d8\3\2\2\2\u02da\u02d9\3\2\2\2\u02db")
        buf.write("\37\3\2\2\2\u02dc\u02f4\5(\25\2\u02dd\u02f4\5*\26\2\u02de")
        buf.write("\u02f4\5,\27\2\u02df\u02f4\5.\30\2\u02e0\u02f4\5\60\31")
        buf.write("\2\u02e1\u02f4\5\62\32\2\u02e2\u02f4\5\64\33\2\u02e3\u02f4")
        buf.write("\5\66\34\2\u02e4\u02f4\58\35\2\u02e5\u02f4\5:\36\2\u02e6")
        buf.write("\u02f4\5<\37\2\u02e7\u02f4\5> \2\u02e8\u02f4\5@!\2\u02e9")
        buf.write("\u02f4\5B\"\2\u02ea\u02f4\5D#\2\u02eb\u02f4\5F$\2\u02ec")
        buf.write("\u02f4\5H%\2\u02ed\u02f4\5$\23\2\u02ee\u02f4\5\"\22\2")
        buf.write("\u02ef\u02f4\7\37\2\2\u02f0\u02f4\7\"\2\2\u02f1\u02f4")
        buf.write("\7#\2\2\u02f2\u02f4\7$\2\2\u02f3\u02dc\3\2\2\2\u02f3\u02dd")
        buf.write("\3\2\2\2\u02f3\u02de\3\2\2\2\u02f3\u02df\3\2\2\2\u02f3")
        buf.write("\u02e0\3\2\2\2\u02f3\u02e1\3\2\2\2\u02f3\u02e2\3\2\2\2")
        buf.write("\u02f3\u02e3\3\2\2\2\u02f3\u02e4\3\2\2\2\u02f3\u02e5\3")
        buf.write("\2\2\2\u02f3\u02e6\3\2\2\2\u02f3\u02e7\3\2\2\2\u02f3\u02e8")
        buf.write("\3\2\2\2\u02f3\u02e9\3\2\2\2\u02f3\u02ea\3\2\2\2\u02f3")
        buf.write("\u02eb\3\2\2\2\u02f3\u02ec\3\2\2\2\u02f3\u02ed\3\2\2\2")
        buf.write("\u02f3\u02ee\3\2\2\2\u02f3\u02ef\3\2\2\2\u02f3\u02f0\3")
        buf.write("\2\2\2\u02f3\u02f1\3\2\2\2\u02f3\u02f2\3\2\2\2\u02f4!")
        buf.write("\3\2\2\2\u02f5\u02f9\7/\2\2\u02f6\u02f8\t\2\2\2\u02f7")
        buf.write("\u02f6\3\2\2\2\u02f8\u02fb\3\2\2\2\u02f9\u02f7\3\2\2\2")
        buf.write("\u02f9\u02fa\3\2\2\2\u02fa\u02fc\3\2\2\2\u02fb\u02f9\3")
        buf.write("\2\2\2\u02fc\u0300\7\7\2\2\u02fd\u02ff\t\2\2\2\u02fe\u02fd")
        buf.write("\3\2\2\2\u02ff\u0302\3\2\2\2\u0300\u02fe\3\2\2\2\u0300")
        buf.write("\u0301\3\2\2\2\u0301\u0303\3\2\2\2\u0302\u0300\3\2\2\2")
        buf.write("\u0303\u0304\5\32\16\2\u0304#\3\2\2\2\u0305\u0309\7/\2")
        buf.write("\2\u0306\u0308\t\2\2\2\u0307\u0306\3\2\2\2\u0308\u030b")
        buf.write("\3\2\2\2\u0309\u0307\3\2\2\2\u0309\u030a\3\2\2\2\u030a")
        buf.write("\u030c\3\2\2\2\u030b\u0309\3\2\2\2\u030c\u0310\7)\2\2")
        buf.write("\u030d\u030f\t\2\2\2\u030e\u030d\3\2\2\2\u030f\u0312\3")
        buf.write("\2\2\2\u0310\u030e\3\2\2\2\u0310\u0311\3\2\2\2\u0311\u0313")
        buf.write("\3\2\2\2\u0312\u0310\3\2\2\2\u0313\u0314\5\32\16\2\u0314")
        buf.write("%\3\2\2\2\u0315\u0316\7/\2\2\u0316\u031a\7\b\2\2\u0317")
        buf.write("\u0319\t\2\2\2\u0318\u0317\3\2\2\2\u0319\u031c\3\2\2\2")
        buf.write("\u031a\u0318\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u031d\3")
        buf.write("\2\2\2\u031c\u031a\3\2\2\2\u031d\u0321\5N(\2\u031e\u0320")
        buf.write("\t\2\2\2\u031f\u031e\3\2\2\2\u0320\u0323\3\2\2\2\u0321")
        buf.write("\u031f\3\2\2\2\u0321\u0322\3\2\2\2\u0322\u0324\3\2\2\2")
        buf.write("\u0323\u0321\3\2\2\2\u0324\u0325\7\t\2\2\u0325\'\3\2\2")
        buf.write("\2\u0326\u032a\7/\2\2\u0327\u0329\t\2\2\2\u0328\u0327")
        buf.write("\3\2\2\2\u0329\u032c\3\2\2\2\u032a\u0328\3\2\2\2\u032a")
        buf.write("\u032b\3\2\2\2\u032b\u032d\3\2\2\2\u032c\u032a\3\2\2\2")
        buf.write("\u032d\u0331\7\4\2\2\u032e\u0330\t\2\2\2\u032f\u032e\3")
        buf.write("\2\2\2\u0330\u0333\3\2\2\2\u0331\u032f\3\2\2\2\u0331\u0332")
        buf.write("\3\2\2\2\u0332\u034e\3\2\2\2\u0333\u0331\3\2\2\2\u0334")
        buf.write("\u0338\5N(\2\u0335\u0337\t\2\2\2\u0336\u0335\3\2\2\2\u0337")
        buf.write("\u033a\3\2\2\2\u0338\u0336\3\2\2\2\u0338\u0339\3\2\2\2")
        buf.write("\u0339\u034b\3\2\2\2\u033a\u0338\3\2\2\2\u033b\u033f\7")
        buf.write("\5\2\2\u033c\u033e\t\2\2\2\u033d\u033c\3\2\2\2\u033e\u0341")
        buf.write("\3\2\2\2\u033f\u033d\3\2\2\2\u033f\u0340\3\2\2\2\u0340")
        buf.write("\u0342\3\2\2\2\u0341\u033f\3\2\2\2\u0342\u0346\5N(\2\u0343")
        buf.write("\u0345\t\2\2\2\u0344\u0343\3\2\2\2\u0345\u0348\3\2\2\2")
        buf.write("\u0346\u0344\3\2\2\2\u0346\u0347\3\2\2\2\u0347\u034a\3")
        buf.write("\2\2\2\u0348\u0346\3\2\2\2\u0349\u033b\3\2\2\2\u034a\u034d")
        buf.write("\3\2\2\2\u034b\u0349\3\2\2\2\u034b\u034c\3\2\2\2\u034c")
        buf.write("\u034f\3\2\2\2\u034d\u034b\3\2\2\2\u034e\u0334\3\2\2\2")
        buf.write("\u034e\u034f\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u0351\7")
        buf.write("\6\2\2\u0351)\3\2\2\2\u0352\u0356\7\24\2\2\u0353\u0355")
        buf.write("\t\2\2\2\u0354\u0353\3\2\2\2\u0355\u0358\3\2\2\2\u0356")
        buf.write("\u0354\3\2\2\2\u0356\u0357\3\2\2\2\u0357\u0359\3\2\2\2")
        buf.write("\u0358\u0356\3\2\2\2\u0359\u035d\7\4\2\2\u035a\u035c\t")
        buf.write("\2\2\2\u035b\u035a\3\2\2\2\u035c\u035f\3\2\2\2\u035d\u035b")
        buf.write("\3\2\2\2\u035d\u035e\3\2\2\2\u035e\u0360\3\2\2\2\u035f")
        buf.write("\u035d\3\2\2\2\u0360\u0364\5N(\2\u0361\u0363\t\2\2\2\u0362")
        buf.write("\u0361\3\2\2\2\u0363\u0366\3\2\2\2\u0364\u0362\3\2\2\2")
        buf.write("\u0364\u0365\3\2\2\2\u0365\u0367\3\2\2\2\u0366\u0364\3")
        buf.write("\2\2\2\u0367\u0368\7\6\2\2\u0368+\3\2\2\2\u0369\u036d")
        buf.write("\7\25\2\2\u036a\u036c\t\2\2\2\u036b\u036a\3\2\2\2\u036c")
        buf.write("\u036f\3\2\2\2\u036d\u036b\3\2\2\2\u036d\u036e\3\2\2\2")
        buf.write("\u036e\u0370\3\2\2\2\u036f\u036d\3\2\2\2\u0370\u0374\7")
        buf.write("\4\2\2\u0371\u0373\t\2\2\2\u0372\u0371\3\2\2\2\u0373\u0376")
        buf.write("\3\2\2\2\u0374\u0372\3\2\2\2\u0374\u0375\3\2\2\2\u0375")
        buf.write("\u0377\3\2\2\2\u0376\u0374\3\2\2\2\u0377\u037b\5N(\2\u0378")
        buf.write("\u037a\t\2\2\2\u0379\u0378\3\2\2\2\u037a\u037d\3\2\2\2")
        buf.write("\u037b\u0379\3\2\2\2\u037b\u037c\3\2\2\2\u037c\u037e\3")
        buf.write("\2\2\2\u037d\u037b\3\2\2\2\u037e\u037f\7\6\2\2\u037f-")
        buf.write("\3\2\2\2\u0380\u0384\7\26\2\2\u0381\u0383\t\2\2\2\u0382")
        buf.write("\u0381\3\2\2\2\u0383\u0386\3\2\2\2\u0384\u0382\3\2\2\2")
        buf.write("\u0384\u0385\3\2\2\2\u0385\u0387\3\2\2\2\u0386\u0384\3")
        buf.write("\2\2\2\u0387\u038b\7\4\2\2\u0388\u038a\t\2\2\2\u0389\u0388")
        buf.write("\3\2\2\2\u038a\u038d\3\2\2\2\u038b\u0389\3\2\2\2\u038b")
        buf.write("\u038c\3\2\2\2\u038c\u038e\3\2\2\2\u038d\u038b\3\2\2\2")
        buf.write("\u038e\u0392\5N(\2\u038f\u0391\t\2\2\2\u0390\u038f\3\2")
        buf.write("\2\2\u0391\u0394\3\2\2\2\u0392\u0390\3\2\2\2\u0392\u0393")
        buf.write("\3\2\2\2\u0393\u0395\3\2\2\2\u0394\u0392\3\2\2\2\u0395")
        buf.write("\u0399\7\5\2\2\u0396\u0398\t\2\2\2\u0397\u0396\3\2\2\2")
        buf.write("\u0398\u039b\3\2\2\2\u0399\u0397\3\2\2\2\u0399\u039a\3")
        buf.write("\2\2\2\u039a\u039c\3\2\2\2\u039b\u0399\3\2\2\2\u039c\u03a0")
        buf.write("\5N(\2\u039d\u039f\t\2\2\2\u039e\u039d\3\2\2\2\u039f\u03a2")
        buf.write("\3\2\2\2\u03a0\u039e\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1")
        buf.write("\u03a3\3\2\2\2\u03a2\u03a0\3\2\2\2\u03a3\u03a4\7\6\2\2")
        buf.write("\u03a4/\3\2\2\2\u03a5\u03a9\7\27\2\2\u03a6\u03a8\t\2\2")
        buf.write("\2\u03a7\u03a6\3\2\2\2\u03a8\u03ab\3\2\2\2\u03a9\u03a7")
        buf.write("\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03ac\3\2\2\2\u03ab")
        buf.write("\u03a9\3\2\2\2\u03ac\u03b0\7\4\2\2\u03ad\u03af\t\2\2\2")
        buf.write("\u03ae\u03ad\3\2\2\2\u03af\u03b2\3\2\2\2\u03b0\u03ae\3")
        buf.write("\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03b3\3\2\2\2\u03b2\u03b0")
        buf.write("\3\2\2\2\u03b3\u03b7\5N(\2\u03b4\u03b6\t\2\2\2\u03b5\u03b4")
        buf.write("\3\2\2\2\u03b6\u03b9\3\2\2\2\u03b7\u03b5\3\2\2\2\u03b7")
        buf.write("\u03b8\3\2\2\2\u03b8\u03ba\3\2\2\2\u03b9\u03b7\3\2\2\2")
        buf.write("\u03ba\u03bb\7\6\2\2\u03bb\61\3\2\2\2\u03bc\u03c0\7\30")
        buf.write("\2\2\u03bd\u03bf\t\2\2\2\u03be\u03bd\3\2\2\2\u03bf\u03c2")
        buf.write("\3\2\2\2\u03c0\u03be\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1")
        buf.write("\u03c3\3\2\2\2\u03c2\u03c0\3\2\2\2\u03c3\u03c7\7\4\2\2")
        buf.write("\u03c4\u03c6\t\2\2\2\u03c5\u03c4\3\2\2\2\u03c6\u03c9\3")
        buf.write("\2\2\2\u03c7\u03c5\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\u03ca")
        buf.write("\3\2\2\2\u03c9\u03c7\3\2\2\2\u03ca\u03ce\5N(\2\u03cb\u03cd")
        buf.write("\t\2\2\2\u03cc\u03cb\3\2\2\2\u03cd\u03d0\3\2\2\2\u03ce")
        buf.write("\u03cc\3\2\2\2\u03ce\u03cf\3\2\2\2\u03cf\u03d1\3\2\2\2")
        buf.write("\u03d0\u03ce\3\2\2\2\u03d1\u03d5\7\5\2\2\u03d2\u03d4\t")
        buf.write("\2\2\2\u03d3\u03d2\3\2\2\2\u03d4\u03d7\3\2\2\2\u03d5\u03d3")
        buf.write("\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6\u03d8\3\2\2\2\u03d7")
        buf.write("\u03d5\3\2\2\2\u03d8\u03dc\5N(\2\u03d9\u03db\t\2\2\2\u03da")
        buf.write("\u03d9\3\2\2\2\u03db\u03de\3\2\2\2\u03dc\u03da\3\2\2\2")
        buf.write("\u03dc\u03dd\3\2\2\2\u03dd\u03df\3\2\2\2\u03de\u03dc\3")
        buf.write("\2\2\2\u03df\u03e0\7\6\2\2\u03e0\63\3\2\2\2\u03e1\u03e5")
        buf.write("\7\31\2\2\u03e2\u03e4\t\2\2\2\u03e3\u03e2\3\2\2\2\u03e4")
        buf.write("\u03e7\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e5\u03e6\3\2\2\2")
        buf.write("\u03e6\u03e8\3\2\2\2\u03e7\u03e5\3\2\2\2\u03e8\u03ec\7")
        buf.write("\4\2\2\u03e9\u03eb\t\2\2\2\u03ea\u03e9\3\2\2\2\u03eb\u03ee")
        buf.write("\3\2\2\2\u03ec\u03ea\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed")
        buf.write("\u03ef\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ef\u03f3\5N(\2\u03f0")
        buf.write("\u03f2\t\2\2\2\u03f1\u03f0\3\2\2\2\u03f2\u03f5\3\2\2\2")
        buf.write("\u03f3\u03f1\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f6\3")
        buf.write("\2\2\2\u03f5\u03f3\3\2\2\2\u03f6\u03fa\7\5\2\2\u03f7\u03f9")
        buf.write("\t\2\2\2\u03f8\u03f7\3\2\2\2\u03f9\u03fc\3\2\2\2\u03fa")
        buf.write("\u03f8\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fd\3\2\2\2")
        buf.write("\u03fc\u03fa\3\2\2\2\u03fd\u0401\5N(\2\u03fe\u0400\t\2")
        buf.write("\2\2\u03ff\u03fe\3\2\2\2\u0400\u0403\3\2\2\2\u0401\u03ff")
        buf.write("\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u0404\3\2\2\2\u0403")
        buf.write("\u0401\3\2\2\2\u0404\u0405\7\6\2\2\u0405\65\3\2\2\2\u0406")
        buf.write("\u040a\7\32\2\2\u0407\u0409\t\2\2\2\u0408\u0407\3\2\2")
        buf.write("\2\u0409\u040c\3\2\2\2\u040a\u0408\3\2\2\2\u040a\u040b")
        buf.write("\3\2\2\2\u040b\u040d\3\2\2\2\u040c\u040a\3\2\2\2\u040d")
        buf.write("\u0411\7\4\2\2\u040e\u0410\t\2\2\2\u040f\u040e\3\2\2\2")
        buf.write("\u0410\u0413\3\2\2\2\u0411\u040f\3\2\2\2\u0411\u0412\3")
        buf.write("\2\2\2\u0412\u0414\3\2\2\2\u0413\u0411\3\2\2\2\u0414\u0418")
        buf.write("\5N(\2\u0415\u0417\t\2\2\2\u0416\u0415\3\2\2\2\u0417\u041a")
        buf.write("\3\2\2\2\u0418\u0416\3\2\2\2\u0418\u0419\3\2\2\2\u0419")
        buf.write("\u041b\3\2\2\2\u041a\u0418\3\2\2\2\u041b\u041f\7\5\2\2")
        buf.write("\u041c\u041e\t\2\2\2\u041d\u041c\3\2\2\2\u041e\u0421\3")
        buf.write("\2\2\2\u041f\u041d\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u0422")
        buf.write("\3\2\2\2\u0421\u041f\3\2\2\2\u0422\u0426\5N(\2\u0423\u0425")
        buf.write("\t\2\2\2\u0424\u0423\3\2\2\2\u0425\u0428\3\2\2\2\u0426")
        buf.write("\u0424\3\2\2\2\u0426\u0427\3\2\2\2\u0427\u0429\3\2\2\2")
        buf.write("\u0428\u0426\3\2\2\2\u0429\u042a\7\6\2\2\u042a\67\3\2")
        buf.write("\2\2\u042b\u042f\7\33\2\2\u042c\u042e\t\2\2\2\u042d\u042c")
        buf.write("\3\2\2\2\u042e\u0431\3\2\2\2\u042f\u042d\3\2\2\2\u042f")
        buf.write("\u0430\3\2\2\2\u0430\u0432\3\2\2\2\u0431\u042f\3\2\2\2")
        buf.write("\u0432\u0436\7\4\2\2\u0433\u0435\t\2\2\2\u0434\u0433\3")
        buf.write("\2\2\2\u0435\u0438\3\2\2\2\u0436\u0434\3\2\2\2\u0436\u0437")
        buf.write("\3\2\2\2\u0437\u0439\3\2\2\2\u0438\u0436\3\2\2\2\u0439")
        buf.write("\u043d\5N(\2\u043a\u043c\t\2\2\2\u043b\u043a\3\2\2\2\u043c")
        buf.write("\u043f\3\2\2\2\u043d\u043b\3\2\2\2\u043d\u043e\3\2\2\2")
        buf.write("\u043e\u0440\3\2\2\2\u043f\u043d\3\2\2\2\u0440\u0444\7")
        buf.write("\5\2\2\u0441\u0443\t\2\2\2\u0442\u0441\3\2\2\2\u0443\u0446")
        buf.write("\3\2\2\2\u0444\u0442\3\2\2\2\u0444\u0445\3\2\2\2\u0445")
        buf.write("\u0447\3\2\2\2\u0446\u0444\3\2\2\2\u0447\u044b\5N(\2\u0448")
        buf.write("\u044a\t\2\2\2\u0449\u0448\3\2\2\2\u044a\u044d\3\2\2\2")
        buf.write("\u044b\u0449\3\2\2\2\u044b\u044c\3\2\2\2\u044c\u044e\3")
        buf.write("\2\2\2\u044d\u044b\3\2\2\2\u044e\u044f\7\6\2\2\u044f9")
        buf.write("\3\2\2\2\u0450\u0454\7&\2\2\u0451\u0453\t\2\2\2\u0452")
        buf.write("\u0451\3\2\2\2\u0453\u0456\3\2\2\2\u0454\u0452\3\2\2\2")
        buf.write("\u0454\u0455\3\2\2\2\u0455\u0457\3\2\2\2\u0456\u0454\3")
        buf.write("\2\2\2\u0457\u045b\7\4\2\2\u0458\u045a\t\2\2\2\u0459\u0458")
        buf.write("\3\2\2\2\u045a\u045d\3\2\2\2\u045b\u0459\3\2\2\2\u045b")
        buf.write("\u045c\3\2\2\2\u045c\u045e\3\2\2\2\u045d\u045b\3\2\2\2")
        buf.write("\u045e\u0462\5N(\2\u045f\u0461\t\2\2\2\u0460\u045f\3\2")
        buf.write("\2\2\u0461\u0464\3\2\2\2\u0462\u0460\3\2\2\2\u0462\u0463")
        buf.write("\3\2\2\2\u0463\u0465\3\2\2\2\u0464\u0462\3\2\2\2\u0465")
        buf.write("\u0466\7\6\2\2\u0466;\3\2\2\2\u0467\u046b\7\34\2\2\u0468")
        buf.write("\u046a\t\2\2\2\u0469\u0468\3\2\2\2\u046a\u046d\3\2\2\2")
        buf.write("\u046b\u0469\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u046e\3")
        buf.write("\2\2\2\u046d\u046b\3\2\2\2\u046e\u0472\7\4\2\2\u046f\u0471")
        buf.write("\t\2\2\2\u0470\u046f\3\2\2\2\u0471\u0474\3\2\2\2\u0472")
        buf.write("\u0470\3\2\2\2\u0472\u0473\3\2\2\2\u0473\u0475\3\2\2\2")
        buf.write("\u0474\u0472\3\2\2\2\u0475\u0479\5N(\2\u0476\u0478\t\2")
        buf.write("\2\2\u0477\u0476\3\2\2\2\u0478\u047b\3\2\2\2\u0479\u0477")
        buf.write("\3\2\2\2\u0479\u047a\3\2\2\2\u047a\u047c\3\2\2\2\u047b")
        buf.write("\u0479\3\2\2\2\u047c\u047d\7\6\2\2\u047d=\3\2\2\2\u047e")
        buf.write("\u0482\7\35\2\2\u047f\u0481\t\2\2\2\u0480\u047f\3\2\2")
        buf.write("\2\u0481\u0484\3\2\2\2\u0482\u0480\3\2\2\2\u0482\u0483")
        buf.write("\3\2\2\2\u0483\u0485\3\2\2\2\u0484\u0482\3\2\2\2\u0485")
        buf.write("\u0489\7\4\2\2\u0486\u0488\t\2\2\2\u0487\u0486\3\2\2\2")
        buf.write("\u0488\u048b\3\2\2\2\u0489\u0487\3\2\2\2\u0489\u048a\3")
        buf.write("\2\2\2\u048a\u049c\3\2\2\2\u048b\u0489\3\2\2\2\u048c\u0490")
        buf.write("\5N(\2\u048d\u048f\t\2\2\2\u048e\u048d\3\2\2\2\u048f\u0492")
        buf.write("\3\2\2\2\u0490\u048e\3\2\2\2\u0490\u0491\3\2\2\2\u0491")
        buf.write("\u0493\3\2\2\2\u0492\u0490\3\2\2\2\u0493\u0497\7\5\2\2")
        buf.write("\u0494\u0496\t\2\2\2\u0495\u0494\3\2\2\2\u0496\u0499\3")
        buf.write("\2\2\2\u0497\u0495\3\2\2\2\u0497\u0498\3\2\2\2\u0498\u049b")
        buf.write("\3\2\2\2\u0499\u0497\3\2\2\2\u049a\u048c\3\2\2\2\u049b")
        buf.write("\u049e\3\2\2\2\u049c\u049a\3\2\2\2\u049c\u049d\3\2\2\2")
        buf.write("\u049d\u049f\3\2\2\2\u049e\u049c\3\2\2\2\u049f\u04a3\5")
        buf.write("N(\2\u04a0\u04a2\t\2\2\2\u04a1\u04a0\3\2\2\2\u04a2\u04a5")
        buf.write("\3\2\2\2\u04a3\u04a1\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4")
        buf.write("\u04a6\3\2\2\2\u04a5\u04a3\3\2\2\2\u04a6\u04a7\7\6\2\2")
        buf.write("\u04a7?\3\2\2\2\u04a8\u04ac\7 \2\2\u04a9\u04ab\t\2\2\2")
        buf.write("\u04aa\u04a9\3\2\2\2\u04ab\u04ae\3\2\2\2\u04ac\u04aa\3")
        buf.write("\2\2\2\u04ac\u04ad\3\2\2\2\u04ad\u04af\3\2\2\2\u04ae\u04ac")
        buf.write("\3\2\2\2\u04af\u04b3\7\4\2\2\u04b0\u04b2\t\2\2\2\u04b1")
        buf.write("\u04b0\3\2\2\2\u04b2\u04b5\3\2\2\2\u04b3\u04b1\3\2\2\2")
        buf.write("\u04b3\u04b4\3\2\2\2\u04b4\u04b6\3\2\2\2\u04b5\u04b3\3")
        buf.write("\2\2\2\u04b6\u04ba\5N(\2\u04b7\u04b9\t\2\2\2\u04b8\u04b7")
        buf.write("\3\2\2\2\u04b9\u04bc\3\2\2\2\u04ba\u04b8\3\2\2\2\u04ba")
        buf.write("\u04bb\3\2\2\2\u04bb\u04bd\3\2\2\2\u04bc\u04ba\3\2\2\2")
        buf.write("\u04bd\u04be\7\6\2\2\u04beA\3\2\2\2\u04bf\u04c3\7!\2\2")
        buf.write("\u04c0\u04c2\t\2\2\2\u04c1\u04c0\3\2\2\2\u04c2\u04c5\3")
        buf.write("\2\2\2\u04c3\u04c1\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4\u04c6")
        buf.write("\3\2\2\2\u04c5\u04c3\3\2\2\2\u04c6\u04ca\7\4\2\2\u04c7")
        buf.write("\u04c9\t\2\2\2\u04c8\u04c7\3\2\2\2\u04c9\u04cc\3\2\2\2")
        buf.write("\u04ca\u04c8\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\u04cd\3")
        buf.write("\2\2\2\u04cc\u04ca\3\2\2\2\u04cd\u04d1\5N(\2\u04ce\u04d0")
        buf.write("\t\2\2\2\u04cf\u04ce\3\2\2\2\u04d0\u04d3\3\2\2\2\u04d1")
        buf.write("\u04cf\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2\u04d4\3\2\2\2")
        buf.write("\u04d3\u04d1\3\2\2\2\u04d4\u04d5\7\6\2\2\u04d5C\3\2\2")
        buf.write("\2\u04d6\u04da\7%\2\2\u04d7\u04d9\t\2\2\2\u04d8\u04d7")
        buf.write("\3\2\2\2\u04d9\u04dc\3\2\2\2\u04da\u04d8\3\2\2\2\u04da")
        buf.write("\u04db\3\2\2\2\u04db\u04dd\3\2\2\2\u04dc\u04da\3\2\2\2")
        buf.write("\u04dd\u04e1\7\4\2\2\u04de\u04e0\t\2\2\2\u04df\u04de\3")
        buf.write("\2\2\2\u04e0\u04e3\3\2\2\2\u04e1\u04df\3\2\2\2\u04e1\u04e2")
        buf.write("\3\2\2\2\u04e2\u04e4\3\2\2\2\u04e3\u04e1\3\2\2\2\u04e4")
        buf.write("\u04e8\5N(\2\u04e5\u04e7\t\2\2\2\u04e6\u04e5\3\2\2\2\u04e7")
        buf.write("\u04ea\3\2\2\2\u04e8\u04e6\3\2\2\2\u04e8\u04e9\3\2\2\2")
        buf.write("\u04e9\u04eb\3\2\2\2\u04ea\u04e8\3\2\2\2\u04eb\u04ec\7")
        buf.write("\6\2\2\u04ecE\3\2\2\2\u04ed\u04f1\7\36\2\2\u04ee\u04f0")
        buf.write("\t\2\2\2\u04ef\u04ee\3\2\2\2\u04f0\u04f3\3\2\2\2\u04f1")
        buf.write("\u04ef\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f4\3\2\2\2")
        buf.write("\u04f3\u04f1\3\2\2\2\u04f4\u04f8\7\4\2\2\u04f5\u04f7\t")
        buf.write("\2\2\2\u04f6\u04f5\3\2\2\2\u04f7\u04fa\3\2\2\2\u04f8\u04f6")
        buf.write("\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9\u04fb\3\2\2\2\u04fa")
        buf.write("\u04f8\3\2\2\2\u04fb\u04ff\5N(\2\u04fc\u04fe\t\2\2\2\u04fd")
        buf.write("\u04fc\3\2\2\2\u04fe\u0501\3\2\2\2\u04ff\u04fd\3\2\2\2")
        buf.write("\u04ff\u0500\3\2\2\2\u0500\u0502\3\2\2\2\u0501\u04ff\3")
        buf.write("\2\2\2\u0502\u0503\7\6\2\2\u0503G\3\2\2\2\u0504\u0508")
        buf.write("\7\'\2\2\u0505\u0507\t\2\2\2\u0506\u0505\3\2\2\2\u0507")
        buf.write("\u050a\3\2\2\2\u0508\u0506\3\2\2\2\u0508\u0509\3\2\2\2")
        buf.write("\u0509\u050b\3\2\2\2\u050a\u0508\3\2\2\2\u050b\u050f\7")
        buf.write("\4\2\2\u050c\u050e\t\2\2\2\u050d\u050c\3\2\2\2\u050e\u0511")
        buf.write("\3\2\2\2\u050f\u050d\3\2\2\2\u050f\u0510\3\2\2\2\u0510")
        buf.write("\u0512\3\2\2\2\u0511\u050f\3\2\2\2\u0512\u0516\5N(\2\u0513")
        buf.write("\u0515\t\2\2\2\u0514\u0513\3\2\2\2\u0515\u0518\3\2\2\2")
        buf.write("\u0516\u0514\3\2\2\2\u0516\u0517\3\2\2\2\u0517\u0519\3")
        buf.write("\2\2\2\u0518\u0516\3\2\2\2\u0519\u051a\7\6\2\2\u051aI")
        buf.write("\3\2\2\2\u051b\u051f\7(\2\2\u051c\u051e\t\2\2\2\u051d")
        buf.write("\u051c\3\2\2\2\u051e\u0521\3\2\2\2\u051f\u051d\3\2\2\2")
        buf.write("\u051f\u0520\3\2\2\2\u0520\u0522\3\2\2\2\u0521\u051f\3")
        buf.write("\2\2\2\u0522\u0526\7\4\2\2\u0523\u0525\t\2\2\2\u0524\u0523")
        buf.write("\3\2\2\2\u0525\u0528\3\2\2\2\u0526\u0524\3\2\2\2\u0526")
        buf.write("\u0527\3\2\2\2\u0527\u052b\3\2\2\2\u0528\u0526\3\2\2\2")
        buf.write("\u0529\u052c\7/\2\2\u052a\u052c\5L\'\2\u052b\u0529\3\2")
        buf.write("\2\2\u052b\u052a\3\2\2\2\u052c\u0530\3\2\2\2\u052d\u052f")
        buf.write("\t\2\2\2\u052e\u052d\3\2\2\2\u052f\u0532\3\2\2\2\u0530")
        buf.write("\u052e\3\2\2\2\u0530\u0531\3\2\2\2\u0531\u0533\3\2\2\2")
        buf.write("\u0532\u0530\3\2\2\2\u0533\u0534\7\6\2\2\u0534K\3\2\2")
        buf.write("\2\u0535\u0539\7\b\2\2\u0536\u0538\t\2\2\2\u0537\u0536")
        buf.write("\3\2\2\2\u0538\u053b\3\2\2\2\u0539\u0537\3\2\2\2\u0539")
        buf.write("\u053a\3\2\2\2\u053a\u0556\3\2\2\2\u053b\u0539\3\2\2\2")
        buf.write("\u053c\u054d\5N(\2\u053d\u053f\t\2\2\2\u053e\u053d\3\2")
        buf.write("\2\2\u053f\u0542\3\2\2\2\u0540\u053e\3\2\2\2\u0540\u0541")
        buf.write("\3\2\2\2\u0541\u0543\3\2\2\2\u0542\u0540\3\2\2\2\u0543")
        buf.write("\u0547\7\5\2\2\u0544\u0546\t\2\2\2\u0545\u0544\3\2\2\2")
        buf.write("\u0546\u0549\3\2\2\2\u0547\u0545\3\2\2\2\u0547\u0548\3")
        buf.write("\2\2\2\u0548\u054a\3\2\2\2\u0549\u0547\3\2\2\2\u054a\u054c")
        buf.write("\5N(\2\u054b\u0540\3\2\2\2\u054c\u054f\3\2\2\2\u054d\u054b")
        buf.write("\3\2\2\2\u054d\u054e\3\2\2\2\u054e\u0553\3\2\2\2\u054f")
        buf.write("\u054d\3\2\2\2\u0550\u0552\t\2\2\2\u0551\u0550\3\2\2\2")
        buf.write("\u0552\u0555\3\2\2\2\u0553\u0551\3\2\2\2\u0553\u0554\3")
        buf.write("\2\2\2\u0554\u0557\3\2\2\2\u0555\u0553\3\2\2\2\u0556\u053c")
        buf.write("\3\2\2\2\u0556\u0557\3\2\2\2\u0557\u0558\3\2\2\2\u0558")
        buf.write("\u0559\7\t\2\2\u0559M\3\2\2\2\u055a\u055b\t\3\2\2\u055b")
        buf.write("O\3\2\2\2\u00ceSZahotx}\177\u0081\u0088\u008c\u0090\u0092")
        buf.write("\u0094\u0099\u009d\u00a5\u00ab\u00b2\u00b9\u00c0\u00c7")
        buf.write("\u00cc\u00cf\u00d5\u00dc\u00e2\u00e9\u00f0\u00f7\u00fc")
        buf.write("\u0102\u0104\u0106\u010d\u0111\u0114\u0119\u011b\u0122")
        buf.write("\u0128\u012e\u0134\u013a\u0140\u0146\u014d\u0154\u015b")
        buf.write("\u0160\u0166\u0168\u016a\u0171\u0178\u017a\u0180\u0182")
        buf.write("\u0184\u018c\u0192\u0198\u019e\u01a5\u01ac\u01b3\u01b8")
        buf.write("\u01be\u01c0\u01c2\u01c9\u01d0\u01d2\u01d8\u01da\u01dc")
        buf.write("\u01e5\u01e9\u01f1\u01f7\u01fd\u0203\u020a\u0211\u0218")
        buf.write("\u021d\u0223\u0225\u0227\u022e\u0235\u0237\u023d\u023f")
        buf.write("\u0241\u0247\u0250\u0256\u025d\u0264\u026b\u0270\u0276")
        buf.write("\u0278\u027a\u0281\u0288\u028a\u0290\u0292\u0294\u0299")
        buf.write("\u029f\u02a6\u02b2\u02b8\u02bf\u02da\u02f3\u02f9\u0300")
        buf.write("\u0309\u0310\u031a\u0321\u032a\u0331\u0338\u033f\u0346")
        buf.write("\u034b\u034e\u0356\u035d\u0364\u036d\u0374\u037b\u0384")
        buf.write("\u038b\u0392\u0399\u03a0\u03a9\u03b0\u03b7\u03c0\u03c7")
        buf.write("\u03ce\u03d5\u03dc\u03e5\u03ec\u03f3\u03fa\u0401\u040a")
        buf.write("\u0411\u0418\u041f\u0426\u042f\u0436\u043d\u0444\u044b")
        buf.write("\u0454\u045b\u0462\u046b\u0472\u0479\u0482\u0489\u0490")
        buf.write("\u0497\u049c\u04a3\u04ac\u04b3\u04ba\u04c3\u04ca\u04d1")
        buf.write("\u04da\u04e1\u04e8\u04f1\u04f8\u04ff\u0508\u050f\u0516")
        buf.write("\u051f\u0526\u052b\u0530\u0539\u0540\u0547\u054d\u0553")
        buf.write("\u0556")
        return buf.getvalue()


class WordlifyParser ( Parser ):

    grammarFileName = "Wordlify.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'('", "','", "')'", "'='", "'['", 
                     "']'", "'fn'", "'while'", "'foreach'", "'in'", "'do'", 
                     "'if'", "'then'", "'else'", "'begin'", "'end'", "'exist'", 
                     "'print'", "'rename'", "'remove'", "'move'", "'copy'", 
                     "'download'", "'write'", "'wait'", "'execute'", "'exit'", 
                     "'time'", "'getFiles'", "'dateModified'", "'file'", 
                     "'folder'", "'args'", "'size'", "'read'", "'create'", 
                     "'length'", "'<-'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "FN", "WHILE", "FOREACH", "IN", "DO", "IF", "THEN", 
                      "ELSE", "BEGIN", "END", "EXIST", "PRINT", "RENAME", 
                      "REMOVE", "MOVE", "COPY", "DOWNLOAD", "WRITE", "WAIT", 
                      "EXECUTE", "EXIT", "TIME", "GET_FILES", "DATE_MODIFIED", 
                      "FILE", "FOLDER", "ARGS", "SIZE", "READ", "CREATE", 
                      "LENGTH", "APPEND", "CMP_OP", "ARITH_OP", "LOG_OP", 
                      "BOOL", "STR", "ID", "NUM", "WS", "NL", "END_COMMENT" ]

    RULE_program = 0
    RULE_fn_def = 1
    RULE_block_instr = 2
    RULE_foreach = 3
    RULE_while_instr = 4
    RULE_if_instr = 5
    RULE_if_cond = 6
    RULE_then = 7
    RULE_else_if = 8
    RULE_else_block = 9
    RULE_cond = 10
    RULE_comparison = 11
    RULE_expr = 12
    RULE_arith_expr = 13
    RULE_fn_call = 14
    RULE_atom_instr = 15
    RULE_assign = 16
    RULE_array_append = 17
    RULE_array_elem = 18
    RULE_own_fn_call = 19
    RULE_exist = 20
    RULE_print_instr = 21
    RULE_rename = 22
    RULE_remove = 23
    RULE_move = 24
    RULE_copy = 25
    RULE_download = 26
    RULE_write = 27
    RULE_read = 28
    RULE_wait_instr = 29
    RULE_execute = 30
    RULE_get_files = 31
    RULE_date_modified = 32
    RULE_size = 33
    RULE_exit = 34
    RULE_create = 35
    RULE_length = 36
    RULE_array = 37
    RULE_value_or_id = 38

    ruleNames =  [ "program", "fn_def", "block_instr", "foreach", "while_instr", 
                   "if_instr", "if_cond", "then", "else_if", "else_block", 
                   "cond", "comparison", "expr", "arith_expr", "fn_call", 
                   "atom_instr", "assign", "array_append", "array_elem", 
                   "own_fn_call", "exist", "print_instr", "rename", "remove", 
                   "move", "copy", "download", "write", "read", "wait_instr", 
                   "execute", "get_files", "date_modified", "size", "exit", 
                   "create", "length", "array", "value_or_id" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    FN=8
    WHILE=9
    FOREACH=10
    IN=11
    DO=12
    IF=13
    THEN=14
    ELSE=15
    BEGIN=16
    END=17
    EXIST=18
    PRINT=19
    RENAME=20
    REMOVE=21
    MOVE=22
    COPY=23
    DOWNLOAD=24
    WRITE=25
    WAIT=26
    EXECUTE=27
    EXIT=28
    TIME=29
    GET_FILES=30
    DATE_MODIFIED=31
    FILE=32
    FOLDER=33
    ARGS=34
    SIZE=35
    READ=36
    CREATE=37
    LENGTH=38
    APPEND=39
    CMP_OP=40
    ARITH_OP=41
    LOG_OP=42
    BOOL=43
    STR=44
    ID=45
    NUM=46
    WS=47
    NL=48
    END_COMMENT=49

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(WordlifyParser.EOF, 0)

        def END_COMMENT(self):
            return self.getToken(WordlifyParser.END_COMMENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def fn_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Fn_defContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Fn_defContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = WordlifyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 81
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 78
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 83
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.FN) | (1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 127
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 125
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                        if la_ == 1:
                            self.state = 84
                            self.atom_instr()
                            self.state = 88
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 85
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 90
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 91
                            self.match(WordlifyParser.T__0)
                            self.state = 95
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 92
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 97
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 98
                            self.atom_instr()
                            self.state = 112 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 102
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 99
                                    self.match(WordlifyParser.WS)
                                    self.state = 104
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 105
                                self.match(WordlifyParser.NL)
                                self.state = 109
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 106
                                        self.match(WordlifyParser.WS) 
                                    self.state = 111
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                                self.state = 114 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 118
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                                self.state = 116
                                self.block_instr()
                                pass
                            elif token in [WordlifyParser.FN]:
                                self.state = 117
                                self.fn_def()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 121 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 120
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 123 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 129
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                self.state = 144
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 130
                    self.atom_instr()
                    self.state = 134
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 131
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 136
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                    self.state = 138
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==WordlifyParser.T__0:
                        self.state = 137
                        self.match(WordlifyParser.T__0)


                    pass
                elif token in [WordlifyParser.FN, WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 142
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 140
                        self.block_instr()
                        pass
                    elif token in [WordlifyParser.FN]:
                        self.state = 141
                        self.fn_def()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 148
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 153
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.END_COMMENT:
                self.state = 154
                self.match(WordlifyParser.END_COMMENT)


            self.state = 157
            self.match(WordlifyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FN(self):
            return self.getToken(WordlifyParser.FN, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def BEGIN(self):
            return self.getToken(WordlifyParser.BEGIN, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_def" ):
                listener.enterFn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_def" ):
                listener.exitFn_def(self)




    def fn_def(self):

        localctx = WordlifyParser.Fn_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fn_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 159
            self.match(WordlifyParser.FN)
            self.state = 161 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 160
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 163 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 165
            self.match(WordlifyParser.ID)
            self.state = 169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 166
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 171
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 172
            self.match(WordlifyParser.T__1)
            self.state = 176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 173
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 178
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.ID:
                self.state = 179
                self.match(WordlifyParser.ID)
                self.state = 183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 180
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 185
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.T__2:
                    self.state = 186
                    self.match(WordlifyParser.T__2)
                    self.state = 190
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 187
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 192
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 193
                    self.match(WordlifyParser.ID)
                    self.state = 197
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 194
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 199
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 204
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 207
            self.match(WordlifyParser.T__3)
            self.state = 211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 208
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 213
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 214
            self.match(WordlifyParser.BEGIN)
            self.state = 216 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 215
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 218 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 260
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 258
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                        if la_ == 1:
                            self.state = 220
                            self.atom_instr()
                            self.state = 224
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 221
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 226
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 227
                            self.match(WordlifyParser.T__0)
                            self.state = 231
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 228
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 233
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 234
                            self.atom_instr()
                            self.state = 248 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 238
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 235
                                    self.match(WordlifyParser.WS)
                                    self.state = 240
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 241
                                self.match(WordlifyParser.NL)
                                self.state = 245
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 242
                                        self.match(WordlifyParser.WS) 
                                    self.state = 247
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                                self.state = 250 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 252
                            self.block_instr()
                            self.state = 254 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 253
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 256 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 262
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                self.state = 274
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 263
                    self.atom_instr()
                    self.state = 267
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 264
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 269
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                    self.state = 271
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==WordlifyParser.T__0:
                        self.state = 270
                        self.match(WordlifyParser.T__0)


                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 273
                    self.block_instr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 277 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 276
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 279 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break



            self.state = 283
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_instr(self):
            return self.getTypedRuleContext(WordlifyParser.If_instrContext,0)


        def while_instr(self):
            return self.getTypedRuleContext(WordlifyParser.While_instrContext,0)


        def foreach(self):
            return self.getTypedRuleContext(WordlifyParser.ForeachContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_block_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_instr" ):
                listener.enterBlock_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_instr" ):
                listener.exitBlock_instr(self)




    def block_instr(self):

        localctx = WordlifyParser.Block_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block_instr)
        try:
            self.state = 288
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 285
                self.if_instr()
                pass
            elif token in [WordlifyParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 286
                self.while_instr()
                pass
            elif token in [WordlifyParser.FOREACH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 287
                self.foreach()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeachContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(WordlifyParser.FOREACH, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def IN(self):
            return self.getToken(WordlifyParser.IN, 0)

        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_foreach

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeach" ):
                listener.enterForeach(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeach" ):
                listener.exitForeach(self)




    def foreach(self):

        localctx = WordlifyParser.ForeachContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_foreach)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.match(WordlifyParser.FOREACH)
            self.state = 292 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 291
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 294 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 296
            self.match(WordlifyParser.ID)
            self.state = 298 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 297
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 300 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 302
            self.match(WordlifyParser.IN)
            self.state = 304 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 303
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 306 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 308
            self.match(WordlifyParser.ID)
            self.state = 310 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 309
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 312 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 314
            self.match(WordlifyParser.DO)
            self.state = 316 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 315
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 318 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 358
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                        if la_ == 1:
                            self.state = 320
                            self.atom_instr()
                            self.state = 324
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 321
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 326
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 327
                            self.match(WordlifyParser.T__0)
                            self.state = 331
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 328
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 333
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 334
                            self.atom_instr()
                            self.state = 348 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 338
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 335
                                    self.match(WordlifyParser.WS)
                                    self.state = 340
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 341
                                self.match(WordlifyParser.NL)
                                self.state = 345
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 342
                                        self.match(WordlifyParser.WS) 
                                    self.state = 347
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                                self.state = 350 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 352
                            self.block_instr()
                            self.state = 354 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 353
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 356 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 362
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

                self.state = 384
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 363
                    self.atom_instr()
                    self.state = 367
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 364
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 369
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

                    self.state = 376
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 370
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 372 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 371
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 374 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 378
                    self.block_instr()
                    self.state = 380 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 379
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 382 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 388
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(WordlifyParser.WHILE, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_while_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_instr" ):
                listener.enterWhile_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_instr" ):
                listener.exitWhile_instr(self)




    def while_instr(self):

        localctx = WordlifyParser.While_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_while_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(WordlifyParser.WHILE)
            self.state = 392 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 391
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 394 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 396
            self.cond()
            self.state = 398 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 397
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 400 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 402
            self.match(WordlifyParser.DO)
            self.state = 404 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 403
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 406 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 448
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 446
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                        if la_ == 1:
                            self.state = 408
                            self.atom_instr()
                            self.state = 412
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 409
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 414
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 415
                            self.match(WordlifyParser.T__0)
                            self.state = 419
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 416
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 421
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 422
                            self.atom_instr()
                            self.state = 436 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 426
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 423
                                    self.match(WordlifyParser.WS)
                                    self.state = 428
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 429
                                self.match(WordlifyParser.NL)
                                self.state = 433
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 430
                                        self.match(WordlifyParser.WS) 
                                    self.state = 435
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

                                self.state = 438 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 440
                            self.block_instr()
                            self.state = 442 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 441
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 444 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 450
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

                self.state = 472
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 451
                    self.atom_instr()
                    self.state = 455
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 452
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 457
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                    self.state = 464
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 458
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 460 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 459
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 462 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 466
                    self.block_instr()
                    self.state = 468 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 467
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 470 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 476
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def else_if(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Else_ifContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Else_ifContext,i)


        def else_block(self):
            return self.getTypedRuleContext(WordlifyParser.Else_blockContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_if_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_instr" ):
                listener.enterIf_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_instr" ):
                listener.exitIf_instr(self)




    def if_instr(self):

        localctx = WordlifyParser.If_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_if_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.if_cond()
            self.state = 479
            self.then()
            self.state = 483
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 480
                    self.else_if() 
                self.state = 485
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.ELSE:
                self.state = 486
                self.else_block()


            self.state = 489
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(WordlifyParser.IF, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_if_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_cond" ):
                listener.enterIf_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_cond" ):
                listener.exitIf_cond(self)




    def if_cond(self):

        localctx = WordlifyParser.If_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_if_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(WordlifyParser.IF)
            self.state = 493 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 492
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 495 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 497
            self.cond()
            self.state = 499 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 498
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 501 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEN(self):
            return self.getToken(WordlifyParser.THEN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_then

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThen" ):
                listener.enterThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThen" ):
                listener.exitThen(self)




    def then(self):

        localctx = WordlifyParser.ThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_then)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(WordlifyParser.THEN)
            self.state = 505 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 504
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 507 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 549
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 547
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                        if la_ == 1:
                            self.state = 509
                            self.atom_instr()
                            self.state = 513
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 510
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 515
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 516
                            self.match(WordlifyParser.T__0)
                            self.state = 520
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 517
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 522
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 523
                            self.atom_instr()
                            self.state = 537 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 527
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 524
                                    self.match(WordlifyParser.WS)
                                    self.state = 529
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 530
                                self.match(WordlifyParser.NL)
                                self.state = 534
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 531
                                        self.match(WordlifyParser.WS) 
                                    self.state = 536
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

                                self.state = 539 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 541
                            self.block_instr()
                            self.state = 543 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 542
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 545 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 551
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                self.state = 573
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 552
                    self.atom_instr()
                    self.state = 556
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 553
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 558
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                    self.state = 565
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 559
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 561 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 560
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 563 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 567
                    self.block_instr()
                    self.state = 569 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 568
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 571 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_else_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_if" ):
                listener.enterElse_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_if" ):
                listener.exitElse_if(self)




    def else_if(self):

        localctx = WordlifyParser.Else_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_else_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(WordlifyParser.ELSE)
            self.state = 579 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 578
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 581 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 583
            self.if_cond()
            self.state = 584
            self.then()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_else_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_block" ):
                listener.enterElse_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_block" ):
                listener.exitElse_block(self)




    def else_block(self):

        localctx = WordlifyParser.Else_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_else_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(WordlifyParser.ELSE)
            self.state = 588 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 587
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 590 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 632
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 630
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                        if la_ == 1:
                            self.state = 592
                            self.atom_instr()
                            self.state = 596
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 593
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 598
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 599
                            self.match(WordlifyParser.T__0)
                            self.state = 603
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 600
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 605
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 606
                            self.atom_instr()
                            self.state = 620 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 610
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 607
                                    self.match(WordlifyParser.WS)
                                    self.state = 612
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 613
                                self.match(WordlifyParser.NL)
                                self.state = 617
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 614
                                        self.match(WordlifyParser.WS) 
                                    self.state = 619
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

                                self.state = 622 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 624
                            self.block_instr()
                            self.state = 626 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 625
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 628 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 634
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                self.state = 656
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 635
                    self.atom_instr()
                    self.state = 639
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 636
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 641
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

                    self.state = 648
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 642
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 644 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 643
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 646 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 650
                    self.block_instr()
                    self.state = 652 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 651
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 654 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def comparison(self):
            return self.getTypedRuleContext(WordlifyParser.ComparisonContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)




    def cond(self):

        localctx = WordlifyParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_cond)
        try:
            self.state = 663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 660
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 661
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 662
                self.comparison()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def CMP_OP(self):
            return self.getToken(WordlifyParser.CMP_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = WordlifyParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.expr()
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 666
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 672
            self.match(WordlifyParser.CMP_OP)
            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 673
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 679
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def arith_expr(self):
            return self.getTypedRuleContext(WordlifyParser.Arith_exprContext,0)


        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def array_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Array_elemContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = WordlifyParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_expr)
        try:
            self.state = 688
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 681
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 682
                self.match(WordlifyParser.STR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 683
                self.match(WordlifyParser.NUM)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 684
                self.match(WordlifyParser.ID)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 685
                self.arith_expr()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 686
                self.array()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 687
                self.array_elem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def ARITH_OP(self):
            return self.getToken(WordlifyParser.ARITH_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)




    def arith_expr(self):

        localctx = WordlifyParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.value_or_id()
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 691
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 697
            self.match(WordlifyParser.ARITH_OP)
            self.state = 701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 698
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 704
            self.value_or_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def length(self):
            return self.getTypedRuleContext(WordlifyParser.LengthContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def ARGS(self):
            return self.getToken(WordlifyParser.ARGS, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_call" ):
                listener.enterFn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_call" ):
                listener.exitFn_call(self)




    def fn_call(self):

        localctx = WordlifyParser.Fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fn_call)
        try:
            self.state = 728
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                self.own_fn_call()
                pass
            elif token in [WordlifyParser.EXIST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 707
                self.exist()
                pass
            elif token in [WordlifyParser.PRINT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 708
                self.print_instr()
                pass
            elif token in [WordlifyParser.RENAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 709
                self.rename()
                pass
            elif token in [WordlifyParser.REMOVE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 710
                self.remove()
                pass
            elif token in [WordlifyParser.MOVE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 711
                self.move()
                pass
            elif token in [WordlifyParser.COPY]:
                self.enterOuterAlt(localctx, 7)
                self.state = 712
                self.copy()
                pass
            elif token in [WordlifyParser.DOWNLOAD]:
                self.enterOuterAlt(localctx, 8)
                self.state = 713
                self.download()
                pass
            elif token in [WordlifyParser.WRITE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 714
                self.write()
                pass
            elif token in [WordlifyParser.READ]:
                self.enterOuterAlt(localctx, 10)
                self.state = 715
                self.read()
                pass
            elif token in [WordlifyParser.WAIT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 716
                self.wait_instr()
                pass
            elif token in [WordlifyParser.EXECUTE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 717
                self.execute()
                pass
            elif token in [WordlifyParser.GET_FILES]:
                self.enterOuterAlt(localctx, 13)
                self.state = 718
                self.get_files()
                pass
            elif token in [WordlifyParser.DATE_MODIFIED]:
                self.enterOuterAlt(localctx, 14)
                self.state = 719
                self.date_modified()
                pass
            elif token in [WordlifyParser.SIZE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 720
                self.size()
                pass
            elif token in [WordlifyParser.EXIT]:
                self.enterOuterAlt(localctx, 16)
                self.state = 721
                self.exit()
                pass
            elif token in [WordlifyParser.CREATE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 722
                self.create()
                pass
            elif token in [WordlifyParser.LENGTH]:
                self.enterOuterAlt(localctx, 18)
                self.state = 723
                self.length()
                pass
            elif token in [WordlifyParser.TIME]:
                self.enterOuterAlt(localctx, 19)
                self.state = 724
                self.match(WordlifyParser.TIME)
                pass
            elif token in [WordlifyParser.FILE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 725
                self.match(WordlifyParser.FILE)
                pass
            elif token in [WordlifyParser.FOLDER]:
                self.enterOuterAlt(localctx, 21)
                self.state = 726
                self.match(WordlifyParser.FOLDER)
                pass
            elif token in [WordlifyParser.ARGS]:
                self.enterOuterAlt(localctx, 22)
                self.state = 727
                self.match(WordlifyParser.ARGS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def array_append(self):
            return self.getTypedRuleContext(WordlifyParser.Array_appendContext,0)


        def assign(self):
            return self.getTypedRuleContext(WordlifyParser.AssignContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def ARGS(self):
            return self.getToken(WordlifyParser.ARGS, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_atom_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_instr" ):
                listener.enterAtom_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_instr" ):
                listener.exitAtom_instr(self)




    def atom_instr(self):

        localctx = WordlifyParser.Atom_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_atom_instr)
        try:
            self.state = 753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 730
                self.own_fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 731
                self.exist()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 732
                self.print_instr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 733
                self.rename()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 734
                self.remove()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 735
                self.move()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 736
                self.copy()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 737
                self.download()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 738
                self.write()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 739
                self.read()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 740
                self.wait_instr()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 741
                self.execute()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 742
                self.get_files()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 743
                self.date_modified()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 744
                self.size()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 745
                self.exit()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 746
                self.create()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 747
                self.array_append()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 748
                self.assign()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 749
                self.match(WordlifyParser.TIME)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 750
                self.match(WordlifyParser.FILE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 751
                self.match(WordlifyParser.FOLDER)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 752
                self.match(WordlifyParser.ARGS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)




    def assign(self):

        localctx = WordlifyParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(WordlifyParser.ID)
            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 756
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 762
            self.match(WordlifyParser.T__4)
            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 763
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 769
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_appendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def APPEND(self):
            return self.getToken(WordlifyParser.APPEND, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array_append

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_append" ):
                listener.enterArray_append(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_append" ):
                listener.exitArray_append(self)




    def array_append(self):

        localctx = WordlifyParser.Array_appendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_array_append)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(WordlifyParser.ID)
            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 772
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 778
            self.match(WordlifyParser.APPEND)
            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 779
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 784
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 785
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_elem" ):
                listener.enterArray_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_elem" ):
                listener.exitArray_elem(self)




    def array_elem(self):

        localctx = WordlifyParser.Array_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_array_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.match(WordlifyParser.ID)
            self.state = 788
            self.match(WordlifyParser.T__5)
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 789
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 795
            self.value_or_id()
            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 796
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 802
            self.match(WordlifyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Own_fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_own_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOwn_fn_call" ):
                listener.enterOwn_fn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOwn_fn_call" ):
                listener.exitOwn_fn_call(self)




    def own_fn_call(self):

        localctx = WordlifyParser.Own_fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_own_fn_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.match(WordlifyParser.ID)
            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 805
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 811
            self.match(WordlifyParser.T__1)
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 812
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 818
                self.value_or_id()
                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 819
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 824
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.T__2:
                    self.state = 825
                    self.match(WordlifyParser.T__2)
                    self.state = 829
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 826
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 831
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 832
                    self.value_or_id()
                    self.state = 836
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 833
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 838
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 843
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 846
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIST(self):
            return self.getToken(WordlifyParser.EXIST, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExist" ):
                listener.enterExist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExist" ):
                listener.exitExist(self)




    def exist(self):

        localctx = WordlifyParser.ExistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_exist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(WordlifyParser.EXIST)
            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 849
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 855
            self.match(WordlifyParser.T__1)
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 856
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 862
            self.value_or_id()
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 863
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 869
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(WordlifyParser.PRINT, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_print_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_instr" ):
                listener.enterPrint_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_instr" ):
                listener.exitPrint_instr(self)




    def print_instr(self):

        localctx = WordlifyParser.Print_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_print_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.match(WordlifyParser.PRINT)
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 872
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 877
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 878
            self.match(WordlifyParser.T__1)
            self.state = 882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 879
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 885
            self.value_or_id()
            self.state = 889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 886
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 891
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 892
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(WordlifyParser.RENAME, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_rename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename" ):
                listener.enterRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename" ):
                listener.exitRename(self)




    def rename(self):

        localctx = WordlifyParser.RenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_rename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.match(WordlifyParser.RENAME)
            self.state = 898
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 895
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 900
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 901
            self.match(WordlifyParser.T__1)
            self.state = 905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 902
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 908
            self.value_or_id()
            self.state = 912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 909
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 915
            self.match(WordlifyParser.T__2)
            self.state = 919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 916
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 921
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 922
            self.value_or_id()
            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 923
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 929
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(WordlifyParser.REMOVE, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove" ):
                listener.enterRemove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove" ):
                listener.exitRemove(self)




    def remove(self):

        localctx = WordlifyParser.RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self.match(WordlifyParser.REMOVE)
            self.state = 935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 932
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 938
            self.match(WordlifyParser.T__1)
            self.state = 942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 939
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 945
            self.value_or_id()
            self.state = 949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 946
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 951
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 952
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOVE(self):
            return self.getToken(WordlifyParser.MOVE, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)




    def move(self):

        localctx = WordlifyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.match(WordlifyParser.MOVE)
            self.state = 958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 955
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 960
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 961
            self.match(WordlifyParser.T__1)
            self.state = 965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 962
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 968
            self.value_or_id()
            self.state = 972
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 969
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 974
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 975
            self.match(WordlifyParser.T__2)
            self.state = 979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 976
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 982
            self.value_or_id()
            self.state = 986
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 983
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 989
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(WordlifyParser.COPY, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_copy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy" ):
                listener.enterCopy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy" ):
                listener.exitCopy(self)




    def copy(self):

        localctx = WordlifyParser.CopyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_copy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.match(WordlifyParser.COPY)
            self.state = 995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 992
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 998
            self.match(WordlifyParser.T__1)
            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 999
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1005
            self.value_or_id()
            self.state = 1009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1006
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1012
            self.match(WordlifyParser.T__2)
            self.state = 1016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1013
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1018
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1019
            self.value_or_id()
            self.state = 1023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1020
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1025
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1026
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DownloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOWNLOAD(self):
            return self.getToken(WordlifyParser.DOWNLOAD, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_download

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDownload" ):
                listener.enterDownload(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDownload" ):
                listener.exitDownload(self)




    def download(self):

        localctx = WordlifyParser.DownloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_download)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(WordlifyParser.DOWNLOAD)
            self.state = 1032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1029
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1034
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1035
            self.match(WordlifyParser.T__1)
            self.state = 1039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1036
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1041
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1042
            self.value_or_id()
            self.state = 1046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1043
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1048
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1049
            self.match(WordlifyParser.T__2)
            self.state = 1053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1050
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1055
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1056
            self.value_or_id()
            self.state = 1060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1057
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1062
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1063
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(WordlifyParser.WRITE, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_write

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite" ):
                listener.enterWrite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite" ):
                listener.exitWrite(self)




    def write(self):

        localctx = WordlifyParser.WriteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_write)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.match(WordlifyParser.WRITE)
            self.state = 1069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1066
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1071
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1072
            self.match(WordlifyParser.T__1)
            self.state = 1076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1073
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1079
            self.value_or_id()
            self.state = 1083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1080
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1086
            self.match(WordlifyParser.T__2)
            self.state = 1090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1087
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1093
            self.value_or_id()
            self.state = 1097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1094
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1099
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1100
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(WordlifyParser.READ, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_read

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead" ):
                listener.enterRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead" ):
                listener.exitRead(self)




    def read(self):

        localctx = WordlifyParser.ReadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_read)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.match(WordlifyParser.READ)
            self.state = 1106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1103
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1108
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1109
            self.match(WordlifyParser.T__1)
            self.state = 1113
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1110
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1115
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1116
            self.value_or_id()
            self.state = 1120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1117
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1122
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1123
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wait_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(WordlifyParser.WAIT, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_wait_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_instr" ):
                listener.enterWait_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_instr" ):
                listener.exitWait_instr(self)




    def wait_instr(self):

        localctx = WordlifyParser.Wait_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_wait_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(WordlifyParser.WAIT)
            self.state = 1129
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1126
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1131
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1132
            self.match(WordlifyParser.T__1)
            self.state = 1136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1133
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1138
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1139
            self.value_or_id()
            self.state = 1143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1140
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1145
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1146
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(WordlifyParser.EXECUTE, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_execute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)




    def execute(self):

        localctx = WordlifyParser.ExecuteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_execute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self.match(WordlifyParser.EXECUTE)
            self.state = 1152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1149
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1154
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1155
            self.match(WordlifyParser.T__1)
            self.state = 1159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1156
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1161
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1178
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1162
                    self.value_or_id()
                    self.state = 1166
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1163
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1168
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1169
                    self.match(WordlifyParser.T__2)
                    self.state = 1173
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1170
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1175
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
             
                self.state = 1180
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

            self.state = 1181
            self.value_or_id()
            self.state = 1185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1182
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1188
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_filesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET_FILES(self):
            return self.getToken(WordlifyParser.GET_FILES, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_get_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_files" ):
                listener.enterGet_files(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_files" ):
                listener.exitGet_files(self)




    def get_files(self):

        localctx = WordlifyParser.Get_filesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_get_files)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self.match(WordlifyParser.GET_FILES)
            self.state = 1194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1191
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1196
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1197
            self.match(WordlifyParser.T__1)
            self.state = 1201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1198
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1203
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1204
            self.value_or_id()
            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1205
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1211
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_modifiedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_MODIFIED(self):
            return self.getToken(WordlifyParser.DATE_MODIFIED, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_date_modified

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_modified" ):
                listener.enterDate_modified(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_modified" ):
                listener.exitDate_modified(self)




    def date_modified(self):

        localctx = WordlifyParser.Date_modifiedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_date_modified)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            self.match(WordlifyParser.DATE_MODIFIED)
            self.state = 1217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1214
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1219
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1220
            self.match(WordlifyParser.T__1)
            self.state = 1224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1221
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1226
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1227
            self.value_or_id()
            self.state = 1231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1228
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1233
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1234
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIZE(self):
            return self.getToken(WordlifyParser.SIZE, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSize" ):
                listener.enterSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSize" ):
                listener.exitSize(self)




    def size(self):

        localctx = WordlifyParser.SizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.match(WordlifyParser.SIZE)
            self.state = 1240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1237
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1242
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1243
            self.match(WordlifyParser.T__1)
            self.state = 1247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1244
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1249
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1250
            self.value_or_id()
            self.state = 1254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1251
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1256
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1257
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(WordlifyParser.EXIT, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit" ):
                listener.enterExit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit" ):
                listener.exitExit(self)




    def exit(self):

        localctx = WordlifyParser.ExitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_exit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self.match(WordlifyParser.EXIT)
            self.state = 1263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1260
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1265
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1266
            self.match(WordlifyParser.T__1)
            self.state = 1270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1267
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1272
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1273
            self.value_or_id()
            self.state = 1277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1274
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1279
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1280
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(WordlifyParser.CREATE, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate" ):
                listener.enterCreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate" ):
                listener.exitCreate(self)




    def create(self):

        localctx = WordlifyParser.CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1282
            self.match(WordlifyParser.CREATE)
            self.state = 1286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1283
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1288
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1289
            self.match(WordlifyParser.T__1)
            self.state = 1293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1290
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1295
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1296
            self.value_or_id()
            self.state = 1300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1297
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1302
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1303
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LENGTH(self):
            return self.getToken(WordlifyParser.LENGTH, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLength" ):
                listener.enterLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLength" ):
                listener.exitLength(self)




    def length(self):

        localctx = WordlifyParser.LengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_length)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1305
            self.match(WordlifyParser.LENGTH)
            self.state = 1309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1306
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1311
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1312
            self.match(WordlifyParser.T__1)
            self.state = 1316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1313
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1318
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.state = 1319
                self.match(WordlifyParser.ID)
                pass
            elif token in [WordlifyParser.T__5]:
                self.state = 1320
                self.array()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1323
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1328
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1329
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray" ):
                listener.enterArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray" ):
                listener.exitArray(self)




    def array(self):

        localctx = WordlifyParser.ArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1331
            self.match(WordlifyParser.T__5)
            self.state = 1335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1332
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1337
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 1338
                self.value_or_id()
                self.state = 1355
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,201,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1342
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 1339
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1344
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1345
                        self.match(WordlifyParser.T__2)
                        self.state = 1349
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 1346
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1351
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1352
                        self.value_or_id() 
                    self.state = 1357
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,201,self._ctx)

                self.state = 1361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1358
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1363
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1366
            self.match(WordlifyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_or_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_value_or_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_or_id" ):
                listener.enterValue_or_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_or_id" ):
                listener.exitValue_or_id(self)




    def value_or_id(self):

        localctx = WordlifyParser.Value_or_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_value_or_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





