# Generated from Wordlify.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\63")
        buf.write("\u0578\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\3\2\7\2T\n\2\f\2\16\2W\13\2\3\2")
        buf.write("\3\2\7\2[\n\2\f\2\16\2^\13\2\3\2\3\2\7\2b\n\2\f\2\16\2")
        buf.write("e\13\2\3\2\3\2\7\2i\n\2\f\2\16\2l\13\2\3\2\3\2\7\2p\n")
        buf.write("\2\f\2\16\2s\13\2\6\2u\n\2\r\2\16\2v\3\2\3\2\5\2{\n\2")
        buf.write("\3\2\6\2~\n\2\r\2\16\2\177\7\2\u0082\n\2\f\2\16\2\u0085")
        buf.write("\13\2\3\2\3\2\7\2\u0089\n\2\f\2\16\2\u008c\13\2\3\2\5")
        buf.write("\2\u008f\n\2\3\2\3\2\5\2\u0093\n\2\5\2\u0095\n\2\5\2\u0097")
        buf.write("\n\2\3\2\7\2\u009a\n\2\f\2\16\2\u009d\13\2\3\2\5\2\u00a0")
        buf.write("\n\2\3\2\3\2\3\3\3\3\6\3\u00a6\n\3\r\3\16\3\u00a7\3\3")
        buf.write("\3\3\7\3\u00ac\n\3\f\3\16\3\u00af\13\3\3\3\3\3\7\3\u00b3")
        buf.write("\n\3\f\3\16\3\u00b6\13\3\3\3\3\3\7\3\u00ba\n\3\f\3\16")
        buf.write("\3\u00bd\13\3\3\3\3\3\7\3\u00c1\n\3\f\3\16\3\u00c4\13")
        buf.write("\3\3\3\3\3\7\3\u00c8\n\3\f\3\16\3\u00cb\13\3\7\3\u00cd")
        buf.write("\n\3\f\3\16\3\u00d0\13\3\5\3\u00d2\n\3\3\3\3\3\7\3\u00d6")
        buf.write("\n\3\f\3\16\3\u00d9\13\3\3\3\3\3\6\3\u00dd\n\3\r\3\16")
        buf.write("\3\u00de\3\3\3\3\7\3\u00e3\n\3\f\3\16\3\u00e6\13\3\3\3")
        buf.write("\3\3\7\3\u00ea\n\3\f\3\16\3\u00ed\13\3\3\3\3\3\7\3\u00f1")
        buf.write("\n\3\f\3\16\3\u00f4\13\3\3\3\3\3\7\3\u00f8\n\3\f\3\16")
        buf.write("\3\u00fb\13\3\6\3\u00fd\n\3\r\3\16\3\u00fe\3\3\3\3\6\3")
        buf.write("\u0103\n\3\r\3\16\3\u0104\7\3\u0107\n\3\f\3\16\3\u010a")
        buf.write("\13\3\3\3\3\3\7\3\u010e\n\3\f\3\16\3\u0111\13\3\3\3\5")
        buf.write("\3\u0114\n\3\3\3\5\3\u0117\n\3\3\3\6\3\u011a\n\3\r\3\16")
        buf.write("\3\u011b\5\3\u011e\n\3\3\3\3\3\3\4\3\4\3\4\5\4\u0125\n")
        buf.write("\4\3\5\3\5\6\5\u0129\n\5\r\5\16\5\u012a\3\5\3\5\6\5\u012f")
        buf.write("\n\5\r\5\16\5\u0130\3\5\3\5\6\5\u0135\n\5\r\5\16\5\u0136")
        buf.write("\3\5\3\5\6\5\u013b\n\5\r\5\16\5\u013c\3\5\3\5\6\5\u0141")
        buf.write("\n\5\r\5\16\5\u0142\3\5\3\5\7\5\u0147\n\5\f\5\16\5\u014a")
        buf.write("\13\5\3\5\3\5\7\5\u014e\n\5\f\5\16\5\u0151\13\5\3\5\3")
        buf.write("\5\7\5\u0155\n\5\f\5\16\5\u0158\13\5\3\5\3\5\7\5\u015c")
        buf.write("\n\5\f\5\16\5\u015f\13\5\6\5\u0161\n\5\r\5\16\5\u0162")
        buf.write("\3\5\3\5\6\5\u0167\n\5\r\5\16\5\u0168\7\5\u016b\n\5\f")
        buf.write("\5\16\5\u016e\13\5\3\5\3\5\7\5\u0172\n\5\f\5\16\5\u0175")
        buf.write("\13\5\3\5\3\5\6\5\u0179\n\5\r\5\16\5\u017a\5\5\u017d\n")
        buf.write("\5\3\5\3\5\6\5\u0181\n\5\r\5\16\5\u0182\5\5\u0185\n\5")
        buf.write("\5\5\u0187\n\5\3\5\3\5\3\6\3\6\6\6\u018d\n\6\r\6\16\6")
        buf.write("\u018e\3\6\3\6\6\6\u0193\n\6\r\6\16\6\u0194\3\6\3\6\6")
        buf.write("\6\u0199\n\6\r\6\16\6\u019a\3\6\3\6\7\6\u019f\n\6\f\6")
        buf.write("\16\6\u01a2\13\6\3\6\3\6\7\6\u01a6\n\6\f\6\16\6\u01a9")
        buf.write("\13\6\3\6\3\6\7\6\u01ad\n\6\f\6\16\6\u01b0\13\6\3\6\3")
        buf.write("\6\7\6\u01b4\n\6\f\6\16\6\u01b7\13\6\6\6\u01b9\n\6\r\6")
        buf.write("\16\6\u01ba\3\6\3\6\6\6\u01bf\n\6\r\6\16\6\u01c0\7\6\u01c3")
        buf.write("\n\6\f\6\16\6\u01c6\13\6\3\6\3\6\7\6\u01ca\n\6\f\6\16")
        buf.write("\6\u01cd\13\6\3\6\3\6\6\6\u01d1\n\6\r\6\16\6\u01d2\5\6")
        buf.write("\u01d5\n\6\3\6\3\6\6\6\u01d9\n\6\r\6\16\6\u01da\5\6\u01dd")
        buf.write("\n\6\5\6\u01df\n\6\3\6\3\6\3\7\3\7\3\7\7\7\u01e6\n\7\f")
        buf.write("\7\16\7\u01e9\13\7\3\7\5\7\u01ec\n\7\3\7\3\7\3\b\3\b\6")
        buf.write("\b\u01f2\n\b\r\b\16\b\u01f3\3\b\3\b\6\b\u01f8\n\b\r\b")
        buf.write("\16\b\u01f9\3\t\3\t\6\t\u01fe\n\t\r\t\16\t\u01ff\3\t\3")
        buf.write("\t\7\t\u0204\n\t\f\t\16\t\u0207\13\t\3\t\3\t\7\t\u020b")
        buf.write("\n\t\f\t\16\t\u020e\13\t\3\t\3\t\7\t\u0212\n\t\f\t\16")
        buf.write("\t\u0215\13\t\3\t\3\t\7\t\u0219\n\t\f\t\16\t\u021c\13")
        buf.write("\t\6\t\u021e\n\t\r\t\16\t\u021f\3\t\3\t\6\t\u0224\n\t")
        buf.write("\r\t\16\t\u0225\7\t\u0228\n\t\f\t\16\t\u022b\13\t\3\t")
        buf.write("\3\t\7\t\u022f\n\t\f\t\16\t\u0232\13\t\3\t\3\t\6\t\u0236")
        buf.write("\n\t\r\t\16\t\u0237\5\t\u023a\n\t\3\t\3\t\6\t\u023e\n")
        buf.write("\t\r\t\16\t\u023f\5\t\u0242\n\t\5\t\u0244\n\t\3\n\3\n")
        buf.write("\6\n\u0248\n\n\r\n\16\n\u0249\3\n\3\n\3\n\3\13\3\13\6")
        buf.write("\13\u0251\n\13\r\13\16\13\u0252\3\13\3\13\7\13\u0257\n")
        buf.write("\13\f\13\16\13\u025a\13\13\3\13\3\13\7\13\u025e\n\13\f")
        buf.write("\13\16\13\u0261\13\13\3\13\3\13\7\13\u0265\n\13\f\13\16")
        buf.write("\13\u0268\13\13\3\13\3\13\7\13\u026c\n\13\f\13\16\13\u026f")
        buf.write("\13\13\6\13\u0271\n\13\r\13\16\13\u0272\3\13\3\13\6\13")
        buf.write("\u0277\n\13\r\13\16\13\u0278\7\13\u027b\n\13\f\13\16\13")
        buf.write("\u027e\13\13\3\13\3\13\7\13\u0282\n\13\f\13\16\13\u0285")
        buf.write("\13\13\3\13\3\13\6\13\u0289\n\13\r\13\16\13\u028a\5\13")
        buf.write("\u028d\n\13\3\13\3\13\6\13\u0291\n\13\r\13\16\13\u0292")
        buf.write("\5\13\u0295\n\13\5\13\u0297\n\13\3\f\3\f\3\f\3\f\5\f\u029d")
        buf.write("\n\f\3\r\3\r\7\r\u02a1\n\r\f\r\16\r\u02a4\13\r\3\r\3\r")
        buf.write("\7\r\u02a8\n\r\f\r\16\r\u02ab\13\r\3\r\3\r\3\16\3\16\7")
        buf.write("\16\u02b1\n\16\f\16\16\16\u02b4\13\16\3\16\3\16\7\16\u02b8")
        buf.write("\n\16\f\16\16\16\u02bb\13\16\3\16\3\16\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\5\17\u02c6\n\17\3\20\3\20\7\20\u02ca")
        buf.write("\n\20\f\20\16\20\u02cd\13\20\3\20\3\20\7\20\u02d1\n\20")
        buf.write("\f\20\16\20\u02d4\13\20\3\20\3\20\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u02ee\n\21\3")
        buf.write("\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\5\22\u0307\n\22\3\23\3\23\5\23\u030b\n\23\3\23\7")
        buf.write("\23\u030e\n\23\f\23\16\23\u0311\13\23\3\23\3\23\7\23\u0315")
        buf.write("\n\23\f\23\16\23\u0318\13\23\3\23\3\23\3\24\3\24\7\24")
        buf.write("\u031e\n\24\f\24\16\24\u0321\13\24\3\24\3\24\7\24\u0325")
        buf.write("\n\24\f\24\16\24\u0328\13\24\3\24\3\24\7\24\u032c\n\24")
        buf.write("\f\24\16\24\u032f\13\24\3\25\3\25\3\25\7\25\u0334\n\25")
        buf.write("\f\25\16\25\u0337\13\25\3\25\3\25\7\25\u033b\n\25\f\25")
        buf.write("\16\25\u033e\13\25\3\25\3\25\3\26\3\26\7\26\u0344\n\26")
        buf.write("\f\26\16\26\u0347\13\26\3\26\3\26\7\26\u034b\n\26\f\26")
        buf.write("\16\26\u034e\13\26\3\26\3\26\7\26\u0352\n\26\f\26\16\26")
        buf.write("\u0355\13\26\3\26\3\26\7\26\u0359\n\26\f\26\16\26\u035c")
        buf.write("\13\26\3\26\3\26\7\26\u0360\n\26\f\26\16\26\u0363\13\26")
        buf.write("\7\26\u0365\n\26\f\26\16\26\u0368\13\26\5\26\u036a\n\26")
        buf.write("\3\26\3\26\3\27\3\27\7\27\u0370\n\27\f\27\16\27\u0373")
        buf.write("\13\27\3\27\3\27\7\27\u0377\n\27\f\27\16\27\u037a\13\27")
        buf.write("\3\27\3\27\7\27\u037e\n\27\f\27\16\27\u0381\13\27\3\27")
        buf.write("\3\27\3\30\3\30\7\30\u0387\n\30\f\30\16\30\u038a\13\30")
        buf.write("\3\30\3\30\7\30\u038e\n\30\f\30\16\30\u0391\13\30\3\30")
        buf.write("\3\30\7\30\u0395\n\30\f\30\16\30\u0398\13\30\3\30\3\30")
        buf.write("\3\31\3\31\7\31\u039e\n\31\f\31\16\31\u03a1\13\31\3\31")
        buf.write("\3\31\7\31\u03a5\n\31\f\31\16\31\u03a8\13\31\3\31\3\31")
        buf.write("\7\31\u03ac\n\31\f\31\16\31\u03af\13\31\3\31\3\31\7\31")
        buf.write("\u03b3\n\31\f\31\16\31\u03b6\13\31\3\31\3\31\7\31\u03ba")
        buf.write("\n\31\f\31\16\31\u03bd\13\31\3\31\3\31\3\32\3\32\7\32")
        buf.write("\u03c3\n\32\f\32\16\32\u03c6\13\32\3\32\3\32\7\32\u03ca")
        buf.write("\n\32\f\32\16\32\u03cd\13\32\3\32\3\32\7\32\u03d1\n\32")
        buf.write("\f\32\16\32\u03d4\13\32\3\32\3\32\3\33\3\33\7\33\u03da")
        buf.write("\n\33\f\33\16\33\u03dd\13\33\3\33\3\33\7\33\u03e1\n\33")
        buf.write("\f\33\16\33\u03e4\13\33\3\33\3\33\7\33\u03e8\n\33\f\33")
        buf.write("\16\33\u03eb\13\33\3\33\3\33\7\33\u03ef\n\33\f\33\16\33")
        buf.write("\u03f2\13\33\3\33\3\33\7\33\u03f6\n\33\f\33\16\33\u03f9")
        buf.write("\13\33\3\33\3\33\3\34\3\34\7\34\u03ff\n\34\f\34\16\34")
        buf.write("\u0402\13\34\3\34\3\34\7\34\u0406\n\34\f\34\16\34\u0409")
        buf.write("\13\34\3\34\3\34\7\34\u040d\n\34\f\34\16\34\u0410\13\34")
        buf.write("\3\34\3\34\7\34\u0414\n\34\f\34\16\34\u0417\13\34\3\34")
        buf.write("\3\34\7\34\u041b\n\34\f\34\16\34\u041e\13\34\3\34\3\34")
        buf.write("\3\35\3\35\7\35\u0424\n\35\f\35\16\35\u0427\13\35\3\35")
        buf.write("\3\35\7\35\u042b\n\35\f\35\16\35\u042e\13\35\3\35\3\35")
        buf.write("\7\35\u0432\n\35\f\35\16\35\u0435\13\35\3\35\3\35\7\35")
        buf.write("\u0439\n\35\f\35\16\35\u043c\13\35\3\35\3\35\7\35\u0440")
        buf.write("\n\35\f\35\16\35\u0443\13\35\3\35\3\35\3\36\3\36\7\36")
        buf.write("\u0449\n\36\f\36\16\36\u044c\13\36\3\36\3\36\7\36\u0450")
        buf.write("\n\36\f\36\16\36\u0453\13\36\3\36\3\36\7\36\u0457\n\36")
        buf.write("\f\36\16\36\u045a\13\36\3\36\3\36\7\36\u045e\n\36\f\36")
        buf.write("\16\36\u0461\13\36\3\36\3\36\7\36\u0465\n\36\f\36\16\36")
        buf.write("\u0468\13\36\3\36\3\36\3\37\3\37\7\37\u046e\n\37\f\37")
        buf.write("\16\37\u0471\13\37\3\37\3\37\7\37\u0475\n\37\f\37\16\37")
        buf.write("\u0478\13\37\3\37\3\37\7\37\u047c\n\37\f\37\16\37\u047f")
        buf.write("\13\37\3\37\3\37\3 \3 \7 \u0485\n \f \16 \u0488\13 \3")
        buf.write(" \3 \7 \u048c\n \f \16 \u048f\13 \3 \3 \7 \u0493\n \f")
        buf.write(" \16 \u0496\13 \3 \3 \3!\3!\7!\u049c\n!\f!\16!\u049f\13")
        buf.write("!\3!\3!\7!\u04a3\n!\f!\16!\u04a6\13!\3!\3!\7!\u04aa\n")
        buf.write("!\f!\16!\u04ad\13!\3!\3!\7!\u04b1\n!\f!\16!\u04b4\13!")
        buf.write("\7!\u04b6\n!\f!\16!\u04b9\13!\3!\3!\7!\u04bd\n!\f!\16")
        buf.write("!\u04c0\13!\3!\3!\3\"\3\"\7\"\u04c6\n\"\f\"\16\"\u04c9")
        buf.write("\13\"\3\"\3\"\7\"\u04cd\n\"\f\"\16\"\u04d0\13\"\3\"\3")
        buf.write("\"\7\"\u04d4\n\"\f\"\16\"\u04d7\13\"\3\"\3\"\3#\3#\7#")
        buf.write("\u04dd\n#\f#\16#\u04e0\13#\3#\3#\7#\u04e4\n#\f#\16#\u04e7")
        buf.write("\13#\3#\3#\7#\u04eb\n#\f#\16#\u04ee\13#\3#\3#\3$\3$\7")
        buf.write("$\u04f4\n$\f$\16$\u04f7\13$\3$\3$\7$\u04fb\n$\f$\16$\u04fe")
        buf.write("\13$\3$\3$\7$\u0502\n$\f$\16$\u0505\13$\3$\3$\3%\3%\7")
        buf.write("%\u050b\n%\f%\16%\u050e\13%\3%\3%\7%\u0512\n%\f%\16%\u0515")
        buf.write("\13%\3%\3%\7%\u0519\n%\f%\16%\u051c\13%\3%\3%\3&\3&\7")
        buf.write("&\u0522\n&\f&\16&\u0525\13&\3&\3&\7&\u0529\n&\f&\16&\u052c")
        buf.write("\13&\3&\3&\7&\u0530\n&\f&\16&\u0533\13&\3&\3&\3\'\3\'")
        buf.write("\7\'\u0539\n\'\f\'\16\'\u053c\13\'\3\'\3\'\7\'\u0540\n")
        buf.write("\'\f\'\16\'\u0543\13\'\3\'\3\'\5\'\u0547\n\'\3\'\7\'\u054a")
        buf.write("\n\'\f\'\16\'\u054d\13\'\3\'\3\'\3(\3(\7(\u0553\n(\f(")
        buf.write("\16(\u0556\13(\3(\3(\7(\u055a\n(\f(\16(\u055d\13(\3(\3")
        buf.write("(\7(\u0561\n(\f(\16(\u0564\13(\3(\7(\u0567\n(\f(\16(\u056a")
        buf.write("\13(\3(\7(\u056d\n(\f(\16(\u0570\13(\5(\u0572\n(\3(\3")
        buf.write("(\3)\3)\3)\2\2*\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36")
        buf.write(" \"$&(*,.\60\62\64\668:<>@BDFHJLNP\2\4\3\2\61\62\3\2-")
        buf.write("\60\2\u0656\2U\3\2\2\2\4\u00a3\3\2\2\2\6\u0124\3\2\2\2")
        buf.write("\b\u0126\3\2\2\2\n\u018a\3\2\2\2\f\u01e2\3\2\2\2\16\u01ef")
        buf.write("\3\2\2\2\20\u01fb\3\2\2\2\22\u0245\3\2\2\2\24\u024e\3")
        buf.write("\2\2\2\26\u029c\3\2\2\2\30\u029e\3\2\2\2\32\u02ae\3\2")
        buf.write("\2\2\34\u02c5\3\2\2\2\36\u02c7\3\2\2\2 \u02ed\3\2\2\2")
        buf.write("\"\u0306\3\2\2\2$\u030a\3\2\2\2&\u031b\3\2\2\2(\u0330")
        buf.write("\3\2\2\2*\u0341\3\2\2\2,\u036d\3\2\2\2.\u0384\3\2\2\2")
        buf.write("\60\u039b\3\2\2\2\62\u03c0\3\2\2\2\64\u03d7\3\2\2\2\66")
        buf.write("\u03fc\3\2\2\28\u0421\3\2\2\2:\u0446\3\2\2\2<\u046b\3")
        buf.write("\2\2\2>\u0482\3\2\2\2@\u0499\3\2\2\2B\u04c3\3\2\2\2D\u04da")
        buf.write("\3\2\2\2F\u04f1\3\2\2\2H\u0508\3\2\2\2J\u051f\3\2\2\2")
        buf.write("L\u0536\3\2\2\2N\u0550\3\2\2\2P\u0575\3\2\2\2RT\t\2\2")
        buf.write("\2SR\3\2\2\2TW\3\2\2\2US\3\2\2\2UV\3\2\2\2V\u0096\3\2")
        buf.write("\2\2WU\3\2\2\2X\\\5\"\22\2Y[\t\2\2\2ZY\3\2\2\2[^\3\2\2")
        buf.write("\2\\Z\3\2\2\2\\]\3\2\2\2]_\3\2\2\2^\\\3\2\2\2_c\7\3\2")
        buf.write("\2`b\t\2\2\2a`\3\2\2\2be\3\2\2\2ca\3\2\2\2cd\3\2\2\2d")
        buf.write("\u0082\3\2\2\2ec\3\2\2\2ft\5\"\22\2gi\7\61\2\2hg\3\2\2")
        buf.write("\2il\3\2\2\2jh\3\2\2\2jk\3\2\2\2km\3\2\2\2lj\3\2\2\2m")
        buf.write("q\7\62\2\2np\7\61\2\2on\3\2\2\2ps\3\2\2\2qo\3\2\2\2qr")
        buf.write("\3\2\2\2ru\3\2\2\2sq\3\2\2\2tj\3\2\2\2uv\3\2\2\2vt\3\2")
        buf.write("\2\2vw\3\2\2\2w\u0082\3\2\2\2x{\5\6\4\2y{\5\4\3\2zx\3")
        buf.write("\2\2\2zy\3\2\2\2{}\3\2\2\2|~\t\2\2\2}|\3\2\2\2~\177\3")
        buf.write("\2\2\2\177}\3\2\2\2\177\u0080\3\2\2\2\u0080\u0082\3\2")
        buf.write("\2\2\u0081X\3\2\2\2\u0081f\3\2\2\2\u0081z\3\2\2\2\u0082")
        buf.write("\u0085\3\2\2\2\u0083\u0081\3\2\2\2\u0083\u0084\3\2\2\2")
        buf.write("\u0084\u0094\3\2\2\2\u0085\u0083\3\2\2\2\u0086\u008a\5")
        buf.write("\"\22\2\u0087\u0089\t\2\2\2\u0088\u0087\3\2\2\2\u0089")
        buf.write("\u008c\3\2\2\2\u008a\u0088\3\2\2\2\u008a\u008b\3\2\2\2")
        buf.write("\u008b\u008e\3\2\2\2\u008c\u008a\3\2\2\2\u008d\u008f\7")
        buf.write("\3\2\2\u008e\u008d\3\2\2\2\u008e\u008f\3\2\2\2\u008f\u0095")
        buf.write("\3\2\2\2\u0090\u0093\5\6\4\2\u0091\u0093\5\4\3\2\u0092")
        buf.write("\u0090\3\2\2\2\u0092\u0091\3\2\2\2\u0093\u0095\3\2\2\2")
        buf.write("\u0094\u0086\3\2\2\2\u0094\u0092\3\2\2\2\u0095\u0097\3")
        buf.write("\2\2\2\u0096\u0083\3\2\2\2\u0096\u0097\3\2\2\2\u0097\u009b")
        buf.write("\3\2\2\2\u0098\u009a\t\2\2\2\u0099\u0098\3\2\2\2\u009a")
        buf.write("\u009d\3\2\2\2\u009b\u0099\3\2\2\2\u009b\u009c\3\2\2\2")
        buf.write("\u009c\u009f\3\2\2\2\u009d\u009b\3\2\2\2\u009e\u00a0\7")
        buf.write("\63\2\2\u009f\u009e\3\2\2\2\u009f\u00a0\3\2\2\2\u00a0")
        buf.write("\u00a1\3\2\2\2\u00a1\u00a2\7\2\2\3\u00a2\3\3\2\2\2\u00a3")
        buf.write("\u00a5\7\n\2\2\u00a4\u00a6\t\2\2\2\u00a5\u00a4\3\2\2\2")
        buf.write("\u00a6\u00a7\3\2\2\2\u00a7\u00a5\3\2\2\2\u00a7\u00a8\3")
        buf.write("\2\2\2\u00a8\u00a9\3\2\2\2\u00a9\u00ad\7/\2\2\u00aa\u00ac")
        buf.write("\t\2\2\2\u00ab\u00aa\3\2\2\2\u00ac\u00af\3\2\2\2\u00ad")
        buf.write("\u00ab\3\2\2\2\u00ad\u00ae\3\2\2\2\u00ae\u00b0\3\2\2\2")
        buf.write("\u00af\u00ad\3\2\2\2\u00b0\u00b4\7\4\2\2\u00b1\u00b3\t")
        buf.write("\2\2\2\u00b2\u00b1\3\2\2\2\u00b3\u00b6\3\2\2\2\u00b4\u00b2")
        buf.write("\3\2\2\2\u00b4\u00b5\3\2\2\2\u00b5\u00d1\3\2\2\2\u00b6")
        buf.write("\u00b4\3\2\2\2\u00b7\u00bb\7/\2\2\u00b8\u00ba\t\2\2\2")
        buf.write("\u00b9\u00b8\3\2\2\2\u00ba\u00bd\3\2\2\2\u00bb\u00b9\3")
        buf.write("\2\2\2\u00bb\u00bc\3\2\2\2\u00bc\u00ce\3\2\2\2\u00bd\u00bb")
        buf.write("\3\2\2\2\u00be\u00c2\7\5\2\2\u00bf\u00c1\t\2\2\2\u00c0")
        buf.write("\u00bf\3\2\2\2\u00c1\u00c4\3\2\2\2\u00c2\u00c0\3\2\2\2")
        buf.write("\u00c2\u00c3\3\2\2\2\u00c3\u00c5\3\2\2\2\u00c4\u00c2\3")
        buf.write("\2\2\2\u00c5\u00c9\7/\2\2\u00c6\u00c8\t\2\2\2\u00c7\u00c6")
        buf.write("\3\2\2\2\u00c8\u00cb\3\2\2\2\u00c9\u00c7\3\2\2\2\u00c9")
        buf.write("\u00ca\3\2\2\2\u00ca\u00cd\3\2\2\2\u00cb\u00c9\3\2\2\2")
        buf.write("\u00cc\u00be\3\2\2\2\u00cd\u00d0\3\2\2\2\u00ce\u00cc\3")
        buf.write("\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00d2\3\2\2\2\u00d0\u00ce")
        buf.write("\3\2\2\2\u00d1\u00b7\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2")
        buf.write("\u00d3\3\2\2\2\u00d3\u00d7\7\6\2\2\u00d4\u00d6\t\2\2\2")
        buf.write("\u00d5\u00d4\3\2\2\2\u00d6\u00d9\3\2\2\2\u00d7\u00d5\3")
        buf.write("\2\2\2\u00d7\u00d8\3\2\2\2\u00d8\u00da\3\2\2\2\u00d9\u00d7")
        buf.write("\3\2\2\2\u00da\u00dc\7\22\2\2\u00db\u00dd\t\2\2\2\u00dc")
        buf.write("\u00db\3\2\2\2\u00dd\u00de\3\2\2\2\u00de\u00dc\3\2\2\2")
        buf.write("\u00de\u00df\3\2\2\2\u00df\u011d\3\2\2\2\u00e0\u00e4\5")
        buf.write("\"\22\2\u00e1\u00e3\t\2\2\2\u00e2\u00e1\3\2\2\2\u00e3")
        buf.write("\u00e6\3\2\2\2\u00e4\u00e2\3\2\2\2\u00e4\u00e5\3\2\2\2")
        buf.write("\u00e5\u00e7\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e7\u00eb\7")
        buf.write("\3\2\2\u00e8\u00ea\t\2\2\2\u00e9\u00e8\3\2\2\2\u00ea\u00ed")
        buf.write("\3\2\2\2\u00eb\u00e9\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec")
        buf.write("\u0107\3\2\2\2\u00ed\u00eb\3\2\2\2\u00ee\u00fc\5\"\22")
        buf.write("\2\u00ef\u00f1\7\61\2\2\u00f0\u00ef\3\2\2\2\u00f1\u00f4")
        buf.write("\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3")
        buf.write("\u00f5\3\2\2\2\u00f4\u00f2\3\2\2\2\u00f5\u00f9\7\62\2")
        buf.write("\2\u00f6\u00f8\7\61\2\2\u00f7\u00f6\3\2\2\2\u00f8\u00fb")
        buf.write("\3\2\2\2\u00f9\u00f7\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa")
        buf.write("\u00fd\3\2\2\2\u00fb\u00f9\3\2\2\2\u00fc\u00f2\3\2\2\2")
        buf.write("\u00fd\u00fe\3\2\2\2\u00fe\u00fc\3\2\2\2\u00fe\u00ff\3")
        buf.write("\2\2\2\u00ff\u0107\3\2\2\2\u0100\u0102\5\6\4\2\u0101\u0103")
        buf.write("\t\2\2\2\u0102\u0101\3\2\2\2\u0103\u0104\3\2\2\2\u0104")
        buf.write("\u0102\3\2\2\2\u0104\u0105\3\2\2\2\u0105\u0107\3\2\2\2")
        buf.write("\u0106\u00e0\3\2\2\2\u0106\u00ee\3\2\2\2\u0106\u0100\3")
        buf.write("\2\2\2\u0107\u010a\3\2\2\2\u0108\u0106\3\2\2\2\u0108\u0109")
        buf.write("\3\2\2\2\u0109\u0116\3\2\2\2\u010a\u0108\3\2\2\2\u010b")
        buf.write("\u010f\5\"\22\2\u010c\u010e\t\2\2\2\u010d\u010c\3\2\2")
        buf.write("\2\u010e\u0111\3\2\2\2\u010f\u010d\3\2\2\2\u010f\u0110")
        buf.write("\3\2\2\2\u0110\u0113\3\2\2\2\u0111\u010f\3\2\2\2\u0112")
        buf.write("\u0114\7\3\2\2\u0113\u0112\3\2\2\2\u0113\u0114\3\2\2\2")
        buf.write("\u0114\u0117\3\2\2\2\u0115\u0117\5\6\4\2\u0116\u010b\3")
        buf.write("\2\2\2\u0116\u0115\3\2\2\2\u0117\u0119\3\2\2\2\u0118\u011a")
        buf.write("\t\2\2\2\u0119\u0118\3\2\2\2\u011a\u011b\3\2\2\2\u011b")
        buf.write("\u0119\3\2\2\2\u011b\u011c\3\2\2\2\u011c\u011e\3\2\2\2")
        buf.write("\u011d\u0108\3\2\2\2\u011d\u011e\3\2\2\2\u011e\u011f\3")
        buf.write("\2\2\2\u011f\u0120\7\23\2\2\u0120\5\3\2\2\2\u0121\u0125")
        buf.write("\5\f\7\2\u0122\u0125\5\n\6\2\u0123\u0125\5\b\5\2\u0124")
        buf.write("\u0121\3\2\2\2\u0124\u0122\3\2\2\2\u0124\u0123\3\2\2\2")
        buf.write("\u0125\7\3\2\2\2\u0126\u0128\7\f\2\2\u0127\u0129\t\2\2")
        buf.write("\2\u0128\u0127\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u0128")
        buf.write("\3\2\2\2\u012a\u012b\3\2\2\2\u012b\u012c\3\2\2\2\u012c")
        buf.write("\u012e\7/\2\2\u012d\u012f\t\2\2\2\u012e\u012d\3\2\2\2")
        buf.write("\u012f\u0130\3\2\2\2\u0130\u012e\3\2\2\2\u0130\u0131\3")
        buf.write("\2\2\2\u0131\u0132\3\2\2\2\u0132\u0134\7\r\2\2\u0133\u0135")
        buf.write("\t\2\2\2\u0134\u0133\3\2\2\2\u0135\u0136\3\2\2\2\u0136")
        buf.write("\u0134\3\2\2\2\u0136\u0137\3\2\2\2\u0137\u0138\3\2\2\2")
        buf.write("\u0138\u013a\7/\2\2\u0139\u013b\t\2\2\2\u013a\u0139\3")
        buf.write("\2\2\2\u013b\u013c\3\2\2\2\u013c\u013a\3\2\2\2\u013c\u013d")
        buf.write("\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u0140\7\16\2\2\u013f")
        buf.write("\u0141\t\2\2\2\u0140\u013f\3\2\2\2\u0141\u0142\3\2\2\2")
        buf.write("\u0142\u0140\3\2\2\2\u0142\u0143\3\2\2\2\u0143\u0186\3")
        buf.write("\2\2\2\u0144\u0148\5\"\22\2\u0145\u0147\t\2\2\2\u0146")
        buf.write("\u0145\3\2\2\2\u0147\u014a\3\2\2\2\u0148\u0146\3\2\2\2")
        buf.write("\u0148\u0149\3\2\2\2\u0149\u014b\3\2\2\2\u014a\u0148\3")
        buf.write("\2\2\2\u014b\u014f\7\3\2\2\u014c\u014e\t\2\2\2\u014d\u014c")
        buf.write("\3\2\2\2\u014e\u0151\3\2\2\2\u014f\u014d\3\2\2\2\u014f")
        buf.write("\u0150\3\2\2\2\u0150\u016b\3\2\2\2\u0151\u014f\3\2\2\2")
        buf.write("\u0152\u0160\5\"\22\2\u0153\u0155\7\61\2\2\u0154\u0153")
        buf.write("\3\2\2\2\u0155\u0158\3\2\2\2\u0156\u0154\3\2\2\2\u0156")
        buf.write("\u0157\3\2\2\2\u0157\u0159\3\2\2\2\u0158\u0156\3\2\2\2")
        buf.write("\u0159\u015d\7\62\2\2\u015a\u015c\7\61\2\2\u015b\u015a")
        buf.write("\3\2\2\2\u015c\u015f\3\2\2\2\u015d\u015b\3\2\2\2\u015d")
        buf.write("\u015e\3\2\2\2\u015e\u0161\3\2\2\2\u015f\u015d\3\2\2\2")
        buf.write("\u0160\u0156\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0160\3")
        buf.write("\2\2\2\u0162\u0163\3\2\2\2\u0163\u016b\3\2\2\2\u0164\u0166")
        buf.write("\5\6\4\2\u0165\u0167\t\2\2\2\u0166\u0165\3\2\2\2\u0167")
        buf.write("\u0168\3\2\2\2\u0168\u0166\3\2\2\2\u0168\u0169\3\2\2\2")
        buf.write("\u0169\u016b\3\2\2\2\u016a\u0144\3\2\2\2\u016a\u0152\3")
        buf.write("\2\2\2\u016a\u0164\3\2\2\2\u016b\u016e\3\2\2\2\u016c\u016a")
        buf.write("\3\2\2\2\u016c\u016d\3\2\2\2\u016d\u0184\3\2\2\2\u016e")
        buf.write("\u016c\3\2\2\2\u016f\u0173\5\"\22\2\u0170\u0172\t\2\2")
        buf.write("\2\u0171\u0170\3\2\2\2\u0172\u0175\3\2\2\2\u0173\u0171")
        buf.write("\3\2\2\2\u0173\u0174\3\2\2\2\u0174\u017c\3\2\2\2\u0175")
        buf.write("\u0173\3\2\2\2\u0176\u017d\7\3\2\2\u0177\u0179\t\2\2\2")
        buf.write("\u0178\u0177\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u0178\3")
        buf.write("\2\2\2\u017a\u017b\3\2\2\2\u017b\u017d\3\2\2\2\u017c\u0176")
        buf.write("\3\2\2\2\u017c\u0178\3\2\2\2\u017d\u0185\3\2\2\2\u017e")
        buf.write("\u0180\5\6\4\2\u017f\u0181\t\2\2\2\u0180\u017f\3\2\2\2")
        buf.write("\u0181\u0182\3\2\2\2\u0182\u0180\3\2\2\2\u0182\u0183\3")
        buf.write("\2\2\2\u0183\u0185\3\2\2\2\u0184\u016f\3\2\2\2\u0184\u017e")
        buf.write("\3\2\2\2\u0185\u0187\3\2\2\2\u0186\u016c\3\2\2\2\u0186")
        buf.write("\u0187\3\2\2\2\u0187\u0188\3\2\2\2\u0188\u0189\7\23\2")
        buf.write("\2\u0189\t\3\2\2\2\u018a\u018c\7\13\2\2\u018b\u018d\t")
        buf.write("\2\2\2\u018c\u018b\3\2\2\2\u018d\u018e\3\2\2\2\u018e\u018c")
        buf.write("\3\2\2\2\u018e\u018f\3\2\2\2\u018f\u0190\3\2\2\2\u0190")
        buf.write("\u0192\5\26\f\2\u0191\u0193\t\2\2\2\u0192\u0191\3\2\2")
        buf.write("\2\u0193\u0194\3\2\2\2\u0194\u0192\3\2\2\2\u0194\u0195")
        buf.write("\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0198\7\16\2\2\u0197")
        buf.write("\u0199\t\2\2\2\u0198\u0197\3\2\2\2\u0199\u019a\3\2\2\2")
        buf.write("\u019a\u0198\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u01de\3")
        buf.write("\2\2\2\u019c\u01a0\5\"\22\2\u019d\u019f\t\2\2\2\u019e")
        buf.write("\u019d\3\2\2\2\u019f\u01a2\3\2\2\2\u01a0\u019e\3\2\2\2")
        buf.write("\u01a0\u01a1\3\2\2\2\u01a1\u01a3\3\2\2\2\u01a2\u01a0\3")
        buf.write("\2\2\2\u01a3\u01a7\7\3\2\2\u01a4\u01a6\t\2\2\2\u01a5\u01a4")
        buf.write("\3\2\2\2\u01a6\u01a9\3\2\2\2\u01a7\u01a5\3\2\2\2\u01a7")
        buf.write("\u01a8\3\2\2\2\u01a8\u01c3\3\2\2\2\u01a9\u01a7\3\2\2\2")
        buf.write("\u01aa\u01b8\5\"\22\2\u01ab\u01ad\7\61\2\2\u01ac\u01ab")
        buf.write("\3\2\2\2\u01ad\u01b0\3\2\2\2\u01ae\u01ac\3\2\2\2\u01ae")
        buf.write("\u01af\3\2\2\2\u01af\u01b1\3\2\2\2\u01b0\u01ae\3\2\2\2")
        buf.write("\u01b1\u01b5\7\62\2\2\u01b2\u01b4\7\61\2\2\u01b3\u01b2")
        buf.write("\3\2\2\2\u01b4\u01b7\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b5")
        buf.write("\u01b6\3\2\2\2\u01b6\u01b9\3\2\2\2\u01b7\u01b5\3\2\2\2")
        buf.write("\u01b8\u01ae\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\u01b8\3")
        buf.write("\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01c3\3\2\2\2\u01bc\u01be")
        buf.write("\5\6\4\2\u01bd\u01bf\t\2\2\2\u01be\u01bd\3\2\2\2\u01bf")
        buf.write("\u01c0\3\2\2\2\u01c0\u01be\3\2\2\2\u01c0\u01c1\3\2\2\2")
        buf.write("\u01c1\u01c3\3\2\2\2\u01c2\u019c\3\2\2\2\u01c2\u01aa\3")
        buf.write("\2\2\2\u01c2\u01bc\3\2\2\2\u01c3\u01c6\3\2\2\2\u01c4\u01c2")
        buf.write("\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5\u01dc\3\2\2\2\u01c6")
        buf.write("\u01c4\3\2\2\2\u01c7\u01cb\5\"\22\2\u01c8\u01ca\t\2\2")
        buf.write("\2\u01c9\u01c8\3\2\2\2\u01ca\u01cd\3\2\2\2\u01cb\u01c9")
        buf.write("\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01d4\3\2\2\2\u01cd")
        buf.write("\u01cb\3\2\2\2\u01ce\u01d5\7\3\2\2\u01cf\u01d1\t\2\2\2")
        buf.write("\u01d0\u01cf\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2\u01d0\3")
        buf.write("\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01d5\3\2\2\2\u01d4\u01ce")
        buf.write("\3\2\2\2\u01d4\u01d0\3\2\2\2\u01d5\u01dd\3\2\2\2\u01d6")
        buf.write("\u01d8\5\6\4\2\u01d7\u01d9\t\2\2\2\u01d8\u01d7\3\2\2\2")
        buf.write("\u01d9\u01da\3\2\2\2\u01da\u01d8\3\2\2\2\u01da\u01db\3")
        buf.write("\2\2\2\u01db\u01dd\3\2\2\2\u01dc\u01c7\3\2\2\2\u01dc\u01d6")
        buf.write("\3\2\2\2\u01dd\u01df\3\2\2\2\u01de\u01c4\3\2\2\2\u01de")
        buf.write("\u01df\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\u01e1\7\23\2")
        buf.write("\2\u01e1\13\3\2\2\2\u01e2\u01e3\5\16\b\2\u01e3\u01e7\5")
        buf.write("\20\t\2\u01e4\u01e6\5\22\n\2\u01e5\u01e4\3\2\2\2\u01e6")
        buf.write("\u01e9\3\2\2\2\u01e7\u01e5\3\2\2\2\u01e7\u01e8\3\2\2\2")
        buf.write("\u01e8\u01eb\3\2\2\2\u01e9\u01e7\3\2\2\2\u01ea\u01ec\5")
        buf.write("\24\13\2\u01eb\u01ea\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec")
        buf.write("\u01ed\3\2\2\2\u01ed\u01ee\7\23\2\2\u01ee\r\3\2\2\2\u01ef")
        buf.write("\u01f1\7\17\2\2\u01f0\u01f2\t\2\2\2\u01f1\u01f0\3\2\2")
        buf.write("\2\u01f2\u01f3\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f3\u01f4")
        buf.write("\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f7\5\26\f\2\u01f6")
        buf.write("\u01f8\t\2\2\2\u01f7\u01f6\3\2\2\2\u01f8\u01f9\3\2\2\2")
        buf.write("\u01f9\u01f7\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\17\3\2")
        buf.write("\2\2\u01fb\u01fd\7\20\2\2\u01fc\u01fe\t\2\2\2\u01fd\u01fc")
        buf.write("\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u01fd\3\2\2\2\u01ff")
        buf.write("\u0200\3\2\2\2\u0200\u0243\3\2\2\2\u0201\u0205\5\"\22")
        buf.write("\2\u0202\u0204\t\2\2\2\u0203\u0202\3\2\2\2\u0204\u0207")
        buf.write("\3\2\2\2\u0205\u0203\3\2\2\2\u0205\u0206\3\2\2\2\u0206")
        buf.write("\u0208\3\2\2\2\u0207\u0205\3\2\2\2\u0208\u020c\7\3\2\2")
        buf.write("\u0209\u020b\t\2\2\2\u020a\u0209\3\2\2\2\u020b\u020e\3")
        buf.write("\2\2\2\u020c\u020a\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u0228")
        buf.write("\3\2\2\2\u020e\u020c\3\2\2\2\u020f\u021d\5\"\22\2\u0210")
        buf.write("\u0212\7\61\2\2\u0211\u0210\3\2\2\2\u0212\u0215\3\2\2")
        buf.write("\2\u0213\u0211\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0216")
        buf.write("\3\2\2\2\u0215\u0213\3\2\2\2\u0216\u021a\7\62\2\2\u0217")
        buf.write("\u0219\7\61\2\2\u0218\u0217\3\2\2\2\u0219\u021c\3\2\2")
        buf.write("\2\u021a\u0218\3\2\2\2\u021a\u021b\3\2\2\2\u021b\u021e")
        buf.write("\3\2\2\2\u021c\u021a\3\2\2\2\u021d\u0213\3\2\2\2\u021e")
        buf.write("\u021f\3\2\2\2\u021f\u021d\3\2\2\2\u021f\u0220\3\2\2\2")
        buf.write("\u0220\u0228\3\2\2\2\u0221\u0223\5\6\4\2\u0222\u0224\t")
        buf.write("\2\2\2\u0223\u0222\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0223")
        buf.write("\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u0228\3\2\2\2\u0227")
        buf.write("\u0201\3\2\2\2\u0227\u020f\3\2\2\2\u0227\u0221\3\2\2\2")
        buf.write("\u0228\u022b\3\2\2\2\u0229\u0227\3\2\2\2\u0229\u022a\3")
        buf.write("\2\2\2\u022a\u0241\3\2\2\2\u022b\u0229\3\2\2\2\u022c\u0230")
        buf.write("\5\"\22\2\u022d\u022f\t\2\2\2\u022e\u022d\3\2\2\2\u022f")
        buf.write("\u0232\3\2\2\2\u0230\u022e\3\2\2\2\u0230\u0231\3\2\2\2")
        buf.write("\u0231\u0239\3\2\2\2\u0232\u0230\3\2\2\2\u0233\u023a\7")
        buf.write("\3\2\2\u0234\u0236\t\2\2\2\u0235\u0234\3\2\2\2\u0236\u0237")
        buf.write("\3\2\2\2\u0237\u0235\3\2\2\2\u0237\u0238\3\2\2\2\u0238")
        buf.write("\u023a\3\2\2\2\u0239\u0233\3\2\2\2\u0239\u0235\3\2\2\2")
        buf.write("\u023a\u0242\3\2\2\2\u023b\u023d\5\6\4\2\u023c\u023e\t")
        buf.write("\2\2\2\u023d\u023c\3\2\2\2\u023e\u023f\3\2\2\2\u023f\u023d")
        buf.write("\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0242\3\2\2\2\u0241")
        buf.write("\u022c\3\2\2\2\u0241\u023b\3\2\2\2\u0242\u0244\3\2\2\2")
        buf.write("\u0243\u0229\3\2\2\2\u0243\u0244\3\2\2\2\u0244\21\3\2")
        buf.write("\2\2\u0245\u0247\7\21\2\2\u0246\u0248\t\2\2\2\u0247\u0246")
        buf.write("\3\2\2\2\u0248\u0249\3\2\2\2\u0249\u0247\3\2\2\2\u0249")
        buf.write("\u024a\3\2\2\2\u024a\u024b\3\2\2\2\u024b\u024c\5\16\b")
        buf.write("\2\u024c\u024d\5\20\t\2\u024d\23\3\2\2\2\u024e\u0250\7")
        buf.write("\21\2\2\u024f\u0251\t\2\2\2\u0250\u024f\3\2\2\2\u0251")
        buf.write("\u0252\3\2\2\2\u0252\u0250\3\2\2\2\u0252\u0253\3\2\2\2")
        buf.write("\u0253\u0296\3\2\2\2\u0254\u0258\5\"\22\2\u0255\u0257")
        buf.write("\t\2\2\2\u0256\u0255\3\2\2\2\u0257\u025a\3\2\2\2\u0258")
        buf.write("\u0256\3\2\2\2\u0258\u0259\3\2\2\2\u0259\u025b\3\2\2\2")
        buf.write("\u025a\u0258\3\2\2\2\u025b\u025f\7\3\2\2\u025c\u025e\t")
        buf.write("\2\2\2\u025d\u025c\3\2\2\2\u025e\u0261\3\2\2\2\u025f\u025d")
        buf.write("\3\2\2\2\u025f\u0260\3\2\2\2\u0260\u027b\3\2\2\2\u0261")
        buf.write("\u025f\3\2\2\2\u0262\u0270\5\"\22\2\u0263\u0265\7\61\2")
        buf.write("\2\u0264\u0263\3\2\2\2\u0265\u0268\3\2\2\2\u0266\u0264")
        buf.write("\3\2\2\2\u0266\u0267\3\2\2\2\u0267\u0269\3\2\2\2\u0268")
        buf.write("\u0266\3\2\2\2\u0269\u026d\7\62\2\2\u026a\u026c\7\61\2")
        buf.write("\2\u026b\u026a\3\2\2\2\u026c\u026f\3\2\2\2\u026d\u026b")
        buf.write("\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u0271\3\2\2\2\u026f")
        buf.write("\u026d\3\2\2\2\u0270\u0266\3\2\2\2\u0271\u0272\3\2\2\2")
        buf.write("\u0272\u0270\3\2\2\2\u0272\u0273\3\2\2\2\u0273\u027b\3")
        buf.write("\2\2\2\u0274\u0276\5\6\4\2\u0275\u0277\t\2\2\2\u0276\u0275")
        buf.write("\3\2\2\2\u0277\u0278\3\2\2\2\u0278\u0276\3\2\2\2\u0278")
        buf.write("\u0279\3\2\2\2\u0279\u027b\3\2\2\2\u027a\u0254\3\2\2\2")
        buf.write("\u027a\u0262\3\2\2\2\u027a\u0274\3\2\2\2\u027b\u027e\3")
        buf.write("\2\2\2\u027c\u027a\3\2\2\2\u027c\u027d\3\2\2\2\u027d\u0294")
        buf.write("\3\2\2\2\u027e\u027c\3\2\2\2\u027f\u0283\5\"\22\2\u0280")
        buf.write("\u0282\t\2\2\2\u0281\u0280\3\2\2\2\u0282\u0285\3\2\2\2")
        buf.write("\u0283\u0281\3\2\2\2\u0283\u0284\3\2\2\2\u0284\u028c\3")
        buf.write("\2\2\2\u0285\u0283\3\2\2\2\u0286\u028d\7\3\2\2\u0287\u0289")
        buf.write("\t\2\2\2\u0288\u0287\3\2\2\2\u0289\u028a\3\2\2\2\u028a")
        buf.write("\u0288\3\2\2\2\u028a\u028b\3\2\2\2\u028b\u028d\3\2\2\2")
        buf.write("\u028c\u0286\3\2\2\2\u028c\u0288\3\2\2\2\u028d\u0295\3")
        buf.write("\2\2\2\u028e\u0290\5\6\4\2\u028f\u0291\t\2\2\2\u0290\u028f")
        buf.write("\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0290\3\2\2\2\u0292")
        buf.write("\u0293\3\2\2\2\u0293\u0295\3\2\2\2\u0294\u027f\3\2\2\2")
        buf.write("\u0294\u028e\3\2\2\2\u0295\u0297\3\2\2\2\u0296\u027c\3")
        buf.write("\2\2\2\u0296\u0297\3\2\2\2\u0297\25\3\2\2\2\u0298\u029d")
        buf.write("\5 \21\2\u0299\u029d\7-\2\2\u029a\u029d\5\30\r\2\u029b")
        buf.write("\u029d\5\32\16\2\u029c\u0298\3\2\2\2\u029c\u0299\3\2\2")
        buf.write("\2\u029c\u029a\3\2\2\2\u029c\u029b\3\2\2\2\u029d\27\3")
        buf.write("\2\2\2\u029e\u02a2\5\34\17\2\u029f\u02a1\t\2\2\2\u02a0")
        buf.write("\u029f\3\2\2\2\u02a1\u02a4\3\2\2\2\u02a2\u02a0\3\2\2\2")
        buf.write("\u02a2\u02a3\3\2\2\2\u02a3\u02a5\3\2\2\2\u02a4\u02a2\3")
        buf.write("\2\2\2\u02a5\u02a9\7*\2\2\u02a6\u02a8\t\2\2\2\u02a7\u02a6")
        buf.write("\3\2\2\2\u02a8\u02ab\3\2\2\2\u02a9\u02a7\3\2\2\2\u02a9")
        buf.write("\u02aa\3\2\2\2\u02aa\u02ac\3\2\2\2\u02ab\u02a9\3\2\2\2")
        buf.write("\u02ac\u02ad\5\34\17\2\u02ad\31\3\2\2\2\u02ae\u02b2\5")
        buf.write("\30\r\2\u02af\u02b1\t\2\2\2\u02b0\u02af\3\2\2\2\u02b1")
        buf.write("\u02b4\3\2\2\2\u02b2\u02b0\3\2\2\2\u02b2\u02b3\3\2\2\2")
        buf.write("\u02b3\u02b5\3\2\2\2\u02b4\u02b2\3\2\2\2\u02b5\u02b9\7")
        buf.write(",\2\2\u02b6\u02b8\t\2\2\2\u02b7\u02b6\3\2\2\2\u02b8\u02bb")
        buf.write("\3\2\2\2\u02b9\u02b7\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba")
        buf.write("\u02bc\3\2\2\2\u02bb\u02b9\3\2\2\2\u02bc\u02bd\5\30\r")
        buf.write("\2\u02bd\33\3\2\2\2\u02be\u02c6\5 \21\2\u02bf\u02c6\7")
        buf.write(".\2\2\u02c0\u02c6\7\60\2\2\u02c1\u02c6\7/\2\2\u02c2\u02c6")
        buf.write("\5\36\20\2\u02c3\u02c6\5N(\2\u02c4\u02c6\5(\25\2\u02c5")
        buf.write("\u02be\3\2\2\2\u02c5\u02bf\3\2\2\2\u02c5\u02c0\3\2\2\2")
        buf.write("\u02c5\u02c1\3\2\2\2\u02c5\u02c2\3\2\2\2\u02c5\u02c3\3")
        buf.write("\2\2\2\u02c5\u02c4\3\2\2\2\u02c6\35\3\2\2\2\u02c7\u02cb")
        buf.write("\5P)\2\u02c8\u02ca\t\2\2\2\u02c9\u02c8\3\2\2\2\u02ca\u02cd")
        buf.write("\3\2\2\2\u02cb\u02c9\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc")
        buf.write("\u02ce\3\2\2\2\u02cd\u02cb\3\2\2\2\u02ce\u02d2\7+\2\2")
        buf.write("\u02cf\u02d1\t\2\2\2\u02d0\u02cf\3\2\2\2\u02d1\u02d4\3")
        buf.write("\2\2\2\u02d2\u02d0\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d5")
        buf.write("\3\2\2\2\u02d4\u02d2\3\2\2\2\u02d5\u02d6\5P)\2\u02d6\37")
        buf.write("\3\2\2\2\u02d7\u02ee\5*\26\2\u02d8\u02ee\5,\27\2\u02d9")
        buf.write("\u02ee\5.\30\2\u02da\u02ee\5\60\31\2\u02db\u02ee\5\62")
        buf.write("\32\2\u02dc\u02ee\5\64\33\2\u02dd\u02ee\5\66\34\2\u02de")
        buf.write("\u02ee\58\35\2\u02df\u02ee\5:\36\2\u02e0\u02ee\5<\37\2")
        buf.write("\u02e1\u02ee\5> \2\u02e2\u02ee\5@!\2\u02e3\u02ee\5B\"")
        buf.write("\2\u02e4\u02ee\5D#\2\u02e5\u02ee\5F$\2\u02e6\u02ee\5H")
        buf.write("%\2\u02e7\u02ee\5J&\2\u02e8\u02ee\5L\'\2\u02e9\u02ee\7")
        buf.write("\37\2\2\u02ea\u02ee\7\"\2\2\u02eb\u02ee\7#\2\2\u02ec\u02ee")
        buf.write("\7$\2\2\u02ed\u02d7\3\2\2\2\u02ed\u02d8\3\2\2\2\u02ed")
        buf.write("\u02d9\3\2\2\2\u02ed\u02da\3\2\2\2\u02ed\u02db\3\2\2\2")
        buf.write("\u02ed\u02dc\3\2\2\2\u02ed\u02dd\3\2\2\2\u02ed\u02de\3")
        buf.write("\2\2\2\u02ed\u02df\3\2\2\2\u02ed\u02e0\3\2\2\2\u02ed\u02e1")
        buf.write("\3\2\2\2\u02ed\u02e2\3\2\2\2\u02ed\u02e3\3\2\2\2\u02ed")
        buf.write("\u02e4\3\2\2\2\u02ed\u02e5\3\2\2\2\u02ed\u02e6\3\2\2\2")
        buf.write("\u02ed\u02e7\3\2\2\2\u02ed\u02e8\3\2\2\2\u02ed\u02e9\3")
        buf.write("\2\2\2\u02ed\u02ea\3\2\2\2\u02ed\u02eb\3\2\2\2\u02ed\u02ec")
        buf.write("\3\2\2\2\u02ee!\3\2\2\2\u02ef\u0307\5*\26\2\u02f0\u0307")
        buf.write("\5,\27\2\u02f1\u0307\5.\30\2\u02f2\u0307\5\60\31\2\u02f3")
        buf.write("\u0307\5\62\32\2\u02f4\u0307\5\64\33\2\u02f5\u0307\5\66")
        buf.write("\34\2\u02f6\u0307\58\35\2\u02f7\u0307\5:\36\2\u02f8\u0307")
        buf.write("\5<\37\2\u02f9\u0307\5> \2\u02fa\u0307\5@!\2\u02fb\u0307")
        buf.write("\5B\"\2\u02fc\u0307\5D#\2\u02fd\u0307\5F$\2\u02fe\u0307")
        buf.write("\5H%\2\u02ff\u0307\5J&\2\u0300\u0307\5&\24\2\u0301\u0307")
        buf.write("\5$\23\2\u0302\u0307\7\37\2\2\u0303\u0307\7\"\2\2\u0304")
        buf.write("\u0307\7#\2\2\u0305\u0307\7$\2\2\u0306\u02ef\3\2\2\2\u0306")
        buf.write("\u02f0\3\2\2\2\u0306\u02f1\3\2\2\2\u0306\u02f2\3\2\2\2")
        buf.write("\u0306\u02f3\3\2\2\2\u0306\u02f4\3\2\2\2\u0306\u02f5\3")
        buf.write("\2\2\2\u0306\u02f6\3\2\2\2\u0306\u02f7\3\2\2\2\u0306\u02f8")
        buf.write("\3\2\2\2\u0306\u02f9\3\2\2\2\u0306\u02fa\3\2\2\2\u0306")
        buf.write("\u02fb\3\2\2\2\u0306\u02fc\3\2\2\2\u0306\u02fd\3\2\2\2")
        buf.write("\u0306\u02fe\3\2\2\2\u0306\u02ff\3\2\2\2\u0306\u0300\3")
        buf.write("\2\2\2\u0306\u0301\3\2\2\2\u0306\u0302\3\2\2\2\u0306\u0303")
        buf.write("\3\2\2\2\u0306\u0304\3\2\2\2\u0306\u0305\3\2\2\2\u0307")
        buf.write("#\3\2\2\2\u0308\u030b\7/\2\2\u0309\u030b\5(\25\2\u030a")
        buf.write("\u0308\3\2\2\2\u030a\u0309\3\2\2\2\u030b\u030f\3\2\2\2")
        buf.write("\u030c\u030e\t\2\2\2\u030d\u030c\3\2\2\2\u030e\u0311\3")
        buf.write("\2\2\2\u030f\u030d\3\2\2\2\u030f\u0310\3\2\2\2\u0310\u0312")
        buf.write("\3\2\2\2\u0311\u030f\3\2\2\2\u0312\u0316\7\7\2\2\u0313")
        buf.write("\u0315\t\2\2\2\u0314\u0313\3\2\2\2\u0315\u0318\3\2\2\2")
        buf.write("\u0316\u0314\3\2\2\2\u0316\u0317\3\2\2\2\u0317\u0319\3")
        buf.write("\2\2\2\u0318\u0316\3\2\2\2\u0319\u031a\5\34\17\2\u031a")
        buf.write("%\3\2\2\2\u031b\u031f\7/\2\2\u031c\u031e\t\2\2\2\u031d")
        buf.write("\u031c\3\2\2\2\u031e\u0321\3\2\2\2\u031f\u031d\3\2\2\2")
        buf.write("\u031f\u0320\3\2\2\2\u0320\u0322\3\2\2\2\u0321\u031f\3")
        buf.write("\2\2\2\u0322\u0326\7)\2\2\u0323\u0325\t\2\2\2\u0324\u0323")
        buf.write("\3\2\2\2\u0325\u0328\3\2\2\2\u0326\u0324\3\2\2\2\u0326")
        buf.write("\u0327\3\2\2\2\u0327\u0329\3\2\2\2\u0328\u0326\3\2\2\2")
        buf.write("\u0329\u032d\5\34\17\2\u032a\u032c\t\2\2\2\u032b\u032a")
        buf.write("\3\2\2\2\u032c\u032f\3\2\2\2\u032d\u032b\3\2\2\2\u032d")
        buf.write("\u032e\3\2\2\2\u032e\'\3\2\2\2\u032f\u032d\3\2\2\2\u0330")
        buf.write("\u0331\7/\2\2\u0331\u0335\7\b\2\2\u0332\u0334\t\2\2\2")
        buf.write("\u0333\u0332\3\2\2\2\u0334\u0337\3\2\2\2\u0335\u0333\3")
        buf.write("\2\2\2\u0335\u0336\3\2\2\2\u0336\u0338\3\2\2\2\u0337\u0335")
        buf.write("\3\2\2\2\u0338\u033c\5\34\17\2\u0339\u033b\t\2\2\2\u033a")
        buf.write("\u0339\3\2\2\2\u033b\u033e\3\2\2\2\u033c\u033a\3\2\2\2")
        buf.write("\u033c\u033d\3\2\2\2\u033d\u033f\3\2\2\2\u033e\u033c\3")
        buf.write("\2\2\2\u033f\u0340\7\t\2\2\u0340)\3\2\2\2\u0341\u0345")
        buf.write("\7/\2\2\u0342\u0344\t\2\2\2\u0343\u0342\3\2\2\2\u0344")
        buf.write("\u0347\3\2\2\2\u0345\u0343\3\2\2\2\u0345\u0346\3\2\2\2")
        buf.write("\u0346\u0348\3\2\2\2\u0347\u0345\3\2\2\2\u0348\u034c\7")
        buf.write("\4\2\2\u0349\u034b\t\2\2\2\u034a\u0349\3\2\2\2\u034b\u034e")
        buf.write("\3\2\2\2\u034c\u034a\3\2\2\2\u034c\u034d\3\2\2\2\u034d")
        buf.write("\u0369\3\2\2\2\u034e\u034c\3\2\2\2\u034f\u0353\5P)\2\u0350")
        buf.write("\u0352\t\2\2\2\u0351\u0350\3\2\2\2\u0352\u0355\3\2\2\2")
        buf.write("\u0353\u0351\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0366\3")
        buf.write("\2\2\2\u0355\u0353\3\2\2\2\u0356\u035a\7\5\2\2\u0357\u0359")
        buf.write("\t\2\2\2\u0358\u0357\3\2\2\2\u0359\u035c\3\2\2\2\u035a")
        buf.write("\u0358\3\2\2\2\u035a\u035b\3\2\2\2\u035b\u035d\3\2\2\2")
        buf.write("\u035c\u035a\3\2\2\2\u035d\u0361\5P)\2\u035e\u0360\t\2")
        buf.write("\2\2\u035f\u035e\3\2\2\2\u0360\u0363\3\2\2\2\u0361\u035f")
        buf.write("\3\2\2\2\u0361\u0362\3\2\2\2\u0362\u0365\3\2\2\2\u0363")
        buf.write("\u0361\3\2\2\2\u0364\u0356\3\2\2\2\u0365\u0368\3\2\2\2")
        buf.write("\u0366\u0364\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u036a\3")
        buf.write("\2\2\2\u0368\u0366\3\2\2\2\u0369\u034f\3\2\2\2\u0369\u036a")
        buf.write("\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036c\7\6\2\2\u036c")
        buf.write("+\3\2\2\2\u036d\u0371\7\24\2\2\u036e\u0370\t\2\2\2\u036f")
        buf.write("\u036e\3\2\2\2\u0370\u0373\3\2\2\2\u0371\u036f\3\2\2\2")
        buf.write("\u0371\u0372\3\2\2\2\u0372\u0374\3\2\2\2\u0373\u0371\3")
        buf.write("\2\2\2\u0374\u0378\7\4\2\2\u0375\u0377\t\2\2\2\u0376\u0375")
        buf.write("\3\2\2\2\u0377\u037a\3\2\2\2\u0378\u0376\3\2\2\2\u0378")
        buf.write("\u0379\3\2\2\2\u0379\u037b\3\2\2\2\u037a\u0378\3\2\2\2")
        buf.write("\u037b\u037f\5P)\2\u037c\u037e\t\2\2\2\u037d\u037c\3\2")
        buf.write("\2\2\u037e\u0381\3\2\2\2\u037f\u037d\3\2\2\2\u037f\u0380")
        buf.write("\3\2\2\2\u0380\u0382\3\2\2\2\u0381\u037f\3\2\2\2\u0382")
        buf.write("\u0383\7\6\2\2\u0383-\3\2\2\2\u0384\u0388\7\25\2\2\u0385")
        buf.write("\u0387\t\2\2\2\u0386\u0385\3\2\2\2\u0387\u038a\3\2\2\2")
        buf.write("\u0388\u0386\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u038b\3")
        buf.write("\2\2\2\u038a\u0388\3\2\2\2\u038b\u038f\7\4\2\2\u038c\u038e")
        buf.write("\t\2\2\2\u038d\u038c\3\2\2\2\u038e\u0391\3\2\2\2\u038f")
        buf.write("\u038d\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0392\3\2\2\2")
        buf.write("\u0391\u038f\3\2\2\2\u0392\u0396\5P)\2\u0393\u0395\t\2")
        buf.write("\2\2\u0394\u0393\3\2\2\2\u0395\u0398\3\2\2\2\u0396\u0394")
        buf.write("\3\2\2\2\u0396\u0397\3\2\2\2\u0397\u0399\3\2\2\2\u0398")
        buf.write("\u0396\3\2\2\2\u0399\u039a\7\6\2\2\u039a/\3\2\2\2\u039b")
        buf.write("\u039f\7\26\2\2\u039c\u039e\t\2\2\2\u039d\u039c\3\2\2")
        buf.write("\2\u039e\u03a1\3\2\2\2\u039f\u039d\3\2\2\2\u039f\u03a0")
        buf.write("\3\2\2\2\u03a0\u03a2\3\2\2\2\u03a1\u039f\3\2\2\2\u03a2")
        buf.write("\u03a6\7\4\2\2\u03a3\u03a5\t\2\2\2\u03a4\u03a3\3\2\2\2")
        buf.write("\u03a5\u03a8\3\2\2\2\u03a6\u03a4\3\2\2\2\u03a6\u03a7\3")
        buf.write("\2\2\2\u03a7\u03a9\3\2\2\2\u03a8\u03a6\3\2\2\2\u03a9\u03ad")
        buf.write("\5P)\2\u03aa\u03ac\t\2\2\2\u03ab\u03aa\3\2\2\2\u03ac\u03af")
        buf.write("\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae")
        buf.write("\u03b0\3\2\2\2\u03af\u03ad\3\2\2\2\u03b0\u03b4\7\5\2\2")
        buf.write("\u03b1\u03b3\t\2\2\2\u03b2\u03b1\3\2\2\2\u03b3\u03b6\3")
        buf.write("\2\2\2\u03b4\u03b2\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5\u03b7")
        buf.write("\3\2\2\2\u03b6\u03b4\3\2\2\2\u03b7\u03bb\5P)\2\u03b8\u03ba")
        buf.write("\t\2\2\2\u03b9\u03b8\3\2\2\2\u03ba\u03bd\3\2\2\2\u03bb")
        buf.write("\u03b9\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03be\3\2\2\2")
        buf.write("\u03bd\u03bb\3\2\2\2\u03be\u03bf\7\6\2\2\u03bf\61\3\2")
        buf.write("\2\2\u03c0\u03c4\7\27\2\2\u03c1\u03c3\t\2\2\2\u03c2\u03c1")
        buf.write("\3\2\2\2\u03c3\u03c6\3\2\2\2\u03c4\u03c2\3\2\2\2\u03c4")
        buf.write("\u03c5\3\2\2\2\u03c5\u03c7\3\2\2\2\u03c6\u03c4\3\2\2\2")
        buf.write("\u03c7\u03cb\7\4\2\2\u03c8\u03ca\t\2\2\2\u03c9\u03c8\3")
        buf.write("\2\2\2\u03ca\u03cd\3\2\2\2\u03cb\u03c9\3\2\2\2\u03cb\u03cc")
        buf.write("\3\2\2\2\u03cc\u03ce\3\2\2\2\u03cd\u03cb\3\2\2\2\u03ce")
        buf.write("\u03d2\5P)\2\u03cf\u03d1\t\2\2\2\u03d0\u03cf\3\2\2\2\u03d1")
        buf.write("\u03d4\3\2\2\2\u03d2\u03d0\3\2\2\2\u03d2\u03d3\3\2\2\2")
        buf.write("\u03d3\u03d5\3\2\2\2\u03d4\u03d2\3\2\2\2\u03d5\u03d6\7")
        buf.write("\6\2\2\u03d6\63\3\2\2\2\u03d7\u03db\7\30\2\2\u03d8\u03da")
        buf.write("\t\2\2\2\u03d9\u03d8\3\2\2\2\u03da\u03dd\3\2\2\2\u03db")
        buf.write("\u03d9\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\u03de\3\2\2\2")
        buf.write("\u03dd\u03db\3\2\2\2\u03de\u03e2\7\4\2\2\u03df\u03e1\t")
        buf.write("\2\2\2\u03e0\u03df\3\2\2\2\u03e1\u03e4\3\2\2\2\u03e2\u03e0")
        buf.write("\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e5\3\2\2\2\u03e4")
        buf.write("\u03e2\3\2\2\2\u03e5\u03e9\5P)\2\u03e6\u03e8\t\2\2\2\u03e7")
        buf.write("\u03e6\3\2\2\2\u03e8\u03eb\3\2\2\2\u03e9\u03e7\3\2\2\2")
        buf.write("\u03e9\u03ea\3\2\2\2\u03ea\u03ec\3\2\2\2\u03eb\u03e9\3")
        buf.write("\2\2\2\u03ec\u03f0\7\5\2\2\u03ed\u03ef\t\2\2\2\u03ee\u03ed")
        buf.write("\3\2\2\2\u03ef\u03f2\3\2\2\2\u03f0\u03ee\3\2\2\2\u03f0")
        buf.write("\u03f1\3\2\2\2\u03f1\u03f3\3\2\2\2\u03f2\u03f0\3\2\2\2")
        buf.write("\u03f3\u03f7\5P)\2\u03f4\u03f6\t\2\2\2\u03f5\u03f4\3\2")
        buf.write("\2\2\u03f6\u03f9\3\2\2\2\u03f7\u03f5\3\2\2\2\u03f7\u03f8")
        buf.write("\3\2\2\2\u03f8\u03fa\3\2\2\2\u03f9\u03f7\3\2\2\2\u03fa")
        buf.write("\u03fb\7\6\2\2\u03fb\65\3\2\2\2\u03fc\u0400\7\31\2\2\u03fd")
        buf.write("\u03ff\t\2\2\2\u03fe\u03fd\3\2\2\2\u03ff\u0402\3\2\2\2")
        buf.write("\u0400\u03fe\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u0403\3")
        buf.write("\2\2\2\u0402\u0400\3\2\2\2\u0403\u0407\7\4\2\2\u0404\u0406")
        buf.write("\t\2\2\2\u0405\u0404\3\2\2\2\u0406\u0409\3\2\2\2\u0407")
        buf.write("\u0405\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u040a\3\2\2\2")
        buf.write("\u0409\u0407\3\2\2\2\u040a\u040e\5P)\2\u040b\u040d\t\2")
        buf.write("\2\2\u040c\u040b\3\2\2\2\u040d\u0410\3\2\2\2\u040e\u040c")
        buf.write("\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u0411\3\2\2\2\u0410")
        buf.write("\u040e\3\2\2\2\u0411\u0415\7\5\2\2\u0412\u0414\t\2\2\2")
        buf.write("\u0413\u0412\3\2\2\2\u0414\u0417\3\2\2\2\u0415\u0413\3")
        buf.write("\2\2\2\u0415\u0416\3\2\2\2\u0416\u0418\3\2\2\2\u0417\u0415")
        buf.write("\3\2\2\2\u0418\u041c\5P)\2\u0419\u041b\t\2\2\2\u041a\u0419")
        buf.write("\3\2\2\2\u041b\u041e\3\2\2\2\u041c\u041a\3\2\2\2\u041c")
        buf.write("\u041d\3\2\2\2\u041d\u041f\3\2\2\2\u041e\u041c\3\2\2\2")
        buf.write("\u041f\u0420\7\6\2\2\u0420\67\3\2\2\2\u0421\u0425\7\32")
        buf.write("\2\2\u0422\u0424\t\2\2\2\u0423\u0422\3\2\2\2\u0424\u0427")
        buf.write("\3\2\2\2\u0425\u0423\3\2\2\2\u0425\u0426\3\2\2\2\u0426")
        buf.write("\u0428\3\2\2\2\u0427\u0425\3\2\2\2\u0428\u042c\7\4\2\2")
        buf.write("\u0429\u042b\t\2\2\2\u042a\u0429\3\2\2\2\u042b\u042e\3")
        buf.write("\2\2\2\u042c\u042a\3\2\2\2\u042c\u042d\3\2\2\2\u042d\u042f")
        buf.write("\3\2\2\2\u042e\u042c\3\2\2\2\u042f\u0433\5P)\2\u0430\u0432")
        buf.write("\t\2\2\2\u0431\u0430\3\2\2\2\u0432\u0435\3\2\2\2\u0433")
        buf.write("\u0431\3\2\2\2\u0433\u0434\3\2\2\2\u0434\u0436\3\2\2\2")
        buf.write("\u0435\u0433\3\2\2\2\u0436\u043a\7\5\2\2\u0437\u0439\t")
        buf.write("\2\2\2\u0438\u0437\3\2\2\2\u0439\u043c\3\2\2\2\u043a\u0438")
        buf.write("\3\2\2\2\u043a\u043b\3\2\2\2\u043b\u043d\3\2\2\2\u043c")
        buf.write("\u043a\3\2\2\2\u043d\u0441\5P)\2\u043e\u0440\t\2\2\2\u043f")
        buf.write("\u043e\3\2\2\2\u0440\u0443\3\2\2\2\u0441\u043f\3\2\2\2")
        buf.write("\u0441\u0442\3\2\2\2\u0442\u0444\3\2\2\2\u0443\u0441\3")
        buf.write("\2\2\2\u0444\u0445\7\6\2\2\u04459\3\2\2\2\u0446\u044a")
        buf.write("\7\33\2\2\u0447\u0449\t\2\2\2\u0448\u0447\3\2\2\2\u0449")
        buf.write("\u044c\3\2\2\2\u044a\u0448\3\2\2\2\u044a\u044b\3\2\2\2")
        buf.write("\u044b\u044d\3\2\2\2\u044c\u044a\3\2\2\2\u044d\u0451\7")
        buf.write("\4\2\2\u044e\u0450\t\2\2\2\u044f\u044e\3\2\2\2\u0450\u0453")
        buf.write("\3\2\2\2\u0451\u044f\3\2\2\2\u0451\u0452\3\2\2\2\u0452")
        buf.write("\u0454\3\2\2\2\u0453\u0451\3\2\2\2\u0454\u0458\5P)\2\u0455")
        buf.write("\u0457\t\2\2\2\u0456\u0455\3\2\2\2\u0457\u045a\3\2\2\2")
        buf.write("\u0458\u0456\3\2\2\2\u0458\u0459\3\2\2\2\u0459\u045b\3")
        buf.write("\2\2\2\u045a\u0458\3\2\2\2\u045b\u045f\7\5\2\2\u045c\u045e")
        buf.write("\t\2\2\2\u045d\u045c\3\2\2\2\u045e\u0461\3\2\2\2\u045f")
        buf.write("\u045d\3\2\2\2\u045f\u0460\3\2\2\2\u0460\u0462\3\2\2\2")
        buf.write("\u0461\u045f\3\2\2\2\u0462\u0466\5P)\2\u0463\u0465\t\2")
        buf.write("\2\2\u0464\u0463\3\2\2\2\u0465\u0468\3\2\2\2\u0466\u0464")
        buf.write("\3\2\2\2\u0466\u0467\3\2\2\2\u0467\u0469\3\2\2\2\u0468")
        buf.write("\u0466\3\2\2\2\u0469\u046a\7\6\2\2\u046a;\3\2\2\2\u046b")
        buf.write("\u046f\7&\2\2\u046c\u046e\t\2\2\2\u046d\u046c\3\2\2\2")
        buf.write("\u046e\u0471\3\2\2\2\u046f\u046d\3\2\2\2\u046f\u0470\3")
        buf.write("\2\2\2\u0470\u0472\3\2\2\2\u0471\u046f\3\2\2\2\u0472\u0476")
        buf.write("\7\4\2\2\u0473\u0475\t\2\2\2\u0474\u0473\3\2\2\2\u0475")
        buf.write("\u0478\3\2\2\2\u0476\u0474\3\2\2\2\u0476\u0477\3\2\2\2")
        buf.write("\u0477\u0479\3\2\2\2\u0478\u0476\3\2\2\2\u0479\u047d\5")
        buf.write("P)\2\u047a\u047c\t\2\2\2\u047b\u047a\3\2\2\2\u047c\u047f")
        buf.write("\3\2\2\2\u047d\u047b\3\2\2\2\u047d\u047e\3\2\2\2\u047e")
        buf.write("\u0480\3\2\2\2\u047f\u047d\3\2\2\2\u0480\u0481\7\6\2\2")
        buf.write("\u0481=\3\2\2\2\u0482\u0486\7\34\2\2\u0483\u0485\t\2\2")
        buf.write("\2\u0484\u0483\3\2\2\2\u0485\u0488\3\2\2\2\u0486\u0484")
        buf.write("\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0489\3\2\2\2\u0488")
        buf.write("\u0486\3\2\2\2\u0489\u048d\7\4\2\2\u048a\u048c\t\2\2\2")
        buf.write("\u048b\u048a\3\2\2\2\u048c\u048f\3\2\2\2\u048d\u048b\3")
        buf.write("\2\2\2\u048d\u048e\3\2\2\2\u048e\u0490\3\2\2\2\u048f\u048d")
        buf.write("\3\2\2\2\u0490\u0494\5P)\2\u0491\u0493\t\2\2\2\u0492\u0491")
        buf.write("\3\2\2\2\u0493\u0496\3\2\2\2\u0494\u0492\3\2\2\2\u0494")
        buf.write("\u0495\3\2\2\2\u0495\u0497\3\2\2\2\u0496\u0494\3\2\2\2")
        buf.write("\u0497\u0498\7\6\2\2\u0498?\3\2\2\2\u0499\u049d\7\35\2")
        buf.write("\2\u049a\u049c\t\2\2\2\u049b\u049a\3\2\2\2\u049c\u049f")
        buf.write("\3\2\2\2\u049d\u049b\3\2\2\2\u049d\u049e\3\2\2\2\u049e")
        buf.write("\u04a0\3\2\2\2\u049f\u049d\3\2\2\2\u04a0\u04a4\7\4\2\2")
        buf.write("\u04a1\u04a3\t\2\2\2\u04a2\u04a1\3\2\2\2\u04a3\u04a6\3")
        buf.write("\2\2\2\u04a4\u04a2\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04b7")
        buf.write("\3\2\2\2\u04a6\u04a4\3\2\2\2\u04a7\u04ab\5P)\2\u04a8\u04aa")
        buf.write("\t\2\2\2\u04a9\u04a8\3\2\2\2\u04aa\u04ad\3\2\2\2\u04ab")
        buf.write("\u04a9\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac\u04ae\3\2\2\2")
        buf.write("\u04ad\u04ab\3\2\2\2\u04ae\u04b2\7\5\2\2\u04af\u04b1\t")
        buf.write("\2\2\2\u04b0\u04af\3\2\2\2\u04b1\u04b4\3\2\2\2\u04b2\u04b0")
        buf.write("\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3\u04b6\3\2\2\2\u04b4")
        buf.write("\u04b2\3\2\2\2\u04b5\u04a7\3\2\2\2\u04b6\u04b9\3\2\2\2")
        buf.write("\u04b7\u04b5\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8\u04ba\3")
        buf.write("\2\2\2\u04b9\u04b7\3\2\2\2\u04ba\u04be\5P)\2\u04bb\u04bd")
        buf.write("\t\2\2\2\u04bc\u04bb\3\2\2\2\u04bd\u04c0\3\2\2\2\u04be")
        buf.write("\u04bc\3\2\2\2\u04be\u04bf\3\2\2\2\u04bf\u04c1\3\2\2\2")
        buf.write("\u04c0\u04be\3\2\2\2\u04c1\u04c2\7\6\2\2\u04c2A\3\2\2")
        buf.write("\2\u04c3\u04c7\7 \2\2\u04c4\u04c6\t\2\2\2\u04c5\u04c4")
        buf.write("\3\2\2\2\u04c6\u04c9\3\2\2\2\u04c7\u04c5\3\2\2\2\u04c7")
        buf.write("\u04c8\3\2\2\2\u04c8\u04ca\3\2\2\2\u04c9\u04c7\3\2\2\2")
        buf.write("\u04ca\u04ce\7\4\2\2\u04cb\u04cd\t\2\2\2\u04cc\u04cb\3")
        buf.write("\2\2\2\u04cd\u04d0\3\2\2\2\u04ce\u04cc\3\2\2\2\u04ce\u04cf")
        buf.write("\3\2\2\2\u04cf\u04d1\3\2\2\2\u04d0\u04ce\3\2\2\2\u04d1")
        buf.write("\u04d5\5P)\2\u04d2\u04d4\t\2\2\2\u04d3\u04d2\3\2\2\2\u04d4")
        buf.write("\u04d7\3\2\2\2\u04d5\u04d3\3\2\2\2\u04d5\u04d6\3\2\2\2")
        buf.write("\u04d6\u04d8\3\2\2\2\u04d7\u04d5\3\2\2\2\u04d8\u04d9\7")
        buf.write("\6\2\2\u04d9C\3\2\2\2\u04da\u04de\7!\2\2\u04db\u04dd\t")
        buf.write("\2\2\2\u04dc\u04db\3\2\2\2\u04dd\u04e0\3\2\2\2\u04de\u04dc")
        buf.write("\3\2\2\2\u04de\u04df\3\2\2\2\u04df\u04e1\3\2\2\2\u04e0")
        buf.write("\u04de\3\2\2\2\u04e1\u04e5\7\4\2\2\u04e2\u04e4\t\2\2\2")
        buf.write("\u04e3\u04e2\3\2\2\2\u04e4\u04e7\3\2\2\2\u04e5\u04e3\3")
        buf.write("\2\2\2\u04e5\u04e6\3\2\2\2\u04e6\u04e8\3\2\2\2\u04e7\u04e5")
        buf.write("\3\2\2\2\u04e8\u04ec\5P)\2\u04e9\u04eb\t\2\2\2\u04ea\u04e9")
        buf.write("\3\2\2\2\u04eb\u04ee\3\2\2\2\u04ec\u04ea\3\2\2\2\u04ec")
        buf.write("\u04ed\3\2\2\2\u04ed\u04ef\3\2\2\2\u04ee\u04ec\3\2\2\2")
        buf.write("\u04ef\u04f0\7\6\2\2\u04f0E\3\2\2\2\u04f1\u04f5\7%\2\2")
        buf.write("\u04f2\u04f4\t\2\2\2\u04f3\u04f2\3\2\2\2\u04f4\u04f7\3")
        buf.write("\2\2\2\u04f5\u04f3\3\2\2\2\u04f5\u04f6\3\2\2\2\u04f6\u04f8")
        buf.write("\3\2\2\2\u04f7\u04f5\3\2\2\2\u04f8\u04fc\7\4\2\2\u04f9")
        buf.write("\u04fb\t\2\2\2\u04fa\u04f9\3\2\2\2\u04fb\u04fe\3\2\2\2")
        buf.write("\u04fc\u04fa\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u04ff\3")
        buf.write("\2\2\2\u04fe\u04fc\3\2\2\2\u04ff\u0503\5P)\2\u0500\u0502")
        buf.write("\t\2\2\2\u0501\u0500\3\2\2\2\u0502\u0505\3\2\2\2\u0503")
        buf.write("\u0501\3\2\2\2\u0503\u0504\3\2\2\2\u0504\u0506\3\2\2\2")
        buf.write("\u0505\u0503\3\2\2\2\u0506\u0507\7\6\2\2\u0507G\3\2\2")
        buf.write("\2\u0508\u050c\7\36\2\2\u0509\u050b\t\2\2\2\u050a\u0509")
        buf.write("\3\2\2\2\u050b\u050e\3\2\2\2\u050c\u050a\3\2\2\2\u050c")
        buf.write("\u050d\3\2\2\2\u050d\u050f\3\2\2\2\u050e\u050c\3\2\2\2")
        buf.write("\u050f\u0513\7\4\2\2\u0510\u0512\t\2\2\2\u0511\u0510\3")
        buf.write("\2\2\2\u0512\u0515\3\2\2\2\u0513\u0511\3\2\2\2\u0513\u0514")
        buf.write("\3\2\2\2\u0514\u0516\3\2\2\2\u0515\u0513\3\2\2\2\u0516")
        buf.write("\u051a\5P)\2\u0517\u0519\t\2\2\2\u0518\u0517\3\2\2\2\u0519")
        buf.write("\u051c\3\2\2\2\u051a\u0518\3\2\2\2\u051a\u051b\3\2\2\2")
        buf.write("\u051b\u051d\3\2\2\2\u051c\u051a\3\2\2\2\u051d\u051e\7")
        buf.write("\6\2\2\u051eI\3\2\2\2\u051f\u0523\7\'\2\2\u0520\u0522")
        buf.write("\t\2\2\2\u0521\u0520\3\2\2\2\u0522\u0525\3\2\2\2\u0523")
        buf.write("\u0521\3\2\2\2\u0523\u0524\3\2\2\2\u0524\u0526\3\2\2\2")
        buf.write("\u0525\u0523\3\2\2\2\u0526\u052a\7\4\2\2\u0527\u0529\t")
        buf.write("\2\2\2\u0528\u0527\3\2\2\2\u0529\u052c\3\2\2\2\u052a\u0528")
        buf.write("\3\2\2\2\u052a\u052b\3\2\2\2\u052b\u052d\3\2\2\2\u052c")
        buf.write("\u052a\3\2\2\2\u052d\u0531\5P)\2\u052e\u0530\t\2\2\2\u052f")
        buf.write("\u052e\3\2\2\2\u0530\u0533\3\2\2\2\u0531\u052f\3\2\2\2")
        buf.write("\u0531\u0532\3\2\2\2\u0532\u0534\3\2\2\2\u0533\u0531\3")
        buf.write("\2\2\2\u0534\u0535\7\6\2\2\u0535K\3\2\2\2\u0536\u053a")
        buf.write("\7(\2\2\u0537\u0539\t\2\2\2\u0538\u0537\3\2\2\2\u0539")
        buf.write("\u053c\3\2\2\2\u053a\u0538\3\2\2\2\u053a\u053b\3\2\2\2")
        buf.write("\u053b\u053d\3\2\2\2\u053c\u053a\3\2\2\2\u053d\u0541\7")
        buf.write("\4\2\2\u053e\u0540\t\2\2\2\u053f\u053e\3\2\2\2\u0540\u0543")
        buf.write("\3\2\2\2\u0541\u053f\3\2\2\2\u0541\u0542\3\2\2\2\u0542")
        buf.write("\u0546\3\2\2\2\u0543\u0541\3\2\2\2\u0544\u0547\7/\2\2")
        buf.write("\u0545\u0547\5N(\2\u0546\u0544\3\2\2\2\u0546\u0545\3\2")
        buf.write("\2\2\u0547\u054b\3\2\2\2\u0548\u054a\t\2\2\2\u0549\u0548")
        buf.write("\3\2\2\2\u054a\u054d\3\2\2\2\u054b\u0549\3\2\2\2\u054b")
        buf.write("\u054c\3\2\2\2\u054c\u054e\3\2\2\2\u054d\u054b\3\2\2\2")
        buf.write("\u054e\u054f\7\6\2\2\u054fM\3\2\2\2\u0550\u0554\7\b\2")
        buf.write("\2\u0551\u0553\t\2\2\2\u0552\u0551\3\2\2\2\u0553\u0556")
        buf.write("\3\2\2\2\u0554\u0552\3\2\2\2\u0554\u0555\3\2\2\2\u0555")
        buf.write("\u0571\3\2\2\2\u0556\u0554\3\2\2\2\u0557\u0568\5P)\2\u0558")
        buf.write("\u055a\t\2\2\2\u0559\u0558\3\2\2\2\u055a\u055d\3\2\2\2")
        buf.write("\u055b\u0559\3\2\2\2\u055b\u055c\3\2\2\2\u055c\u055e\3")
        buf.write("\2\2\2\u055d\u055b\3\2\2\2\u055e\u0562\7\5\2\2\u055f\u0561")
        buf.write("\t\2\2\2\u0560\u055f\3\2\2\2\u0561\u0564\3\2\2\2\u0562")
        buf.write("\u0560\3\2\2\2\u0562\u0563\3\2\2\2\u0563\u0565\3\2\2\2")
        buf.write("\u0564\u0562\3\2\2\2\u0565\u0567\5P)\2\u0566\u055b\3\2")
        buf.write("\2\2\u0567\u056a\3\2\2\2\u0568\u0566\3\2\2\2\u0568\u0569")
        buf.write("\3\2\2\2\u0569\u056e\3\2\2\2\u056a\u0568\3\2\2\2\u056b")
        buf.write("\u056d\t\2\2\2\u056c\u056b\3\2\2\2\u056d\u0570\3\2\2\2")
        buf.write("\u056e\u056c\3\2\2\2\u056e\u056f\3\2\2\2\u056f\u0572\3")
        buf.write("\2\2\2\u0570\u056e\3\2\2\2\u0571\u0557\3\2\2\2\u0571\u0572")
        buf.write("\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u0574\7\t\2\2\u0574")
        buf.write("O\3\2\2\2\u0575\u0576\t\3\2\2\u0576Q\3\2\2\2\u00d2U\\")
        buf.write("cjqvz\177\u0081\u0083\u008a\u008e\u0092\u0094\u0096\u009b")
        buf.write("\u009f\u00a7\u00ad\u00b4\u00bb\u00c2\u00c9\u00ce\u00d1")
        buf.write("\u00d7\u00de\u00e4\u00eb\u00f2\u00f9\u00fe\u0104\u0106")
        buf.write("\u0108\u010f\u0113\u0116\u011b\u011d\u0124\u012a\u0130")
        buf.write("\u0136\u013c\u0142\u0148\u014f\u0156\u015d\u0162\u0168")
        buf.write("\u016a\u016c\u0173\u017a\u017c\u0182\u0184\u0186\u018e")
        buf.write("\u0194\u019a\u01a0\u01a7\u01ae\u01b5\u01ba\u01c0\u01c2")
        buf.write("\u01c4\u01cb\u01d2\u01d4\u01da\u01dc\u01de\u01e7\u01eb")
        buf.write("\u01f3\u01f9\u01ff\u0205\u020c\u0213\u021a\u021f\u0225")
        buf.write("\u0227\u0229\u0230\u0237\u0239\u023f\u0241\u0243\u0249")
        buf.write("\u0252\u0258\u025f\u0266\u026d\u0272\u0278\u027a\u027c")
        buf.write("\u0283\u028a\u028c\u0292\u0294\u0296\u029c\u02a2\u02a9")
        buf.write("\u02b2\u02b9\u02c5\u02cb\u02d2\u02ed\u0306\u030a\u030f")
        buf.write("\u0316\u031f\u0326\u032d\u0335\u033c\u0345\u034c\u0353")
        buf.write("\u035a\u0361\u0366\u0369\u0371\u0378\u037f\u0388\u038f")
        buf.write("\u0396\u039f\u03a6\u03ad\u03b4\u03bb\u03c4\u03cb\u03d2")
        buf.write("\u03db\u03e2\u03e9\u03f0\u03f7\u0400\u0407\u040e\u0415")
        buf.write("\u041c\u0425\u042c\u0433\u043a\u0441\u044a\u0451\u0458")
        buf.write("\u045f\u0466\u046f\u0476\u047d\u0486\u048d\u0494\u049d")
        buf.write("\u04a4\u04ab\u04b2\u04b7\u04be\u04c7\u04ce\u04d5\u04de")
        buf.write("\u04e5\u04ec\u04f5\u04fc\u0503\u050c\u0513\u051a\u0523")
        buf.write("\u052a\u0531\u053a\u0541\u0546\u054b\u0554\u055b\u0562")
        buf.write("\u0568\u056e\u0571")
        return buf.getvalue()


class WordlifyParser ( Parser ):

    grammarFileName = "Wordlify.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'('", "','", "')'", "'='", "'['", 
                     "']'", "'fn'", "'while'", "'foreach'", "'in'", "'do'", 
                     "'if'", "'then'", "'else'", "'begin'", "'end'", "'exist'", 
                     "'print'", "'rename'", "'remove'", "'move'", "'copy'", 
                     "'download'", "'write'", "'wait'", "'execute'", "'exit'", 
                     "'time'", "'getFiles'", "'dateModified'", "'file'", 
                     "'folder'", "'args'", "'size'", "'read'", "'create'", 
                     "'length'", "'<-'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "FN", "WHILE", "FOREACH", "IN", "DO", "IF", "THEN", 
                      "ELSE", "BEGIN", "END", "EXIST", "PRINT", "RENAME", 
                      "REMOVE", "MOVE", "COPY", "DOWNLOAD", "WRITE", "WAIT", 
                      "EXECUTE", "EXIT", "TIME", "GET_FILES", "DATE_MODIFIED", 
                      "FILE", "FOLDER", "ARGS", "SIZE", "READ", "CREATE", 
                      "LENGTH", "APPEND", "CMP_OP", "ARITH_OP", "LOG_OP", 
                      "BOOL", "STR", "ID", "NUM", "WS", "NL", "END_COMMENT" ]

    RULE_program = 0
    RULE_fn_def = 1
    RULE_block_instr = 2
    RULE_foreach = 3
    RULE_while_instr = 4
    RULE_if_instr = 5
    RULE_if_cond = 6
    RULE_then = 7
    RULE_else_if = 8
    RULE_else_block = 9
    RULE_cond = 10
    RULE_comparison = 11
    RULE_double_comparsion = 12
    RULE_expr = 13
    RULE_arith_expr = 14
    RULE_fn_call = 15
    RULE_atom_instr = 16
    RULE_assign = 17
    RULE_array_append = 18
    RULE_array_elem = 19
    RULE_own_fn_call = 20
    RULE_exist = 21
    RULE_print_instr = 22
    RULE_rename = 23
    RULE_remove = 24
    RULE_move = 25
    RULE_copy = 26
    RULE_download = 27
    RULE_write = 28
    RULE_read = 29
    RULE_wait_instr = 30
    RULE_execute = 31
    RULE_get_files = 32
    RULE_date_modified = 33
    RULE_size = 34
    RULE_exit = 35
    RULE_create = 36
    RULE_length = 37
    RULE_array = 38
    RULE_value_or_id = 39

    ruleNames =  [ "program", "fn_def", "block_instr", "foreach", "while_instr", 
                   "if_instr", "if_cond", "then", "else_if", "else_block", 
                   "cond", "comparison", "double_comparsion", "expr", "arith_expr", 
                   "fn_call", "atom_instr", "assign", "array_append", "array_elem", 
                   "own_fn_call", "exist", "print_instr", "rename", "remove", 
                   "move", "copy", "download", "write", "read", "wait_instr", 
                   "execute", "get_files", "date_modified", "size", "exit", 
                   "create", "length", "array", "value_or_id" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    FN=8
    WHILE=9
    FOREACH=10
    IN=11
    DO=12
    IF=13
    THEN=14
    ELSE=15
    BEGIN=16
    END=17
    EXIST=18
    PRINT=19
    RENAME=20
    REMOVE=21
    MOVE=22
    COPY=23
    DOWNLOAD=24
    WRITE=25
    WAIT=26
    EXECUTE=27
    EXIT=28
    TIME=29
    GET_FILES=30
    DATE_MODIFIED=31
    FILE=32
    FOLDER=33
    ARGS=34
    SIZE=35
    READ=36
    CREATE=37
    LENGTH=38
    APPEND=39
    CMP_OP=40
    ARITH_OP=41
    LOG_OP=42
    BOOL=43
    STR=44
    ID=45
    NUM=46
    WS=47
    NL=48
    END_COMMENT=49

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(WordlifyParser.EOF, 0)

        def END_COMMENT(self):
            return self.getToken(WordlifyParser.END_COMMENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def fn_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Fn_defContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Fn_defContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = WordlifyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 83
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 80
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 85
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.FN) | (1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 129
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 127
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                        if la_ == 1:
                            self.state = 86
                            self.atom_instr()
                            self.state = 90
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 87
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 92
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 93
                            self.match(WordlifyParser.T__0)
                            self.state = 97
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 94
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 99
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 100
                            self.atom_instr()
                            self.state = 114 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 104
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 101
                                    self.match(WordlifyParser.WS)
                                    self.state = 106
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 107
                                self.match(WordlifyParser.NL)
                                self.state = 111
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 108
                                        self.match(WordlifyParser.WS) 
                                    self.state = 113
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                                self.state = 116 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 120
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                                self.state = 118
                                self.block_instr()
                                pass
                            elif token in [WordlifyParser.FN]:
                                self.state = 119
                                self.fn_def()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 123 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 122
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 125 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 131
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                self.state = 146
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 132
                    self.atom_instr()
                    self.state = 136
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 133
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 138
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                    self.state = 140
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==WordlifyParser.T__0:
                        self.state = 139
                        self.match(WordlifyParser.T__0)


                    pass
                elif token in [WordlifyParser.FN, WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 144
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 142
                        self.block_instr()
                        pass
                    elif token in [WordlifyParser.FN]:
                        self.state = 143
                        self.fn_def()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 150
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 155
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.END_COMMENT:
                self.state = 156
                self.match(WordlifyParser.END_COMMENT)


            self.state = 159
            self.match(WordlifyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FN(self):
            return self.getToken(WordlifyParser.FN, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def BEGIN(self):
            return self.getToken(WordlifyParser.BEGIN, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_def" ):
                listener.enterFn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_def" ):
                listener.exitFn_def(self)




    def fn_def(self):

        localctx = WordlifyParser.Fn_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fn_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 161
            self.match(WordlifyParser.FN)
            self.state = 163 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 162
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 165 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 167
            self.match(WordlifyParser.ID)
            self.state = 171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 168
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 173
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 174
            self.match(WordlifyParser.T__1)
            self.state = 178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 175
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 180
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.ID:
                self.state = 181
                self.match(WordlifyParser.ID)
                self.state = 185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 182
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 187
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.T__2:
                    self.state = 188
                    self.match(WordlifyParser.T__2)
                    self.state = 192
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 189
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 194
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 195
                    self.match(WordlifyParser.ID)
                    self.state = 199
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 196
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 201
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 206
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 209
            self.match(WordlifyParser.T__3)
            self.state = 213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 210
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 216
            self.match(WordlifyParser.BEGIN)
            self.state = 218 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 217
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 220 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 262
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 260
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                        if la_ == 1:
                            self.state = 222
                            self.atom_instr()
                            self.state = 226
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 223
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 228
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 229
                            self.match(WordlifyParser.T__0)
                            self.state = 233
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 230
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 235
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 236
                            self.atom_instr()
                            self.state = 250 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 240
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 237
                                    self.match(WordlifyParser.WS)
                                    self.state = 242
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 243
                                self.match(WordlifyParser.NL)
                                self.state = 247
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 244
                                        self.match(WordlifyParser.WS) 
                                    self.state = 249
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                                self.state = 252 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 254
                            self.block_instr()
                            self.state = 256 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 255
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 258 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 264
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                self.state = 276
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 265
                    self.atom_instr()
                    self.state = 269
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 266
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 271
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                    self.state = 273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==WordlifyParser.T__0:
                        self.state = 272
                        self.match(WordlifyParser.T__0)


                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 275
                    self.block_instr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 279 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 278
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 281 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break



            self.state = 285
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_instr(self):
            return self.getTypedRuleContext(WordlifyParser.If_instrContext,0)


        def while_instr(self):
            return self.getTypedRuleContext(WordlifyParser.While_instrContext,0)


        def foreach(self):
            return self.getTypedRuleContext(WordlifyParser.ForeachContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_block_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_instr" ):
                listener.enterBlock_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_instr" ):
                listener.exitBlock_instr(self)




    def block_instr(self):

        localctx = WordlifyParser.Block_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block_instr)
        try:
            self.state = 290
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 287
                self.if_instr()
                pass
            elif token in [WordlifyParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 288
                self.while_instr()
                pass
            elif token in [WordlifyParser.FOREACH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 289
                self.foreach()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeachContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(WordlifyParser.FOREACH, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def IN(self):
            return self.getToken(WordlifyParser.IN, 0)

        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_foreach

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeach" ):
                listener.enterForeach(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeach" ):
                listener.exitForeach(self)




    def foreach(self):

        localctx = WordlifyParser.ForeachContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_foreach)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.match(WordlifyParser.FOREACH)
            self.state = 294 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 293
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 296 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 298
            self.match(WordlifyParser.ID)
            self.state = 300 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 299
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 302 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 304
            self.match(WordlifyParser.IN)
            self.state = 306 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 305
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 308 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 310
            self.match(WordlifyParser.ID)
            self.state = 312 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 311
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 314 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 316
            self.match(WordlifyParser.DO)
            self.state = 318 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 317
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 320 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 362
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 360
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                        if la_ == 1:
                            self.state = 322
                            self.atom_instr()
                            self.state = 326
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 323
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 328
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 329
                            self.match(WordlifyParser.T__0)
                            self.state = 333
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 330
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 335
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 336
                            self.atom_instr()
                            self.state = 350 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 340
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 337
                                    self.match(WordlifyParser.WS)
                                    self.state = 342
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 343
                                self.match(WordlifyParser.NL)
                                self.state = 347
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 344
                                        self.match(WordlifyParser.WS) 
                                    self.state = 349
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                                self.state = 352 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 354
                            self.block_instr()
                            self.state = 356 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 355
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 358 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 364
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

                self.state = 386
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 365
                    self.atom_instr()
                    self.state = 369
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 366
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 371
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

                    self.state = 378
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 372
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 374 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 373
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 376 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 380
                    self.block_instr()
                    self.state = 382 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 381
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 384 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 390
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(WordlifyParser.WHILE, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_while_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_instr" ):
                listener.enterWhile_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_instr" ):
                listener.exitWhile_instr(self)




    def while_instr(self):

        localctx = WordlifyParser.While_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_while_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.match(WordlifyParser.WHILE)
            self.state = 394 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 393
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 396 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 398
            self.cond()
            self.state = 400 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 399
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 402 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 404
            self.match(WordlifyParser.DO)
            self.state = 406 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 405
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 408 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 450
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 448
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                        if la_ == 1:
                            self.state = 410
                            self.atom_instr()
                            self.state = 414
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 411
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 416
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 417
                            self.match(WordlifyParser.T__0)
                            self.state = 421
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 418
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 423
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 424
                            self.atom_instr()
                            self.state = 438 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 428
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 425
                                    self.match(WordlifyParser.WS)
                                    self.state = 430
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 431
                                self.match(WordlifyParser.NL)
                                self.state = 435
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 432
                                        self.match(WordlifyParser.WS) 
                                    self.state = 437
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

                                self.state = 440 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 442
                            self.block_instr()
                            self.state = 444 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 443
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 446 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 452
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

                self.state = 474
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 453
                    self.atom_instr()
                    self.state = 457
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 454
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 459
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                    self.state = 466
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 460
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 462 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 461
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 464 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 468
                    self.block_instr()
                    self.state = 470 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 469
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 472 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 478
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def else_if(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Else_ifContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Else_ifContext,i)


        def else_block(self):
            return self.getTypedRuleContext(WordlifyParser.Else_blockContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_if_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_instr" ):
                listener.enterIf_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_instr" ):
                listener.exitIf_instr(self)




    def if_instr(self):

        localctx = WordlifyParser.If_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_if_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.if_cond()
            self.state = 481
            self.then()
            self.state = 485
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 482
                    self.else_if() 
                self.state = 487
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.ELSE:
                self.state = 488
                self.else_block()


            self.state = 491
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(WordlifyParser.IF, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_if_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_cond" ):
                listener.enterIf_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_cond" ):
                listener.exitIf_cond(self)




    def if_cond(self):

        localctx = WordlifyParser.If_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_if_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.match(WordlifyParser.IF)
            self.state = 495 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 494
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 497 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 499
            self.cond()
            self.state = 501 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 500
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 503 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEN(self):
            return self.getToken(WordlifyParser.THEN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_then

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThen" ):
                listener.enterThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThen" ):
                listener.exitThen(self)




    def then(self):

        localctx = WordlifyParser.ThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_then)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.match(WordlifyParser.THEN)
            self.state = 507 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 506
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 509 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 551
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 549
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                        if la_ == 1:
                            self.state = 511
                            self.atom_instr()
                            self.state = 515
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 512
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 517
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 518
                            self.match(WordlifyParser.T__0)
                            self.state = 522
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 519
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 524
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 525
                            self.atom_instr()
                            self.state = 539 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 529
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 526
                                    self.match(WordlifyParser.WS)
                                    self.state = 531
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 532
                                self.match(WordlifyParser.NL)
                                self.state = 536
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 533
                                        self.match(WordlifyParser.WS) 
                                    self.state = 538
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

                                self.state = 541 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 543
                            self.block_instr()
                            self.state = 545 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 544
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 547 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 553
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                self.state = 575
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 554
                    self.atom_instr()
                    self.state = 558
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 555
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 560
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                    self.state = 567
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 561
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 563 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 562
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 565 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 569
                    self.block_instr()
                    self.state = 571 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 570
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 573 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_else_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_if" ):
                listener.enterElse_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_if" ):
                listener.exitElse_if(self)




    def else_if(self):

        localctx = WordlifyParser.Else_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_else_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.match(WordlifyParser.ELSE)
            self.state = 581 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 580
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 583 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 585
            self.if_cond()
            self.state = 586
            self.then()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_else_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_block" ):
                listener.enterElse_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_block" ):
                listener.exitElse_block(self)




    def else_block(self):

        localctx = WordlifyParser.Else_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_else_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.match(WordlifyParser.ELSE)
            self.state = 590 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 589
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 592 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 634
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 632
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                        if la_ == 1:
                            self.state = 594
                            self.atom_instr()
                            self.state = 598
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 595
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 600
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 601
                            self.match(WordlifyParser.T__0)
                            self.state = 605
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 602
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 607
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 608
                            self.atom_instr()
                            self.state = 622 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 612
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 609
                                    self.match(WordlifyParser.WS)
                                    self.state = 614
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 615
                                self.match(WordlifyParser.NL)
                                self.state = 619
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 616
                                        self.match(WordlifyParser.WS) 
                                    self.state = 621
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

                                self.state = 624 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 626
                            self.block_instr()
                            self.state = 628 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 627
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 630 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 636
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                self.state = 658
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 637
                    self.atom_instr()
                    self.state = 641
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 638
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 643
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

                    self.state = 650
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 644
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 646 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 645
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 648 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 652
                    self.block_instr()
                    self.state = 654 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 653
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 656 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def comparison(self):
            return self.getTypedRuleContext(WordlifyParser.ComparisonContext,0)


        def double_comparsion(self):
            return self.getTypedRuleContext(WordlifyParser.Double_comparsionContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)




    def cond(self):

        localctx = WordlifyParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_cond)
        try:
            self.state = 666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 662
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 663
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 664
                self.comparison()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 665
                self.double_comparsion()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def CMP_OP(self):
            return self.getToken(WordlifyParser.CMP_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = WordlifyParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            self.expr()
            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 669
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 675
            self.match(WordlifyParser.CMP_OP)
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 676
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 682
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_comparsionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ComparisonContext,i)


        def LOG_OP(self):
            return self.getToken(WordlifyParser.LOG_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_double_comparsion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_comparsion" ):
                listener.enterDouble_comparsion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_comparsion" ):
                listener.exitDouble_comparsion(self)




    def double_comparsion(self):

        localctx = WordlifyParser.Double_comparsionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_double_comparsion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.comparison()
            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 685
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 690
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 691
            self.match(WordlifyParser.LOG_OP)
            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 692
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 698
            self.comparison()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def arith_expr(self):
            return self.getTypedRuleContext(WordlifyParser.Arith_exprContext,0)


        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def array_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Array_elemContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = WordlifyParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_expr)
        try:
            self.state = 707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 700
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 701
                self.match(WordlifyParser.STR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 702
                self.match(WordlifyParser.NUM)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 703
                self.match(WordlifyParser.ID)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 704
                self.arith_expr()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 705
                self.array()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 706
                self.array_elem()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def ARITH_OP(self):
            return self.getToken(WordlifyParser.ARITH_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)




    def arith_expr(self):

        localctx = WordlifyParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.value_or_id()
            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 710
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 716
            self.match(WordlifyParser.ARITH_OP)
            self.state = 720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 717
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 723
            self.value_or_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def length(self):
            return self.getTypedRuleContext(WordlifyParser.LengthContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def ARGS(self):
            return self.getToken(WordlifyParser.ARGS, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_call" ):
                listener.enterFn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_call" ):
                listener.exitFn_call(self)




    def fn_call(self):

        localctx = WordlifyParser.Fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_fn_call)
        try:
            self.state = 747
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 725
                self.own_fn_call()
                pass
            elif token in [WordlifyParser.EXIST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 726
                self.exist()
                pass
            elif token in [WordlifyParser.PRINT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 727
                self.print_instr()
                pass
            elif token in [WordlifyParser.RENAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 728
                self.rename()
                pass
            elif token in [WordlifyParser.REMOVE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 729
                self.remove()
                pass
            elif token in [WordlifyParser.MOVE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 730
                self.move()
                pass
            elif token in [WordlifyParser.COPY]:
                self.enterOuterAlt(localctx, 7)
                self.state = 731
                self.copy()
                pass
            elif token in [WordlifyParser.DOWNLOAD]:
                self.enterOuterAlt(localctx, 8)
                self.state = 732
                self.download()
                pass
            elif token in [WordlifyParser.WRITE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 733
                self.write()
                pass
            elif token in [WordlifyParser.READ]:
                self.enterOuterAlt(localctx, 10)
                self.state = 734
                self.read()
                pass
            elif token in [WordlifyParser.WAIT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 735
                self.wait_instr()
                pass
            elif token in [WordlifyParser.EXECUTE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 736
                self.execute()
                pass
            elif token in [WordlifyParser.GET_FILES]:
                self.enterOuterAlt(localctx, 13)
                self.state = 737
                self.get_files()
                pass
            elif token in [WordlifyParser.DATE_MODIFIED]:
                self.enterOuterAlt(localctx, 14)
                self.state = 738
                self.date_modified()
                pass
            elif token in [WordlifyParser.SIZE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 739
                self.size()
                pass
            elif token in [WordlifyParser.EXIT]:
                self.enterOuterAlt(localctx, 16)
                self.state = 740
                self.exit()
                pass
            elif token in [WordlifyParser.CREATE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 741
                self.create()
                pass
            elif token in [WordlifyParser.LENGTH]:
                self.enterOuterAlt(localctx, 18)
                self.state = 742
                self.length()
                pass
            elif token in [WordlifyParser.TIME]:
                self.enterOuterAlt(localctx, 19)
                self.state = 743
                self.match(WordlifyParser.TIME)
                pass
            elif token in [WordlifyParser.FILE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 744
                self.match(WordlifyParser.FILE)
                pass
            elif token in [WordlifyParser.FOLDER]:
                self.enterOuterAlt(localctx, 21)
                self.state = 745
                self.match(WordlifyParser.FOLDER)
                pass
            elif token in [WordlifyParser.ARGS]:
                self.enterOuterAlt(localctx, 22)
                self.state = 746
                self.match(WordlifyParser.ARGS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def array_append(self):
            return self.getTypedRuleContext(WordlifyParser.Array_appendContext,0)


        def assign(self):
            return self.getTypedRuleContext(WordlifyParser.AssignContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def ARGS(self):
            return self.getToken(WordlifyParser.ARGS, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_atom_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_instr" ):
                listener.enterAtom_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_instr" ):
                listener.exitAtom_instr(self)




    def atom_instr(self):

        localctx = WordlifyParser.Atom_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_atom_instr)
        try:
            self.state = 772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 749
                self.own_fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 750
                self.exist()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 751
                self.print_instr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 752
                self.rename()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 753
                self.remove()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 754
                self.move()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 755
                self.copy()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 756
                self.download()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 757
                self.write()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 758
                self.read()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 759
                self.wait_instr()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 760
                self.execute()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 761
                self.get_files()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 762
                self.date_modified()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 763
                self.size()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 764
                self.exit()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 765
                self.create()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 766
                self.array_append()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 767
                self.assign()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 768
                self.match(WordlifyParser.TIME)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 769
                self.match(WordlifyParser.FILE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 770
                self.match(WordlifyParser.FOLDER)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 771
                self.match(WordlifyParser.ARGS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def array_elem(self):
            return self.getTypedRuleContext(WordlifyParser.Array_elemContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)




    def assign(self):

        localctx = WordlifyParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 774
                self.match(WordlifyParser.ID)
                pass

            elif la_ == 2:
                self.state = 775
                self.array_elem()
                pass


            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 778
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 783
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 784
            self.match(WordlifyParser.T__4)
            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 785
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 791
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_appendContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def APPEND(self):
            return self.getToken(WordlifyParser.APPEND, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array_append

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_append" ):
                listener.enterArray_append(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_append" ):
                listener.exitArray_append(self)




    def array_append(self):

        localctx = WordlifyParser.Array_appendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_array_append)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(WordlifyParser.ID)
            self.state = 797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 794
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 800
            self.match(WordlifyParser.APPEND)
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 801
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 807
            self.expr()
            self.state = 811
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,127,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 808
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 813
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_elemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array_elem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_elem" ):
                listener.enterArray_elem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_elem" ):
                listener.exitArray_elem(self)




    def array_elem(self):

        localctx = WordlifyParser.Array_elemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_array_elem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.match(WordlifyParser.ID)
            self.state = 815
            self.match(WordlifyParser.T__5)
            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 816
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 822
            self.expr()
            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 823
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 829
            self.match(WordlifyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Own_fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_own_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOwn_fn_call" ):
                listener.enterOwn_fn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOwn_fn_call" ):
                listener.exitOwn_fn_call(self)




    def own_fn_call(self):

        localctx = WordlifyParser.Own_fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_own_fn_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(WordlifyParser.ID)
            self.state = 835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 832
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 838
            self.match(WordlifyParser.T__1)
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 839
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 845
                self.value_or_id()
                self.state = 849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 846
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 851
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.T__2:
                    self.state = 852
                    self.match(WordlifyParser.T__2)
                    self.state = 856
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 853
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 858
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 859
                    self.value_or_id()
                    self.state = 863
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 860
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 865
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 870
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 873
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIST(self):
            return self.getToken(WordlifyParser.EXIST, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExist" ):
                listener.enterExist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExist" ):
                listener.exitExist(self)




    def exist(self):

        localctx = WordlifyParser.ExistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_exist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(WordlifyParser.EXIST)
            self.state = 879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 876
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 882
            self.match(WordlifyParser.T__1)
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 883
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 889
            self.value_or_id()
            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 890
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 896
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(WordlifyParser.PRINT, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_print_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_instr" ):
                listener.enterPrint_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_instr" ):
                listener.exitPrint_instr(self)




    def print_instr(self):

        localctx = WordlifyParser.Print_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_print_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            self.match(WordlifyParser.PRINT)
            self.state = 902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 899
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 905
            self.match(WordlifyParser.T__1)
            self.state = 909
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 906
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 912
            self.value_or_id()
            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 913
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 919
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(WordlifyParser.RENAME, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_rename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename" ):
                listener.enterRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename" ):
                listener.exitRename(self)




    def rename(self):

        localctx = WordlifyParser.RenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_rename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.match(WordlifyParser.RENAME)
            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 922
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 928
            self.match(WordlifyParser.T__1)
            self.state = 932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 929
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 935
            self.value_or_id()
            self.state = 939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 936
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 942
            self.match(WordlifyParser.T__2)
            self.state = 946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 943
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 948
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 949
            self.value_or_id()
            self.state = 953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 950
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 956
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(WordlifyParser.REMOVE, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove" ):
                listener.enterRemove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove" ):
                listener.exitRemove(self)




    def remove(self):

        localctx = WordlifyParser.RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.match(WordlifyParser.REMOVE)
            self.state = 962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 959
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 964
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 965
            self.match(WordlifyParser.T__1)
            self.state = 969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 966
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 972
            self.value_or_id()
            self.state = 976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 973
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 979
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOVE(self):
            return self.getToken(WordlifyParser.MOVE, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)




    def move(self):

        localctx = WordlifyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.match(WordlifyParser.MOVE)
            self.state = 985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 982
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 988
            self.match(WordlifyParser.T__1)
            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 989
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 995
            self.value_or_id()
            self.state = 999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 996
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1001
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1002
            self.match(WordlifyParser.T__2)
            self.state = 1006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1003
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1008
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1009
            self.value_or_id()
            self.state = 1013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1010
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1016
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(WordlifyParser.COPY, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_copy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy" ):
                listener.enterCopy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy" ):
                listener.exitCopy(self)




    def copy(self):

        localctx = WordlifyParser.CopyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_copy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(WordlifyParser.COPY)
            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1019
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1025
            self.match(WordlifyParser.T__1)
            self.state = 1029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1026
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1032
            self.value_or_id()
            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1033
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1039
            self.match(WordlifyParser.T__2)
            self.state = 1043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1040
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1045
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1046
            self.value_or_id()
            self.state = 1050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1047
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1052
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1053
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DownloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOWNLOAD(self):
            return self.getToken(WordlifyParser.DOWNLOAD, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_download

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDownload" ):
                listener.enterDownload(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDownload" ):
                listener.exitDownload(self)




    def download(self):

        localctx = WordlifyParser.DownloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_download)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(WordlifyParser.DOWNLOAD)
            self.state = 1059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1056
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1061
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1062
            self.match(WordlifyParser.T__1)
            self.state = 1066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1063
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1069
            self.value_or_id()
            self.state = 1073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1070
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1075
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1076
            self.match(WordlifyParser.T__2)
            self.state = 1080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1077
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1082
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1083
            self.value_or_id()
            self.state = 1087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1084
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1090
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(WordlifyParser.WRITE, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_write

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite" ):
                listener.enterWrite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite" ):
                listener.exitWrite(self)




    def write(self):

        localctx = WordlifyParser.WriteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_write)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.match(WordlifyParser.WRITE)
            self.state = 1096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1093
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1099
            self.match(WordlifyParser.T__1)
            self.state = 1103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1100
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1105
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1106
            self.value_or_id()
            self.state = 1110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1107
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1113
            self.match(WordlifyParser.T__2)
            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1114
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1120
            self.value_or_id()
            self.state = 1124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1121
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1126
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1127
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(WordlifyParser.READ, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_read

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead" ):
                listener.enterRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead" ):
                listener.exitRead(self)




    def read(self):

        localctx = WordlifyParser.ReadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_read)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self.match(WordlifyParser.READ)
            self.state = 1133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1130
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1135
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1136
            self.match(WordlifyParser.T__1)
            self.state = 1140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1137
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1142
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1143
            self.value_or_id()
            self.state = 1147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1144
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1149
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1150
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wait_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(WordlifyParser.WAIT, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_wait_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_instr" ):
                listener.enterWait_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_instr" ):
                listener.exitWait_instr(self)




    def wait_instr(self):

        localctx = WordlifyParser.Wait_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_wait_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.match(WordlifyParser.WAIT)
            self.state = 1156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1153
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1158
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1159
            self.match(WordlifyParser.T__1)
            self.state = 1163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1160
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1165
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1166
            self.value_or_id()
            self.state = 1170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1167
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1172
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1173
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(WordlifyParser.EXECUTE, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_execute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)




    def execute(self):

        localctx = WordlifyParser.ExecuteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_execute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            self.match(WordlifyParser.EXECUTE)
            self.state = 1179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1176
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1182
            self.match(WordlifyParser.T__1)
            self.state = 1186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1183
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1188
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1205
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,181,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1189
                    self.value_or_id()
                    self.state = 1193
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1190
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1195
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1196
                    self.match(WordlifyParser.T__2)
                    self.state = 1200
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1197
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1202
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
             
                self.state = 1207
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,181,self._ctx)

            self.state = 1208
            self.value_or_id()
            self.state = 1212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1209
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1214
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1215
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_filesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET_FILES(self):
            return self.getToken(WordlifyParser.GET_FILES, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_get_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_files" ):
                listener.enterGet_files(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_files" ):
                listener.exitGet_files(self)




    def get_files(self):

        localctx = WordlifyParser.Get_filesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_get_files)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self.match(WordlifyParser.GET_FILES)
            self.state = 1221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1218
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1224
            self.match(WordlifyParser.T__1)
            self.state = 1228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1225
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1231
            self.value_or_id()
            self.state = 1235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1232
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1237
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1238
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_modifiedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_MODIFIED(self):
            return self.getToken(WordlifyParser.DATE_MODIFIED, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_date_modified

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_modified" ):
                listener.enterDate_modified(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_modified" ):
                listener.exitDate_modified(self)




    def date_modified(self):

        localctx = WordlifyParser.Date_modifiedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_date_modified)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1240
            self.match(WordlifyParser.DATE_MODIFIED)
            self.state = 1244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1241
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1246
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1247
            self.match(WordlifyParser.T__1)
            self.state = 1251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1248
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1253
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1254
            self.value_or_id()
            self.state = 1258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1255
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1260
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1261
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIZE(self):
            return self.getToken(WordlifyParser.SIZE, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSize" ):
                listener.enterSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSize" ):
                listener.exitSize(self)




    def size(self):

        localctx = WordlifyParser.SizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1263
            self.match(WordlifyParser.SIZE)
            self.state = 1267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1264
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1269
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1270
            self.match(WordlifyParser.T__1)
            self.state = 1274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1271
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1276
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1277
            self.value_or_id()
            self.state = 1281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1278
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1283
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1284
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(WordlifyParser.EXIT, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit" ):
                listener.enterExit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit" ):
                listener.exitExit(self)




    def exit(self):

        localctx = WordlifyParser.ExitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_exit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1286
            self.match(WordlifyParser.EXIT)
            self.state = 1290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1287
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1292
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1293
            self.match(WordlifyParser.T__1)
            self.state = 1297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1294
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1299
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1300
            self.value_or_id()
            self.state = 1304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1301
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1306
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1307
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(WordlifyParser.CREATE, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate" ):
                listener.enterCreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate" ):
                listener.exitCreate(self)




    def create(self):

        localctx = WordlifyParser.CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self.match(WordlifyParser.CREATE)
            self.state = 1313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1310
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1315
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1316
            self.match(WordlifyParser.T__1)
            self.state = 1320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1317
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1322
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1323
            self.value_or_id()
            self.state = 1327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1324
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1329
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1330
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LENGTH(self):
            return self.getToken(WordlifyParser.LENGTH, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_length

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLength" ):
                listener.enterLength(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLength" ):
                listener.exitLength(self)




    def length(self):

        localctx = WordlifyParser.LengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_length)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1332
            self.match(WordlifyParser.LENGTH)
            self.state = 1336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1333
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1338
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1339
            self.match(WordlifyParser.T__1)
            self.state = 1343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1340
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1345
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1348
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.state = 1346
                self.match(WordlifyParser.ID)
                pass
            elif token in [WordlifyParser.T__5]:
                self.state = 1347
                self.array()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1350
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1355
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1356
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray" ):
                listener.enterArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray" ):
                listener.exitArray(self)




    def array(self):

        localctx = WordlifyParser.ArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1358
            self.match(WordlifyParser.T__5)
            self.state = 1362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1359
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1364
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 1365
                self.value_or_id()
                self.state = 1382
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,205,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1369
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 1366
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1371
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1372
                        self.match(WordlifyParser.T__2)
                        self.state = 1376
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 1373
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1378
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1379
                        self.value_or_id() 
                    self.state = 1384
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,205,self._ctx)

                self.state = 1388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1385
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1390
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1393
            self.match(WordlifyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_or_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_value_or_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_or_id" ):
                listener.enterValue_or_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_or_id" ):
                listener.exitValue_or_id(self)




    def value_or_id(self):

        localctx = WordlifyParser.Value_or_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_value_or_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





