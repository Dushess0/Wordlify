# Generated from Wordlify.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3/")
        buf.write("\u04f1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\3\2\7\2J\n")
        buf.write("\2\f\2\16\2M\13\2\3\2\3\2\7\2Q\n\2\f\2\16\2T\13\2\3\2")
        buf.write("\3\2\7\2X\n\2\f\2\16\2[\13\2\3\2\3\2\7\2_\n\2\f\2\16\2")
        buf.write("b\13\2\3\2\3\2\7\2f\n\2\f\2\16\2i\13\2\6\2k\n\2\r\2\16")
        buf.write("\2l\3\2\3\2\5\2q\n\2\3\2\6\2t\n\2\r\2\16\2u\7\2x\n\2\f")
        buf.write("\2\16\2{\13\2\3\2\3\2\7\2\177\n\2\f\2\16\2\u0082\13\2")
        buf.write("\3\2\5\2\u0085\n\2\3\2\3\2\5\2\u0089\n\2\5\2\u008b\n\2")
        buf.write("\5\2\u008d\n\2\3\2\7\2\u0090\n\2\f\2\16\2\u0093\13\2\3")
        buf.write("\2\5\2\u0096\n\2\3\2\3\2\3\3\3\3\6\3\u009c\n\3\r\3\16")
        buf.write("\3\u009d\3\3\3\3\7\3\u00a2\n\3\f\3\16\3\u00a5\13\3\3\3")
        buf.write("\3\3\7\3\u00a9\n\3\f\3\16\3\u00ac\13\3\3\3\3\3\7\3\u00b0")
        buf.write("\n\3\f\3\16\3\u00b3\13\3\3\3\3\3\7\3\u00b7\n\3\f\3\16")
        buf.write("\3\u00ba\13\3\3\3\3\3\7\3\u00be\n\3\f\3\16\3\u00c1\13")
        buf.write("\3\7\3\u00c3\n\3\f\3\16\3\u00c6\13\3\5\3\u00c8\n\3\3\3")
        buf.write("\3\3\7\3\u00cc\n\3\f\3\16\3\u00cf\13\3\3\3\3\3\6\3\u00d3")
        buf.write("\n\3\r\3\16\3\u00d4\3\3\3\3\7\3\u00d9\n\3\f\3\16\3\u00dc")
        buf.write("\13\3\3\3\3\3\7\3\u00e0\n\3\f\3\16\3\u00e3\13\3\3\3\3")
        buf.write("\3\7\3\u00e7\n\3\f\3\16\3\u00ea\13\3\3\3\3\3\7\3\u00ee")
        buf.write("\n\3\f\3\16\3\u00f1\13\3\6\3\u00f3\n\3\r\3\16\3\u00f4")
        buf.write("\3\3\3\3\6\3\u00f9\n\3\r\3\16\3\u00fa\7\3\u00fd\n\3\f")
        buf.write("\3\16\3\u0100\13\3\3\3\3\3\7\3\u0104\n\3\f\3\16\3\u0107")
        buf.write("\13\3\3\3\5\3\u010a\n\3\3\3\5\3\u010d\n\3\3\3\6\3\u0110")
        buf.write("\n\3\r\3\16\3\u0111\5\3\u0114\n\3\3\3\3\3\3\4\3\4\3\4")
        buf.write("\5\4\u011b\n\4\3\5\3\5\6\5\u011f\n\5\r\5\16\5\u0120\3")
        buf.write("\5\3\5\6\5\u0125\n\5\r\5\16\5\u0126\3\5\3\5\6\5\u012b")
        buf.write("\n\5\r\5\16\5\u012c\3\5\3\5\6\5\u0131\n\5\r\5\16\5\u0132")
        buf.write("\3\5\3\5\6\5\u0137\n\5\r\5\16\5\u0138\3\5\3\5\7\5\u013d")
        buf.write("\n\5\f\5\16\5\u0140\13\5\3\5\3\5\7\5\u0144\n\5\f\5\16")
        buf.write("\5\u0147\13\5\3\5\3\5\7\5\u014b\n\5\f\5\16\5\u014e\13")
        buf.write("\5\3\5\3\5\7\5\u0152\n\5\f\5\16\5\u0155\13\5\6\5\u0157")
        buf.write("\n\5\r\5\16\5\u0158\3\5\3\5\6\5\u015d\n\5\r\5\16\5\u015e")
        buf.write("\7\5\u0161\n\5\f\5\16\5\u0164\13\5\3\5\3\5\7\5\u0168\n")
        buf.write("\5\f\5\16\5\u016b\13\5\3\5\3\5\6\5\u016f\n\5\r\5\16\5")
        buf.write("\u0170\5\5\u0173\n\5\3\5\3\5\6\5\u0177\n\5\r\5\16\5\u0178")
        buf.write("\5\5\u017b\n\5\5\5\u017d\n\5\3\5\3\5\3\6\3\6\6\6\u0183")
        buf.write("\n\6\r\6\16\6\u0184\3\6\3\6\6\6\u0189\n\6\r\6\16\6\u018a")
        buf.write("\3\6\3\6\6\6\u018f\n\6\r\6\16\6\u0190\3\6\3\6\7\6\u0195")
        buf.write("\n\6\f\6\16\6\u0198\13\6\3\6\3\6\7\6\u019c\n\6\f\6\16")
        buf.write("\6\u019f\13\6\3\6\3\6\7\6\u01a3\n\6\f\6\16\6\u01a6\13")
        buf.write("\6\3\6\3\6\7\6\u01aa\n\6\f\6\16\6\u01ad\13\6\6\6\u01af")
        buf.write("\n\6\r\6\16\6\u01b0\3\6\3\6\6\6\u01b5\n\6\r\6\16\6\u01b6")
        buf.write("\7\6\u01b9\n\6\f\6\16\6\u01bc\13\6\3\6\3\6\7\6\u01c0\n")
        buf.write("\6\f\6\16\6\u01c3\13\6\3\6\3\6\6\6\u01c7\n\6\r\6\16\6")
        buf.write("\u01c8\5\6\u01cb\n\6\3\6\3\6\6\6\u01cf\n\6\r\6\16\6\u01d0")
        buf.write("\5\6\u01d3\n\6\5\6\u01d5\n\6\3\6\3\6\3\7\3\7\3\7\7\7\u01dc")
        buf.write("\n\7\f\7\16\7\u01df\13\7\3\7\5\7\u01e2\n\7\3\7\3\7\3\b")
        buf.write("\3\b\6\b\u01e8\n\b\r\b\16\b\u01e9\3\b\3\b\6\b\u01ee\n")
        buf.write("\b\r\b\16\b\u01ef\3\t\3\t\6\t\u01f4\n\t\r\t\16\t\u01f5")
        buf.write("\3\t\3\t\7\t\u01fa\n\t\f\t\16\t\u01fd\13\t\3\t\3\t\7\t")
        buf.write("\u0201\n\t\f\t\16\t\u0204\13\t\3\t\3\t\7\t\u0208\n\t\f")
        buf.write("\t\16\t\u020b\13\t\3\t\3\t\7\t\u020f\n\t\f\t\16\t\u0212")
        buf.write("\13\t\6\t\u0214\n\t\r\t\16\t\u0215\3\t\3\t\6\t\u021a\n")
        buf.write("\t\r\t\16\t\u021b\7\t\u021e\n\t\f\t\16\t\u0221\13\t\3")
        buf.write("\t\3\t\7\t\u0225\n\t\f\t\16\t\u0228\13\t\3\t\3\t\6\t\u022c")
        buf.write("\n\t\r\t\16\t\u022d\5\t\u0230\n\t\3\t\3\t\6\t\u0234\n")
        buf.write("\t\r\t\16\t\u0235\5\t\u0238\n\t\5\t\u023a\n\t\3\n\3\n")
        buf.write("\6\n\u023e\n\n\r\n\16\n\u023f\3\n\3\n\3\n\3\13\3\13\6")
        buf.write("\13\u0247\n\13\r\13\16\13\u0248\3\13\3\13\7\13\u024d\n")
        buf.write("\13\f\13\16\13\u0250\13\13\3\13\3\13\7\13\u0254\n\13\f")
        buf.write("\13\16\13\u0257\13\13\3\13\3\13\7\13\u025b\n\13\f\13\16")
        buf.write("\13\u025e\13\13\3\13\3\13\7\13\u0262\n\13\f\13\16\13\u0265")
        buf.write("\13\13\6\13\u0267\n\13\r\13\16\13\u0268\3\13\3\13\6\13")
        buf.write("\u026d\n\13\r\13\16\13\u026e\7\13\u0271\n\13\f\13\16\13")
        buf.write("\u0274\13\13\3\13\3\13\7\13\u0278\n\13\f\13\16\13\u027b")
        buf.write("\13\13\3\13\3\13\6\13\u027f\n\13\r\13\16\13\u0280\5\13")
        buf.write("\u0283\n\13\3\13\3\13\6\13\u0287\n\13\r\13\16\13\u0288")
        buf.write("\5\13\u028b\n\13\5\13\u028d\n\13\3\f\3\f\3\f\5\f\u0292")
        buf.write("\n\f\3\r\3\r\7\r\u0296\n\r\f\r\16\r\u0299\13\r\3\r\3\r")
        buf.write("\7\r\u029d\n\r\f\r\16\r\u02a0\13\r\3\r\3\r\3\16\3\16\3")
        buf.write("\16\3\16\3\16\5\16\u02a9\n\16\3\17\3\17\7\17\u02ad\n\17")
        buf.write("\f\17\16\17\u02b0\13\17\3\17\3\17\7\17\u02b4\n\17\f\17")
        buf.write("\16\17\u02b7\13\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\5\20\u02d0\n\20\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u02e8")
        buf.write("\n\21\3\22\3\22\7\22\u02ec\n\22\f\22\16\22\u02ef\13\22")
        buf.write("\3\22\3\22\7\22\u02f3\n\22\f\22\16\22\u02f6\13\22\3\22")
        buf.write("\3\22\3\23\3\23\7\23\u02fc\n\23\f\23\16\23\u02ff\13\23")
        buf.write("\3\23\3\23\7\23\u0303\n\23\f\23\16\23\u0306\13\23\3\23")
        buf.write("\3\23\7\23\u030a\n\23\f\23\16\23\u030d\13\23\3\23\3\23")
        buf.write("\7\23\u0311\n\23\f\23\16\23\u0314\13\23\3\23\3\23\7\23")
        buf.write("\u0318\n\23\f\23\16\23\u031b\13\23\7\23\u031d\n\23\f\23")
        buf.write("\16\23\u0320\13\23\5\23\u0322\n\23\3\23\3\23\3\24\3\24")
        buf.write("\7\24\u0328\n\24\f\24\16\24\u032b\13\24\3\24\3\24\7\24")
        buf.write("\u032f\n\24\f\24\16\24\u0332\13\24\3\24\3\24\7\24\u0336")
        buf.write("\n\24\f\24\16\24\u0339\13\24\3\24\3\24\3\25\3\25\7\25")
        buf.write("\u033f\n\25\f\25\16\25\u0342\13\25\3\25\3\25\7\25\u0346")
        buf.write("\n\25\f\25\16\25\u0349\13\25\3\25\3\25\7\25\u034d\n\25")
        buf.write("\f\25\16\25\u0350\13\25\3\25\3\25\3\26\3\26\7\26\u0356")
        buf.write("\n\26\f\26\16\26\u0359\13\26\3\26\3\26\7\26\u035d\n\26")
        buf.write("\f\26\16\26\u0360\13\26\3\26\3\26\7\26\u0364\n\26\f\26")
        buf.write("\16\26\u0367\13\26\3\26\3\26\7\26\u036b\n\26\f\26\16\26")
        buf.write("\u036e\13\26\3\26\3\26\7\26\u0372\n\26\f\26\16\26\u0375")
        buf.write("\13\26\3\26\3\26\3\27\3\27\7\27\u037b\n\27\f\27\16\27")
        buf.write("\u037e\13\27\3\27\3\27\7\27\u0382\n\27\f\27\16\27\u0385")
        buf.write("\13\27\3\27\3\27\7\27\u0389\n\27\f\27\16\27\u038c\13\27")
        buf.write("\3\27\3\27\3\30\3\30\7\30\u0392\n\30\f\30\16\30\u0395")
        buf.write("\13\30\3\30\3\30\7\30\u0399\n\30\f\30\16\30\u039c\13\30")
        buf.write("\3\30\3\30\7\30\u03a0\n\30\f\30\16\30\u03a3\13\30\3\30")
        buf.write("\3\30\7\30\u03a7\n\30\f\30\16\30\u03aa\13\30\3\30\3\30")
        buf.write("\7\30\u03ae\n\30\f\30\16\30\u03b1\13\30\3\30\3\30\3\31")
        buf.write("\3\31\7\31\u03b7\n\31\f\31\16\31\u03ba\13\31\3\31\3\31")
        buf.write("\7\31\u03be\n\31\f\31\16\31\u03c1\13\31\3\31\3\31\7\31")
        buf.write("\u03c5\n\31\f\31\16\31\u03c8\13\31\3\31\3\31\7\31\u03cc")
        buf.write("\n\31\f\31\16\31\u03cf\13\31\3\31\3\31\7\31\u03d3\n\31")
        buf.write("\f\31\16\31\u03d6\13\31\3\31\3\31\3\32\3\32\7\32\u03dc")
        buf.write("\n\32\f\32\16\32\u03df\13\32\3\32\3\32\7\32\u03e3\n\32")
        buf.write("\f\32\16\32\u03e6\13\32\3\32\3\32\7\32\u03ea\n\32\f\32")
        buf.write("\16\32\u03ed\13\32\3\32\3\32\7\32\u03f1\n\32\f\32\16\32")
        buf.write("\u03f4\13\32\3\32\3\32\7\32\u03f8\n\32\f\32\16\32\u03fb")
        buf.write("\13\32\3\32\3\32\3\33\3\33\7\33\u0401\n\33\f\33\16\33")
        buf.write("\u0404\13\33\3\33\3\33\7\33\u0408\n\33\f\33\16\33\u040b")
        buf.write("\13\33\3\33\3\33\7\33\u040f\n\33\f\33\16\33\u0412\13\33")
        buf.write("\3\33\3\33\7\33\u0416\n\33\f\33\16\33\u0419\13\33\3\33")
        buf.write("\3\33\7\33\u041d\n\33\f\33\16\33\u0420\13\33\3\33\3\33")
        buf.write("\3\34\3\34\7\34\u0426\n\34\f\34\16\34\u0429\13\34\3\34")
        buf.write("\3\34\7\34\u042d\n\34\f\34\16\34\u0430\13\34\3\34\3\34")
        buf.write("\7\34\u0434\n\34\f\34\16\34\u0437\13\34\3\34\3\34\3\35")
        buf.write("\3\35\7\35\u043d\n\35\f\35\16\35\u0440\13\35\3\35\3\35")
        buf.write("\7\35\u0444\n\35\f\35\16\35\u0447\13\35\3\35\3\35\7\35")
        buf.write("\u044b\n\35\f\35\16\35\u044e\13\35\3\35\3\35\3\36\3\36")
        buf.write("\7\36\u0454\n\36\f\36\16\36\u0457\13\36\3\36\3\36\7\36")
        buf.write("\u045b\n\36\f\36\16\36\u045e\13\36\3\36\3\36\7\36\u0462")
        buf.write("\n\36\f\36\16\36\u0465\13\36\3\36\3\36\7\36\u0469\n\36")
        buf.write("\f\36\16\36\u046c\13\36\7\36\u046e\n\36\f\36\16\36\u0471")
        buf.write("\13\36\3\36\3\36\7\36\u0475\n\36\f\36\16\36\u0478\13\36")
        buf.write("\3\36\3\36\3\37\3\37\7\37\u047e\n\37\f\37\16\37\u0481")
        buf.write("\13\37\3\37\3\37\7\37\u0485\n\37\f\37\16\37\u0488\13\37")
        buf.write("\3\37\3\37\7\37\u048c\n\37\f\37\16\37\u048f\13\37\3\37")
        buf.write("\3\37\3 \3 \7 \u0495\n \f \16 \u0498\13 \3 \3 \7 \u049c")
        buf.write("\n \f \16 \u049f\13 \3 \3 \7 \u04a3\n \f \16 \u04a6\13")
        buf.write(" \3 \3 \3!\3!\7!\u04ac\n!\f!\16!\u04af\13!\3!\3!\7!\u04b3")
        buf.write("\n!\f!\16!\u04b6\13!\3!\3!\7!\u04ba\n!\f!\16!\u04bd\13")
        buf.write("!\3!\3!\3\"\3\"\7\"\u04c3\n\"\f\"\16\"\u04c6\13\"\3\"")
        buf.write("\3\"\7\"\u04ca\n\"\f\"\16\"\u04cd\13\"\3\"\3\"\7\"\u04d1")
        buf.write("\n\"\f\"\16\"\u04d4\13\"\3\"\3\"\3#\3#\7#\u04da\n#\f#")
        buf.write("\16#\u04dd\13#\3#\3#\7#\u04e1\n#\f#\16#\u04e4\13#\3#\3")
        buf.write("#\7#\u04e8\n#\f#\16#\u04eb\13#\3#\3#\3$\3$\3$\2\2%\2\4")
        buf.write("\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64")
        buf.write("\668:<>@BDF\2\5\3\2-.\3\2+,\3\2*,\2\u05bd\2K\3\2\2\2\4")
        buf.write("\u0099\3\2\2\2\6\u011a\3\2\2\2\b\u011c\3\2\2\2\n\u0180")
        buf.write("\3\2\2\2\f\u01d8\3\2\2\2\16\u01e5\3\2\2\2\20\u01f1\3\2")
        buf.write("\2\2\22\u023b\3\2\2\2\24\u0244\3\2\2\2\26\u0291\3\2\2")
        buf.write("\2\30\u0293\3\2\2\2\32\u02a8\3\2\2\2\34\u02aa\3\2\2\2")
        buf.write("\36\u02cf\3\2\2\2 \u02e7\3\2\2\2\"\u02e9\3\2\2\2$\u02f9")
        buf.write("\3\2\2\2&\u0325\3\2\2\2(\u033c\3\2\2\2*\u0353\3\2\2\2")
        buf.write(",\u0378\3\2\2\2.\u038f\3\2\2\2\60\u03b4\3\2\2\2\62\u03d9")
        buf.write("\3\2\2\2\64\u03fe\3\2\2\2\66\u0423\3\2\2\28\u043a\3\2")
        buf.write("\2\2:\u0451\3\2\2\2<\u047b\3\2\2\2>\u0492\3\2\2\2@\u04a9")
        buf.write("\3\2\2\2B\u04c0\3\2\2\2D\u04d7\3\2\2\2F\u04ee\3\2\2\2")
        buf.write("HJ\t\2\2\2IH\3\2\2\2JM\3\2\2\2KI\3\2\2\2KL\3\2\2\2L\u008c")
        buf.write("\3\2\2\2MK\3\2\2\2NR\5 \21\2OQ\t\2\2\2PO\3\2\2\2QT\3\2")
        buf.write("\2\2RP\3\2\2\2RS\3\2\2\2SU\3\2\2\2TR\3\2\2\2UY\7\3\2\2")
        buf.write("VX\t\2\2\2WV\3\2\2\2X[\3\2\2\2YW\3\2\2\2YZ\3\2\2\2Zx\3")
        buf.write("\2\2\2[Y\3\2\2\2\\j\5 \21\2]_\7-\2\2^]\3\2\2\2_b\3\2\2")
        buf.write("\2`^\3\2\2\2`a\3\2\2\2ac\3\2\2\2b`\3\2\2\2cg\7.\2\2df")
        buf.write("\7-\2\2ed\3\2\2\2fi\3\2\2\2ge\3\2\2\2gh\3\2\2\2hk\3\2")
        buf.write("\2\2ig\3\2\2\2j`\3\2\2\2kl\3\2\2\2lj\3\2\2\2lm\3\2\2\2")
        buf.write("mx\3\2\2\2nq\5\6\4\2oq\5\4\3\2pn\3\2\2\2po\3\2\2\2qs\3")
        buf.write("\2\2\2rt\t\2\2\2sr\3\2\2\2tu\3\2\2\2us\3\2\2\2uv\3\2\2")
        buf.write("\2vx\3\2\2\2wN\3\2\2\2w\\\3\2\2\2wp\3\2\2\2x{\3\2\2\2")
        buf.write("yw\3\2\2\2yz\3\2\2\2z\u008a\3\2\2\2{y\3\2\2\2|\u0080\5")
        buf.write(" \21\2}\177\t\2\2\2~}\3\2\2\2\177\u0082\3\2\2\2\u0080")
        buf.write("~\3\2\2\2\u0080\u0081\3\2\2\2\u0081\u0084\3\2\2\2\u0082")
        buf.write("\u0080\3\2\2\2\u0083\u0085\7\3\2\2\u0084\u0083\3\2\2\2")
        buf.write("\u0084\u0085\3\2\2\2\u0085\u008b\3\2\2\2\u0086\u0089\5")
        buf.write("\6\4\2\u0087\u0089\5\4\3\2\u0088\u0086\3\2\2\2\u0088\u0087")
        buf.write("\3\2\2\2\u0089\u008b\3\2\2\2\u008a|\3\2\2\2\u008a\u0088")
        buf.write("\3\2\2\2\u008b\u008d\3\2\2\2\u008cy\3\2\2\2\u008c\u008d")
        buf.write("\3\2\2\2\u008d\u0091\3\2\2\2\u008e\u0090\t\2\2\2\u008f")
        buf.write("\u008e\3\2\2\2\u0090\u0093\3\2\2\2\u0091\u008f\3\2\2\2")
        buf.write("\u0091\u0092\3\2\2\2\u0092\u0095\3\2\2\2\u0093\u0091\3")
        buf.write("\2\2\2\u0094\u0096\7/\2\2\u0095\u0094\3\2\2\2\u0095\u0096")
        buf.write("\3\2\2\2\u0096\u0097\3\2\2\2\u0097\u0098\7\2\2\3\u0098")
        buf.write("\3\3\2\2\2\u0099\u009b\7\b\2\2\u009a\u009c\t\2\2\2\u009b")
        buf.write("\u009a\3\2\2\2\u009c\u009d\3\2\2\2\u009d\u009b\3\2\2\2")
        buf.write("\u009d\u009e\3\2\2\2\u009e\u009f\3\2\2\2\u009f\u00a3\7")
        buf.write("+\2\2\u00a0\u00a2\t\2\2\2\u00a1\u00a0\3\2\2\2\u00a2\u00a5")
        buf.write("\3\2\2\2\u00a3\u00a1\3\2\2\2\u00a3\u00a4\3\2\2\2\u00a4")
        buf.write("\u00a6\3\2\2\2\u00a5\u00a3\3\2\2\2\u00a6\u00aa\7\4\2\2")
        buf.write("\u00a7\u00a9\t\2\2\2\u00a8\u00a7\3\2\2\2\u00a9\u00ac\3")
        buf.write("\2\2\2\u00aa\u00a8\3\2\2\2\u00aa\u00ab\3\2\2\2\u00ab\u00c7")
        buf.write("\3\2\2\2\u00ac\u00aa\3\2\2\2\u00ad\u00b1\7+\2\2\u00ae")
        buf.write("\u00b0\t\2\2\2\u00af\u00ae\3\2\2\2\u00b0\u00b3\3\2\2\2")
        buf.write("\u00b1\u00af\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2\u00c4\3")
        buf.write("\2\2\2\u00b3\u00b1\3\2\2\2\u00b4\u00b8\7\5\2\2\u00b5\u00b7")
        buf.write("\t\2\2\2\u00b6\u00b5\3\2\2\2\u00b7\u00ba\3\2\2\2\u00b8")
        buf.write("\u00b6\3\2\2\2\u00b8\u00b9\3\2\2\2\u00b9\u00bb\3\2\2\2")
        buf.write("\u00ba\u00b8\3\2\2\2\u00bb\u00bf\7+\2\2\u00bc\u00be\t")
        buf.write("\2\2\2\u00bd\u00bc\3\2\2\2\u00be\u00c1\3\2\2\2\u00bf\u00bd")
        buf.write("\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0\u00c3\3\2\2\2\u00c1")
        buf.write("\u00bf\3\2\2\2\u00c2\u00b4\3\2\2\2\u00c3\u00c6\3\2\2\2")
        buf.write("\u00c4\u00c2\3\2\2\2\u00c4\u00c5\3\2\2\2\u00c5\u00c8\3")
        buf.write("\2\2\2\u00c6\u00c4\3\2\2\2\u00c7\u00ad\3\2\2\2\u00c7\u00c8")
        buf.write("\3\2\2\2\u00c8\u00c9\3\2\2\2\u00c9\u00cd\7\6\2\2\u00ca")
        buf.write("\u00cc\t\2\2\2\u00cb\u00ca\3\2\2\2\u00cc\u00cf\3\2\2\2")
        buf.write("\u00cd\u00cb\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce\u00d0\3")
        buf.write("\2\2\2\u00cf\u00cd\3\2\2\2\u00d0\u00d2\7\20\2\2\u00d1")
        buf.write("\u00d3\t\2\2\2\u00d2\u00d1\3\2\2\2\u00d3\u00d4\3\2\2\2")
        buf.write("\u00d4\u00d2\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5\u0113\3")
        buf.write("\2\2\2\u00d6\u00da\5 \21\2\u00d7\u00d9\t\2\2\2\u00d8\u00d7")
        buf.write("\3\2\2\2\u00d9\u00dc\3\2\2\2\u00da\u00d8\3\2\2\2\u00da")
        buf.write("\u00db\3\2\2\2\u00db\u00dd\3\2\2\2\u00dc\u00da\3\2\2\2")
        buf.write("\u00dd\u00e1\7\3\2\2\u00de\u00e0\t\2\2\2\u00df\u00de\3")
        buf.write("\2\2\2\u00e0\u00e3\3\2\2\2\u00e1\u00df\3\2\2\2\u00e1\u00e2")
        buf.write("\3\2\2\2\u00e2\u00fd\3\2\2\2\u00e3\u00e1\3\2\2\2\u00e4")
        buf.write("\u00f2\5 \21\2\u00e5\u00e7\7-\2\2\u00e6\u00e5\3\2\2\2")
        buf.write("\u00e7\u00ea\3\2\2\2\u00e8\u00e6\3\2\2\2\u00e8\u00e9\3")
        buf.write("\2\2\2\u00e9\u00eb\3\2\2\2\u00ea\u00e8\3\2\2\2\u00eb\u00ef")
        buf.write("\7.\2\2\u00ec\u00ee\7-\2\2\u00ed\u00ec\3\2\2\2\u00ee\u00f1")
        buf.write("\3\2\2\2\u00ef\u00ed\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0")
        buf.write("\u00f3\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f2\u00e8\3\2\2\2")
        buf.write("\u00f3\u00f4\3\2\2\2\u00f4\u00f2\3\2\2\2\u00f4\u00f5\3")
        buf.write("\2\2\2\u00f5\u00fd\3\2\2\2\u00f6\u00f8\5\6\4\2\u00f7\u00f9")
        buf.write("\t\2\2\2\u00f8\u00f7\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa")
        buf.write("\u00f8\3\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\u00fd\3\2\2\2")
        buf.write("\u00fc\u00d6\3\2\2\2\u00fc\u00e4\3\2\2\2\u00fc\u00f6\3")
        buf.write("\2\2\2\u00fd\u0100\3\2\2\2\u00fe\u00fc\3\2\2\2\u00fe\u00ff")
        buf.write("\3\2\2\2\u00ff\u010c\3\2\2\2\u0100\u00fe\3\2\2\2\u0101")
        buf.write("\u0105\5 \21\2\u0102\u0104\t\2\2\2\u0103\u0102\3\2\2\2")
        buf.write("\u0104\u0107\3\2\2\2\u0105\u0103\3\2\2\2\u0105\u0106\3")
        buf.write("\2\2\2\u0106\u0109\3\2\2\2\u0107\u0105\3\2\2\2\u0108\u010a")
        buf.write("\7\3\2\2\u0109\u0108\3\2\2\2\u0109\u010a\3\2\2\2\u010a")
        buf.write("\u010d\3\2\2\2\u010b\u010d\5\6\4\2\u010c\u0101\3\2\2\2")
        buf.write("\u010c\u010b\3\2\2\2\u010d\u010f\3\2\2\2\u010e\u0110\t")
        buf.write("\2\2\2\u010f\u010e\3\2\2\2\u0110\u0111\3\2\2\2\u0111\u010f")
        buf.write("\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0114\3\2\2\2\u0113")
        buf.write("\u00fe\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u0115\3\2\2\2")
        buf.write("\u0115\u0116\7\21\2\2\u0116\5\3\2\2\2\u0117\u011b\5\f")
        buf.write("\7\2\u0118\u011b\5\n\6\2\u0119\u011b\5\b\5\2\u011a\u0117")
        buf.write("\3\2\2\2\u011a\u0118\3\2\2\2\u011a\u0119\3\2\2\2\u011b")
        buf.write("\7\3\2\2\2\u011c\u011e\7\n\2\2\u011d\u011f\t\2\2\2\u011e")
        buf.write("\u011d\3\2\2\2\u011f\u0120\3\2\2\2\u0120\u011e\3\2\2\2")
        buf.write("\u0120\u0121\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0124\7")
        buf.write("+\2\2\u0123\u0125\t\2\2\2\u0124\u0123\3\2\2\2\u0125\u0126")
        buf.write("\3\2\2\2\u0126\u0124\3\2\2\2\u0126\u0127\3\2\2\2\u0127")
        buf.write("\u0128\3\2\2\2\u0128\u012a\7\13\2\2\u0129\u012b\t\2\2")
        buf.write("\2\u012a\u0129\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012a")
        buf.write("\3\2\2\2\u012c\u012d\3\2\2\2\u012d\u012e\3\2\2\2\u012e")
        buf.write("\u0130\7+\2\2\u012f\u0131\t\2\2\2\u0130\u012f\3\2\2\2")
        buf.write("\u0131\u0132\3\2\2\2\u0132\u0130\3\2\2\2\u0132\u0133\3")
        buf.write("\2\2\2\u0133\u0134\3\2\2\2\u0134\u0136\7\f\2\2\u0135\u0137")
        buf.write("\t\2\2\2\u0136\u0135\3\2\2\2\u0137\u0138\3\2\2\2\u0138")
        buf.write("\u0136\3\2\2\2\u0138\u0139\3\2\2\2\u0139\u017c\3\2\2\2")
        buf.write("\u013a\u013e\5 \21\2\u013b\u013d\t\2\2\2\u013c\u013b\3")
        buf.write("\2\2\2\u013d\u0140\3\2\2\2\u013e\u013c\3\2\2\2\u013e\u013f")
        buf.write("\3\2\2\2\u013f\u0141\3\2\2\2\u0140\u013e\3\2\2\2\u0141")
        buf.write("\u0145\7\3\2\2\u0142\u0144\t\2\2\2\u0143\u0142\3\2\2\2")
        buf.write("\u0144\u0147\3\2\2\2\u0145\u0143\3\2\2\2\u0145\u0146\3")
        buf.write("\2\2\2\u0146\u0161\3\2\2\2\u0147\u0145\3\2\2\2\u0148\u0156")
        buf.write("\5 \21\2\u0149\u014b\7-\2\2\u014a\u0149\3\2\2\2\u014b")
        buf.write("\u014e\3\2\2\2\u014c\u014a\3\2\2\2\u014c\u014d\3\2\2\2")
        buf.write("\u014d\u014f\3\2\2\2\u014e\u014c\3\2\2\2\u014f\u0153\7")
        buf.write(".\2\2\u0150\u0152\7-\2\2\u0151\u0150\3\2\2\2\u0152\u0155")
        buf.write("\3\2\2\2\u0153\u0151\3\2\2\2\u0153\u0154\3\2\2\2\u0154")
        buf.write("\u0157\3\2\2\2\u0155\u0153\3\2\2\2\u0156\u014c\3\2\2\2")
        buf.write("\u0157\u0158\3\2\2\2\u0158\u0156\3\2\2\2\u0158\u0159\3")
        buf.write("\2\2\2\u0159\u0161\3\2\2\2\u015a\u015c\5\6\4\2\u015b\u015d")
        buf.write("\t\2\2\2\u015c\u015b\3\2\2\2\u015d\u015e\3\2\2\2\u015e")
        buf.write("\u015c\3\2\2\2\u015e\u015f\3\2\2\2\u015f\u0161\3\2\2\2")
        buf.write("\u0160\u013a\3\2\2\2\u0160\u0148\3\2\2\2\u0160\u015a\3")
        buf.write("\2\2\2\u0161\u0164\3\2\2\2\u0162\u0160\3\2\2\2\u0162\u0163")
        buf.write("\3\2\2\2\u0163\u017a\3\2\2\2\u0164\u0162\3\2\2\2\u0165")
        buf.write("\u0169\5 \21\2\u0166\u0168\t\2\2\2\u0167\u0166\3\2\2\2")
        buf.write("\u0168\u016b\3\2\2\2\u0169\u0167\3\2\2\2\u0169\u016a\3")
        buf.write("\2\2\2\u016a\u0172\3\2\2\2\u016b\u0169\3\2\2\2\u016c\u0173")
        buf.write("\7\3\2\2\u016d\u016f\t\2\2\2\u016e\u016d\3\2\2\2\u016f")
        buf.write("\u0170\3\2\2\2\u0170\u016e\3\2\2\2\u0170\u0171\3\2\2\2")
        buf.write("\u0171\u0173\3\2\2\2\u0172\u016c\3\2\2\2\u0172\u016e\3")
        buf.write("\2\2\2\u0173\u017b\3\2\2\2\u0174\u0176\5\6\4\2\u0175\u0177")
        buf.write("\t\2\2\2\u0176\u0175\3\2\2\2\u0177\u0178\3\2\2\2\u0178")
        buf.write("\u0176\3\2\2\2\u0178\u0179\3\2\2\2\u0179\u017b\3\2\2\2")
        buf.write("\u017a\u0165\3\2\2\2\u017a\u0174\3\2\2\2\u017b\u017d\3")
        buf.write("\2\2\2\u017c\u0162\3\2\2\2\u017c\u017d\3\2\2\2\u017d\u017e")
        buf.write("\3\2\2\2\u017e\u017f\7\21\2\2\u017f\t\3\2\2\2\u0180\u0182")
        buf.write("\7\t\2\2\u0181\u0183\t\2\2\2\u0182\u0181\3\2\2\2\u0183")
        buf.write("\u0184\3\2\2\2\u0184\u0182\3\2\2\2\u0184\u0185\3\2\2\2")
        buf.write("\u0185\u0186\3\2\2\2\u0186\u0188\5\26\f\2\u0187\u0189")
        buf.write("\t\2\2\2\u0188\u0187\3\2\2\2\u0189\u018a\3\2\2\2\u018a")
        buf.write("\u0188\3\2\2\2\u018a\u018b\3\2\2\2\u018b\u018c\3\2\2\2")
        buf.write("\u018c\u018e\7\f\2\2\u018d\u018f\t\2\2\2\u018e\u018d\3")
        buf.write("\2\2\2\u018f\u0190\3\2\2\2\u0190\u018e\3\2\2\2\u0190\u0191")
        buf.write("\3\2\2\2\u0191\u01d4\3\2\2\2\u0192\u0196\5 \21\2\u0193")
        buf.write("\u0195\t\2\2\2\u0194\u0193\3\2\2\2\u0195\u0198\3\2\2\2")
        buf.write("\u0196\u0194\3\2\2\2\u0196\u0197\3\2\2\2\u0197\u0199\3")
        buf.write("\2\2\2\u0198\u0196\3\2\2\2\u0199\u019d\7\3\2\2\u019a\u019c")
        buf.write("\t\2\2\2\u019b\u019a\3\2\2\2\u019c\u019f\3\2\2\2\u019d")
        buf.write("\u019b\3\2\2\2\u019d\u019e\3\2\2\2\u019e\u01b9\3\2\2\2")
        buf.write("\u019f\u019d\3\2\2\2\u01a0\u01ae\5 \21\2\u01a1\u01a3\7")
        buf.write("-\2\2\u01a2\u01a1\3\2\2\2\u01a3\u01a6\3\2\2\2\u01a4\u01a2")
        buf.write("\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\u01a7\3\2\2\2\u01a6")
        buf.write("\u01a4\3\2\2\2\u01a7\u01ab\7.\2\2\u01a8\u01aa\7-\2\2\u01a9")
        buf.write("\u01a8\3\2\2\2\u01aa\u01ad\3\2\2\2\u01ab\u01a9\3\2\2\2")
        buf.write("\u01ab\u01ac\3\2\2\2\u01ac\u01af\3\2\2\2\u01ad\u01ab\3")
        buf.write("\2\2\2\u01ae\u01a4\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0\u01ae")
        buf.write("\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b9\3\2\2\2\u01b2")
        buf.write("\u01b4\5\6\4\2\u01b3\u01b5\t\2\2\2\u01b4\u01b3\3\2\2\2")
        buf.write("\u01b5\u01b6\3\2\2\2\u01b6\u01b4\3\2\2\2\u01b6\u01b7\3")
        buf.write("\2\2\2\u01b7\u01b9\3\2\2\2\u01b8\u0192\3\2\2\2\u01b8\u01a0")
        buf.write("\3\2\2\2\u01b8\u01b2\3\2\2\2\u01b9\u01bc\3\2\2\2\u01ba")
        buf.write("\u01b8\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01d2\3\2\2\2")
        buf.write("\u01bc\u01ba\3\2\2\2\u01bd\u01c1\5 \21\2\u01be\u01c0\t")
        buf.write("\2\2\2\u01bf\u01be\3\2\2\2\u01c0\u01c3\3\2\2\2\u01c1\u01bf")
        buf.write("\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2\u01ca\3\2\2\2\u01c3")
        buf.write("\u01c1\3\2\2\2\u01c4\u01cb\7\3\2\2\u01c5\u01c7\t\2\2\2")
        buf.write("\u01c6\u01c5\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01c6\3")
        buf.write("\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01cb\3\2\2\2\u01ca\u01c4")
        buf.write("\3\2\2\2\u01ca\u01c6\3\2\2\2\u01cb\u01d3\3\2\2\2\u01cc")
        buf.write("\u01ce\5\6\4\2\u01cd\u01cf\t\2\2\2\u01ce\u01cd\3\2\2\2")
        buf.write("\u01cf\u01d0\3\2\2\2\u01d0\u01ce\3\2\2\2\u01d0\u01d1\3")
        buf.write("\2\2\2\u01d1\u01d3\3\2\2\2\u01d2\u01bd\3\2\2\2\u01d2\u01cc")
        buf.write("\3\2\2\2\u01d3\u01d5\3\2\2\2\u01d4\u01ba\3\2\2\2\u01d4")
        buf.write("\u01d5\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d7\7\21\2")
        buf.write("\2\u01d7\13\3\2\2\2\u01d8\u01d9\5\16\b\2\u01d9\u01dd\5")
        buf.write("\20\t\2\u01da\u01dc\5\22\n\2\u01db\u01da\3\2\2\2\u01dc")
        buf.write("\u01df\3\2\2\2\u01dd\u01db\3\2\2\2\u01dd\u01de\3\2\2\2")
        buf.write("\u01de\u01e1\3\2\2\2\u01df\u01dd\3\2\2\2\u01e0\u01e2\5")
        buf.write("\24\13\2\u01e1\u01e0\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2")
        buf.write("\u01e3\3\2\2\2\u01e3\u01e4\7\21\2\2\u01e4\r\3\2\2\2\u01e5")
        buf.write("\u01e7\7\r\2\2\u01e6\u01e8\t\2\2\2\u01e7\u01e6\3\2\2\2")
        buf.write("\u01e8\u01e9\3\2\2\2\u01e9\u01e7\3\2\2\2\u01e9\u01ea\3")
        buf.write("\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ed\5\26\f\2\u01ec")
        buf.write("\u01ee\t\2\2\2\u01ed\u01ec\3\2\2\2\u01ee\u01ef\3\2\2\2")
        buf.write("\u01ef\u01ed\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\17\3\2")
        buf.write("\2\2\u01f1\u01f3\7\16\2\2\u01f2\u01f4\t\2\2\2\u01f3\u01f2")
        buf.write("\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f5")
        buf.write("\u01f6\3\2\2\2\u01f6\u0239\3\2\2\2\u01f7\u01fb\5 \21\2")
        buf.write("\u01f8\u01fa\t\2\2\2\u01f9\u01f8\3\2\2\2\u01fa\u01fd\3")
        buf.write("\2\2\2\u01fb\u01f9\3\2\2\2\u01fb\u01fc\3\2\2\2\u01fc\u01fe")
        buf.write("\3\2\2\2\u01fd\u01fb\3\2\2\2\u01fe\u0202\7\3\2\2\u01ff")
        buf.write("\u0201\t\2\2\2\u0200\u01ff\3\2\2\2\u0201\u0204\3\2\2\2")
        buf.write("\u0202\u0200\3\2\2\2\u0202\u0203\3\2\2\2\u0203\u021e\3")
        buf.write("\2\2\2\u0204\u0202\3\2\2\2\u0205\u0213\5 \21\2\u0206\u0208")
        buf.write("\7-\2\2\u0207\u0206\3\2\2\2\u0208\u020b\3\2\2\2\u0209")
        buf.write("\u0207\3\2\2\2\u0209\u020a\3\2\2\2\u020a\u020c\3\2\2\2")
        buf.write("\u020b\u0209\3\2\2\2\u020c\u0210\7.\2\2\u020d\u020f\7")
        buf.write("-\2\2\u020e\u020d\3\2\2\2\u020f\u0212\3\2\2\2\u0210\u020e")
        buf.write("\3\2\2\2\u0210\u0211\3\2\2\2\u0211\u0214\3\2\2\2\u0212")
        buf.write("\u0210\3\2\2\2\u0213\u0209\3\2\2\2\u0214\u0215\3\2\2\2")
        buf.write("\u0215\u0213\3\2\2\2\u0215\u0216\3\2\2\2\u0216\u021e\3")
        buf.write("\2\2\2\u0217\u0219\5\6\4\2\u0218\u021a\t\2\2\2\u0219\u0218")
        buf.write("\3\2\2\2\u021a\u021b\3\2\2\2\u021b\u0219\3\2\2\2\u021b")
        buf.write("\u021c\3\2\2\2\u021c\u021e\3\2\2\2\u021d\u01f7\3\2\2\2")
        buf.write("\u021d\u0205\3\2\2\2\u021d\u0217\3\2\2\2\u021e\u0221\3")
        buf.write("\2\2\2\u021f\u021d\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0237")
        buf.write("\3\2\2\2\u0221\u021f\3\2\2\2\u0222\u0226\5 \21\2\u0223")
        buf.write("\u0225\t\2\2\2\u0224\u0223\3\2\2\2\u0225\u0228\3\2\2\2")
        buf.write("\u0226\u0224\3\2\2\2\u0226\u0227\3\2\2\2\u0227\u022f\3")
        buf.write("\2\2\2\u0228\u0226\3\2\2\2\u0229\u0230\7\3\2\2\u022a\u022c")
        buf.write("\t\2\2\2\u022b\u022a\3\2\2\2\u022c\u022d\3\2\2\2\u022d")
        buf.write("\u022b\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u0230\3\2\2\2")
        buf.write("\u022f\u0229\3\2\2\2\u022f\u022b\3\2\2\2\u0230\u0238\3")
        buf.write("\2\2\2\u0231\u0233\5\6\4\2\u0232\u0234\t\2\2\2\u0233\u0232")
        buf.write("\3\2\2\2\u0234\u0235\3\2\2\2\u0235\u0233\3\2\2\2\u0235")
        buf.write("\u0236\3\2\2\2\u0236\u0238\3\2\2\2\u0237\u0222\3\2\2\2")
        buf.write("\u0237\u0231\3\2\2\2\u0238\u023a\3\2\2\2\u0239\u021f\3")
        buf.write("\2\2\2\u0239\u023a\3\2\2\2\u023a\21\3\2\2\2\u023b\u023d")
        buf.write("\7\17\2\2\u023c\u023e\t\2\2\2\u023d\u023c\3\2\2\2\u023e")
        buf.write("\u023f\3\2\2\2\u023f\u023d\3\2\2\2\u023f\u0240\3\2\2\2")
        buf.write("\u0240\u0241\3\2\2\2\u0241\u0242\5\16\b\2\u0242\u0243")
        buf.write("\5\20\t\2\u0243\23\3\2\2\2\u0244\u0246\7\17\2\2\u0245")
        buf.write("\u0247\t\2\2\2\u0246\u0245\3\2\2\2\u0247\u0248\3\2\2\2")
        buf.write("\u0248\u0246\3\2\2\2\u0248\u0249\3\2\2\2\u0249\u028c\3")
        buf.write("\2\2\2\u024a\u024e\5 \21\2\u024b\u024d\t\2\2\2\u024c\u024b")
        buf.write("\3\2\2\2\u024d\u0250\3\2\2\2\u024e\u024c\3\2\2\2\u024e")
        buf.write("\u024f\3\2\2\2\u024f\u0251\3\2\2\2\u0250\u024e\3\2\2\2")
        buf.write("\u0251\u0255\7\3\2\2\u0252\u0254\t\2\2\2\u0253\u0252\3")
        buf.write("\2\2\2\u0254\u0257\3\2\2\2\u0255\u0253\3\2\2\2\u0255\u0256")
        buf.write("\3\2\2\2\u0256\u0271\3\2\2\2\u0257\u0255\3\2\2\2\u0258")
        buf.write("\u0266\5 \21\2\u0259\u025b\7-\2\2\u025a\u0259\3\2\2\2")
        buf.write("\u025b\u025e\3\2\2\2\u025c\u025a\3\2\2\2\u025c\u025d\3")
        buf.write("\2\2\2\u025d\u025f\3\2\2\2\u025e\u025c\3\2\2\2\u025f\u0263")
        buf.write("\7.\2\2\u0260\u0262\7-\2\2\u0261\u0260\3\2\2\2\u0262\u0265")
        buf.write("\3\2\2\2\u0263\u0261\3\2\2\2\u0263\u0264\3\2\2\2\u0264")
        buf.write("\u0267\3\2\2\2\u0265\u0263\3\2\2\2\u0266\u025c\3\2\2\2")
        buf.write("\u0267\u0268\3\2\2\2\u0268\u0266\3\2\2\2\u0268\u0269\3")
        buf.write("\2\2\2\u0269\u0271\3\2\2\2\u026a\u026c\5\6\4\2\u026b\u026d")
        buf.write("\t\2\2\2\u026c\u026b\3\2\2\2\u026d\u026e\3\2\2\2\u026e")
        buf.write("\u026c\3\2\2\2\u026e\u026f\3\2\2\2\u026f\u0271\3\2\2\2")
        buf.write("\u0270\u024a\3\2\2\2\u0270\u0258\3\2\2\2\u0270\u026a\3")
        buf.write("\2\2\2\u0271\u0274\3\2\2\2\u0272\u0270\3\2\2\2\u0272\u0273")
        buf.write("\3\2\2\2\u0273\u028a\3\2\2\2\u0274\u0272\3\2\2\2\u0275")
        buf.write("\u0279\5 \21\2\u0276\u0278\t\2\2\2\u0277\u0276\3\2\2\2")
        buf.write("\u0278\u027b\3\2\2\2\u0279\u0277\3\2\2\2\u0279\u027a\3")
        buf.write("\2\2\2\u027a\u0282\3\2\2\2\u027b\u0279\3\2\2\2\u027c\u0283")
        buf.write("\7\3\2\2\u027d\u027f\t\2\2\2\u027e\u027d\3\2\2\2\u027f")
        buf.write("\u0280\3\2\2\2\u0280\u027e\3\2\2\2\u0280\u0281\3\2\2\2")
        buf.write("\u0281\u0283\3\2\2\2\u0282\u027c\3\2\2\2\u0282\u027e\3")
        buf.write("\2\2\2\u0283\u028b\3\2\2\2\u0284\u0286\5\6\4\2\u0285\u0287")
        buf.write("\t\2\2\2\u0286\u0285\3\2\2\2\u0287\u0288\3\2\2\2\u0288")
        buf.write("\u0286\3\2\2\2\u0288\u0289\3\2\2\2\u0289\u028b\3\2\2\2")
        buf.write("\u028a\u0275\3\2\2\2\u028a\u0284\3\2\2\2\u028b\u028d\3")
        buf.write("\2\2\2\u028c\u0272\3\2\2\2\u028c\u028d\3\2\2\2\u028d\25")
        buf.write("\3\2\2\2\u028e\u0292\5\36\20\2\u028f\u0292\7)\2\2\u0290")
        buf.write("\u0292\5\30\r\2\u0291\u028e\3\2\2\2\u0291\u028f\3\2\2")
        buf.write("\2\u0291\u0290\3\2\2\2\u0292\27\3\2\2\2\u0293\u0297\5")
        buf.write("\32\16\2\u0294\u0296\t\2\2\2\u0295\u0294\3\2\2\2\u0296")
        buf.write("\u0299\3\2\2\2\u0297\u0295\3\2\2\2\u0297\u0298\3\2\2\2")
        buf.write("\u0298\u029a\3\2\2\2\u0299\u0297\3\2\2\2\u029a\u029e\7")
        buf.write("&\2\2\u029b\u029d\t\2\2\2\u029c\u029b\3\2\2\2\u029d\u02a0")
        buf.write("\3\2\2\2\u029e\u029c\3\2\2\2\u029e\u029f\3\2\2\2\u029f")
        buf.write("\u02a1\3\2\2\2\u02a0\u029e\3\2\2\2\u02a1\u02a2\5\32\16")
        buf.write("\2\u02a2\31\3\2\2\2\u02a3\u02a9\5\36\20\2\u02a4\u02a9")
        buf.write("\7*\2\2\u02a5\u02a9\7,\2\2\u02a6\u02a9\7+\2\2\u02a7\u02a9")
        buf.write("\5\34\17\2\u02a8\u02a3\3\2\2\2\u02a8\u02a4\3\2\2\2\u02a8")
        buf.write("\u02a5\3\2\2\2\u02a8\u02a6\3\2\2\2\u02a8\u02a7\3\2\2\2")
        buf.write("\u02a9\33\3\2\2\2\u02aa\u02ae\t\3\2\2\u02ab\u02ad\t\2")
        buf.write("\2\2\u02ac\u02ab\3\2\2\2\u02ad\u02b0\3\2\2\2\u02ae\u02ac")
        buf.write("\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02b1\3\2\2\2\u02b0")
        buf.write("\u02ae\3\2\2\2\u02b1\u02b5\7\'\2\2\u02b2\u02b4\t\2\2\2")
        buf.write("\u02b3\u02b2\3\2\2\2\u02b4\u02b7\3\2\2\2\u02b5\u02b3\3")
        buf.write("\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02b8\3\2\2\2\u02b7\u02b5")
        buf.write("\3\2\2\2\u02b8\u02b9\t\3\2\2\u02b9\35\3\2\2\2\u02ba\u02d0")
        buf.write("\5$\23\2\u02bb\u02d0\5&\24\2\u02bc\u02d0\5(\25\2\u02bd")
        buf.write("\u02d0\5*\26\2\u02be\u02d0\5,\27\2\u02bf\u02d0\5.\30\2")
        buf.write("\u02c0\u02d0\5\60\31\2\u02c1\u02d0\5\62\32\2\u02c2\u02d0")
        buf.write("\5\64\33\2\u02c3\u02d0\5\66\34\2\u02c4\u02d0\58\35\2\u02c5")
        buf.write("\u02d0\5:\36\2\u02c6\u02d0\5<\37\2\u02c7\u02d0\5> \2\u02c8")
        buf.write("\u02d0\5@!\2\u02c9\u02d0\5B\"\2\u02ca\u02d0\5D#\2\u02cb")
        buf.write("\u02d0\7\35\2\2\u02cc\u02d0\7 \2\2\u02cd\u02d0\7!\2\2")
        buf.write("\u02ce\u02d0\7\"\2\2\u02cf\u02ba\3\2\2\2\u02cf\u02bb\3")
        buf.write("\2\2\2\u02cf\u02bc\3\2\2\2\u02cf\u02bd\3\2\2\2\u02cf\u02be")
        buf.write("\3\2\2\2\u02cf\u02bf\3\2\2\2\u02cf\u02c0\3\2\2\2\u02cf")
        buf.write("\u02c1\3\2\2\2\u02cf\u02c2\3\2\2\2\u02cf\u02c3\3\2\2\2")
        buf.write("\u02cf\u02c4\3\2\2\2\u02cf\u02c5\3\2\2\2\u02cf\u02c6\3")
        buf.write("\2\2\2\u02cf\u02c7\3\2\2\2\u02cf\u02c8\3\2\2\2\u02cf\u02c9")
        buf.write("\3\2\2\2\u02cf\u02ca\3\2\2\2\u02cf\u02cb\3\2\2\2\u02cf")
        buf.write("\u02cc\3\2\2\2\u02cf\u02cd\3\2\2\2\u02cf\u02ce\3\2\2\2")
        buf.write("\u02d0\37\3\2\2\2\u02d1\u02e8\5$\23\2\u02d2\u02e8\5&\24")
        buf.write("\2\u02d3\u02e8\5(\25\2\u02d4\u02e8\5*\26\2\u02d5\u02e8")
        buf.write("\5,\27\2\u02d6\u02e8\5.\30\2\u02d7\u02e8\5\60\31\2\u02d8")
        buf.write("\u02e8\5\62\32\2\u02d9\u02e8\5\64\33\2\u02da\u02e8\5\66")
        buf.write("\34\2\u02db\u02e8\58\35\2\u02dc\u02e8\5:\36\2\u02dd\u02e8")
        buf.write("\5<\37\2\u02de\u02e8\5> \2\u02df\u02e8\5@!\2\u02e0\u02e8")
        buf.write("\5B\"\2\u02e1\u02e8\5D#\2\u02e2\u02e8\5\"\22\2\u02e3\u02e8")
        buf.write("\7\35\2\2\u02e4\u02e8\7 \2\2\u02e5\u02e8\7!\2\2\u02e6")
        buf.write("\u02e8\7\"\2\2\u02e7\u02d1\3\2\2\2\u02e7\u02d2\3\2\2\2")
        buf.write("\u02e7\u02d3\3\2\2\2\u02e7\u02d4\3\2\2\2\u02e7\u02d5\3")
        buf.write("\2\2\2\u02e7\u02d6\3\2\2\2\u02e7\u02d7\3\2\2\2\u02e7\u02d8")
        buf.write("\3\2\2\2\u02e7\u02d9\3\2\2\2\u02e7\u02da\3\2\2\2\u02e7")
        buf.write("\u02db\3\2\2\2\u02e7\u02dc\3\2\2\2\u02e7\u02dd\3\2\2\2")
        buf.write("\u02e7\u02de\3\2\2\2\u02e7\u02df\3\2\2\2\u02e7\u02e0\3")
        buf.write("\2\2\2\u02e7\u02e1\3\2\2\2\u02e7\u02e2\3\2\2\2\u02e7\u02e3")
        buf.write("\3\2\2\2\u02e7\u02e4\3\2\2\2\u02e7\u02e5\3\2\2\2\u02e7")
        buf.write("\u02e6\3\2\2\2\u02e8!\3\2\2\2\u02e9\u02ed\7+\2\2\u02ea")
        buf.write("\u02ec\t\2\2\2\u02eb\u02ea\3\2\2\2\u02ec\u02ef\3\2\2\2")
        buf.write("\u02ed\u02eb\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee\u02f0\3")
        buf.write("\2\2\2\u02ef\u02ed\3\2\2\2\u02f0\u02f4\7\7\2\2\u02f1\u02f3")
        buf.write("\t\2\2\2\u02f2\u02f1\3\2\2\2\u02f3\u02f6\3\2\2\2\u02f4")
        buf.write("\u02f2\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02f7\3\2\2\2")
        buf.write("\u02f6\u02f4\3\2\2\2\u02f7\u02f8\5\32\16\2\u02f8#\3\2")
        buf.write("\2\2\u02f9\u02fd\7+\2\2\u02fa\u02fc\t\2\2\2\u02fb\u02fa")
        buf.write("\3\2\2\2\u02fc\u02ff\3\2\2\2\u02fd\u02fb\3\2\2\2\u02fd")
        buf.write("\u02fe\3\2\2\2\u02fe\u0300\3\2\2\2\u02ff\u02fd\3\2\2\2")
        buf.write("\u0300\u0304\7\4\2\2\u0301\u0303\t\2\2\2\u0302\u0301\3")
        buf.write("\2\2\2\u0303\u0306\3\2\2\2\u0304\u0302\3\2\2\2\u0304\u0305")
        buf.write("\3\2\2\2\u0305\u0321\3\2\2\2\u0306\u0304\3\2\2\2\u0307")
        buf.write("\u030b\5F$\2\u0308\u030a\t\2\2\2\u0309\u0308\3\2\2\2\u030a")
        buf.write("\u030d\3\2\2\2\u030b\u0309\3\2\2\2\u030b\u030c\3\2\2\2")
        buf.write("\u030c\u031e\3\2\2\2\u030d\u030b\3\2\2\2\u030e\u0312\7")
        buf.write("\5\2\2\u030f\u0311\t\2\2\2\u0310\u030f\3\2\2\2\u0311\u0314")
        buf.write("\3\2\2\2\u0312\u0310\3\2\2\2\u0312\u0313\3\2\2\2\u0313")
        buf.write("\u0315\3\2\2\2\u0314\u0312\3\2\2\2\u0315\u0319\5F$\2\u0316")
        buf.write("\u0318\t\2\2\2\u0317\u0316\3\2\2\2\u0318\u031b\3\2\2\2")
        buf.write("\u0319\u0317\3\2\2\2\u0319\u031a\3\2\2\2\u031a\u031d\3")
        buf.write("\2\2\2\u031b\u0319\3\2\2\2\u031c\u030e\3\2\2\2\u031d\u0320")
        buf.write("\3\2\2\2\u031e\u031c\3\2\2\2\u031e\u031f\3\2\2\2\u031f")
        buf.write("\u0322\3\2\2\2\u0320\u031e\3\2\2\2\u0321\u0307\3\2\2\2")
        buf.write("\u0321\u0322\3\2\2\2\u0322\u0323\3\2\2\2\u0323\u0324\7")
        buf.write("\6\2\2\u0324%\3\2\2\2\u0325\u0329\7\22\2\2\u0326\u0328")
        buf.write("\t\2\2\2\u0327\u0326\3\2\2\2\u0328\u032b\3\2\2\2\u0329")
        buf.write("\u0327\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u032c\3\2\2\2")
        buf.write("\u032b\u0329\3\2\2\2\u032c\u0330\7\4\2\2\u032d\u032f\t")
        buf.write("\2\2\2\u032e\u032d\3\2\2\2\u032f\u0332\3\2\2\2\u0330\u032e")
        buf.write("\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u0333\3\2\2\2\u0332")
        buf.write("\u0330\3\2\2\2\u0333\u0337\5F$\2\u0334\u0336\t\2\2\2\u0335")
        buf.write("\u0334\3\2\2\2\u0336\u0339\3\2\2\2\u0337\u0335\3\2\2\2")
        buf.write("\u0337\u0338\3\2\2\2\u0338\u033a\3\2\2\2\u0339\u0337\3")
        buf.write("\2\2\2\u033a\u033b\7\6\2\2\u033b\'\3\2\2\2\u033c\u0340")
        buf.write("\7\23\2\2\u033d\u033f\t\2\2\2\u033e\u033d\3\2\2\2\u033f")
        buf.write("\u0342\3\2\2\2\u0340\u033e\3\2\2\2\u0340\u0341\3\2\2\2")
        buf.write("\u0341\u0343\3\2\2\2\u0342\u0340\3\2\2\2\u0343\u0347\7")
        buf.write("\4\2\2\u0344\u0346\t\2\2\2\u0345\u0344\3\2\2\2\u0346\u0349")
        buf.write("\3\2\2\2\u0347\u0345\3\2\2\2\u0347\u0348\3\2\2\2\u0348")
        buf.write("\u034a\3\2\2\2\u0349\u0347\3\2\2\2\u034a\u034e\5F$\2\u034b")
        buf.write("\u034d\t\2\2\2\u034c\u034b\3\2\2\2\u034d\u0350\3\2\2\2")
        buf.write("\u034e\u034c\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0351\3")
        buf.write("\2\2\2\u0350\u034e\3\2\2\2\u0351\u0352\7\6\2\2\u0352)")
        buf.write("\3\2\2\2\u0353\u0357\7\24\2\2\u0354\u0356\t\2\2\2\u0355")
        buf.write("\u0354\3\2\2\2\u0356\u0359\3\2\2\2\u0357\u0355\3\2\2\2")
        buf.write("\u0357\u0358\3\2\2\2\u0358\u035a\3\2\2\2\u0359\u0357\3")
        buf.write("\2\2\2\u035a\u035e\7\4\2\2\u035b\u035d\t\2\2\2\u035c\u035b")
        buf.write("\3\2\2\2\u035d\u0360\3\2\2\2\u035e\u035c\3\2\2\2\u035e")
        buf.write("\u035f\3\2\2\2\u035f\u0361\3\2\2\2\u0360\u035e\3\2\2\2")
        buf.write("\u0361\u0365\5F$\2\u0362\u0364\t\2\2\2\u0363\u0362\3\2")
        buf.write("\2\2\u0364\u0367\3\2\2\2\u0365\u0363\3\2\2\2\u0365\u0366")
        buf.write("\3\2\2\2\u0366\u0368\3\2\2\2\u0367\u0365\3\2\2\2\u0368")
        buf.write("\u036c\7\5\2\2\u0369\u036b\t\2\2\2\u036a\u0369\3\2\2\2")
        buf.write("\u036b\u036e\3\2\2\2\u036c\u036a\3\2\2\2\u036c\u036d\3")
        buf.write("\2\2\2\u036d\u036f\3\2\2\2\u036e\u036c\3\2\2\2\u036f\u0373")
        buf.write("\5F$\2\u0370\u0372\t\2\2\2\u0371\u0370\3\2\2\2\u0372\u0375")
        buf.write("\3\2\2\2\u0373\u0371\3\2\2\2\u0373\u0374\3\2\2\2\u0374")
        buf.write("\u0376\3\2\2\2\u0375\u0373\3\2\2\2\u0376\u0377\7\6\2\2")
        buf.write("\u0377+\3\2\2\2\u0378\u037c\7\25\2\2\u0379\u037b\t\2\2")
        buf.write("\2\u037a\u0379\3\2\2\2\u037b\u037e\3\2\2\2\u037c\u037a")
        buf.write("\3\2\2\2\u037c\u037d\3\2\2\2\u037d\u037f\3\2\2\2\u037e")
        buf.write("\u037c\3\2\2\2\u037f\u0383\7\4\2\2\u0380\u0382\t\2\2\2")
        buf.write("\u0381\u0380\3\2\2\2\u0382\u0385\3\2\2\2\u0383\u0381\3")
        buf.write("\2\2\2\u0383\u0384\3\2\2\2\u0384\u0386\3\2\2\2\u0385\u0383")
        buf.write("\3\2\2\2\u0386\u038a\5F$\2\u0387\u0389\t\2\2\2\u0388\u0387")
        buf.write("\3\2\2\2\u0389\u038c\3\2\2\2\u038a\u0388\3\2\2\2\u038a")
        buf.write("\u038b\3\2\2\2\u038b\u038d\3\2\2\2\u038c\u038a\3\2\2\2")
        buf.write("\u038d\u038e\7\6\2\2\u038e-\3\2\2\2\u038f\u0393\7\26\2")
        buf.write("\2\u0390\u0392\t\2\2\2\u0391\u0390\3\2\2\2\u0392\u0395")
        buf.write("\3\2\2\2\u0393\u0391\3\2\2\2\u0393\u0394\3\2\2\2\u0394")
        buf.write("\u0396\3\2\2\2\u0395\u0393\3\2\2\2\u0396\u039a\7\4\2\2")
        buf.write("\u0397\u0399\t\2\2\2\u0398\u0397\3\2\2\2\u0399\u039c\3")
        buf.write("\2\2\2\u039a\u0398\3\2\2\2\u039a\u039b\3\2\2\2\u039b\u039d")
        buf.write("\3\2\2\2\u039c\u039a\3\2\2\2\u039d\u03a1\5F$\2\u039e\u03a0")
        buf.write("\t\2\2\2\u039f\u039e\3\2\2\2\u03a0\u03a3\3\2\2\2\u03a1")
        buf.write("\u039f\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a4\3\2\2\2")
        buf.write("\u03a3\u03a1\3\2\2\2\u03a4\u03a8\7\5\2\2\u03a5\u03a7\t")
        buf.write("\2\2\2\u03a6\u03a5\3\2\2\2\u03a7\u03aa\3\2\2\2\u03a8\u03a6")
        buf.write("\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9\u03ab\3\2\2\2\u03aa")
        buf.write("\u03a8\3\2\2\2\u03ab\u03af\5F$\2\u03ac\u03ae\t\2\2\2\u03ad")
        buf.write("\u03ac\3\2\2\2\u03ae\u03b1\3\2\2\2\u03af\u03ad\3\2\2\2")
        buf.write("\u03af\u03b0\3\2\2\2\u03b0\u03b2\3\2\2\2\u03b1\u03af\3")
        buf.write("\2\2\2\u03b2\u03b3\7\6\2\2\u03b3/\3\2\2\2\u03b4\u03b8")
        buf.write("\7\27\2\2\u03b5\u03b7\t\2\2\2\u03b6\u03b5\3\2\2\2\u03b7")
        buf.write("\u03ba\3\2\2\2\u03b8\u03b6\3\2\2\2\u03b8\u03b9\3\2\2\2")
        buf.write("\u03b9\u03bb\3\2\2\2\u03ba\u03b8\3\2\2\2\u03bb\u03bf\7")
        buf.write("\4\2\2\u03bc\u03be\t\2\2\2\u03bd\u03bc\3\2\2\2\u03be\u03c1")
        buf.write("\3\2\2\2\u03bf\u03bd\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0")
        buf.write("\u03c2\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c2\u03c6\5F$\2\u03c3")
        buf.write("\u03c5\t\2\2\2\u03c4\u03c3\3\2\2\2\u03c5\u03c8\3\2\2\2")
        buf.write("\u03c6\u03c4\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03c9\3")
        buf.write("\2\2\2\u03c8\u03c6\3\2\2\2\u03c9\u03cd\7\5\2\2\u03ca\u03cc")
        buf.write("\t\2\2\2\u03cb\u03ca\3\2\2\2\u03cc\u03cf\3\2\2\2\u03cd")
        buf.write("\u03cb\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03d0\3\2\2\2")
        buf.write("\u03cf\u03cd\3\2\2\2\u03d0\u03d4\5F$\2\u03d1\u03d3\t\2")
        buf.write("\2\2\u03d2\u03d1\3\2\2\2\u03d3\u03d6\3\2\2\2\u03d4\u03d2")
        buf.write("\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d7\3\2\2\2\u03d6")
        buf.write("\u03d4\3\2\2\2\u03d7\u03d8\7\6\2\2\u03d8\61\3\2\2\2\u03d9")
        buf.write("\u03dd\7\30\2\2\u03da\u03dc\t\2\2\2\u03db\u03da\3\2\2")
        buf.write("\2\u03dc\u03df\3\2\2\2\u03dd\u03db\3\2\2\2\u03dd\u03de")
        buf.write("\3\2\2\2\u03de\u03e0\3\2\2\2\u03df\u03dd\3\2\2\2\u03e0")
        buf.write("\u03e4\7\4\2\2\u03e1\u03e3\t\2\2\2\u03e2\u03e1\3\2\2\2")
        buf.write("\u03e3\u03e6\3\2\2\2\u03e4\u03e2\3\2\2\2\u03e4\u03e5\3")
        buf.write("\2\2\2\u03e5\u03e7\3\2\2\2\u03e6\u03e4\3\2\2\2\u03e7\u03eb")
        buf.write("\5F$\2\u03e8\u03ea\t\2\2\2\u03e9\u03e8\3\2\2\2\u03ea\u03ed")
        buf.write("\3\2\2\2\u03eb\u03e9\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec")
        buf.write("\u03ee\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ee\u03f2\7\5\2\2")
        buf.write("\u03ef\u03f1\t\2\2\2\u03f0\u03ef\3\2\2\2\u03f1\u03f4\3")
        buf.write("\2\2\2\u03f2\u03f0\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f5")
        buf.write("\3\2\2\2\u03f4\u03f2\3\2\2\2\u03f5\u03f9\5F$\2\u03f6\u03f8")
        buf.write("\t\2\2\2\u03f7\u03f6\3\2\2\2\u03f8\u03fb\3\2\2\2\u03f9")
        buf.write("\u03f7\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u03fc\3\2\2\2")
        buf.write("\u03fb\u03f9\3\2\2\2\u03fc\u03fd\7\6\2\2\u03fd\63\3\2")
        buf.write("\2\2\u03fe\u0402\7\31\2\2\u03ff\u0401\t\2\2\2\u0400\u03ff")
        buf.write("\3\2\2\2\u0401\u0404\3\2\2\2\u0402\u0400\3\2\2\2\u0402")
        buf.write("\u0403\3\2\2\2\u0403\u0405\3\2\2\2\u0404\u0402\3\2\2\2")
        buf.write("\u0405\u0409\7\4\2\2\u0406\u0408\t\2\2\2\u0407\u0406\3")
        buf.write("\2\2\2\u0408\u040b\3\2\2\2\u0409\u0407\3\2\2\2\u0409\u040a")
        buf.write("\3\2\2\2\u040a\u040c\3\2\2\2\u040b\u0409\3\2\2\2\u040c")
        buf.write("\u0410\5F$\2\u040d\u040f\t\2\2\2\u040e\u040d\3\2\2\2\u040f")
        buf.write("\u0412\3\2\2\2\u0410\u040e\3\2\2\2\u0410\u0411\3\2\2\2")
        buf.write("\u0411\u0413\3\2\2\2\u0412\u0410\3\2\2\2\u0413\u0417\7")
        buf.write("\5\2\2\u0414\u0416\t\2\2\2\u0415\u0414\3\2\2\2\u0416\u0419")
        buf.write("\3\2\2\2\u0417\u0415\3\2\2\2\u0417\u0418\3\2\2\2\u0418")
        buf.write("\u041a\3\2\2\2\u0419\u0417\3\2\2\2\u041a\u041e\5F$\2\u041b")
        buf.write("\u041d\t\2\2\2\u041c\u041b\3\2\2\2\u041d\u0420\3\2\2\2")
        buf.write("\u041e\u041c\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0421\3")
        buf.write("\2\2\2\u0420\u041e\3\2\2\2\u0421\u0422\7\6\2\2\u0422\65")
        buf.write("\3\2\2\2\u0423\u0427\7$\2\2\u0424\u0426\t\2\2\2\u0425")
        buf.write("\u0424\3\2\2\2\u0426\u0429\3\2\2\2\u0427\u0425\3\2\2\2")
        buf.write("\u0427\u0428\3\2\2\2\u0428\u042a\3\2\2\2\u0429\u0427\3")
        buf.write("\2\2\2\u042a\u042e\7\4\2\2\u042b\u042d\t\2\2\2\u042c\u042b")
        buf.write("\3\2\2\2\u042d\u0430\3\2\2\2\u042e\u042c\3\2\2\2\u042e")
        buf.write("\u042f\3\2\2\2\u042f\u0431\3\2\2\2\u0430\u042e\3\2\2\2")
        buf.write("\u0431\u0435\5F$\2\u0432\u0434\t\2\2\2\u0433\u0432\3\2")
        buf.write("\2\2\u0434\u0437\3\2\2\2\u0435\u0433\3\2\2\2\u0435\u0436")
        buf.write("\3\2\2\2\u0436\u0438\3\2\2\2\u0437\u0435\3\2\2\2\u0438")
        buf.write("\u0439\7\6\2\2\u0439\67\3\2\2\2\u043a\u043e\7\32\2\2\u043b")
        buf.write("\u043d\t\2\2\2\u043c\u043b\3\2\2\2\u043d\u0440\3\2\2\2")
        buf.write("\u043e\u043c\3\2\2\2\u043e\u043f\3\2\2\2\u043f\u0441\3")
        buf.write("\2\2\2\u0440\u043e\3\2\2\2\u0441\u0445\7\4\2\2\u0442\u0444")
        buf.write("\t\2\2\2\u0443\u0442\3\2\2\2\u0444\u0447\3\2\2\2\u0445")
        buf.write("\u0443\3\2\2\2\u0445\u0446\3\2\2\2\u0446\u0448\3\2\2\2")
        buf.write("\u0447\u0445\3\2\2\2\u0448\u044c\5F$\2\u0449\u044b\t\2")
        buf.write("\2\2\u044a\u0449\3\2\2\2\u044b\u044e\3\2\2\2\u044c\u044a")
        buf.write("\3\2\2\2\u044c\u044d\3\2\2\2\u044d\u044f\3\2\2\2\u044e")
        buf.write("\u044c\3\2\2\2\u044f\u0450\7\6\2\2\u04509\3\2\2\2\u0451")
        buf.write("\u0455\7\33\2\2\u0452\u0454\t\2\2\2\u0453\u0452\3\2\2")
        buf.write("\2\u0454\u0457\3\2\2\2\u0455\u0453\3\2\2\2\u0455\u0456")
        buf.write("\3\2\2\2\u0456\u0458\3\2\2\2\u0457\u0455\3\2\2\2\u0458")
        buf.write("\u045c\7\4\2\2\u0459\u045b\t\2\2\2\u045a\u0459\3\2\2\2")
        buf.write("\u045b\u045e\3\2\2\2\u045c\u045a\3\2\2\2\u045c\u045d\3")
        buf.write("\2\2\2\u045d\u046f\3\2\2\2\u045e\u045c\3\2\2\2\u045f\u0463")
        buf.write("\5F$\2\u0460\u0462\t\2\2\2\u0461\u0460\3\2\2\2\u0462\u0465")
        buf.write("\3\2\2\2\u0463\u0461\3\2\2\2\u0463\u0464\3\2\2\2\u0464")
        buf.write("\u0466\3\2\2\2\u0465\u0463\3\2\2\2\u0466\u046a\7\5\2\2")
        buf.write("\u0467\u0469\t\2\2\2\u0468\u0467\3\2\2\2\u0469\u046c\3")
        buf.write("\2\2\2\u046a\u0468\3\2\2\2\u046a\u046b\3\2\2\2\u046b\u046e")
        buf.write("\3\2\2\2\u046c\u046a\3\2\2\2\u046d\u045f\3\2\2\2\u046e")
        buf.write("\u0471\3\2\2\2\u046f\u046d\3\2\2\2\u046f\u0470\3\2\2\2")
        buf.write("\u0470\u0472\3\2\2\2\u0471\u046f\3\2\2\2\u0472\u0476\5")
        buf.write("F$\2\u0473\u0475\t\2\2\2\u0474\u0473\3\2\2\2\u0475\u0478")
        buf.write("\3\2\2\2\u0476\u0474\3\2\2\2\u0476\u0477\3\2\2\2\u0477")
        buf.write("\u0479\3\2\2\2\u0478\u0476\3\2\2\2\u0479\u047a\7\6\2\2")
        buf.write("\u047a;\3\2\2\2\u047b\u047f\7\36\2\2\u047c\u047e\t\2\2")
        buf.write("\2\u047d\u047c\3\2\2\2\u047e\u0481\3\2\2\2\u047f\u047d")
        buf.write("\3\2\2\2\u047f\u0480\3\2\2\2\u0480\u0482\3\2\2\2\u0481")
        buf.write("\u047f\3\2\2\2\u0482\u0486\7\4\2\2\u0483\u0485\t\2\2\2")
        buf.write("\u0484\u0483\3\2\2\2\u0485\u0488\3\2\2\2\u0486\u0484\3")
        buf.write("\2\2\2\u0486\u0487\3\2\2\2\u0487\u0489\3\2\2\2\u0488\u0486")
        buf.write("\3\2\2\2\u0489\u048d\5F$\2\u048a\u048c\t\2\2\2\u048b\u048a")
        buf.write("\3\2\2\2\u048c\u048f\3\2\2\2\u048d\u048b\3\2\2\2\u048d")
        buf.write("\u048e\3\2\2\2\u048e\u0490\3\2\2\2\u048f\u048d\3\2\2\2")
        buf.write("\u0490\u0491\7\6\2\2\u0491=\3\2\2\2\u0492\u0496\7\37\2")
        buf.write("\2\u0493\u0495\t\2\2\2\u0494\u0493\3\2\2\2\u0495\u0498")
        buf.write("\3\2\2\2\u0496\u0494\3\2\2\2\u0496\u0497\3\2\2\2\u0497")
        buf.write("\u0499\3\2\2\2\u0498\u0496\3\2\2\2\u0499\u049d\7\4\2\2")
        buf.write("\u049a\u049c\t\2\2\2\u049b\u049a\3\2\2\2\u049c\u049f\3")
        buf.write("\2\2\2\u049d\u049b\3\2\2\2\u049d\u049e\3\2\2\2\u049e\u04a0")
        buf.write("\3\2\2\2\u049f\u049d\3\2\2\2\u04a0\u04a4\5F$\2\u04a1\u04a3")
        buf.write("\t\2\2\2\u04a2\u04a1\3\2\2\2\u04a3\u04a6\3\2\2\2\u04a4")
        buf.write("\u04a2\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04a7\3\2\2\2")
        buf.write("\u04a6\u04a4\3\2\2\2\u04a7\u04a8\7\6\2\2\u04a8?\3\2\2")
        buf.write("\2\u04a9\u04ad\7#\2\2\u04aa\u04ac\t\2\2\2\u04ab\u04aa")
        buf.write("\3\2\2\2\u04ac\u04af\3\2\2\2\u04ad\u04ab\3\2\2\2\u04ad")
        buf.write("\u04ae\3\2\2\2\u04ae\u04b0\3\2\2\2\u04af\u04ad\3\2\2\2")
        buf.write("\u04b0\u04b4\7\4\2\2\u04b1\u04b3\t\2\2\2\u04b2\u04b1\3")
        buf.write("\2\2\2\u04b3\u04b6\3\2\2\2\u04b4\u04b2\3\2\2\2\u04b4\u04b5")
        buf.write("\3\2\2\2\u04b5\u04b7\3\2\2\2\u04b6\u04b4\3\2\2\2\u04b7")
        buf.write("\u04bb\5F$\2\u04b8\u04ba\t\2\2\2\u04b9\u04b8\3\2\2\2\u04ba")
        buf.write("\u04bd\3\2\2\2\u04bb\u04b9\3\2\2\2\u04bb\u04bc\3\2\2\2")
        buf.write("\u04bc\u04be\3\2\2\2\u04bd\u04bb\3\2\2\2\u04be\u04bf\7")
        buf.write("\6\2\2\u04bfA\3\2\2\2\u04c0\u04c4\7\34\2\2\u04c1\u04c3")
        buf.write("\t\2\2\2\u04c2\u04c1\3\2\2\2\u04c3\u04c6\3\2\2\2\u04c4")
        buf.write("\u04c2\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04c7\3\2\2\2")
        buf.write("\u04c6\u04c4\3\2\2\2\u04c7\u04cb\7\4\2\2\u04c8\u04ca\t")
        buf.write("\2\2\2\u04c9\u04c8\3\2\2\2\u04ca\u04cd\3\2\2\2\u04cb\u04c9")
        buf.write("\3\2\2\2\u04cb\u04cc\3\2\2\2\u04cc\u04ce\3\2\2\2\u04cd")
        buf.write("\u04cb\3\2\2\2\u04ce\u04d2\5F$\2\u04cf\u04d1\t\2\2\2\u04d0")
        buf.write("\u04cf\3\2\2\2\u04d1\u04d4\3\2\2\2\u04d2\u04d0\3\2\2\2")
        buf.write("\u04d2\u04d3\3\2\2\2\u04d3\u04d5\3\2\2\2\u04d4\u04d2\3")
        buf.write("\2\2\2\u04d5\u04d6\7\6\2\2\u04d6C\3\2\2\2\u04d7\u04db")
        buf.write("\7%\2\2\u04d8\u04da\t\2\2\2\u04d9\u04d8\3\2\2\2\u04da")
        buf.write("\u04dd\3\2\2\2\u04db\u04d9\3\2\2\2\u04db\u04dc\3\2\2\2")
        buf.write("\u04dc\u04de\3\2\2\2\u04dd\u04db\3\2\2\2\u04de\u04e2\7")
        buf.write("\4\2\2\u04df\u04e1\t\2\2\2\u04e0\u04df\3\2\2\2\u04e1\u04e4")
        buf.write("\3\2\2\2\u04e2\u04e0\3\2\2\2\u04e2\u04e3\3\2\2\2\u04e3")
        buf.write("\u04e5\3\2\2\2\u04e4\u04e2\3\2\2\2\u04e5\u04e9\5F$\2\u04e6")
        buf.write("\u04e8\t\2\2\2\u04e7\u04e6\3\2\2\2\u04e8\u04eb\3\2\2\2")
        buf.write("\u04e9\u04e7\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04ec\3")
        buf.write("\2\2\2\u04eb\u04e9\3\2\2\2\u04ec\u04ed\7\6\2\2\u04edE")
        buf.write("\3\2\2\2\u04ee\u04ef\t\4\2\2\u04efG\3\2\2\2\u00c0KRY`")
        buf.write("glpuwy\u0080\u0084\u0088\u008a\u008c\u0091\u0095\u009d")
        buf.write("\u00a3\u00aa\u00b1\u00b8\u00bf\u00c4\u00c7\u00cd\u00d4")
        buf.write("\u00da\u00e1\u00e8\u00ef\u00f4\u00fa\u00fc\u00fe\u0105")
        buf.write("\u0109\u010c\u0111\u0113\u011a\u0120\u0126\u012c\u0132")
        buf.write("\u0138\u013e\u0145\u014c\u0153\u0158\u015e\u0160\u0162")
        buf.write("\u0169\u0170\u0172\u0178\u017a\u017c\u0184\u018a\u0190")
        buf.write("\u0196\u019d\u01a4\u01ab\u01b0\u01b6\u01b8\u01ba\u01c1")
        buf.write("\u01c8\u01ca\u01d0\u01d2\u01d4\u01dd\u01e1\u01e9\u01ef")
        buf.write("\u01f5\u01fb\u0202\u0209\u0210\u0215\u021b\u021d\u021f")
        buf.write("\u0226\u022d\u022f\u0235\u0237\u0239\u023f\u0248\u024e")
        buf.write("\u0255\u025c\u0263\u0268\u026e\u0270\u0272\u0279\u0280")
        buf.write("\u0282\u0288\u028a\u028c\u0291\u0297\u029e\u02a8\u02ae")
        buf.write("\u02b5\u02cf\u02e7\u02ed\u02f4\u02fd\u0304\u030b\u0312")
        buf.write("\u0319\u031e\u0321\u0329\u0330\u0337\u0340\u0347\u034e")
        buf.write("\u0357\u035e\u0365\u036c\u0373\u037c\u0383\u038a\u0393")
        buf.write("\u039a\u03a1\u03a8\u03af\u03b8\u03bf\u03c6\u03cd\u03d4")
        buf.write("\u03dd\u03e4\u03eb\u03f2\u03f9\u0402\u0409\u0410\u0417")
        buf.write("\u041e\u0427\u042e\u0435\u043e\u0445\u044c\u0455\u045c")
        buf.write("\u0463\u046a\u046f\u0476\u047f\u0486\u048d\u0496\u049d")
        buf.write("\u04a4\u04ad\u04b4\u04bb\u04c4\u04cb\u04d2\u04db\u04e2")
        buf.write("\u04e9")
        return buf.getvalue()


class WordlifyParser ( Parser ):

    grammarFileName = "Wordlify.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'('", "','", "')'", "'='", "'fn'", 
                     "'while'", "'foreach'", "'in'", "'do'", "'if'", "'then'", 
                     "'else'", "'begin'", "'end'", "'exist'", "'print'", 
                     "'rename'", "'remove'", "'move'", "'copy'", "'download'", 
                     "'write'", "'wait'", "'execute'", "'exit'", "'time'", 
                     "'getFiles'", "'dateModified'", "'file'", "'folder'", 
                     "'args'", "'size'", "'read'", "'create'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "FN", "WHILE", "FOREACH", 
                      "IN", "DO", "IF", "THEN", "ELSE", "BEGIN", "END", 
                      "EXIST", "PRINT", "RENAME", "REMOVE", "MOVE", "COPY", 
                      "DOWNLOAD", "WRITE", "WAIT", "EXECUTE", "EXIT", "TIME", 
                      "GET_FILES", "DATE_MODIFIED", "FILE", "FOLDER", "ARGS", 
                      "SIZE", "READ", "CREATE", "CMP_OP", "ARITH_OP", "LOG_OP", 
                      "BOOL", "STR", "ID", "NUM", "WS", "NL", "END_COMMENT" ]

    RULE_program = 0
    RULE_fn_def = 1
    RULE_block_instr = 2
    RULE_foreach = 3
    RULE_while_instr = 4
    RULE_if_instr = 5
    RULE_if_cond = 6
    RULE_then = 7
    RULE_else_if = 8
    RULE_else_block = 9
    RULE_cond = 10
    RULE_comparison = 11
    RULE_expr = 12
    RULE_arith_expr = 13
    RULE_fn_call = 14
    RULE_atom_instr = 15
    RULE_assign = 16
    RULE_own_fn_call = 17
    RULE_exist = 18
    RULE_print_instr = 19
    RULE_rename = 20
    RULE_remove = 21
    RULE_move = 22
    RULE_copy = 23
    RULE_download = 24
    RULE_write = 25
    RULE_read = 26
    RULE_wait_instr = 27
    RULE_execute = 28
    RULE_get_files = 29
    RULE_date_modified = 30
    RULE_size = 31
    RULE_exit = 32
    RULE_create = 33
    RULE_value_or_id = 34

    ruleNames =  [ "program", "fn_def", "block_instr", "foreach", "while_instr", 
                   "if_instr", "if_cond", "then", "else_if", "else_block", 
                   "cond", "comparison", "expr", "arith_expr", "fn_call", 
                   "atom_instr", "assign", "own_fn_call", "exist", "print_instr", 
                   "rename", "remove", "move", "copy", "download", "write", 
                   "read", "wait_instr", "execute", "get_files", "date_modified", 
                   "size", "exit", "create", "value_or_id" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    FN=6
    WHILE=7
    FOREACH=8
    IN=9
    DO=10
    IF=11
    THEN=12
    ELSE=13
    BEGIN=14
    END=15
    EXIST=16
    PRINT=17
    RENAME=18
    REMOVE=19
    MOVE=20
    COPY=21
    DOWNLOAD=22
    WRITE=23
    WAIT=24
    EXECUTE=25
    EXIT=26
    TIME=27
    GET_FILES=28
    DATE_MODIFIED=29
    FILE=30
    FOLDER=31
    ARGS=32
    SIZE=33
    READ=34
    CREATE=35
    CMP_OP=36
    ARITH_OP=37
    LOG_OP=38
    BOOL=39
    STR=40
    ID=41
    NUM=42
    WS=43
    NL=44
    END_COMMENT=45

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(WordlifyParser.EOF, 0)

        def END_COMMENT(self):
            return self.getToken(WordlifyParser.END_COMMENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def fn_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Fn_defContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Fn_defContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = WordlifyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 73
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 70
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 75
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.FN) | (1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 119
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 117
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                        if la_ == 1:
                            self.state = 76
                            self.atom_instr()
                            self.state = 80
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 77
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 82
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 83
                            self.match(WordlifyParser.T__0)
                            self.state = 87
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 84
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 89
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 90
                            self.atom_instr()
                            self.state = 104 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 94
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 91
                                    self.match(WordlifyParser.WS)
                                    self.state = 96
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 97
                                self.match(WordlifyParser.NL)
                                self.state = 101
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 98
                                        self.match(WordlifyParser.WS) 
                                    self.state = 103
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                                self.state = 106 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 110
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                                self.state = 108
                                self.block_instr()
                                pass
                            elif token in [WordlifyParser.FN]:
                                self.state = 109
                                self.fn_def()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 113 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 112
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 115 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 121
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                self.state = 136
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 122
                    self.atom_instr()
                    self.state = 126
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 123
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 128
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                    self.state = 130
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==WordlifyParser.T__0:
                        self.state = 129
                        self.match(WordlifyParser.T__0)


                    pass
                elif token in [WordlifyParser.FN, WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 134
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 132
                        self.block_instr()
                        pass
                    elif token in [WordlifyParser.FN]:
                        self.state = 133
                        self.fn_def()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 140
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 145
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.END_COMMENT:
                self.state = 146
                self.match(WordlifyParser.END_COMMENT)


            self.state = 149
            self.match(WordlifyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FN(self):
            return self.getToken(WordlifyParser.FN, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def BEGIN(self):
            return self.getToken(WordlifyParser.BEGIN, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_def" ):
                listener.enterFn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_def" ):
                listener.exitFn_def(self)




    def fn_def(self):

        localctx = WordlifyParser.Fn_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fn_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 151
            self.match(WordlifyParser.FN)
            self.state = 153 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 152
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 155 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 157
            self.match(WordlifyParser.ID)
            self.state = 161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 158
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 163
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 164
            self.match(WordlifyParser.T__1)
            self.state = 168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 165
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 170
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.ID:
                self.state = 171
                self.match(WordlifyParser.ID)
                self.state = 175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 172
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 177
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.T__2:
                    self.state = 178
                    self.match(WordlifyParser.T__2)
                    self.state = 182
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 179
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 184
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 185
                    self.match(WordlifyParser.ID)
                    self.state = 189
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 186
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 191
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 196
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 199
            self.match(WordlifyParser.T__3)
            self.state = 203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 200
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 205
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 206
            self.match(WordlifyParser.BEGIN)
            self.state = 208 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 207
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 210 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 252
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 250
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                        if la_ == 1:
                            self.state = 212
                            self.atom_instr()
                            self.state = 216
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 213
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 218
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 219
                            self.match(WordlifyParser.T__0)
                            self.state = 223
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 220
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 225
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 226
                            self.atom_instr()
                            self.state = 240 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 230
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 227
                                    self.match(WordlifyParser.WS)
                                    self.state = 232
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 233
                                self.match(WordlifyParser.NL)
                                self.state = 237
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 234
                                        self.match(WordlifyParser.WS) 
                                    self.state = 239
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                                self.state = 242 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 244
                            self.block_instr()
                            self.state = 246 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 245
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 248 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 254
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                self.state = 266
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 255
                    self.atom_instr()
                    self.state = 259
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 256
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 261
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                    self.state = 263
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==WordlifyParser.T__0:
                        self.state = 262
                        self.match(WordlifyParser.T__0)


                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 265
                    self.block_instr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 269 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 268
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 271 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break



            self.state = 275
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_instr(self):
            return self.getTypedRuleContext(WordlifyParser.If_instrContext,0)


        def while_instr(self):
            return self.getTypedRuleContext(WordlifyParser.While_instrContext,0)


        def foreach(self):
            return self.getTypedRuleContext(WordlifyParser.ForeachContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_block_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_instr" ):
                listener.enterBlock_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_instr" ):
                listener.exitBlock_instr(self)




    def block_instr(self):

        localctx = WordlifyParser.Block_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block_instr)
        try:
            self.state = 280
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 277
                self.if_instr()
                pass
            elif token in [WordlifyParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 278
                self.while_instr()
                pass
            elif token in [WordlifyParser.FOREACH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 279
                self.foreach()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeachContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(WordlifyParser.FOREACH, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def IN(self):
            return self.getToken(WordlifyParser.IN, 0)

        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_foreach

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeach" ):
                listener.enterForeach(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeach" ):
                listener.exitForeach(self)




    def foreach(self):

        localctx = WordlifyParser.ForeachContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_foreach)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self.match(WordlifyParser.FOREACH)
            self.state = 284 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 283
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 286 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 288
            self.match(WordlifyParser.ID)
            self.state = 290 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 289
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 292 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 294
            self.match(WordlifyParser.IN)
            self.state = 296 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 295
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 298 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 300
            self.match(WordlifyParser.ID)
            self.state = 302 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 301
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 304 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 306
            self.match(WordlifyParser.DO)
            self.state = 308 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 307
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 310 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 352
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 350
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                        if la_ == 1:
                            self.state = 312
                            self.atom_instr()
                            self.state = 316
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 313
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 318
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 319
                            self.match(WordlifyParser.T__0)
                            self.state = 323
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 320
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 325
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 326
                            self.atom_instr()
                            self.state = 340 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 330
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 327
                                    self.match(WordlifyParser.WS)
                                    self.state = 332
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 333
                                self.match(WordlifyParser.NL)
                                self.state = 337
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 334
                                        self.match(WordlifyParser.WS) 
                                    self.state = 339
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                                self.state = 342 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 344
                            self.block_instr()
                            self.state = 346 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 345
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 348 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 354
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

                self.state = 376
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 355
                    self.atom_instr()
                    self.state = 359
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 356
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 361
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

                    self.state = 368
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 362
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 364 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 363
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 366 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 370
                    self.block_instr()
                    self.state = 372 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 371
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 374 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 380
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(WordlifyParser.WHILE, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_while_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_instr" ):
                listener.enterWhile_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_instr" ):
                listener.exitWhile_instr(self)




    def while_instr(self):

        localctx = WordlifyParser.While_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_while_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.match(WordlifyParser.WHILE)
            self.state = 384 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 383
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 386 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 388
            self.cond()
            self.state = 390 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 389
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 392 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 394
            self.match(WordlifyParser.DO)
            self.state = 396 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 395
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 398 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 440
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 438
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                        if la_ == 1:
                            self.state = 400
                            self.atom_instr()
                            self.state = 404
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 401
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 406
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 407
                            self.match(WordlifyParser.T__0)
                            self.state = 411
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 408
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 413
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 414
                            self.atom_instr()
                            self.state = 428 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 418
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 415
                                    self.match(WordlifyParser.WS)
                                    self.state = 420
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 421
                                self.match(WordlifyParser.NL)
                                self.state = 425
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 422
                                        self.match(WordlifyParser.WS) 
                                    self.state = 427
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

                                self.state = 430 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 432
                            self.block_instr()
                            self.state = 434 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 433
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 436 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 442
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

                self.state = 464
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 443
                    self.atom_instr()
                    self.state = 447
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 444
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 449
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                    self.state = 456
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 450
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 452 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 451
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 454 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 458
                    self.block_instr()
                    self.state = 460 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 459
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 462 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 468
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def else_if(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Else_ifContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Else_ifContext,i)


        def else_block(self):
            return self.getTypedRuleContext(WordlifyParser.Else_blockContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_if_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_instr" ):
                listener.enterIf_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_instr" ):
                listener.exitIf_instr(self)




    def if_instr(self):

        localctx = WordlifyParser.If_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_if_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.if_cond()
            self.state = 471
            self.then()
            self.state = 475
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 472
                    self.else_if() 
                self.state = 477
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.ELSE:
                self.state = 478
                self.else_block()


            self.state = 481
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(WordlifyParser.IF, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_if_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_cond" ):
                listener.enterIf_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_cond" ):
                listener.exitIf_cond(self)




    def if_cond(self):

        localctx = WordlifyParser.If_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_if_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.match(WordlifyParser.IF)
            self.state = 485 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 484
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 487 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 489
            self.cond()
            self.state = 491 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 490
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 493 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEN(self):
            return self.getToken(WordlifyParser.THEN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_then

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThen" ):
                listener.enterThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThen" ):
                listener.exitThen(self)




    def then(self):

        localctx = WordlifyParser.ThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_then)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.match(WordlifyParser.THEN)
            self.state = 497 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 496
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 499 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 541
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 539
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                        if la_ == 1:
                            self.state = 501
                            self.atom_instr()
                            self.state = 505
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 502
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 507
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 508
                            self.match(WordlifyParser.T__0)
                            self.state = 512
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 509
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 514
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 515
                            self.atom_instr()
                            self.state = 529 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 519
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 516
                                    self.match(WordlifyParser.WS)
                                    self.state = 521
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 522
                                self.match(WordlifyParser.NL)
                                self.state = 526
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 523
                                        self.match(WordlifyParser.WS) 
                                    self.state = 528
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

                                self.state = 531 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 533
                            self.block_instr()
                            self.state = 535 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 534
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 537 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 543
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                self.state = 565
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 544
                    self.atom_instr()
                    self.state = 548
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 545
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 550
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                    self.state = 557
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 551
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 553 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 552
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 555 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 559
                    self.block_instr()
                    self.state = 561 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 560
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 563 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_else_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_if" ):
                listener.enterElse_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_if" ):
                listener.exitElse_if(self)




    def else_if(self):

        localctx = WordlifyParser.Else_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_else_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(WordlifyParser.ELSE)
            self.state = 571 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 570
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 573 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 575
            self.if_cond()
            self.state = 576
            self.then()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_else_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_block" ):
                listener.enterElse_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_block" ):
                listener.exitElse_block(self)




    def else_block(self):

        localctx = WordlifyParser.Else_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_else_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(WordlifyParser.ELSE)
            self.state = 580 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 579
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 582 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 624
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 622
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                        if la_ == 1:
                            self.state = 584
                            self.atom_instr()
                            self.state = 588
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 585
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 590
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 591
                            self.match(WordlifyParser.T__0)
                            self.state = 595
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 592
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 597
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 598
                            self.atom_instr()
                            self.state = 612 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 602
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 599
                                    self.match(WordlifyParser.WS)
                                    self.state = 604
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 605
                                self.match(WordlifyParser.NL)
                                self.state = 609
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 606
                                        self.match(WordlifyParser.WS) 
                                    self.state = 611
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

                                self.state = 614 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 616
                            self.block_instr()
                            self.state = 618 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 617
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 620 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 626
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                self.state = 648
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 627
                    self.atom_instr()
                    self.state = 631
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 628
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 633
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

                    self.state = 640
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 634
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 636 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 635
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 638 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 642
                    self.block_instr()
                    self.state = 644 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 643
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 646 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def comparison(self):
            return self.getTypedRuleContext(WordlifyParser.ComparisonContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)




    def cond(self):

        localctx = WordlifyParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_cond)
        try:
            self.state = 655
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 652
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 653
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 654
                self.comparison()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def CMP_OP(self):
            return self.getToken(WordlifyParser.CMP_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = WordlifyParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.expr()
            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 658
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 664
            self.match(WordlifyParser.CMP_OP)
            self.state = 668
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 665
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 671
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def arith_expr(self):
            return self.getTypedRuleContext(WordlifyParser.Arith_exprContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = WordlifyParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_expr)
        try:
            self.state = 678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 673
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 674
                self.match(WordlifyParser.STR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 675
                self.match(WordlifyParser.NUM)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 676
                self.match(WordlifyParser.ID)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 677
                self.arith_expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARITH_OP(self):
            return self.getToken(WordlifyParser.ARITH_OP, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def NUM(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NUM)
            else:
                return self.getToken(WordlifyParser.NUM, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)




    def arith_expr(self):

        localctx = WordlifyParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            _la = self._input.LA(1)
            if not(_la==WordlifyParser.ID or _la==WordlifyParser.NUM):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 681
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 687
            self.match(WordlifyParser.ARITH_OP)
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 688
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 694
            _la = self._input.LA(1)
            if not(_la==WordlifyParser.ID or _la==WordlifyParser.NUM):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def ARGS(self):
            return self.getToken(WordlifyParser.ARGS, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_call" ):
                listener.enterFn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_call" ):
                listener.exitFn_call(self)




    def fn_call(self):

        localctx = WordlifyParser.Fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fn_call)
        try:
            self.state = 717
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 696
                self.own_fn_call()
                pass
            elif token in [WordlifyParser.EXIST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 697
                self.exist()
                pass
            elif token in [WordlifyParser.PRINT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 698
                self.print_instr()
                pass
            elif token in [WordlifyParser.RENAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 699
                self.rename()
                pass
            elif token in [WordlifyParser.REMOVE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 700
                self.remove()
                pass
            elif token in [WordlifyParser.MOVE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 701
                self.move()
                pass
            elif token in [WordlifyParser.COPY]:
                self.enterOuterAlt(localctx, 7)
                self.state = 702
                self.copy()
                pass
            elif token in [WordlifyParser.DOWNLOAD]:
                self.enterOuterAlt(localctx, 8)
                self.state = 703
                self.download()
                pass
            elif token in [WordlifyParser.WRITE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 704
                self.write()
                pass
            elif token in [WordlifyParser.READ]:
                self.enterOuterAlt(localctx, 10)
                self.state = 705
                self.read()
                pass
            elif token in [WordlifyParser.WAIT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 706
                self.wait_instr()
                pass
            elif token in [WordlifyParser.EXECUTE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 707
                self.execute()
                pass
            elif token in [WordlifyParser.GET_FILES]:
                self.enterOuterAlt(localctx, 13)
                self.state = 708
                self.get_files()
                pass
            elif token in [WordlifyParser.DATE_MODIFIED]:
                self.enterOuterAlt(localctx, 14)
                self.state = 709
                self.date_modified()
                pass
            elif token in [WordlifyParser.SIZE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 710
                self.size()
                pass
            elif token in [WordlifyParser.EXIT]:
                self.enterOuterAlt(localctx, 16)
                self.state = 711
                self.exit()
                pass
            elif token in [WordlifyParser.CREATE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 712
                self.create()
                pass
            elif token in [WordlifyParser.TIME]:
                self.enterOuterAlt(localctx, 18)
                self.state = 713
                self.match(WordlifyParser.TIME)
                pass
            elif token in [WordlifyParser.FILE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 714
                self.match(WordlifyParser.FILE)
                pass
            elif token in [WordlifyParser.FOLDER]:
                self.enterOuterAlt(localctx, 20)
                self.state = 715
                self.match(WordlifyParser.FOLDER)
                pass
            elif token in [WordlifyParser.ARGS]:
                self.enterOuterAlt(localctx, 21)
                self.state = 716
                self.match(WordlifyParser.ARGS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def assign(self):
            return self.getTypedRuleContext(WordlifyParser.AssignContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def ARGS(self):
            return self.getToken(WordlifyParser.ARGS, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_atom_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_instr" ):
                listener.enterAtom_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_instr" ):
                listener.exitAtom_instr(self)




    def atom_instr(self):

        localctx = WordlifyParser.Atom_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_atom_instr)
        try:
            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 719
                self.own_fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 720
                self.exist()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 721
                self.print_instr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 722
                self.rename()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 723
                self.remove()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 724
                self.move()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 725
                self.copy()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 726
                self.download()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 727
                self.write()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 728
                self.read()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 729
                self.wait_instr()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 730
                self.execute()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 731
                self.get_files()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 732
                self.date_modified()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 733
                self.size()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 734
                self.exit()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 735
                self.create()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 736
                self.assign()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 737
                self.match(WordlifyParser.TIME)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 738
                self.match(WordlifyParser.FILE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 739
                self.match(WordlifyParser.FOLDER)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 740
                self.match(WordlifyParser.ARGS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)




    def assign(self):

        localctx = WordlifyParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(WordlifyParser.ID)
            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 744
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 750
            self.match(WordlifyParser.T__4)
            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 751
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 756
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 757
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Own_fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_own_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOwn_fn_call" ):
                listener.enterOwn_fn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOwn_fn_call" ):
                listener.exitOwn_fn_call(self)




    def own_fn_call(self):

        localctx = WordlifyParser.Own_fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_own_fn_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(WordlifyParser.ID)
            self.state = 763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 760
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 765
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 766
            self.match(WordlifyParser.T__1)
            self.state = 770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 767
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 773
                self.value_or_id()
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 774
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.T__2:
                    self.state = 780
                    self.match(WordlifyParser.T__2)
                    self.state = 784
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 781
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 786
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 787
                    self.value_or_id()
                    self.state = 791
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 788
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 793
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 798
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 801
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIST(self):
            return self.getToken(WordlifyParser.EXIST, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExist" ):
                listener.enterExist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExist" ):
                listener.exitExist(self)




    def exist(self):

        localctx = WordlifyParser.ExistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_exist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.match(WordlifyParser.EXIST)
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 804
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 810
            self.match(WordlifyParser.T__1)
            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 811
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 817
            self.value_or_id()
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 818
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 824
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(WordlifyParser.PRINT, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_print_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_instr" ):
                listener.enterPrint_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_instr" ):
                listener.exitPrint_instr(self)




    def print_instr(self):

        localctx = WordlifyParser.Print_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_print_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.match(WordlifyParser.PRINT)
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 827
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 833
            self.match(WordlifyParser.T__1)
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 834
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 840
            self.value_or_id()
            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 841
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 846
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 847
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(WordlifyParser.RENAME, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_rename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename" ):
                listener.enterRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename" ):
                listener.exitRename(self)




    def rename(self):

        localctx = WordlifyParser.RenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_rename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.match(WordlifyParser.RENAME)
            self.state = 853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 850
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 855
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 856
            self.match(WordlifyParser.T__1)
            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 857
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 863
            self.value_or_id()
            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 864
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 870
            self.match(WordlifyParser.T__2)
            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 871
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 877
            self.value_or_id()
            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 878
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 884
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(WordlifyParser.REMOVE, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove" ):
                listener.enterRemove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove" ):
                listener.exitRemove(self)




    def remove(self):

        localctx = WordlifyParser.RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.match(WordlifyParser.REMOVE)
            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 887
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 893
            self.match(WordlifyParser.T__1)
            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 894
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 900
            self.value_or_id()
            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 901
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 907
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOVE(self):
            return self.getToken(WordlifyParser.MOVE, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)




    def move(self):

        localctx = WordlifyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(WordlifyParser.MOVE)
            self.state = 913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 910
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 916
            self.match(WordlifyParser.T__1)
            self.state = 920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 917
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 923
            self.value_or_id()
            self.state = 927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 924
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 929
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 930
            self.match(WordlifyParser.T__2)
            self.state = 934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 931
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 937
            self.value_or_id()
            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 938
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 944
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(WordlifyParser.COPY, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_copy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy" ):
                listener.enterCopy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy" ):
                listener.exitCopy(self)




    def copy(self):

        localctx = WordlifyParser.CopyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_copy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.match(WordlifyParser.COPY)
            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 947
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 953
            self.match(WordlifyParser.T__1)
            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 954
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 960
            self.value_or_id()
            self.state = 964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 961
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 966
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 967
            self.match(WordlifyParser.T__2)
            self.state = 971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 968
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 974
            self.value_or_id()
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 975
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 981
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DownloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOWNLOAD(self):
            return self.getToken(WordlifyParser.DOWNLOAD, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_download

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDownload" ):
                listener.enterDownload(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDownload" ):
                listener.exitDownload(self)




    def download(self):

        localctx = WordlifyParser.DownloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_download)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.match(WordlifyParser.DOWNLOAD)
            self.state = 987
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 984
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 989
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 990
            self.match(WordlifyParser.T__1)
            self.state = 994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 991
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 997
            self.value_or_id()
            self.state = 1001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 998
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1004
            self.match(WordlifyParser.T__2)
            self.state = 1008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1005
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1011
            self.value_or_id()
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1012
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1018
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(WordlifyParser.WRITE, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_write

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite" ):
                listener.enterWrite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite" ):
                listener.exitWrite(self)




    def write(self):

        localctx = WordlifyParser.WriteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_write)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.match(WordlifyParser.WRITE)
            self.state = 1024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1021
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1026
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1027
            self.match(WordlifyParser.T__1)
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1028
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1033
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1034
            self.value_or_id()
            self.state = 1038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1035
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1040
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1041
            self.match(WordlifyParser.T__2)
            self.state = 1045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1042
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1047
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1048
            self.value_or_id()
            self.state = 1052
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1049
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1054
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1055
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(WordlifyParser.READ, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_read

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead" ):
                listener.enterRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead" ):
                listener.exitRead(self)




    def read(self):

        localctx = WordlifyParser.ReadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_read)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self.match(WordlifyParser.READ)
            self.state = 1061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1058
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1064
            self.match(WordlifyParser.T__1)
            self.state = 1068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1065
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1070
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1071
            self.value_or_id()
            self.state = 1075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1072
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1077
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1078
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wait_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(WordlifyParser.WAIT, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_wait_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_instr" ):
                listener.enterWait_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_instr" ):
                listener.exitWait_instr(self)




    def wait_instr(self):

        localctx = WordlifyParser.Wait_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_wait_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.match(WordlifyParser.WAIT)
            self.state = 1084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1081
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1086
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1087
            self.match(WordlifyParser.T__1)
            self.state = 1091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1088
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1094
            self.value_or_id()
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1095
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1101
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(WordlifyParser.EXECUTE, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_execute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)




    def execute(self):

        localctx = WordlifyParser.ExecuteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_execute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1103
            self.match(WordlifyParser.EXECUTE)
            self.state = 1107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1104
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1110
            self.match(WordlifyParser.T__1)
            self.state = 1114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1111
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1116
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1133
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,173,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1117
                    self.value_or_id()
                    self.state = 1121
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1118
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1123
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1124
                    self.match(WordlifyParser.T__2)
                    self.state = 1128
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1125
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1130
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
             
                self.state = 1135
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

            self.state = 1136
            self.value_or_id()
            self.state = 1140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1137
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1142
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1143
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_filesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET_FILES(self):
            return self.getToken(WordlifyParser.GET_FILES, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_get_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_files" ):
                listener.enterGet_files(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_files" ):
                listener.exitGet_files(self)




    def get_files(self):

        localctx = WordlifyParser.Get_filesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_get_files)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self.match(WordlifyParser.GET_FILES)
            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1146
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1152
            self.match(WordlifyParser.T__1)
            self.state = 1156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1153
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1158
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1159
            self.value_or_id()
            self.state = 1163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1160
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1165
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1166
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_modifiedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_MODIFIED(self):
            return self.getToken(WordlifyParser.DATE_MODIFIED, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_date_modified

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_modified" ):
                listener.enterDate_modified(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_modified" ):
                listener.exitDate_modified(self)




    def date_modified(self):

        localctx = WordlifyParser.Date_modifiedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_date_modified)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.match(WordlifyParser.DATE_MODIFIED)
            self.state = 1172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1169
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1174
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1175
            self.match(WordlifyParser.T__1)
            self.state = 1179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1176
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1182
            self.value_or_id()
            self.state = 1186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1183
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1188
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1189
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIZE(self):
            return self.getToken(WordlifyParser.SIZE, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSize" ):
                listener.enterSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSize" ):
                listener.exitSize(self)




    def size(self):

        localctx = WordlifyParser.SizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1191
            self.match(WordlifyParser.SIZE)
            self.state = 1195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1192
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1197
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1198
            self.match(WordlifyParser.T__1)
            self.state = 1202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1199
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1204
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1205
            self.value_or_id()
            self.state = 1209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1206
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1211
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1212
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(WordlifyParser.EXIT, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit" ):
                listener.enterExit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit" ):
                listener.exitExit(self)




    def exit(self):

        localctx = WordlifyParser.ExitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_exit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.match(WordlifyParser.EXIT)
            self.state = 1218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1215
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1221
            self.match(WordlifyParser.T__1)
            self.state = 1225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1222
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1227
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1228
            self.value_or_id()
            self.state = 1232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1229
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1234
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1235
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(WordlifyParser.CREATE, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate" ):
                listener.enterCreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate" ):
                listener.exitCreate(self)




    def create(self):

        localctx = WordlifyParser.CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self.match(WordlifyParser.CREATE)
            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1238
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1243
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1244
            self.match(WordlifyParser.T__1)
            self.state = 1248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1245
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1250
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1251
            self.value_or_id()
            self.state = 1255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1252
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1257
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1258
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_or_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_value_or_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_or_id" ):
                listener.enterValue_or_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_or_id" ):
                listener.exitValue_or_id(self)




    def value_or_id(self):

        localctx = WordlifyParser.Value_or_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_value_or_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





