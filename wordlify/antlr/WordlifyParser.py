# Generated from Wordlify.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\61")
        buf.write("\u0519\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\3\2\7")
        buf.write("\2L\n\2\f\2\16\2O\13\2\3\2\3\2\7\2S\n\2\f\2\16\2V\13\2")
        buf.write("\3\2\3\2\7\2Z\n\2\f\2\16\2]\13\2\3\2\3\2\7\2a\n\2\f\2")
        buf.write("\16\2d\13\2\3\2\3\2\7\2h\n\2\f\2\16\2k\13\2\6\2m\n\2\r")
        buf.write("\2\16\2n\3\2\3\2\5\2s\n\2\3\2\6\2v\n\2\r\2\16\2w\7\2z")
        buf.write("\n\2\f\2\16\2}\13\2\3\2\3\2\7\2\u0081\n\2\f\2\16\2\u0084")
        buf.write("\13\2\3\2\5\2\u0087\n\2\3\2\3\2\5\2\u008b\n\2\5\2\u008d")
        buf.write("\n\2\5\2\u008f\n\2\3\2\7\2\u0092\n\2\f\2\16\2\u0095\13")
        buf.write("\2\3\2\5\2\u0098\n\2\3\2\3\2\3\3\3\3\6\3\u009e\n\3\r\3")
        buf.write("\16\3\u009f\3\3\3\3\7\3\u00a4\n\3\f\3\16\3\u00a7\13\3")
        buf.write("\3\3\3\3\7\3\u00ab\n\3\f\3\16\3\u00ae\13\3\3\3\3\3\7\3")
        buf.write("\u00b2\n\3\f\3\16\3\u00b5\13\3\3\3\3\3\7\3\u00b9\n\3\f")
        buf.write("\3\16\3\u00bc\13\3\3\3\3\3\7\3\u00c0\n\3\f\3\16\3\u00c3")
        buf.write("\13\3\7\3\u00c5\n\3\f\3\16\3\u00c8\13\3\5\3\u00ca\n\3")
        buf.write("\3\3\3\3\7\3\u00ce\n\3\f\3\16\3\u00d1\13\3\3\3\3\3\6\3")
        buf.write("\u00d5\n\3\r\3\16\3\u00d6\3\3\3\3\7\3\u00db\n\3\f\3\16")
        buf.write("\3\u00de\13\3\3\3\3\3\7\3\u00e2\n\3\f\3\16\3\u00e5\13")
        buf.write("\3\3\3\3\3\7\3\u00e9\n\3\f\3\16\3\u00ec\13\3\3\3\3\3\7")
        buf.write("\3\u00f0\n\3\f\3\16\3\u00f3\13\3\6\3\u00f5\n\3\r\3\16")
        buf.write("\3\u00f6\3\3\3\3\6\3\u00fb\n\3\r\3\16\3\u00fc\7\3\u00ff")
        buf.write("\n\3\f\3\16\3\u0102\13\3\3\3\3\3\7\3\u0106\n\3\f\3\16")
        buf.write("\3\u0109\13\3\3\3\5\3\u010c\n\3\3\3\5\3\u010f\n\3\3\3")
        buf.write("\6\3\u0112\n\3\r\3\16\3\u0113\5\3\u0116\n\3\3\3\3\3\3")
        buf.write("\4\3\4\3\4\5\4\u011d\n\4\3\5\3\5\6\5\u0121\n\5\r\5\16")
        buf.write("\5\u0122\3\5\3\5\6\5\u0127\n\5\r\5\16\5\u0128\3\5\3\5")
        buf.write("\6\5\u012d\n\5\r\5\16\5\u012e\3\5\3\5\6\5\u0133\n\5\r")
        buf.write("\5\16\5\u0134\3\5\3\5\6\5\u0139\n\5\r\5\16\5\u013a\3\5")
        buf.write("\3\5\7\5\u013f\n\5\f\5\16\5\u0142\13\5\3\5\3\5\7\5\u0146")
        buf.write("\n\5\f\5\16\5\u0149\13\5\3\5\3\5\7\5\u014d\n\5\f\5\16")
        buf.write("\5\u0150\13\5\3\5\3\5\7\5\u0154\n\5\f\5\16\5\u0157\13")
        buf.write("\5\6\5\u0159\n\5\r\5\16\5\u015a\3\5\3\5\6\5\u015f\n\5")
        buf.write("\r\5\16\5\u0160\7\5\u0163\n\5\f\5\16\5\u0166\13\5\3\5")
        buf.write("\3\5\7\5\u016a\n\5\f\5\16\5\u016d\13\5\3\5\3\5\6\5\u0171")
        buf.write("\n\5\r\5\16\5\u0172\5\5\u0175\n\5\3\5\3\5\6\5\u0179\n")
        buf.write("\5\r\5\16\5\u017a\5\5\u017d\n\5\5\5\u017f\n\5\3\5\3\5")
        buf.write("\3\6\3\6\6\6\u0185\n\6\r\6\16\6\u0186\3\6\3\6\6\6\u018b")
        buf.write("\n\6\r\6\16\6\u018c\3\6\3\6\6\6\u0191\n\6\r\6\16\6\u0192")
        buf.write("\3\6\3\6\7\6\u0197\n\6\f\6\16\6\u019a\13\6\3\6\3\6\7\6")
        buf.write("\u019e\n\6\f\6\16\6\u01a1\13\6\3\6\3\6\7\6\u01a5\n\6\f")
        buf.write("\6\16\6\u01a8\13\6\3\6\3\6\7\6\u01ac\n\6\f\6\16\6\u01af")
        buf.write("\13\6\6\6\u01b1\n\6\r\6\16\6\u01b2\3\6\3\6\6\6\u01b7\n")
        buf.write("\6\r\6\16\6\u01b8\7\6\u01bb\n\6\f\6\16\6\u01be\13\6\3")
        buf.write("\6\3\6\7\6\u01c2\n\6\f\6\16\6\u01c5\13\6\3\6\3\6\6\6\u01c9")
        buf.write("\n\6\r\6\16\6\u01ca\5\6\u01cd\n\6\3\6\3\6\6\6\u01d1\n")
        buf.write("\6\r\6\16\6\u01d2\5\6\u01d5\n\6\5\6\u01d7\n\6\3\6\3\6")
        buf.write("\3\7\3\7\3\7\7\7\u01de\n\7\f\7\16\7\u01e1\13\7\3\7\5\7")
        buf.write("\u01e4\n\7\3\7\3\7\3\b\3\b\6\b\u01ea\n\b\r\b\16\b\u01eb")
        buf.write("\3\b\3\b\6\b\u01f0\n\b\r\b\16\b\u01f1\3\t\3\t\6\t\u01f6")
        buf.write("\n\t\r\t\16\t\u01f7\3\t\3\t\7\t\u01fc\n\t\f\t\16\t\u01ff")
        buf.write("\13\t\3\t\3\t\7\t\u0203\n\t\f\t\16\t\u0206\13\t\3\t\3")
        buf.write("\t\7\t\u020a\n\t\f\t\16\t\u020d\13\t\3\t\3\t\7\t\u0211")
        buf.write("\n\t\f\t\16\t\u0214\13\t\6\t\u0216\n\t\r\t\16\t\u0217")
        buf.write("\3\t\3\t\6\t\u021c\n\t\r\t\16\t\u021d\7\t\u0220\n\t\f")
        buf.write("\t\16\t\u0223\13\t\3\t\3\t\7\t\u0227\n\t\f\t\16\t\u022a")
        buf.write("\13\t\3\t\3\t\6\t\u022e\n\t\r\t\16\t\u022f\5\t\u0232\n")
        buf.write("\t\3\t\3\t\6\t\u0236\n\t\r\t\16\t\u0237\5\t\u023a\n\t")
        buf.write("\5\t\u023c\n\t\3\n\3\n\6\n\u0240\n\n\r\n\16\n\u0241\3")
        buf.write("\n\3\n\3\n\3\13\3\13\6\13\u0249\n\13\r\13\16\13\u024a")
        buf.write("\3\13\3\13\7\13\u024f\n\13\f\13\16\13\u0252\13\13\3\13")
        buf.write("\3\13\7\13\u0256\n\13\f\13\16\13\u0259\13\13\3\13\3\13")
        buf.write("\7\13\u025d\n\13\f\13\16\13\u0260\13\13\3\13\3\13\7\13")
        buf.write("\u0264\n\13\f\13\16\13\u0267\13\13\6\13\u0269\n\13\r\13")
        buf.write("\16\13\u026a\3\13\3\13\6\13\u026f\n\13\r\13\16\13\u0270")
        buf.write("\7\13\u0273\n\13\f\13\16\13\u0276\13\13\3\13\3\13\7\13")
        buf.write("\u027a\n\13\f\13\16\13\u027d\13\13\3\13\3\13\6\13\u0281")
        buf.write("\n\13\r\13\16\13\u0282\5\13\u0285\n\13\3\13\3\13\6\13")
        buf.write("\u0289\n\13\r\13\16\13\u028a\5\13\u028d\n\13\5\13\u028f")
        buf.write("\n\13\3\f\3\f\3\f\5\f\u0294\n\f\3\r\3\r\7\r\u0298\n\r")
        buf.write("\f\r\16\r\u029b\13\r\3\r\3\r\7\r\u029f\n\r\f\r\16\r\u02a2")
        buf.write("\13\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u02ac")
        buf.write("\n\16\3\17\3\17\7\17\u02b0\n\17\f\17\16\17\u02b3\13\17")
        buf.write("\3\17\3\17\7\17\u02b7\n\17\f\17\16\17\u02ba\13\17\3\17")
        buf.write("\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\5\20\u02d3\n\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\5\21\u02eb\n\21\3\22\3\22\7\22\u02ef")
        buf.write("\n\22\f\22\16\22\u02f2\13\22\3\22\3\22\7\22\u02f6\n\22")
        buf.write("\f\22\16\22\u02f9\13\22\3\22\3\22\3\23\3\23\7\23\u02ff")
        buf.write("\n\23\f\23\16\23\u0302\13\23\3\23\3\23\7\23\u0306\n\23")
        buf.write("\f\23\16\23\u0309\13\23\3\23\3\23\7\23\u030d\n\23\f\23")
        buf.write("\16\23\u0310\13\23\3\23\3\23\7\23\u0314\n\23\f\23\16\23")
        buf.write("\u0317\13\23\3\23\3\23\7\23\u031b\n\23\f\23\16\23\u031e")
        buf.write("\13\23\7\23\u0320\n\23\f\23\16\23\u0323\13\23\5\23\u0325")
        buf.write("\n\23\3\23\3\23\3\24\3\24\7\24\u032b\n\24\f\24\16\24\u032e")
        buf.write("\13\24\3\24\3\24\7\24\u0332\n\24\f\24\16\24\u0335\13\24")
        buf.write("\3\24\3\24\7\24\u0339\n\24\f\24\16\24\u033c\13\24\3\24")
        buf.write("\3\24\3\25\3\25\7\25\u0342\n\25\f\25\16\25\u0345\13\25")
        buf.write("\3\25\3\25\7\25\u0349\n\25\f\25\16\25\u034c\13\25\3\25")
        buf.write("\3\25\7\25\u0350\n\25\f\25\16\25\u0353\13\25\3\25\3\25")
        buf.write("\3\26\3\26\7\26\u0359\n\26\f\26\16\26\u035c\13\26\3\26")
        buf.write("\3\26\7\26\u0360\n\26\f\26\16\26\u0363\13\26\3\26\3\26")
        buf.write("\7\26\u0367\n\26\f\26\16\26\u036a\13\26\3\26\3\26\7\26")
        buf.write("\u036e\n\26\f\26\16\26\u0371\13\26\3\26\3\26\7\26\u0375")
        buf.write("\n\26\f\26\16\26\u0378\13\26\3\26\3\26\3\27\3\27\7\27")
        buf.write("\u037e\n\27\f\27\16\27\u0381\13\27\3\27\3\27\7\27\u0385")
        buf.write("\n\27\f\27\16\27\u0388\13\27\3\27\3\27\7\27\u038c\n\27")
        buf.write("\f\27\16\27\u038f\13\27\3\27\3\27\3\30\3\30\7\30\u0395")
        buf.write("\n\30\f\30\16\30\u0398\13\30\3\30\3\30\7\30\u039c\n\30")
        buf.write("\f\30\16\30\u039f\13\30\3\30\3\30\7\30\u03a3\n\30\f\30")
        buf.write("\16\30\u03a6\13\30\3\30\3\30\7\30\u03aa\n\30\f\30\16\30")
        buf.write("\u03ad\13\30\3\30\3\30\7\30\u03b1\n\30\f\30\16\30\u03b4")
        buf.write("\13\30\3\30\3\30\3\31\3\31\7\31\u03ba\n\31\f\31\16\31")
        buf.write("\u03bd\13\31\3\31\3\31\7\31\u03c1\n\31\f\31\16\31\u03c4")
        buf.write("\13\31\3\31\3\31\7\31\u03c8\n\31\f\31\16\31\u03cb\13\31")
        buf.write("\3\31\3\31\7\31\u03cf\n\31\f\31\16\31\u03d2\13\31\3\31")
        buf.write("\3\31\7\31\u03d6\n\31\f\31\16\31\u03d9\13\31\3\31\3\31")
        buf.write("\3\32\3\32\7\32\u03df\n\32\f\32\16\32\u03e2\13\32\3\32")
        buf.write("\3\32\7\32\u03e6\n\32\f\32\16\32\u03e9\13\32\3\32\3\32")
        buf.write("\7\32\u03ed\n\32\f\32\16\32\u03f0\13\32\3\32\3\32\7\32")
        buf.write("\u03f4\n\32\f\32\16\32\u03f7\13\32\3\32\3\32\7\32\u03fb")
        buf.write("\n\32\f\32\16\32\u03fe\13\32\3\32\3\32\3\33\3\33\7\33")
        buf.write("\u0404\n\33\f\33\16\33\u0407\13\33\3\33\3\33\7\33\u040b")
        buf.write("\n\33\f\33\16\33\u040e\13\33\3\33\3\33\7\33\u0412\n\33")
        buf.write("\f\33\16\33\u0415\13\33\3\33\3\33\7\33\u0419\n\33\f\33")
        buf.write("\16\33\u041c\13\33\3\33\3\33\7\33\u0420\n\33\f\33\16\33")
        buf.write("\u0423\13\33\3\33\3\33\3\34\3\34\7\34\u0429\n\34\f\34")
        buf.write("\16\34\u042c\13\34\3\34\3\34\7\34\u0430\n\34\f\34\16\34")
        buf.write("\u0433\13\34\3\34\3\34\7\34\u0437\n\34\f\34\16\34\u043a")
        buf.write("\13\34\3\34\3\34\3\35\3\35\7\35\u0440\n\35\f\35\16\35")
        buf.write("\u0443\13\35\3\35\3\35\7\35\u0447\n\35\f\35\16\35\u044a")
        buf.write("\13\35\3\35\3\35\7\35\u044e\n\35\f\35\16\35\u0451\13\35")
        buf.write("\3\35\3\35\3\36\3\36\7\36\u0457\n\36\f\36\16\36\u045a")
        buf.write("\13\36\3\36\3\36\7\36\u045e\n\36\f\36\16\36\u0461\13\36")
        buf.write("\3\36\3\36\7\36\u0465\n\36\f\36\16\36\u0468\13\36\3\36")
        buf.write("\3\36\7\36\u046c\n\36\f\36\16\36\u046f\13\36\7\36\u0471")
        buf.write("\n\36\f\36\16\36\u0474\13\36\3\36\3\36\7\36\u0478\n\36")
        buf.write("\f\36\16\36\u047b\13\36\3\36\3\36\3\37\3\37\7\37\u0481")
        buf.write("\n\37\f\37\16\37\u0484\13\37\3\37\3\37\7\37\u0488\n\37")
        buf.write("\f\37\16\37\u048b\13\37\3\37\3\37\7\37\u048f\n\37\f\37")
        buf.write("\16\37\u0492\13\37\3\37\3\37\3 \3 \7 \u0498\n \f \16 ")
        buf.write("\u049b\13 \3 \3 \7 \u049f\n \f \16 \u04a2\13 \3 \3 \7")
        buf.write(" \u04a6\n \f \16 \u04a9\13 \3 \3 \3!\3!\7!\u04af\n!\f")
        buf.write("!\16!\u04b2\13!\3!\3!\7!\u04b6\n!\f!\16!\u04b9\13!\3!")
        buf.write("\3!\7!\u04bd\n!\f!\16!\u04c0\13!\3!\3!\3\"\3\"\7\"\u04c6")
        buf.write("\n\"\f\"\16\"\u04c9\13\"\3\"\3\"\7\"\u04cd\n\"\f\"\16")
        buf.write("\"\u04d0\13\"\3\"\3\"\7\"\u04d4\n\"\f\"\16\"\u04d7\13")
        buf.write("\"\3\"\3\"\3#\3#\7#\u04dd\n#\f#\16#\u04e0\13#\3#\3#\7")
        buf.write("#\u04e4\n#\f#\16#\u04e7\13#\3#\3#\7#\u04eb\n#\f#\16#\u04ee")
        buf.write("\13#\3#\3#\3$\3$\7$\u04f4\n$\f$\16$\u04f7\13$\3$\3$\7")
        buf.write("$\u04fb\n$\f$\16$\u04fe\13$\3$\3$\7$\u0502\n$\f$\16$\u0505")
        buf.write("\13$\3$\7$\u0508\n$\f$\16$\u050b\13$\3$\7$\u050e\n$\f")
        buf.write("$\16$\u0511\13$\5$\u0513\n$\3$\3$\3%\3%\3%\2\2&\2\4\6")
        buf.write("\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\66")
        buf.write("8:<>@BDFH\2\4\3\2/\60\3\2+.\2\u05eb\2M\3\2\2\2\4\u009b")
        buf.write("\3\2\2\2\6\u011c\3\2\2\2\b\u011e\3\2\2\2\n\u0182\3\2\2")
        buf.write("\2\f\u01da\3\2\2\2\16\u01e7\3\2\2\2\20\u01f3\3\2\2\2\22")
        buf.write("\u023d\3\2\2\2\24\u0246\3\2\2\2\26\u0293\3\2\2\2\30\u0295")
        buf.write("\3\2\2\2\32\u02ab\3\2\2\2\34\u02ad\3\2\2\2\36\u02d2\3")
        buf.write("\2\2\2 \u02ea\3\2\2\2\"\u02ec\3\2\2\2$\u02fc\3\2\2\2&")
        buf.write("\u0328\3\2\2\2(\u033f\3\2\2\2*\u0356\3\2\2\2,\u037b\3")
        buf.write("\2\2\2.\u0392\3\2\2\2\60\u03b7\3\2\2\2\62\u03dc\3\2\2")
        buf.write("\2\64\u0401\3\2\2\2\66\u0426\3\2\2\28\u043d\3\2\2\2:\u0454")
        buf.write("\3\2\2\2<\u047e\3\2\2\2>\u0495\3\2\2\2@\u04ac\3\2\2\2")
        buf.write("B\u04c3\3\2\2\2D\u04da\3\2\2\2F\u04f1\3\2\2\2H\u0516\3")
        buf.write("\2\2\2JL\t\2\2\2KJ\3\2\2\2LO\3\2\2\2MK\3\2\2\2MN\3\2\2")
        buf.write("\2N\u008e\3\2\2\2OM\3\2\2\2PT\5 \21\2QS\t\2\2\2RQ\3\2")
        buf.write("\2\2SV\3\2\2\2TR\3\2\2\2TU\3\2\2\2UW\3\2\2\2VT\3\2\2\2")
        buf.write("W[\7\3\2\2XZ\t\2\2\2YX\3\2\2\2Z]\3\2\2\2[Y\3\2\2\2[\\")
        buf.write("\3\2\2\2\\z\3\2\2\2][\3\2\2\2^l\5 \21\2_a\7/\2\2`_\3\2")
        buf.write("\2\2ad\3\2\2\2b`\3\2\2\2bc\3\2\2\2ce\3\2\2\2db\3\2\2\2")
        buf.write("ei\7\60\2\2fh\7/\2\2gf\3\2\2\2hk\3\2\2\2ig\3\2\2\2ij\3")
        buf.write("\2\2\2jm\3\2\2\2ki\3\2\2\2lb\3\2\2\2mn\3\2\2\2nl\3\2\2")
        buf.write("\2no\3\2\2\2oz\3\2\2\2ps\5\6\4\2qs\5\4\3\2rp\3\2\2\2r")
        buf.write("q\3\2\2\2su\3\2\2\2tv\t\2\2\2ut\3\2\2\2vw\3\2\2\2wu\3")
        buf.write("\2\2\2wx\3\2\2\2xz\3\2\2\2yP\3\2\2\2y^\3\2\2\2yr\3\2\2")
        buf.write("\2z}\3\2\2\2{y\3\2\2\2{|\3\2\2\2|\u008c\3\2\2\2}{\3\2")
        buf.write("\2\2~\u0082\5 \21\2\177\u0081\t\2\2\2\u0080\177\3\2\2")
        buf.write("\2\u0081\u0084\3\2\2\2\u0082\u0080\3\2\2\2\u0082\u0083")
        buf.write("\3\2\2\2\u0083\u0086\3\2\2\2\u0084\u0082\3\2\2\2\u0085")
        buf.write("\u0087\7\3\2\2\u0086\u0085\3\2\2\2\u0086\u0087\3\2\2\2")
        buf.write("\u0087\u008d\3\2\2\2\u0088\u008b\5\6\4\2\u0089\u008b\5")
        buf.write("\4\3\2\u008a\u0088\3\2\2\2\u008a\u0089\3\2\2\2\u008b\u008d")
        buf.write("\3\2\2\2\u008c~\3\2\2\2\u008c\u008a\3\2\2\2\u008d\u008f")
        buf.write("\3\2\2\2\u008e{\3\2\2\2\u008e\u008f\3\2\2\2\u008f\u0093")
        buf.write("\3\2\2\2\u0090\u0092\t\2\2\2\u0091\u0090\3\2\2\2\u0092")
        buf.write("\u0095\3\2\2\2\u0093\u0091\3\2\2\2\u0093\u0094\3\2\2\2")
        buf.write("\u0094\u0097\3\2\2\2\u0095\u0093\3\2\2\2\u0096\u0098\7")
        buf.write("\61\2\2\u0097\u0096\3\2\2\2\u0097\u0098\3\2\2\2\u0098")
        buf.write("\u0099\3\2\2\2\u0099\u009a\7\2\2\3\u009a\3\3\2\2\2\u009b")
        buf.write("\u009d\7\n\2\2\u009c\u009e\t\2\2\2\u009d\u009c\3\2\2\2")
        buf.write("\u009e\u009f\3\2\2\2\u009f\u009d\3\2\2\2\u009f\u00a0\3")
        buf.write("\2\2\2\u00a0\u00a1\3\2\2\2\u00a1\u00a5\7-\2\2\u00a2\u00a4")
        buf.write("\t\2\2\2\u00a3\u00a2\3\2\2\2\u00a4\u00a7\3\2\2\2\u00a5")
        buf.write("\u00a3\3\2\2\2\u00a5\u00a6\3\2\2\2\u00a6\u00a8\3\2\2\2")
        buf.write("\u00a7\u00a5\3\2\2\2\u00a8\u00ac\7\4\2\2\u00a9\u00ab\t")
        buf.write("\2\2\2\u00aa\u00a9\3\2\2\2\u00ab\u00ae\3\2\2\2\u00ac\u00aa")
        buf.write("\3\2\2\2\u00ac\u00ad\3\2\2\2\u00ad\u00c9\3\2\2\2\u00ae")
        buf.write("\u00ac\3\2\2\2\u00af\u00b3\7-\2\2\u00b0\u00b2\t\2\2\2")
        buf.write("\u00b1\u00b0\3\2\2\2\u00b2\u00b5\3\2\2\2\u00b3\u00b1\3")
        buf.write("\2\2\2\u00b3\u00b4\3\2\2\2\u00b4\u00c6\3\2\2\2\u00b5\u00b3")
        buf.write("\3\2\2\2\u00b6\u00ba\7\5\2\2\u00b7\u00b9\t\2\2\2\u00b8")
        buf.write("\u00b7\3\2\2\2\u00b9\u00bc\3\2\2\2\u00ba\u00b8\3\2\2\2")
        buf.write("\u00ba\u00bb\3\2\2\2\u00bb\u00bd\3\2\2\2\u00bc\u00ba\3")
        buf.write("\2\2\2\u00bd\u00c1\7-\2\2\u00be\u00c0\t\2\2\2\u00bf\u00be")
        buf.write("\3\2\2\2\u00c0\u00c3\3\2\2\2\u00c1\u00bf\3\2\2\2\u00c1")
        buf.write("\u00c2\3\2\2\2\u00c2\u00c5\3\2\2\2\u00c3\u00c1\3\2\2\2")
        buf.write("\u00c4\u00b6\3\2\2\2\u00c5\u00c8\3\2\2\2\u00c6\u00c4\3")
        buf.write("\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00ca\3\2\2\2\u00c8\u00c6")
        buf.write("\3\2\2\2\u00c9\u00af\3\2\2\2\u00c9\u00ca\3\2\2\2\u00ca")
        buf.write("\u00cb\3\2\2\2\u00cb\u00cf\7\6\2\2\u00cc\u00ce\t\2\2\2")
        buf.write("\u00cd\u00cc\3\2\2\2\u00ce\u00d1\3\2\2\2\u00cf\u00cd\3")
        buf.write("\2\2\2\u00cf\u00d0\3\2\2\2\u00d0\u00d2\3\2\2\2\u00d1\u00cf")
        buf.write("\3\2\2\2\u00d2\u00d4\7\22\2\2\u00d3\u00d5\t\2\2\2\u00d4")
        buf.write("\u00d3\3\2\2\2\u00d5\u00d6\3\2\2\2\u00d6\u00d4\3\2\2\2")
        buf.write("\u00d6\u00d7\3\2\2\2\u00d7\u0115\3\2\2\2\u00d8\u00dc\5")
        buf.write(" \21\2\u00d9\u00db\t\2\2\2\u00da\u00d9\3\2\2\2\u00db\u00de")
        buf.write("\3\2\2\2\u00dc\u00da\3\2\2\2\u00dc\u00dd\3\2\2\2\u00dd")
        buf.write("\u00df\3\2\2\2\u00de\u00dc\3\2\2\2\u00df\u00e3\7\3\2\2")
        buf.write("\u00e0\u00e2\t\2\2\2\u00e1\u00e0\3\2\2\2\u00e2\u00e5\3")
        buf.write("\2\2\2\u00e3\u00e1\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00ff")
        buf.write("\3\2\2\2\u00e5\u00e3\3\2\2\2\u00e6\u00f4\5 \21\2\u00e7")
        buf.write("\u00e9\7/\2\2\u00e8\u00e7\3\2\2\2\u00e9\u00ec\3\2\2\2")
        buf.write("\u00ea\u00e8\3\2\2\2\u00ea\u00eb\3\2\2\2\u00eb\u00ed\3")
        buf.write("\2\2\2\u00ec\u00ea\3\2\2\2\u00ed\u00f1\7\60\2\2\u00ee")
        buf.write("\u00f0\7/\2\2\u00ef\u00ee\3\2\2\2\u00f0\u00f3\3\2\2\2")
        buf.write("\u00f1\u00ef\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\u00f5\3")
        buf.write("\2\2\2\u00f3\u00f1\3\2\2\2\u00f4\u00ea\3\2\2\2\u00f5\u00f6")
        buf.write("\3\2\2\2\u00f6\u00f4\3\2\2\2\u00f6\u00f7\3\2\2\2\u00f7")
        buf.write("\u00ff\3\2\2\2\u00f8\u00fa\5\6\4\2\u00f9\u00fb\t\2\2\2")
        buf.write("\u00fa\u00f9\3\2\2\2\u00fb\u00fc\3\2\2\2\u00fc\u00fa\3")
        buf.write("\2\2\2\u00fc\u00fd\3\2\2\2\u00fd\u00ff\3\2\2\2\u00fe\u00d8")
        buf.write("\3\2\2\2\u00fe\u00e6\3\2\2\2\u00fe\u00f8\3\2\2\2\u00ff")
        buf.write("\u0102\3\2\2\2\u0100\u00fe\3\2\2\2\u0100\u0101\3\2\2\2")
        buf.write("\u0101\u010e\3\2\2\2\u0102\u0100\3\2\2\2\u0103\u0107\5")
        buf.write(" \21\2\u0104\u0106\t\2\2\2\u0105\u0104\3\2\2\2\u0106\u0109")
        buf.write("\3\2\2\2\u0107\u0105\3\2\2\2\u0107\u0108\3\2\2\2\u0108")
        buf.write("\u010b\3\2\2\2\u0109\u0107\3\2\2\2\u010a\u010c\7\3\2\2")
        buf.write("\u010b\u010a\3\2\2\2\u010b\u010c\3\2\2\2\u010c\u010f\3")
        buf.write("\2\2\2\u010d\u010f\5\6\4\2\u010e\u0103\3\2\2\2\u010e\u010d")
        buf.write("\3\2\2\2\u010f\u0111\3\2\2\2\u0110\u0112\t\2\2\2\u0111")
        buf.write("\u0110\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u0111\3\2\2\2")
        buf.write("\u0113\u0114\3\2\2\2\u0114\u0116\3\2\2\2\u0115\u0100\3")
        buf.write("\2\2\2\u0115\u0116\3\2\2\2\u0116\u0117\3\2\2\2\u0117\u0118")
        buf.write("\7\23\2\2\u0118\5\3\2\2\2\u0119\u011d\5\f\7\2\u011a\u011d")
        buf.write("\5\n\6\2\u011b\u011d\5\b\5\2\u011c\u0119\3\2\2\2\u011c")
        buf.write("\u011a\3\2\2\2\u011c\u011b\3\2\2\2\u011d\7\3\2\2\2\u011e")
        buf.write("\u0120\7\f\2\2\u011f\u0121\t\2\2\2\u0120\u011f\3\2\2\2")
        buf.write("\u0121\u0122\3\2\2\2\u0122\u0120\3\2\2\2\u0122\u0123\3")
        buf.write("\2\2\2\u0123\u0124\3\2\2\2\u0124\u0126\7-\2\2\u0125\u0127")
        buf.write("\t\2\2\2\u0126\u0125\3\2\2\2\u0127\u0128\3\2\2\2\u0128")
        buf.write("\u0126\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u012a\3\2\2\2")
        buf.write("\u012a\u012c\7\r\2\2\u012b\u012d\t\2\2\2\u012c\u012b\3")
        buf.write("\2\2\2\u012d\u012e\3\2\2\2\u012e\u012c\3\2\2\2\u012e\u012f")
        buf.write("\3\2\2\2\u012f\u0130\3\2\2\2\u0130\u0132\7-\2\2\u0131")
        buf.write("\u0133\t\2\2\2\u0132\u0131\3\2\2\2\u0133\u0134\3\2\2\2")
        buf.write("\u0134\u0132\3\2\2\2\u0134\u0135\3\2\2\2\u0135\u0136\3")
        buf.write("\2\2\2\u0136\u0138\7\16\2\2\u0137\u0139\t\2\2\2\u0138")
        buf.write("\u0137\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u0138\3\2\2\2")
        buf.write("\u013a\u013b\3\2\2\2\u013b\u017e\3\2\2\2\u013c\u0140\5")
        buf.write(" \21\2\u013d\u013f\t\2\2\2\u013e\u013d\3\2\2\2\u013f\u0142")
        buf.write("\3\2\2\2\u0140\u013e\3\2\2\2\u0140\u0141\3\2\2\2\u0141")
        buf.write("\u0143\3\2\2\2\u0142\u0140\3\2\2\2\u0143\u0147\7\3\2\2")
        buf.write("\u0144\u0146\t\2\2\2\u0145\u0144\3\2\2\2\u0146\u0149\3")
        buf.write("\2\2\2\u0147\u0145\3\2\2\2\u0147\u0148\3\2\2\2\u0148\u0163")
        buf.write("\3\2\2\2\u0149\u0147\3\2\2\2\u014a\u0158\5 \21\2\u014b")
        buf.write("\u014d\7/\2\2\u014c\u014b\3\2\2\2\u014d\u0150\3\2\2\2")
        buf.write("\u014e\u014c\3\2\2\2\u014e\u014f\3\2\2\2\u014f\u0151\3")
        buf.write("\2\2\2\u0150\u014e\3\2\2\2\u0151\u0155\7\60\2\2\u0152")
        buf.write("\u0154\7/\2\2\u0153\u0152\3\2\2\2\u0154\u0157\3\2\2\2")
        buf.write("\u0155\u0153\3\2\2\2\u0155\u0156\3\2\2\2\u0156\u0159\3")
        buf.write("\2\2\2\u0157\u0155\3\2\2\2\u0158\u014e\3\2\2\2\u0159\u015a")
        buf.write("\3\2\2\2\u015a\u0158\3\2\2\2\u015a\u015b\3\2\2\2\u015b")
        buf.write("\u0163\3\2\2\2\u015c\u015e\5\6\4\2\u015d\u015f\t\2\2\2")
        buf.write("\u015e\u015d\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u015e\3")
        buf.write("\2\2\2\u0160\u0161\3\2\2\2\u0161\u0163\3\2\2\2\u0162\u013c")
        buf.write("\3\2\2\2\u0162\u014a\3\2\2\2\u0162\u015c\3\2\2\2\u0163")
        buf.write("\u0166\3\2\2\2\u0164\u0162\3\2\2\2\u0164\u0165\3\2\2\2")
        buf.write("\u0165\u017c\3\2\2\2\u0166\u0164\3\2\2\2\u0167\u016b\5")
        buf.write(" \21\2\u0168\u016a\t\2\2\2\u0169\u0168\3\2\2\2\u016a\u016d")
        buf.write("\3\2\2\2\u016b\u0169\3\2\2\2\u016b\u016c\3\2\2\2\u016c")
        buf.write("\u0174\3\2\2\2\u016d\u016b\3\2\2\2\u016e\u0175\7\3\2\2")
        buf.write("\u016f\u0171\t\2\2\2\u0170\u016f\3\2\2\2\u0171\u0172\3")
        buf.write("\2\2\2\u0172\u0170\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0175")
        buf.write("\3\2\2\2\u0174\u016e\3\2\2\2\u0174\u0170\3\2\2\2\u0175")
        buf.write("\u017d\3\2\2\2\u0176\u0178\5\6\4\2\u0177\u0179\t\2\2\2")
        buf.write("\u0178\u0177\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u0178\3")
        buf.write("\2\2\2\u017a\u017b\3\2\2\2\u017b\u017d\3\2\2\2\u017c\u0167")
        buf.write("\3\2\2\2\u017c\u0176\3\2\2\2\u017d\u017f\3\2\2\2\u017e")
        buf.write("\u0164\3\2\2\2\u017e\u017f\3\2\2\2\u017f\u0180\3\2\2\2")
        buf.write("\u0180\u0181\7\23\2\2\u0181\t\3\2\2\2\u0182\u0184\7\13")
        buf.write("\2\2\u0183\u0185\t\2\2\2\u0184\u0183\3\2\2\2\u0185\u0186")
        buf.write("\3\2\2\2\u0186\u0184\3\2\2\2\u0186\u0187\3\2\2\2\u0187")
        buf.write("\u0188\3\2\2\2\u0188\u018a\5\26\f\2\u0189\u018b\t\2\2")
        buf.write("\2\u018a\u0189\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u018a")
        buf.write("\3\2\2\2\u018c\u018d\3\2\2\2\u018d\u018e\3\2\2\2\u018e")
        buf.write("\u0190\7\16\2\2\u018f\u0191\t\2\2\2\u0190\u018f\3\2\2")
        buf.write("\2\u0191\u0192\3\2\2\2\u0192\u0190\3\2\2\2\u0192\u0193")
        buf.write("\3\2\2\2\u0193\u01d6\3\2\2\2\u0194\u0198\5 \21\2\u0195")
        buf.write("\u0197\t\2\2\2\u0196\u0195\3\2\2\2\u0197\u019a\3\2\2\2")
        buf.write("\u0198\u0196\3\2\2\2\u0198\u0199\3\2\2\2\u0199\u019b\3")
        buf.write("\2\2\2\u019a\u0198\3\2\2\2\u019b\u019f\7\3\2\2\u019c\u019e")
        buf.write("\t\2\2\2\u019d\u019c\3\2\2\2\u019e\u01a1\3\2\2\2\u019f")
        buf.write("\u019d\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u01bb\3\2\2\2")
        buf.write("\u01a1\u019f\3\2\2\2\u01a2\u01b0\5 \21\2\u01a3\u01a5\7")
        buf.write("/\2\2\u01a4\u01a3\3\2\2\2\u01a5\u01a8\3\2\2\2\u01a6\u01a4")
        buf.write("\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01a9\3\2\2\2\u01a8")
        buf.write("\u01a6\3\2\2\2\u01a9\u01ad\7\60\2\2\u01aa\u01ac\7/\2\2")
        buf.write("\u01ab\u01aa\3\2\2\2\u01ac\u01af\3\2\2\2\u01ad\u01ab\3")
        buf.write("\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01b1\3\2\2\2\u01af\u01ad")
        buf.write("\3\2\2\2\u01b0\u01a6\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2")
        buf.write("\u01b0\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01bb\3\2\2\2")
        buf.write("\u01b4\u01b6\5\6\4\2\u01b5\u01b7\t\2\2\2\u01b6\u01b5\3")
        buf.write("\2\2\2\u01b7\u01b8\3\2\2\2\u01b8\u01b6\3\2\2\2\u01b8\u01b9")
        buf.write("\3\2\2\2\u01b9\u01bb\3\2\2\2\u01ba\u0194\3\2\2\2\u01ba")
        buf.write("\u01a2\3\2\2\2\u01ba\u01b4\3\2\2\2\u01bb\u01be\3\2\2\2")
        buf.write("\u01bc\u01ba\3\2\2\2\u01bc\u01bd\3\2\2\2\u01bd\u01d4\3")
        buf.write("\2\2\2\u01be\u01bc\3\2\2\2\u01bf\u01c3\5 \21\2\u01c0\u01c2")
        buf.write("\t\2\2\2\u01c1\u01c0\3\2\2\2\u01c2\u01c5\3\2\2\2\u01c3")
        buf.write("\u01c1\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01cc\3\2\2\2")
        buf.write("\u01c5\u01c3\3\2\2\2\u01c6\u01cd\7\3\2\2\u01c7\u01c9\t")
        buf.write("\2\2\2\u01c8\u01c7\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01c8")
        buf.write("\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb\u01cd\3\2\2\2\u01cc")
        buf.write("\u01c6\3\2\2\2\u01cc\u01c8\3\2\2\2\u01cd\u01d5\3\2\2\2")
        buf.write("\u01ce\u01d0\5\6\4\2\u01cf\u01d1\t\2\2\2\u01d0\u01cf\3")
        buf.write("\2\2\2\u01d1\u01d2\3\2\2\2\u01d2\u01d0\3\2\2\2\u01d2\u01d3")
        buf.write("\3\2\2\2\u01d3\u01d5\3\2\2\2\u01d4\u01bf\3\2\2\2\u01d4")
        buf.write("\u01ce\3\2\2\2\u01d5\u01d7\3\2\2\2\u01d6\u01bc\3\2\2\2")
        buf.write("\u01d6\u01d7\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8\u01d9\7")
        buf.write("\23\2\2\u01d9\13\3\2\2\2\u01da\u01db\5\16\b\2\u01db\u01df")
        buf.write("\5\20\t\2\u01dc\u01de\5\22\n\2\u01dd\u01dc\3\2\2\2\u01de")
        buf.write("\u01e1\3\2\2\2\u01df\u01dd\3\2\2\2\u01df\u01e0\3\2\2\2")
        buf.write("\u01e0\u01e3\3\2\2\2\u01e1\u01df\3\2\2\2\u01e2\u01e4\5")
        buf.write("\24\13\2\u01e3\u01e2\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4")
        buf.write("\u01e5\3\2\2\2\u01e5\u01e6\7\23\2\2\u01e6\r\3\2\2\2\u01e7")
        buf.write("\u01e9\7\17\2\2\u01e8\u01ea\t\2\2\2\u01e9\u01e8\3\2\2")
        buf.write("\2\u01ea\u01eb\3\2\2\2\u01eb\u01e9\3\2\2\2\u01eb\u01ec")
        buf.write("\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed\u01ef\5\26\f\2\u01ee")
        buf.write("\u01f0\t\2\2\2\u01ef\u01ee\3\2\2\2\u01f0\u01f1\3\2\2\2")
        buf.write("\u01f1\u01ef\3\2\2\2\u01f1\u01f2\3\2\2\2\u01f2\17\3\2")
        buf.write("\2\2\u01f3\u01f5\7\20\2\2\u01f4\u01f6\t\2\2\2\u01f5\u01f4")
        buf.write("\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f7")
        buf.write("\u01f8\3\2\2\2\u01f8\u023b\3\2\2\2\u01f9\u01fd\5 \21\2")
        buf.write("\u01fa\u01fc\t\2\2\2\u01fb\u01fa\3\2\2\2\u01fc\u01ff\3")
        buf.write("\2\2\2\u01fd\u01fb\3\2\2\2\u01fd\u01fe\3\2\2\2\u01fe\u0200")
        buf.write("\3\2\2\2\u01ff\u01fd\3\2\2\2\u0200\u0204\7\3\2\2\u0201")
        buf.write("\u0203\t\2\2\2\u0202\u0201\3\2\2\2\u0203\u0206\3\2\2\2")
        buf.write("\u0204\u0202\3\2\2\2\u0204\u0205\3\2\2\2\u0205\u0220\3")
        buf.write("\2\2\2\u0206\u0204\3\2\2\2\u0207\u0215\5 \21\2\u0208\u020a")
        buf.write("\7/\2\2\u0209\u0208\3\2\2\2\u020a\u020d\3\2\2\2\u020b")
        buf.write("\u0209\3\2\2\2\u020b\u020c\3\2\2\2\u020c\u020e\3\2\2\2")
        buf.write("\u020d\u020b\3\2\2\2\u020e\u0212\7\60\2\2\u020f\u0211")
        buf.write("\7/\2\2\u0210\u020f\3\2\2\2\u0211\u0214\3\2\2\2\u0212")
        buf.write("\u0210\3\2\2\2\u0212\u0213\3\2\2\2\u0213\u0216\3\2\2\2")
        buf.write("\u0214\u0212\3\2\2\2\u0215\u020b\3\2\2\2\u0216\u0217\3")
        buf.write("\2\2\2\u0217\u0215\3\2\2\2\u0217\u0218\3\2\2\2\u0218\u0220")
        buf.write("\3\2\2\2\u0219\u021b\5\6\4\2\u021a\u021c\t\2\2\2\u021b")
        buf.write("\u021a\3\2\2\2\u021c\u021d\3\2\2\2\u021d\u021b\3\2\2\2")
        buf.write("\u021d\u021e\3\2\2\2\u021e\u0220\3\2\2\2\u021f\u01f9\3")
        buf.write("\2\2\2\u021f\u0207\3\2\2\2\u021f\u0219\3\2\2\2\u0220\u0223")
        buf.write("\3\2\2\2\u0221\u021f\3\2\2\2\u0221\u0222\3\2\2\2\u0222")
        buf.write("\u0239\3\2\2\2\u0223\u0221\3\2\2\2\u0224\u0228\5 \21\2")
        buf.write("\u0225\u0227\t\2\2\2\u0226\u0225\3\2\2\2\u0227\u022a\3")
        buf.write("\2\2\2\u0228\u0226\3\2\2\2\u0228\u0229\3\2\2\2\u0229\u0231")
        buf.write("\3\2\2\2\u022a\u0228\3\2\2\2\u022b\u0232\7\3\2\2\u022c")
        buf.write("\u022e\t\2\2\2\u022d\u022c\3\2\2\2\u022e\u022f\3\2\2\2")
        buf.write("\u022f\u022d\3\2\2\2\u022f\u0230\3\2\2\2\u0230\u0232\3")
        buf.write("\2\2\2\u0231\u022b\3\2\2\2\u0231\u022d\3\2\2\2\u0232\u023a")
        buf.write("\3\2\2\2\u0233\u0235\5\6\4\2\u0234\u0236\t\2\2\2\u0235")
        buf.write("\u0234\3\2\2\2\u0236\u0237\3\2\2\2\u0237\u0235\3\2\2\2")
        buf.write("\u0237\u0238\3\2\2\2\u0238\u023a\3\2\2\2\u0239\u0224\3")
        buf.write("\2\2\2\u0239\u0233\3\2\2\2\u023a\u023c\3\2\2\2\u023b\u0221")
        buf.write("\3\2\2\2\u023b\u023c\3\2\2\2\u023c\21\3\2\2\2\u023d\u023f")
        buf.write("\7\21\2\2\u023e\u0240\t\2\2\2\u023f\u023e\3\2\2\2\u0240")
        buf.write("\u0241\3\2\2\2\u0241\u023f\3\2\2\2\u0241\u0242\3\2\2\2")
        buf.write("\u0242\u0243\3\2\2\2\u0243\u0244\5\16\b\2\u0244\u0245")
        buf.write("\5\20\t\2\u0245\23\3\2\2\2\u0246\u0248\7\21\2\2\u0247")
        buf.write("\u0249\t\2\2\2\u0248\u0247\3\2\2\2\u0249\u024a\3\2\2\2")
        buf.write("\u024a\u0248\3\2\2\2\u024a\u024b\3\2\2\2\u024b\u028e\3")
        buf.write("\2\2\2\u024c\u0250\5 \21\2\u024d\u024f\t\2\2\2\u024e\u024d")
        buf.write("\3\2\2\2\u024f\u0252\3\2\2\2\u0250\u024e\3\2\2\2\u0250")
        buf.write("\u0251\3\2\2\2\u0251\u0253\3\2\2\2\u0252\u0250\3\2\2\2")
        buf.write("\u0253\u0257\7\3\2\2\u0254\u0256\t\2\2\2\u0255\u0254\3")
        buf.write("\2\2\2\u0256\u0259\3\2\2\2\u0257\u0255\3\2\2\2\u0257\u0258")
        buf.write("\3\2\2\2\u0258\u0273\3\2\2\2\u0259\u0257\3\2\2\2\u025a")
        buf.write("\u0268\5 \21\2\u025b\u025d\7/\2\2\u025c\u025b\3\2\2\2")
        buf.write("\u025d\u0260\3\2\2\2\u025e\u025c\3\2\2\2\u025e\u025f\3")
        buf.write("\2\2\2\u025f\u0261\3\2\2\2\u0260\u025e\3\2\2\2\u0261\u0265")
        buf.write("\7\60\2\2\u0262\u0264\7/\2\2\u0263\u0262\3\2\2\2\u0264")
        buf.write("\u0267\3\2\2\2\u0265\u0263\3\2\2\2\u0265\u0266\3\2\2\2")
        buf.write("\u0266\u0269\3\2\2\2\u0267\u0265\3\2\2\2\u0268\u025e\3")
        buf.write("\2\2\2\u0269\u026a\3\2\2\2\u026a\u0268\3\2\2\2\u026a\u026b")
        buf.write("\3\2\2\2\u026b\u0273\3\2\2\2\u026c\u026e\5\6\4\2\u026d")
        buf.write("\u026f\t\2\2\2\u026e\u026d\3\2\2\2\u026f\u0270\3\2\2\2")
        buf.write("\u0270\u026e\3\2\2\2\u0270\u0271\3\2\2\2\u0271\u0273\3")
        buf.write("\2\2\2\u0272\u024c\3\2\2\2\u0272\u025a\3\2\2\2\u0272\u026c")
        buf.write("\3\2\2\2\u0273\u0276\3\2\2\2\u0274\u0272\3\2\2\2\u0274")
        buf.write("\u0275\3\2\2\2\u0275\u028c\3\2\2\2\u0276\u0274\3\2\2\2")
        buf.write("\u0277\u027b\5 \21\2\u0278\u027a\t\2\2\2\u0279\u0278\3")
        buf.write("\2\2\2\u027a\u027d\3\2\2\2\u027b\u0279\3\2\2\2\u027b\u027c")
        buf.write("\3\2\2\2\u027c\u0284\3\2\2\2\u027d\u027b\3\2\2\2\u027e")
        buf.write("\u0285\7\3\2\2\u027f\u0281\t\2\2\2\u0280\u027f\3\2\2\2")
        buf.write("\u0281\u0282\3\2\2\2\u0282\u0280\3\2\2\2\u0282\u0283\3")
        buf.write("\2\2\2\u0283\u0285\3\2\2\2\u0284\u027e\3\2\2\2\u0284\u0280")
        buf.write("\3\2\2\2\u0285\u028d\3\2\2\2\u0286\u0288\5\6\4\2\u0287")
        buf.write("\u0289\t\2\2\2\u0288\u0287\3\2\2\2\u0289\u028a\3\2\2\2")
        buf.write("\u028a\u0288\3\2\2\2\u028a\u028b\3\2\2\2\u028b\u028d\3")
        buf.write("\2\2\2\u028c\u0277\3\2\2\2\u028c\u0286\3\2\2\2\u028d\u028f")
        buf.write("\3\2\2\2\u028e\u0274\3\2\2\2\u028e\u028f\3\2\2\2\u028f")
        buf.write("\25\3\2\2\2\u0290\u0294\5\36\20\2\u0291\u0294\7+\2\2\u0292")
        buf.write("\u0294\5\30\r\2\u0293\u0290\3\2\2\2\u0293\u0291\3\2\2")
        buf.write("\2\u0293\u0292\3\2\2\2\u0294\27\3\2\2\2\u0295\u0299\5")
        buf.write("\32\16\2\u0296\u0298\t\2\2\2\u0297\u0296\3\2\2\2\u0298")
        buf.write("\u029b\3\2\2\2\u0299\u0297\3\2\2\2\u0299\u029a\3\2\2\2")
        buf.write("\u029a\u029c\3\2\2\2\u029b\u0299\3\2\2\2\u029c\u02a0\7")
        buf.write("(\2\2\u029d\u029f\t\2\2\2\u029e\u029d\3\2\2\2\u029f\u02a2")
        buf.write("\3\2\2\2\u02a0\u029e\3\2\2\2\u02a0\u02a1\3\2\2\2\u02a1")
        buf.write("\u02a3\3\2\2\2\u02a2\u02a0\3\2\2\2\u02a3\u02a4\5\32\16")
        buf.write("\2\u02a4\31\3\2\2\2\u02a5\u02ac\5\36\20\2\u02a6\u02ac")
        buf.write("\7,\2\2\u02a7\u02ac\7.\2\2\u02a8\u02ac\7-\2\2\u02a9\u02ac")
        buf.write("\5\34\17\2\u02aa\u02ac\5F$\2\u02ab\u02a5\3\2\2\2\u02ab")
        buf.write("\u02a6\3\2\2\2\u02ab\u02a7\3\2\2\2\u02ab\u02a8\3\2\2\2")
        buf.write("\u02ab\u02a9\3\2\2\2\u02ab\u02aa\3\2\2\2\u02ac\33\3\2")
        buf.write("\2\2\u02ad\u02b1\5H%\2\u02ae\u02b0\t\2\2\2\u02af\u02ae")
        buf.write("\3\2\2\2\u02b0\u02b3\3\2\2\2\u02b1\u02af\3\2\2\2\u02b1")
        buf.write("\u02b2\3\2\2\2\u02b2\u02b4\3\2\2\2\u02b3\u02b1\3\2\2\2")
        buf.write("\u02b4\u02b8\7)\2\2\u02b5\u02b7\t\2\2\2\u02b6\u02b5\3")
        buf.write("\2\2\2\u02b7\u02ba\3\2\2\2\u02b8\u02b6\3\2\2\2\u02b8\u02b9")
        buf.write("\3\2\2\2\u02b9\u02bb\3\2\2\2\u02ba\u02b8\3\2\2\2\u02bb")
        buf.write("\u02bc\5H%\2\u02bc\35\3\2\2\2\u02bd\u02d3\5$\23\2\u02be")
        buf.write("\u02d3\5&\24\2\u02bf\u02d3\5(\25\2\u02c0\u02d3\5*\26\2")
        buf.write("\u02c1\u02d3\5,\27\2\u02c2\u02d3\5.\30\2\u02c3\u02d3\5")
        buf.write("\60\31\2\u02c4\u02d3\5\62\32\2\u02c5\u02d3\5\64\33\2\u02c6")
        buf.write("\u02d3\5\66\34\2\u02c7\u02d3\58\35\2\u02c8\u02d3\5:\36")
        buf.write("\2\u02c9\u02d3\5<\37\2\u02ca\u02d3\5> \2\u02cb\u02d3\5")
        buf.write("@!\2\u02cc\u02d3\5B\"\2\u02cd\u02d3\5D#\2\u02ce\u02d3")
        buf.write("\7\37\2\2\u02cf\u02d3\7\"\2\2\u02d0\u02d3\7#\2\2\u02d1")
        buf.write("\u02d3\7$\2\2\u02d2\u02bd\3\2\2\2\u02d2\u02be\3\2\2\2")
        buf.write("\u02d2\u02bf\3\2\2\2\u02d2\u02c0\3\2\2\2\u02d2\u02c1\3")
        buf.write("\2\2\2\u02d2\u02c2\3\2\2\2\u02d2\u02c3\3\2\2\2\u02d2\u02c4")
        buf.write("\3\2\2\2\u02d2\u02c5\3\2\2\2\u02d2\u02c6\3\2\2\2\u02d2")
        buf.write("\u02c7\3\2\2\2\u02d2\u02c8\3\2\2\2\u02d2\u02c9\3\2\2\2")
        buf.write("\u02d2\u02ca\3\2\2\2\u02d2\u02cb\3\2\2\2\u02d2\u02cc\3")
        buf.write("\2\2\2\u02d2\u02cd\3\2\2\2\u02d2\u02ce\3\2\2\2\u02d2\u02cf")
        buf.write("\3\2\2\2\u02d2\u02d0\3\2\2\2\u02d2\u02d1\3\2\2\2\u02d3")
        buf.write("\37\3\2\2\2\u02d4\u02eb\5$\23\2\u02d5\u02eb\5&\24\2\u02d6")
        buf.write("\u02eb\5(\25\2\u02d7\u02eb\5*\26\2\u02d8\u02eb\5,\27\2")
        buf.write("\u02d9\u02eb\5.\30\2\u02da\u02eb\5\60\31\2\u02db\u02eb")
        buf.write("\5\62\32\2\u02dc\u02eb\5\64\33\2\u02dd\u02eb\5\66\34\2")
        buf.write("\u02de\u02eb\58\35\2\u02df\u02eb\5:\36\2\u02e0\u02eb\5")
        buf.write("<\37\2\u02e1\u02eb\5> \2\u02e2\u02eb\5@!\2\u02e3\u02eb")
        buf.write("\5B\"\2\u02e4\u02eb\5D#\2\u02e5\u02eb\5\"\22\2\u02e6\u02eb")
        buf.write("\7\37\2\2\u02e7\u02eb\7\"\2\2\u02e8\u02eb\7#\2\2\u02e9")
        buf.write("\u02eb\7$\2\2\u02ea\u02d4\3\2\2\2\u02ea\u02d5\3\2\2\2")
        buf.write("\u02ea\u02d6\3\2\2\2\u02ea\u02d7\3\2\2\2\u02ea\u02d8\3")
        buf.write("\2\2\2\u02ea\u02d9\3\2\2\2\u02ea\u02da\3\2\2\2\u02ea\u02db")
        buf.write("\3\2\2\2\u02ea\u02dc\3\2\2\2\u02ea\u02dd\3\2\2\2\u02ea")
        buf.write("\u02de\3\2\2\2\u02ea\u02df\3\2\2\2\u02ea\u02e0\3\2\2\2")
        buf.write("\u02ea\u02e1\3\2\2\2\u02ea\u02e2\3\2\2\2\u02ea\u02e3\3")
        buf.write("\2\2\2\u02ea\u02e4\3\2\2\2\u02ea\u02e5\3\2\2\2\u02ea\u02e6")
        buf.write("\3\2\2\2\u02ea\u02e7\3\2\2\2\u02ea\u02e8\3\2\2\2\u02ea")
        buf.write("\u02e9\3\2\2\2\u02eb!\3\2\2\2\u02ec\u02f0\7-\2\2\u02ed")
        buf.write("\u02ef\t\2\2\2\u02ee\u02ed\3\2\2\2\u02ef\u02f2\3\2\2\2")
        buf.write("\u02f0\u02ee\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02f3\3")
        buf.write("\2\2\2\u02f2\u02f0\3\2\2\2\u02f3\u02f7\7\7\2\2\u02f4\u02f6")
        buf.write("\t\2\2\2\u02f5\u02f4\3\2\2\2\u02f6\u02f9\3\2\2\2\u02f7")
        buf.write("\u02f5\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8\u02fa\3\2\2\2")
        buf.write("\u02f9\u02f7\3\2\2\2\u02fa\u02fb\5\32\16\2\u02fb#\3\2")
        buf.write("\2\2\u02fc\u0300\7-\2\2\u02fd\u02ff\t\2\2\2\u02fe\u02fd")
        buf.write("\3\2\2\2\u02ff\u0302\3\2\2\2\u0300\u02fe\3\2\2\2\u0300")
        buf.write("\u0301\3\2\2\2\u0301\u0303\3\2\2\2\u0302\u0300\3\2\2\2")
        buf.write("\u0303\u0307\7\4\2\2\u0304\u0306\t\2\2\2\u0305\u0304\3")
        buf.write("\2\2\2\u0306\u0309\3\2\2\2\u0307\u0305\3\2\2\2\u0307\u0308")
        buf.write("\3\2\2\2\u0308\u0324\3\2\2\2\u0309\u0307\3\2\2\2\u030a")
        buf.write("\u030e\5H%\2\u030b\u030d\t\2\2\2\u030c\u030b\3\2\2\2\u030d")
        buf.write("\u0310\3\2\2\2\u030e\u030c\3\2\2\2\u030e\u030f\3\2\2\2")
        buf.write("\u030f\u0321\3\2\2\2\u0310\u030e\3\2\2\2\u0311\u0315\7")
        buf.write("\5\2\2\u0312\u0314\t\2\2\2\u0313\u0312\3\2\2\2\u0314\u0317")
        buf.write("\3\2\2\2\u0315\u0313\3\2\2\2\u0315\u0316\3\2\2\2\u0316")
        buf.write("\u0318\3\2\2\2\u0317\u0315\3\2\2\2\u0318\u031c\5H%\2\u0319")
        buf.write("\u031b\t\2\2\2\u031a\u0319\3\2\2\2\u031b\u031e\3\2\2\2")
        buf.write("\u031c\u031a\3\2\2\2\u031c\u031d\3\2\2\2\u031d\u0320\3")
        buf.write("\2\2\2\u031e\u031c\3\2\2\2\u031f\u0311\3\2\2\2\u0320\u0323")
        buf.write("\3\2\2\2\u0321\u031f\3\2\2\2\u0321\u0322\3\2\2\2\u0322")
        buf.write("\u0325\3\2\2\2\u0323\u0321\3\2\2\2\u0324\u030a\3\2\2\2")
        buf.write("\u0324\u0325\3\2\2\2\u0325\u0326\3\2\2\2\u0326\u0327\7")
        buf.write("\6\2\2\u0327%\3\2\2\2\u0328\u032c\7\24\2\2\u0329\u032b")
        buf.write("\t\2\2\2\u032a\u0329\3\2\2\2\u032b\u032e\3\2\2\2\u032c")
        buf.write("\u032a\3\2\2\2\u032c\u032d\3\2\2\2\u032d\u032f\3\2\2\2")
        buf.write("\u032e\u032c\3\2\2\2\u032f\u0333\7\4\2\2\u0330\u0332\t")
        buf.write("\2\2\2\u0331\u0330\3\2\2\2\u0332\u0335\3\2\2\2\u0333\u0331")
        buf.write("\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u0336\3\2\2\2\u0335")
        buf.write("\u0333\3\2\2\2\u0336\u033a\5H%\2\u0337\u0339\t\2\2\2\u0338")
        buf.write("\u0337\3\2\2\2\u0339\u033c\3\2\2\2\u033a\u0338\3\2\2\2")
        buf.write("\u033a\u033b\3\2\2\2\u033b\u033d\3\2\2\2\u033c\u033a\3")
        buf.write("\2\2\2\u033d\u033e\7\6\2\2\u033e\'\3\2\2\2\u033f\u0343")
        buf.write("\7\25\2\2\u0340\u0342\t\2\2\2\u0341\u0340\3\2\2\2\u0342")
        buf.write("\u0345\3\2\2\2\u0343\u0341\3\2\2\2\u0343\u0344\3\2\2\2")
        buf.write("\u0344\u0346\3\2\2\2\u0345\u0343\3\2\2\2\u0346\u034a\7")
        buf.write("\4\2\2\u0347\u0349\t\2\2\2\u0348\u0347\3\2\2\2\u0349\u034c")
        buf.write("\3\2\2\2\u034a\u0348\3\2\2\2\u034a\u034b\3\2\2\2\u034b")
        buf.write("\u034d\3\2\2\2\u034c\u034a\3\2\2\2\u034d\u0351\5H%\2\u034e")
        buf.write("\u0350\t\2\2\2\u034f\u034e\3\2\2\2\u0350\u0353\3\2\2\2")
        buf.write("\u0351\u034f\3\2\2\2\u0351\u0352\3\2\2\2\u0352\u0354\3")
        buf.write("\2\2\2\u0353\u0351\3\2\2\2\u0354\u0355\7\6\2\2\u0355)")
        buf.write("\3\2\2\2\u0356\u035a\7\26\2\2\u0357\u0359\t\2\2\2\u0358")
        buf.write("\u0357\3\2\2\2\u0359\u035c\3\2\2\2\u035a\u0358\3\2\2\2")
        buf.write("\u035a\u035b\3\2\2\2\u035b\u035d\3\2\2\2\u035c\u035a\3")
        buf.write("\2\2\2\u035d\u0361\7\4\2\2\u035e\u0360\t\2\2\2\u035f\u035e")
        buf.write("\3\2\2\2\u0360\u0363\3\2\2\2\u0361\u035f\3\2\2\2\u0361")
        buf.write("\u0362\3\2\2\2\u0362\u0364\3\2\2\2\u0363\u0361\3\2\2\2")
        buf.write("\u0364\u0368\5H%\2\u0365\u0367\t\2\2\2\u0366\u0365\3\2")
        buf.write("\2\2\u0367\u036a\3\2\2\2\u0368\u0366\3\2\2\2\u0368\u0369")
        buf.write("\3\2\2\2\u0369\u036b\3\2\2\2\u036a\u0368\3\2\2\2\u036b")
        buf.write("\u036f\7\5\2\2\u036c\u036e\t\2\2\2\u036d\u036c\3\2\2\2")
        buf.write("\u036e\u0371\3\2\2\2\u036f\u036d\3\2\2\2\u036f\u0370\3")
        buf.write("\2\2\2\u0370\u0372\3\2\2\2\u0371\u036f\3\2\2\2\u0372\u0376")
        buf.write("\5H%\2\u0373\u0375\t\2\2\2\u0374\u0373\3\2\2\2\u0375\u0378")
        buf.write("\3\2\2\2\u0376\u0374\3\2\2\2\u0376\u0377\3\2\2\2\u0377")
        buf.write("\u0379\3\2\2\2\u0378\u0376\3\2\2\2\u0379\u037a\7\6\2\2")
        buf.write("\u037a+\3\2\2\2\u037b\u037f\7\27\2\2\u037c\u037e\t\2\2")
        buf.write("\2\u037d\u037c\3\2\2\2\u037e\u0381\3\2\2\2\u037f\u037d")
        buf.write("\3\2\2\2\u037f\u0380\3\2\2\2\u0380\u0382\3\2\2\2\u0381")
        buf.write("\u037f\3\2\2\2\u0382\u0386\7\4\2\2\u0383\u0385\t\2\2\2")
        buf.write("\u0384\u0383\3\2\2\2\u0385\u0388\3\2\2\2\u0386\u0384\3")
        buf.write("\2\2\2\u0386\u0387\3\2\2\2\u0387\u0389\3\2\2\2\u0388\u0386")
        buf.write("\3\2\2\2\u0389\u038d\5H%\2\u038a\u038c\t\2\2\2\u038b\u038a")
        buf.write("\3\2\2\2\u038c\u038f\3\2\2\2\u038d\u038b\3\2\2\2\u038d")
        buf.write("\u038e\3\2\2\2\u038e\u0390\3\2\2\2\u038f\u038d\3\2\2\2")
        buf.write("\u0390\u0391\7\6\2\2\u0391-\3\2\2\2\u0392\u0396\7\30\2")
        buf.write("\2\u0393\u0395\t\2\2\2\u0394\u0393\3\2\2\2\u0395\u0398")
        buf.write("\3\2\2\2\u0396\u0394\3\2\2\2\u0396\u0397\3\2\2\2\u0397")
        buf.write("\u0399\3\2\2\2\u0398\u0396\3\2\2\2\u0399\u039d\7\4\2\2")
        buf.write("\u039a\u039c\t\2\2\2\u039b\u039a\3\2\2\2\u039c\u039f\3")
        buf.write("\2\2\2\u039d\u039b\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u03a0")
        buf.write("\3\2\2\2\u039f\u039d\3\2\2\2\u03a0\u03a4\5H%\2\u03a1\u03a3")
        buf.write("\t\2\2\2\u03a2\u03a1\3\2\2\2\u03a3\u03a6\3\2\2\2\u03a4")
        buf.write("\u03a2\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a7\3\2\2\2")
        buf.write("\u03a6\u03a4\3\2\2\2\u03a7\u03ab\7\5\2\2\u03a8\u03aa\t")
        buf.write("\2\2\2\u03a9\u03a8\3\2\2\2\u03aa\u03ad\3\2\2\2\u03ab\u03a9")
        buf.write("\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03ae\3\2\2\2\u03ad")
        buf.write("\u03ab\3\2\2\2\u03ae\u03b2\5H%\2\u03af\u03b1\t\2\2\2\u03b0")
        buf.write("\u03af\3\2\2\2\u03b1\u03b4\3\2\2\2\u03b2\u03b0\3\2\2\2")
        buf.write("\u03b2\u03b3\3\2\2\2\u03b3\u03b5\3\2\2\2\u03b4\u03b2\3")
        buf.write("\2\2\2\u03b5\u03b6\7\6\2\2\u03b6/\3\2\2\2\u03b7\u03bb")
        buf.write("\7\31\2\2\u03b8\u03ba\t\2\2\2\u03b9\u03b8\3\2\2\2\u03ba")
        buf.write("\u03bd\3\2\2\2\u03bb\u03b9\3\2\2\2\u03bb\u03bc\3\2\2\2")
        buf.write("\u03bc\u03be\3\2\2\2\u03bd\u03bb\3\2\2\2\u03be\u03c2\7")
        buf.write("\4\2\2\u03bf\u03c1\t\2\2\2\u03c0\u03bf\3\2\2\2\u03c1\u03c4")
        buf.write("\3\2\2\2\u03c2\u03c0\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3")
        buf.write("\u03c5\3\2\2\2\u03c4\u03c2\3\2\2\2\u03c5\u03c9\5H%\2\u03c6")
        buf.write("\u03c8\t\2\2\2\u03c7\u03c6\3\2\2\2\u03c8\u03cb\3\2\2\2")
        buf.write("\u03c9\u03c7\3\2\2\2\u03c9\u03ca\3\2\2\2\u03ca\u03cc\3")
        buf.write("\2\2\2\u03cb\u03c9\3\2\2\2\u03cc\u03d0\7\5\2\2\u03cd\u03cf")
        buf.write("\t\2\2\2\u03ce\u03cd\3\2\2\2\u03cf\u03d2\3\2\2\2\u03d0")
        buf.write("\u03ce\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d3\3\2\2\2")
        buf.write("\u03d2\u03d0\3\2\2\2\u03d3\u03d7\5H%\2\u03d4\u03d6\t\2")
        buf.write("\2\2\u03d5\u03d4\3\2\2\2\u03d6\u03d9\3\2\2\2\u03d7\u03d5")
        buf.write("\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03da\3\2\2\2\u03d9")
        buf.write("\u03d7\3\2\2\2\u03da\u03db\7\6\2\2\u03db\61\3\2\2\2\u03dc")
        buf.write("\u03e0\7\32\2\2\u03dd\u03df\t\2\2\2\u03de\u03dd\3\2\2")
        buf.write("\2\u03df\u03e2\3\2\2\2\u03e0\u03de\3\2\2\2\u03e0\u03e1")
        buf.write("\3\2\2\2\u03e1\u03e3\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e3")
        buf.write("\u03e7\7\4\2\2\u03e4\u03e6\t\2\2\2\u03e5\u03e4\3\2\2\2")
        buf.write("\u03e6\u03e9\3\2\2\2\u03e7\u03e5\3\2\2\2\u03e7\u03e8\3")
        buf.write("\2\2\2\u03e8\u03ea\3\2\2\2\u03e9\u03e7\3\2\2\2\u03ea\u03ee")
        buf.write("\5H%\2\u03eb\u03ed\t\2\2\2\u03ec\u03eb\3\2\2\2\u03ed\u03f0")
        buf.write("\3\2\2\2\u03ee\u03ec\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef")
        buf.write("\u03f1\3\2\2\2\u03f0\u03ee\3\2\2\2\u03f1\u03f5\7\5\2\2")
        buf.write("\u03f2\u03f4\t\2\2\2\u03f3\u03f2\3\2\2\2\u03f4\u03f7\3")
        buf.write("\2\2\2\u03f5\u03f3\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f8")
        buf.write("\3\2\2\2\u03f7\u03f5\3\2\2\2\u03f8\u03fc\5H%\2\u03f9\u03fb")
        buf.write("\t\2\2\2\u03fa\u03f9\3\2\2\2\u03fb\u03fe\3\2\2\2\u03fc")
        buf.write("\u03fa\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd\u03ff\3\2\2\2")
        buf.write("\u03fe\u03fc\3\2\2\2\u03ff\u0400\7\6\2\2\u0400\63\3\2")
        buf.write("\2\2\u0401\u0405\7\33\2\2\u0402\u0404\t\2\2\2\u0403\u0402")
        buf.write("\3\2\2\2\u0404\u0407\3\2\2\2\u0405\u0403\3\2\2\2\u0405")
        buf.write("\u0406\3\2\2\2\u0406\u0408\3\2\2\2\u0407\u0405\3\2\2\2")
        buf.write("\u0408\u040c\7\4\2\2\u0409\u040b\t\2\2\2\u040a\u0409\3")
        buf.write("\2\2\2\u040b\u040e\3\2\2\2\u040c\u040a\3\2\2\2\u040c\u040d")
        buf.write("\3\2\2\2\u040d\u040f\3\2\2\2\u040e\u040c\3\2\2\2\u040f")
        buf.write("\u0413\5H%\2\u0410\u0412\t\2\2\2\u0411\u0410\3\2\2\2\u0412")
        buf.write("\u0415\3\2\2\2\u0413\u0411\3\2\2\2\u0413\u0414\3\2\2\2")
        buf.write("\u0414\u0416\3\2\2\2\u0415\u0413\3\2\2\2\u0416\u041a\7")
        buf.write("\5\2\2\u0417\u0419\t\2\2\2\u0418\u0417\3\2\2\2\u0419\u041c")
        buf.write("\3\2\2\2\u041a\u0418\3\2\2\2\u041a\u041b\3\2\2\2\u041b")
        buf.write("\u041d\3\2\2\2\u041c\u041a\3\2\2\2\u041d\u0421\5H%\2\u041e")
        buf.write("\u0420\t\2\2\2\u041f\u041e\3\2\2\2\u0420\u0423\3\2\2\2")
        buf.write("\u0421\u041f\3\2\2\2\u0421\u0422\3\2\2\2\u0422\u0424\3")
        buf.write("\2\2\2\u0423\u0421\3\2\2\2\u0424\u0425\7\6\2\2\u0425\65")
        buf.write("\3\2\2\2\u0426\u042a\7&\2\2\u0427\u0429\t\2\2\2\u0428")
        buf.write("\u0427\3\2\2\2\u0429\u042c\3\2\2\2\u042a\u0428\3\2\2\2")
        buf.write("\u042a\u042b\3\2\2\2\u042b\u042d\3\2\2\2\u042c\u042a\3")
        buf.write("\2\2\2\u042d\u0431\7\4\2\2\u042e\u0430\t\2\2\2\u042f\u042e")
        buf.write("\3\2\2\2\u0430\u0433\3\2\2\2\u0431\u042f\3\2\2\2\u0431")
        buf.write("\u0432\3\2\2\2\u0432\u0434\3\2\2\2\u0433\u0431\3\2\2\2")
        buf.write("\u0434\u0438\5H%\2\u0435\u0437\t\2\2\2\u0436\u0435\3\2")
        buf.write("\2\2\u0437\u043a\3\2\2\2\u0438\u0436\3\2\2\2\u0438\u0439")
        buf.write("\3\2\2\2\u0439\u043b\3\2\2\2\u043a\u0438\3\2\2\2\u043b")
        buf.write("\u043c\7\6\2\2\u043c\67\3\2\2\2\u043d\u0441\7\34\2\2\u043e")
        buf.write("\u0440\t\2\2\2\u043f\u043e\3\2\2\2\u0440\u0443\3\2\2\2")
        buf.write("\u0441\u043f\3\2\2\2\u0441\u0442\3\2\2\2\u0442\u0444\3")
        buf.write("\2\2\2\u0443\u0441\3\2\2\2\u0444\u0448\7\4\2\2\u0445\u0447")
        buf.write("\t\2\2\2\u0446\u0445\3\2\2\2\u0447\u044a\3\2\2\2\u0448")
        buf.write("\u0446\3\2\2\2\u0448\u0449\3\2\2\2\u0449\u044b\3\2\2\2")
        buf.write("\u044a\u0448\3\2\2\2\u044b\u044f\5H%\2\u044c\u044e\t\2")
        buf.write("\2\2\u044d\u044c\3\2\2\2\u044e\u0451\3\2\2\2\u044f\u044d")
        buf.write("\3\2\2\2\u044f\u0450\3\2\2\2\u0450\u0452\3\2\2\2\u0451")
        buf.write("\u044f\3\2\2\2\u0452\u0453\7\6\2\2\u04539\3\2\2\2\u0454")
        buf.write("\u0458\7\35\2\2\u0455\u0457\t\2\2\2\u0456\u0455\3\2\2")
        buf.write("\2\u0457\u045a\3\2\2\2\u0458\u0456\3\2\2\2\u0458\u0459")
        buf.write("\3\2\2\2\u0459\u045b\3\2\2\2\u045a\u0458\3\2\2\2\u045b")
        buf.write("\u045f\7\4\2\2\u045c\u045e\t\2\2\2\u045d\u045c\3\2\2\2")
        buf.write("\u045e\u0461\3\2\2\2\u045f\u045d\3\2\2\2\u045f\u0460\3")
        buf.write("\2\2\2\u0460\u0472\3\2\2\2\u0461\u045f\3\2\2\2\u0462\u0466")
        buf.write("\5H%\2\u0463\u0465\t\2\2\2\u0464\u0463\3\2\2\2\u0465\u0468")
        buf.write("\3\2\2\2\u0466\u0464\3\2\2\2\u0466\u0467\3\2\2\2\u0467")
        buf.write("\u0469\3\2\2\2\u0468\u0466\3\2\2\2\u0469\u046d\7\5\2\2")
        buf.write("\u046a\u046c\t\2\2\2\u046b\u046a\3\2\2\2\u046c\u046f\3")
        buf.write("\2\2\2\u046d\u046b\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u0471")
        buf.write("\3\2\2\2\u046f\u046d\3\2\2\2\u0470\u0462\3\2\2\2\u0471")
        buf.write("\u0474\3\2\2\2\u0472\u0470\3\2\2\2\u0472\u0473\3\2\2\2")
        buf.write("\u0473\u0475\3\2\2\2\u0474\u0472\3\2\2\2\u0475\u0479\5")
        buf.write("H%\2\u0476\u0478\t\2\2\2\u0477\u0476\3\2\2\2\u0478\u047b")
        buf.write("\3\2\2\2\u0479\u0477\3\2\2\2\u0479\u047a\3\2\2\2\u047a")
        buf.write("\u047c\3\2\2\2\u047b\u0479\3\2\2\2\u047c\u047d\7\6\2\2")
        buf.write("\u047d;\3\2\2\2\u047e\u0482\7 \2\2\u047f\u0481\t\2\2\2")
        buf.write("\u0480\u047f\3\2\2\2\u0481\u0484\3\2\2\2\u0482\u0480\3")
        buf.write("\2\2\2\u0482\u0483\3\2\2\2\u0483\u0485\3\2\2\2\u0484\u0482")
        buf.write("\3\2\2\2\u0485\u0489\7\4\2\2\u0486\u0488\t\2\2\2\u0487")
        buf.write("\u0486\3\2\2\2\u0488\u048b\3\2\2\2\u0489\u0487\3\2\2\2")
        buf.write("\u0489\u048a\3\2\2\2\u048a\u048c\3\2\2\2\u048b\u0489\3")
        buf.write("\2\2\2\u048c\u0490\5H%\2\u048d\u048f\t\2\2\2\u048e\u048d")
        buf.write("\3\2\2\2\u048f\u0492\3\2\2\2\u0490\u048e\3\2\2\2\u0490")
        buf.write("\u0491\3\2\2\2\u0491\u0493\3\2\2\2\u0492\u0490\3\2\2\2")
        buf.write("\u0493\u0494\7\6\2\2\u0494=\3\2\2\2\u0495\u0499\7!\2\2")
        buf.write("\u0496\u0498\t\2\2\2\u0497\u0496\3\2\2\2\u0498\u049b\3")
        buf.write("\2\2\2\u0499\u0497\3\2\2\2\u0499\u049a\3\2\2\2\u049a\u049c")
        buf.write("\3\2\2\2\u049b\u0499\3\2\2\2\u049c\u04a0\7\4\2\2\u049d")
        buf.write("\u049f\t\2\2\2\u049e\u049d\3\2\2\2\u049f\u04a2\3\2\2\2")
        buf.write("\u04a0\u049e\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a3\3")
        buf.write("\2\2\2\u04a2\u04a0\3\2\2\2\u04a3\u04a7\5H%\2\u04a4\u04a6")
        buf.write("\t\2\2\2\u04a5\u04a4\3\2\2\2\u04a6\u04a9\3\2\2\2\u04a7")
        buf.write("\u04a5\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04aa\3\2\2\2")
        buf.write("\u04a9\u04a7\3\2\2\2\u04aa\u04ab\7\6\2\2\u04ab?\3\2\2")
        buf.write("\2\u04ac\u04b0\7%\2\2\u04ad\u04af\t\2\2\2\u04ae\u04ad")
        buf.write("\3\2\2\2\u04af\u04b2\3\2\2\2\u04b0\u04ae\3\2\2\2\u04b0")
        buf.write("\u04b1\3\2\2\2\u04b1\u04b3\3\2\2\2\u04b2\u04b0\3\2\2\2")
        buf.write("\u04b3\u04b7\7\4\2\2\u04b4\u04b6\t\2\2\2\u04b5\u04b4\3")
        buf.write("\2\2\2\u04b6\u04b9\3\2\2\2\u04b7\u04b5\3\2\2\2\u04b7\u04b8")
        buf.write("\3\2\2\2\u04b8\u04ba\3\2\2\2\u04b9\u04b7\3\2\2\2\u04ba")
        buf.write("\u04be\5H%\2\u04bb\u04bd\t\2\2\2\u04bc\u04bb\3\2\2\2\u04bd")
        buf.write("\u04c0\3\2\2\2\u04be\u04bc\3\2\2\2\u04be\u04bf\3\2\2\2")
        buf.write("\u04bf\u04c1\3\2\2\2\u04c0\u04be\3\2\2\2\u04c1\u04c2\7")
        buf.write("\6\2\2\u04c2A\3\2\2\2\u04c3\u04c7\7\36\2\2\u04c4\u04c6")
        buf.write("\t\2\2\2\u04c5\u04c4\3\2\2\2\u04c6\u04c9\3\2\2\2\u04c7")
        buf.write("\u04c5\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04ca\3\2\2\2")
        buf.write("\u04c9\u04c7\3\2\2\2\u04ca\u04ce\7\4\2\2\u04cb\u04cd\t")
        buf.write("\2\2\2\u04cc\u04cb\3\2\2\2\u04cd\u04d0\3\2\2\2\u04ce\u04cc")
        buf.write("\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf\u04d1\3\2\2\2\u04d0")
        buf.write("\u04ce\3\2\2\2\u04d1\u04d5\5H%\2\u04d2\u04d4\t\2\2\2\u04d3")
        buf.write("\u04d2\3\2\2\2\u04d4\u04d7\3\2\2\2\u04d5\u04d3\3\2\2\2")
        buf.write("\u04d5\u04d6\3\2\2\2\u04d6\u04d8\3\2\2\2\u04d7\u04d5\3")
        buf.write("\2\2\2\u04d8\u04d9\7\6\2\2\u04d9C\3\2\2\2\u04da\u04de")
        buf.write("\7\'\2\2\u04db\u04dd\t\2\2\2\u04dc\u04db\3\2\2\2\u04dd")
        buf.write("\u04e0\3\2\2\2\u04de\u04dc\3\2\2\2\u04de\u04df\3\2\2\2")
        buf.write("\u04df\u04e1\3\2\2\2\u04e0\u04de\3\2\2\2\u04e1\u04e5\7")
        buf.write("\4\2\2\u04e2\u04e4\t\2\2\2\u04e3\u04e2\3\2\2\2\u04e4\u04e7")
        buf.write("\3\2\2\2\u04e5\u04e3\3\2\2\2\u04e5\u04e6\3\2\2\2\u04e6")
        buf.write("\u04e8\3\2\2\2\u04e7\u04e5\3\2\2\2\u04e8\u04ec\5H%\2\u04e9")
        buf.write("\u04eb\t\2\2\2\u04ea\u04e9\3\2\2\2\u04eb\u04ee\3\2\2\2")
        buf.write("\u04ec\u04ea\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04ef\3")
        buf.write("\2\2\2\u04ee\u04ec\3\2\2\2\u04ef\u04f0\7\6\2\2\u04f0E")
        buf.write("\3\2\2\2\u04f1\u04f5\7\b\2\2\u04f2\u04f4\t\2\2\2\u04f3")
        buf.write("\u04f2\3\2\2\2\u04f4\u04f7\3\2\2\2\u04f5\u04f3\3\2\2\2")
        buf.write("\u04f5\u04f6\3\2\2\2\u04f6\u0512\3\2\2\2\u04f7\u04f5\3")
        buf.write("\2\2\2\u04f8\u0509\5H%\2\u04f9\u04fb\t\2\2\2\u04fa\u04f9")
        buf.write("\3\2\2\2\u04fb\u04fe\3\2\2\2\u04fc\u04fa\3\2\2\2\u04fc")
        buf.write("\u04fd\3\2\2\2\u04fd\u04ff\3\2\2\2\u04fe\u04fc\3\2\2\2")
        buf.write("\u04ff\u0503\7\5\2\2\u0500\u0502\t\2\2\2\u0501\u0500\3")
        buf.write("\2\2\2\u0502\u0505\3\2\2\2\u0503\u0501\3\2\2\2\u0503\u0504")
        buf.write("\3\2\2\2\u0504\u0506\3\2\2\2\u0505\u0503\3\2\2\2\u0506")
        buf.write("\u0508\5H%\2\u0507\u04fc\3\2\2\2\u0508\u050b\3\2\2\2\u0509")
        buf.write("\u0507\3\2\2\2\u0509\u050a\3\2\2\2\u050a\u050f\3\2\2\2")
        buf.write("\u050b\u0509\3\2\2\2\u050c\u050e\t\2\2\2\u050d\u050c\3")
        buf.write("\2\2\2\u050e\u0511\3\2\2\2\u050f\u050d\3\2\2\2\u050f\u0510")
        buf.write("\3\2\2\2\u0510\u0513\3\2\2\2\u0511\u050f\3\2\2\2\u0512")
        buf.write("\u04f8\3\2\2\2\u0512\u0513\3\2\2\2\u0513\u0514\3\2\2\2")
        buf.write("\u0514\u0515\7\t\2\2\u0515G\3\2\2\2\u0516\u0517\t\3\2")
        buf.write("\2\u0517I\3\2\2\2\u00c6MT[binrwy{\u0082\u0086\u008a\u008c")
        buf.write("\u008e\u0093\u0097\u009f\u00a5\u00ac\u00b3\u00ba\u00c1")
        buf.write("\u00c6\u00c9\u00cf\u00d6\u00dc\u00e3\u00ea\u00f1\u00f6")
        buf.write("\u00fc\u00fe\u0100\u0107\u010b\u010e\u0113\u0115\u011c")
        buf.write("\u0122\u0128\u012e\u0134\u013a\u0140\u0147\u014e\u0155")
        buf.write("\u015a\u0160\u0162\u0164\u016b\u0172\u0174\u017a\u017c")
        buf.write("\u017e\u0186\u018c\u0192\u0198\u019f\u01a6\u01ad\u01b2")
        buf.write("\u01b8\u01ba\u01bc\u01c3\u01ca\u01cc\u01d2\u01d4\u01d6")
        buf.write("\u01df\u01e3\u01eb\u01f1\u01f7\u01fd\u0204\u020b\u0212")
        buf.write("\u0217\u021d\u021f\u0221\u0228\u022f\u0231\u0237\u0239")
        buf.write("\u023b\u0241\u024a\u0250\u0257\u025e\u0265\u026a\u0270")
        buf.write("\u0272\u0274\u027b\u0282\u0284\u028a\u028c\u028e\u0293")
        buf.write("\u0299\u02a0\u02ab\u02b1\u02b8\u02d2\u02ea\u02f0\u02f7")
        buf.write("\u0300\u0307\u030e\u0315\u031c\u0321\u0324\u032c\u0333")
        buf.write("\u033a\u0343\u034a\u0351\u035a\u0361\u0368\u036f\u0376")
        buf.write("\u037f\u0386\u038d\u0396\u039d\u03a4\u03ab\u03b2\u03bb")
        buf.write("\u03c2\u03c9\u03d0\u03d7\u03e0\u03e7\u03ee\u03f5\u03fc")
        buf.write("\u0405\u040c\u0413\u041a\u0421\u042a\u0431\u0438\u0441")
        buf.write("\u0448\u044f\u0458\u045f\u0466\u046d\u0472\u0479\u0482")
        buf.write("\u0489\u0490\u0499\u04a0\u04a7\u04b0\u04b7\u04be\u04c7")
        buf.write("\u04ce\u04d5\u04de\u04e5\u04ec\u04f5\u04fc\u0503\u0509")
        buf.write("\u050f\u0512")
        return buf.getvalue()


class WordlifyParser ( Parser ):

    grammarFileName = "Wordlify.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'('", "','", "')'", "'='", "'['", 
                     "']'", "'fn'", "'while'", "'foreach'", "'in'", "'do'", 
                     "'if'", "'then'", "'else'", "'begin'", "'end'", "'exist'", 
                     "'print'", "'rename'", "'remove'", "'move'", "'copy'", 
                     "'download'", "'write'", "'wait'", "'execute'", "'exit'", 
                     "'time'", "'getFiles'", "'dateModified'", "'file'", 
                     "'folder'", "'args'", "'size'", "'read'", "'create'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "FN", "WHILE", "FOREACH", "IN", "DO", "IF", "THEN", 
                      "ELSE", "BEGIN", "END", "EXIST", "PRINT", "RENAME", 
                      "REMOVE", "MOVE", "COPY", "DOWNLOAD", "WRITE", "WAIT", 
                      "EXECUTE", "EXIT", "TIME", "GET_FILES", "DATE_MODIFIED", 
                      "FILE", "FOLDER", "ARGS", "SIZE", "READ", "CREATE", 
                      "CMP_OP", "ARITH_OP", "LOG_OP", "BOOL", "STR", "ID", 
                      "NUM", "WS", "NL", "END_COMMENT" ]

    RULE_program = 0
    RULE_fn_def = 1
    RULE_block_instr = 2
    RULE_foreach = 3
    RULE_while_instr = 4
    RULE_if_instr = 5
    RULE_if_cond = 6
    RULE_then = 7
    RULE_else_if = 8
    RULE_else_block = 9
    RULE_cond = 10
    RULE_comparison = 11
    RULE_expr = 12
    RULE_arith_expr = 13
    RULE_fn_call = 14
    RULE_atom_instr = 15
    RULE_assign = 16
    RULE_own_fn_call = 17
    RULE_exist = 18
    RULE_print_instr = 19
    RULE_rename = 20
    RULE_remove = 21
    RULE_move = 22
    RULE_copy = 23
    RULE_download = 24
    RULE_write = 25
    RULE_read = 26
    RULE_wait_instr = 27
    RULE_execute = 28
    RULE_get_files = 29
    RULE_date_modified = 30
    RULE_size = 31
    RULE_exit = 32
    RULE_create = 33
    RULE_array = 34
    RULE_value_or_id = 35

    ruleNames =  [ "program", "fn_def", "block_instr", "foreach", "while_instr", 
                   "if_instr", "if_cond", "then", "else_if", "else_block", 
                   "cond", "comparison", "expr", "arith_expr", "fn_call", 
                   "atom_instr", "assign", "own_fn_call", "exist", "print_instr", 
                   "rename", "remove", "move", "copy", "download", "write", 
                   "read", "wait_instr", "execute", "get_files", "date_modified", 
                   "size", "exit", "create", "array", "value_or_id" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    FN=8
    WHILE=9
    FOREACH=10
    IN=11
    DO=12
    IF=13
    THEN=14
    ELSE=15
    BEGIN=16
    END=17
    EXIST=18
    PRINT=19
    RENAME=20
    REMOVE=21
    MOVE=22
    COPY=23
    DOWNLOAD=24
    WRITE=25
    WAIT=26
    EXECUTE=27
    EXIT=28
    TIME=29
    GET_FILES=30
    DATE_MODIFIED=31
    FILE=32
    FOLDER=33
    ARGS=34
    SIZE=35
    READ=36
    CREATE=37
    CMP_OP=38
    ARITH_OP=39
    LOG_OP=40
    BOOL=41
    STR=42
    ID=43
    NUM=44
    WS=45
    NL=46
    END_COMMENT=47

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(WordlifyParser.EOF, 0)

        def END_COMMENT(self):
            return self.getToken(WordlifyParser.END_COMMENT, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def fn_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Fn_defContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Fn_defContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = WordlifyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 75
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 72
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 77
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.FN) | (1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 121
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 119
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                        if la_ == 1:
                            self.state = 78
                            self.atom_instr()
                            self.state = 82
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 79
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 84
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 85
                            self.match(WordlifyParser.T__0)
                            self.state = 89
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 86
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 91
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 92
                            self.atom_instr()
                            self.state = 106 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 96
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 93
                                    self.match(WordlifyParser.WS)
                                    self.state = 98
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 99
                                self.match(WordlifyParser.NL)
                                self.state = 103
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 100
                                        self.match(WordlifyParser.WS) 
                                    self.state = 105
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

                                self.state = 108 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 112
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                                self.state = 110
                                self.block_instr()
                                pass
                            elif token in [WordlifyParser.FN]:
                                self.state = 111
                                self.fn_def()
                                pass
                            else:
                                raise NoViableAltException(self)

                            self.state = 115 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 114
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 117 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 123
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                self.state = 138
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 124
                    self.atom_instr()
                    self.state = 128
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 125
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 130
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                    self.state = 132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==WordlifyParser.T__0:
                        self.state = 131
                        self.match(WordlifyParser.T__0)


                    pass
                elif token in [WordlifyParser.FN, WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 136
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                        self.state = 134
                        self.block_instr()
                        pass
                    elif token in [WordlifyParser.FN]:
                        self.state = 135
                        self.fn_def()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 142
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 147
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.END_COMMENT:
                self.state = 148
                self.match(WordlifyParser.END_COMMENT)


            self.state = 151
            self.match(WordlifyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FN(self):
            return self.getToken(WordlifyParser.FN, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def BEGIN(self):
            return self.getToken(WordlifyParser.BEGIN, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_def" ):
                listener.enterFn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_def" ):
                listener.exitFn_def(self)




    def fn_def(self):

        localctx = WordlifyParser.Fn_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fn_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 153
            self.match(WordlifyParser.FN)
            self.state = 155 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 154
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 157 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 159
            self.match(WordlifyParser.ID)
            self.state = 163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 160
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 165
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 166
            self.match(WordlifyParser.T__1)
            self.state = 170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 167
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 172
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.ID:
                self.state = 173
                self.match(WordlifyParser.ID)
                self.state = 177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 174
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 179
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.T__2:
                    self.state = 180
                    self.match(WordlifyParser.T__2)
                    self.state = 184
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 181
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 186
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 187
                    self.match(WordlifyParser.ID)
                    self.state = 191
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 188
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 193
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 198
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 201
            self.match(WordlifyParser.T__3)
            self.state = 205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 202
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 207
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 208
            self.match(WordlifyParser.BEGIN)
            self.state = 210 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 209
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 212 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 254
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 252
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                        if la_ == 1:
                            self.state = 214
                            self.atom_instr()
                            self.state = 218
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 215
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 220
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 221
                            self.match(WordlifyParser.T__0)
                            self.state = 225
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 222
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 227
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 228
                            self.atom_instr()
                            self.state = 242 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 232
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 229
                                    self.match(WordlifyParser.WS)
                                    self.state = 234
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 235
                                self.match(WordlifyParser.NL)
                                self.state = 239
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 236
                                        self.match(WordlifyParser.WS) 
                                    self.state = 241
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                                self.state = 244 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 246
                            self.block_instr()
                            self.state = 248 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 247
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 250 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 256
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

                self.state = 268
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 257
                    self.atom_instr()
                    self.state = 261
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 258
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 263
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

                    self.state = 265
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==WordlifyParser.T__0:
                        self.state = 264
                        self.match(WordlifyParser.T__0)


                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 267
                    self.block_instr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 271 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 270
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 273 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        break



            self.state = 277
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Block_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_instr(self):
            return self.getTypedRuleContext(WordlifyParser.If_instrContext,0)


        def while_instr(self):
            return self.getTypedRuleContext(WordlifyParser.While_instrContext,0)


        def foreach(self):
            return self.getTypedRuleContext(WordlifyParser.ForeachContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_block_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock_instr" ):
                listener.enterBlock_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock_instr" ):
                listener.exitBlock_instr(self)




    def block_instr(self):

        localctx = WordlifyParser.Block_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block_instr)
        try:
            self.state = 282
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 279
                self.if_instr()
                pass
            elif token in [WordlifyParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 280
                self.while_instr()
                pass
            elif token in [WordlifyParser.FOREACH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 281
                self.foreach()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForeachContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(WordlifyParser.FOREACH, 0)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.ID)
            else:
                return self.getToken(WordlifyParser.ID, i)

        def IN(self):
            return self.getToken(WordlifyParser.IN, 0)

        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_foreach

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeach" ):
                listener.enterForeach(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeach" ):
                listener.exitForeach(self)




    def foreach(self):

        localctx = WordlifyParser.ForeachContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_foreach)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.match(WordlifyParser.FOREACH)
            self.state = 286 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 285
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 288 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 290
            self.match(WordlifyParser.ID)
            self.state = 292 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 291
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 294 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 296
            self.match(WordlifyParser.IN)
            self.state = 298 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 297
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 300 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 302
            self.match(WordlifyParser.ID)
            self.state = 304 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 303
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 306 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 308
            self.match(WordlifyParser.DO)
            self.state = 310 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 309
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 312 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 354
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 352
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                        if la_ == 1:
                            self.state = 314
                            self.atom_instr()
                            self.state = 318
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 315
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 320
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 321
                            self.match(WordlifyParser.T__0)
                            self.state = 325
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 322
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 327
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 328
                            self.atom_instr()
                            self.state = 342 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 332
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 329
                                    self.match(WordlifyParser.WS)
                                    self.state = 334
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 335
                                self.match(WordlifyParser.NL)
                                self.state = 339
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 336
                                        self.match(WordlifyParser.WS) 
                                    self.state = 341
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                                self.state = 344 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 346
                            self.block_instr()
                            self.state = 348 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 347
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 350 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 356
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

                self.state = 378
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 357
                    self.atom_instr()
                    self.state = 361
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 358
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 363
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

                    self.state = 370
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 364
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 366 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 365
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 368 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 372
                    self.block_instr()
                    self.state = 374 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 373
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 376 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 382
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(WordlifyParser.WHILE, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def DO(self):
            return self.getToken(WordlifyParser.DO, 0)

        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_while_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_instr" ):
                listener.enterWhile_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_instr" ):
                listener.exitWhile_instr(self)




    def while_instr(self):

        localctx = WordlifyParser.While_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_while_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.match(WordlifyParser.WHILE)
            self.state = 386 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 385
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 388 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 390
            self.cond()
            self.state = 392 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 391
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 394 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 396
            self.match(WordlifyParser.DO)
            self.state = 398 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 397
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 400 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 442
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,70,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 440
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                        if la_ == 1:
                            self.state = 402
                            self.atom_instr()
                            self.state = 406
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 403
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 408
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 409
                            self.match(WordlifyParser.T__0)
                            self.state = 413
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 410
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 415
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 416
                            self.atom_instr()
                            self.state = 430 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 420
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 417
                                    self.match(WordlifyParser.WS)
                                    self.state = 422
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 423
                                self.match(WordlifyParser.NL)
                                self.state = 427
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 424
                                        self.match(WordlifyParser.WS) 
                                    self.state = 429
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

                                self.state = 432 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 434
                            self.block_instr()
                            self.state = 436 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 435
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 438 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 444
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,70,self._ctx)

                self.state = 466
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 445
                    self.atom_instr()
                    self.state = 449
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 446
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 451
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                    self.state = 458
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 452
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 454 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 453
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 456 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 460
                    self.block_instr()
                    self.state = 462 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 461
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 464 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 470
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def END(self):
            return self.getToken(WordlifyParser.END, 0)

        def else_if(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Else_ifContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Else_ifContext,i)


        def else_block(self):
            return self.getTypedRuleContext(WordlifyParser.Else_blockContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_if_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_instr" ):
                listener.enterIf_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_instr" ):
                listener.exitIf_instr(self)




    def if_instr(self):

        localctx = WordlifyParser.If_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_if_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.if_cond()
            self.state = 473
            self.then()
            self.state = 477
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 474
                    self.else_if() 
                self.state = 479
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==WordlifyParser.ELSE:
                self.state = 480
                self.else_block()


            self.state = 483
            self.match(WordlifyParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_condContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(WordlifyParser.IF, 0)

        def cond(self):
            return self.getTypedRuleContext(WordlifyParser.CondContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_if_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_cond" ):
                listener.enterIf_cond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_cond" ):
                listener.exitIf_cond(self)




    def if_cond(self):

        localctx = WordlifyParser.If_condContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_if_cond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(WordlifyParser.IF)
            self.state = 487 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 486
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 489 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 491
            self.cond()
            self.state = 493 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 492
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 495 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THEN(self):
            return self.getToken(WordlifyParser.THEN, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_then

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThen" ):
                listener.enterThen(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThen" ):
                listener.exitThen(self)




    def then(self):

        localctx = WordlifyParser.ThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_then)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(WordlifyParser.THEN)
            self.state = 499 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 498
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 501 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 543
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 541
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                        if la_ == 1:
                            self.state = 503
                            self.atom_instr()
                            self.state = 507
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 504
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 509
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 510
                            self.match(WordlifyParser.T__0)
                            self.state = 514
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 511
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 516
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 517
                            self.atom_instr()
                            self.state = 531 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 521
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 518
                                    self.match(WordlifyParser.WS)
                                    self.state = 523
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 524
                                self.match(WordlifyParser.NL)
                                self.state = 528
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 525
                                        self.match(WordlifyParser.WS) 
                                    self.state = 530
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

                                self.state = 533 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 535
                            self.block_instr()
                            self.state = 537 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 536
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 539 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 545
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

                self.state = 567
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 546
                    self.atom_instr()
                    self.state = 550
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 547
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 552
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                    self.state = 559
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 553
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 555 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 554
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 557 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 561
                    self.block_instr()
                    self.state = 563 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 562
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 565 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def if_cond(self):
            return self.getTypedRuleContext(WordlifyParser.If_condContext,0)


        def then(self):
            return self.getTypedRuleContext(WordlifyParser.ThenContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_else_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_if" ):
                listener.enterElse_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_if" ):
                listener.exitElse_if(self)




    def else_if(self):

        localctx = WordlifyParser.Else_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_else_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(WordlifyParser.ELSE)
            self.state = 573 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 572
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 575 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 577
            self.if_cond()
            self.state = 578
            self.then()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(WordlifyParser.ELSE, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def atom_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Atom_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Atom_instrContext,i)


        def block_instr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Block_instrContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Block_instrContext,i)


        def getRuleIndex(self):
            return WordlifyParser.RULE_else_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_block" ):
                listener.enterElse_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_block" ):
                listener.exitElse_block(self)




    def else_block(self):

        localctx = WordlifyParser.Else_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_else_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.match(WordlifyParser.ELSE)
            self.state = 582 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 581
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 584 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    break

            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.WHILE) | (1 << WordlifyParser.FOREACH) | (1 << WordlifyParser.IF) | (1 << WordlifyParser.EXIST) | (1 << WordlifyParser.PRINT) | (1 << WordlifyParser.RENAME) | (1 << WordlifyParser.REMOVE) | (1 << WordlifyParser.MOVE) | (1 << WordlifyParser.COPY) | (1 << WordlifyParser.DOWNLOAD) | (1 << WordlifyParser.WRITE) | (1 << WordlifyParser.WAIT) | (1 << WordlifyParser.EXECUTE) | (1 << WordlifyParser.EXIT) | (1 << WordlifyParser.TIME) | (1 << WordlifyParser.GET_FILES) | (1 << WordlifyParser.DATE_MODIFIED) | (1 << WordlifyParser.FILE) | (1 << WordlifyParser.FOLDER) | (1 << WordlifyParser.ARGS) | (1 << WordlifyParser.SIZE) | (1 << WordlifyParser.READ) | (1 << WordlifyParser.CREATE) | (1 << WordlifyParser.ID))) != 0):
                self.state = 626
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 624
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                        if la_ == 1:
                            self.state = 586
                            self.atom_instr()
                            self.state = 590
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 587
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 592
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 593
                            self.match(WordlifyParser.T__0)
                            self.state = 597
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                                self.state = 594
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 599
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            pass

                        elif la_ == 2:
                            self.state = 600
                            self.atom_instr()
                            self.state = 614 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 604
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==WordlifyParser.WS:
                                    self.state = 601
                                    self.match(WordlifyParser.WS)
                                    self.state = 606
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)

                                self.state = 607
                                self.match(WordlifyParser.NL)
                                self.state = 611
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
                                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                    if _alt==1:
                                        self.state = 608
                                        self.match(WordlifyParser.WS) 
                                    self.state = 613
                                    self._errHandler.sync(self)
                                    _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

                                self.state = 616 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                        elif la_ == 3:
                            self.state = 618
                            self.block_instr()
                            self.state = 620 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 619
                                _la = self._input.LA(1)
                                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 622 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                    break

                            pass

                 
                    self.state = 628
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                self.state = 650
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [WordlifyParser.EXIST, WordlifyParser.PRINT, WordlifyParser.RENAME, WordlifyParser.REMOVE, WordlifyParser.MOVE, WordlifyParser.COPY, WordlifyParser.DOWNLOAD, WordlifyParser.WRITE, WordlifyParser.WAIT, WordlifyParser.EXECUTE, WordlifyParser.EXIT, WordlifyParser.TIME, WordlifyParser.GET_FILES, WordlifyParser.DATE_MODIFIED, WordlifyParser.FILE, WordlifyParser.FOLDER, WordlifyParser.ARGS, WordlifyParser.SIZE, WordlifyParser.READ, WordlifyParser.CREATE, WordlifyParser.ID]:
                    self.state = 629
                    self.atom_instr()
                    self.state = 633
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 630
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume() 
                        self.state = 635
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

                    self.state = 642
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [WordlifyParser.T__0]:
                        self.state = 636
                        self.match(WordlifyParser.T__0)
                        pass
                    elif token in [WordlifyParser.WS, WordlifyParser.NL]:
                        self.state = 638 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 637
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 640 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                break

                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [WordlifyParser.WHILE, WordlifyParser.FOREACH, WordlifyParser.IF]:
                    self.state = 644
                    self.block_instr()
                    self.state = 646 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 645
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 648 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            break

                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def comparison(self):
            return self.getTypedRuleContext(WordlifyParser.ComparisonContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_cond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCond" ):
                listener.enterCond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCond" ):
                listener.exitCond(self)




    def cond(self):

        localctx = WordlifyParser.CondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_cond)
        try:
            self.state = 657
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 654
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 655
                self.match(WordlifyParser.BOOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 656
                self.comparison()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.ExprContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.ExprContext,i)


        def CMP_OP(self):
            return self.getToken(WordlifyParser.CMP_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = WordlifyParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.expr()
            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 660
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 666
            self.match(WordlifyParser.CMP_OP)
            self.state = 670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 667
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 672
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 673
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Fn_callContext,0)


        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def arith_expr(self):
            return self.getTypedRuleContext(WordlifyParser.Arith_exprContext,0)


        def array(self):
            return self.getTypedRuleContext(WordlifyParser.ArrayContext,0)


        def getRuleIndex(self):
            return WordlifyParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = WordlifyParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_expr)
        try:
            self.state = 681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 675
                self.fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 676
                self.match(WordlifyParser.STR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 677
                self.match(WordlifyParser.NUM)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 678
                self.match(WordlifyParser.ID)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 679
                self.arith_expr()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 680
                self.array()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def ARITH_OP(self):
            return self.getToken(WordlifyParser.ARITH_OP, 0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)




    def arith_expr(self):

        localctx = WordlifyParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.value_or_id()
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 684
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 690
            self.match(WordlifyParser.ARITH_OP)
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 691
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 697
            self.value_or_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def ARGS(self):
            return self.getToken(WordlifyParser.ARGS, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFn_call" ):
                listener.enterFn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFn_call" ):
                listener.exitFn_call(self)




    def fn_call(self):

        localctx = WordlifyParser.Fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fn_call)
        try:
            self.state = 720
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [WordlifyParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 699
                self.own_fn_call()
                pass
            elif token in [WordlifyParser.EXIST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 700
                self.exist()
                pass
            elif token in [WordlifyParser.PRINT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 701
                self.print_instr()
                pass
            elif token in [WordlifyParser.RENAME]:
                self.enterOuterAlt(localctx, 4)
                self.state = 702
                self.rename()
                pass
            elif token in [WordlifyParser.REMOVE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 703
                self.remove()
                pass
            elif token in [WordlifyParser.MOVE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 704
                self.move()
                pass
            elif token in [WordlifyParser.COPY]:
                self.enterOuterAlt(localctx, 7)
                self.state = 705
                self.copy()
                pass
            elif token in [WordlifyParser.DOWNLOAD]:
                self.enterOuterAlt(localctx, 8)
                self.state = 706
                self.download()
                pass
            elif token in [WordlifyParser.WRITE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 707
                self.write()
                pass
            elif token in [WordlifyParser.READ]:
                self.enterOuterAlt(localctx, 10)
                self.state = 708
                self.read()
                pass
            elif token in [WordlifyParser.WAIT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 709
                self.wait_instr()
                pass
            elif token in [WordlifyParser.EXECUTE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 710
                self.execute()
                pass
            elif token in [WordlifyParser.GET_FILES]:
                self.enterOuterAlt(localctx, 13)
                self.state = 711
                self.get_files()
                pass
            elif token in [WordlifyParser.DATE_MODIFIED]:
                self.enterOuterAlt(localctx, 14)
                self.state = 712
                self.date_modified()
                pass
            elif token in [WordlifyParser.SIZE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 713
                self.size()
                pass
            elif token in [WordlifyParser.EXIT]:
                self.enterOuterAlt(localctx, 16)
                self.state = 714
                self.exit()
                pass
            elif token in [WordlifyParser.CREATE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 715
                self.create()
                pass
            elif token in [WordlifyParser.TIME]:
                self.enterOuterAlt(localctx, 18)
                self.state = 716
                self.match(WordlifyParser.TIME)
                pass
            elif token in [WordlifyParser.FILE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 717
                self.match(WordlifyParser.FILE)
                pass
            elif token in [WordlifyParser.FOLDER]:
                self.enterOuterAlt(localctx, 20)
                self.state = 718
                self.match(WordlifyParser.FOLDER)
                pass
            elif token in [WordlifyParser.ARGS]:
                self.enterOuterAlt(localctx, 21)
                self.state = 719
                self.match(WordlifyParser.ARGS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def own_fn_call(self):
            return self.getTypedRuleContext(WordlifyParser.Own_fn_callContext,0)


        def exist(self):
            return self.getTypedRuleContext(WordlifyParser.ExistContext,0)


        def print_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Print_instrContext,0)


        def rename(self):
            return self.getTypedRuleContext(WordlifyParser.RenameContext,0)


        def remove(self):
            return self.getTypedRuleContext(WordlifyParser.RemoveContext,0)


        def move(self):
            return self.getTypedRuleContext(WordlifyParser.MoveContext,0)


        def copy(self):
            return self.getTypedRuleContext(WordlifyParser.CopyContext,0)


        def download(self):
            return self.getTypedRuleContext(WordlifyParser.DownloadContext,0)


        def write(self):
            return self.getTypedRuleContext(WordlifyParser.WriteContext,0)


        def read(self):
            return self.getTypedRuleContext(WordlifyParser.ReadContext,0)


        def wait_instr(self):
            return self.getTypedRuleContext(WordlifyParser.Wait_instrContext,0)


        def execute(self):
            return self.getTypedRuleContext(WordlifyParser.ExecuteContext,0)


        def get_files(self):
            return self.getTypedRuleContext(WordlifyParser.Get_filesContext,0)


        def date_modified(self):
            return self.getTypedRuleContext(WordlifyParser.Date_modifiedContext,0)


        def size(self):
            return self.getTypedRuleContext(WordlifyParser.SizeContext,0)


        def exit(self):
            return self.getTypedRuleContext(WordlifyParser.ExitContext,0)


        def create(self):
            return self.getTypedRuleContext(WordlifyParser.CreateContext,0)


        def assign(self):
            return self.getTypedRuleContext(WordlifyParser.AssignContext,0)


        def TIME(self):
            return self.getToken(WordlifyParser.TIME, 0)

        def FILE(self):
            return self.getToken(WordlifyParser.FILE, 0)

        def FOLDER(self):
            return self.getToken(WordlifyParser.FOLDER, 0)

        def ARGS(self):
            return self.getToken(WordlifyParser.ARGS, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_atom_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_instr" ):
                listener.enterAtom_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_instr" ):
                listener.exitAtom_instr(self)




    def atom_instr(self):

        localctx = WordlifyParser.Atom_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_atom_instr)
        try:
            self.state = 744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 722
                self.own_fn_call()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 723
                self.exist()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 724
                self.print_instr()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 725
                self.rename()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 726
                self.remove()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 727
                self.move()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 728
                self.copy()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 729
                self.download()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 730
                self.write()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 731
                self.read()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 732
                self.wait_instr()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 733
                self.execute()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 734
                self.get_files()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 735
                self.date_modified()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 736
                self.size()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 737
                self.exit()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 738
                self.create()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 739
                self.assign()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 740
                self.match(WordlifyParser.TIME)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 741
                self.match(WordlifyParser.FILE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 742
                self.match(WordlifyParser.FOLDER)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 743
                self.match(WordlifyParser.ARGS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def expr(self):
            return self.getTypedRuleContext(WordlifyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)




    def assign(self):

        localctx = WordlifyParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(WordlifyParser.ID)
            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 747
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 753
            self.match(WordlifyParser.T__4)
            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 754
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 760
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Own_fn_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_own_fn_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOwn_fn_call" ):
                listener.enterOwn_fn_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOwn_fn_call" ):
                listener.exitOwn_fn_call(self)




    def own_fn_call(self):

        localctx = WordlifyParser.Own_fn_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_own_fn_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(WordlifyParser.ID)
            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 763
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 769
            self.match(WordlifyParser.T__1)
            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 770
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 776
                self.value_or_id()
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 777
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 782
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.T__2:
                    self.state = 783
                    self.match(WordlifyParser.T__2)
                    self.state = 787
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 784
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 789
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 790
                    self.value_or_id()
                    self.state = 794
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 791
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 796
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 801
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 804
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIST(self):
            return self.getToken(WordlifyParser.EXIST, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExist" ):
                listener.enterExist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExist" ):
                listener.exitExist(self)




    def exist(self):

        localctx = WordlifyParser.ExistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_exist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.match(WordlifyParser.EXIST)
            self.state = 810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 807
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 813
            self.match(WordlifyParser.T__1)
            self.state = 817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 814
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 820
            self.value_or_id()
            self.state = 824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 821
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 826
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 827
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Print_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRINT(self):
            return self.getToken(WordlifyParser.PRINT, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_print_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrint_instr" ):
                listener.enterPrint_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrint_instr" ):
                listener.exitPrint_instr(self)




    def print_instr(self):

        localctx = WordlifyParser.Print_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_print_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(WordlifyParser.PRINT)
            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 830
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 836
            self.match(WordlifyParser.T__1)
            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 837
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 842
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 843
            self.value_or_id()
            self.state = 847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 844
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 849
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 850
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(WordlifyParser.RENAME, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_rename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename" ):
                listener.enterRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename" ):
                listener.exitRename(self)




    def rename(self):

        localctx = WordlifyParser.RenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_rename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.match(WordlifyParser.RENAME)
            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 853
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 858
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 859
            self.match(WordlifyParser.T__1)
            self.state = 863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 860
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 865
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 866
            self.value_or_id()
            self.state = 870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 867
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 873
            self.match(WordlifyParser.T__2)
            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 874
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 879
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 880
            self.value_or_id()
            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 881
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 887
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(WordlifyParser.REMOVE, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove" ):
                listener.enterRemove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove" ):
                listener.exitRemove(self)




    def remove(self):

        localctx = WordlifyParser.RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.match(WordlifyParser.REMOVE)
            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 890
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 896
            self.match(WordlifyParser.T__1)
            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 897
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 902
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 903
            self.value_or_id()
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 904
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 909
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 910
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MOVE(self):
            return self.getToken(WordlifyParser.MOVE, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)




    def move(self):

        localctx = WordlifyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.match(WordlifyParser.MOVE)
            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 913
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 919
            self.match(WordlifyParser.T__1)
            self.state = 923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 920
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 925
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 926
            self.value_or_id()
            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 927
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 932
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 933
            self.match(WordlifyParser.T__2)
            self.state = 937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 934
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 940
            self.value_or_id()
            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 941
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 946
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 947
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CopyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COPY(self):
            return self.getToken(WordlifyParser.COPY, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_copy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopy" ):
                listener.enterCopy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopy" ):
                listener.exitCopy(self)




    def copy(self):

        localctx = WordlifyParser.CopyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_copy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.match(WordlifyParser.COPY)
            self.state = 953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 950
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 956
            self.match(WordlifyParser.T__1)
            self.state = 960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 957
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 962
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 963
            self.value_or_id()
            self.state = 967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 964
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 970
            self.match(WordlifyParser.T__2)
            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 971
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 977
            self.value_or_id()
            self.state = 981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 978
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 983
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 984
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DownloadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOWNLOAD(self):
            return self.getToken(WordlifyParser.DOWNLOAD, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_download

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDownload" ):
                listener.enterDownload(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDownload" ):
                listener.exitDownload(self)




    def download(self):

        localctx = WordlifyParser.DownloadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_download)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 986
            self.match(WordlifyParser.DOWNLOAD)
            self.state = 990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 987
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 992
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 993
            self.match(WordlifyParser.T__1)
            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 994
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 999
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1000
            self.value_or_id()
            self.state = 1004
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1001
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1007
            self.match(WordlifyParser.T__2)
            self.state = 1011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1008
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1014
            self.value_or_id()
            self.state = 1018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1015
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1021
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WriteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(WordlifyParser.WRITE, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_write

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWrite" ):
                listener.enterWrite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWrite" ):
                listener.exitWrite(self)




    def write(self):

        localctx = WordlifyParser.WriteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_write)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1023
            self.match(WordlifyParser.WRITE)
            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1024
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1030
            self.match(WordlifyParser.T__1)
            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1031
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1037
            self.value_or_id()
            self.state = 1041
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1038
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1043
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1044
            self.match(WordlifyParser.T__2)
            self.state = 1048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1045
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1050
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1051
            self.value_or_id()
            self.state = 1055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1052
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1057
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1058
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(WordlifyParser.READ, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_read

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRead" ):
                listener.enterRead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRead" ):
                listener.exitRead(self)




    def read(self):

        localctx = WordlifyParser.ReadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_read)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.match(WordlifyParser.READ)
            self.state = 1064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1061
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1066
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1067
            self.match(WordlifyParser.T__1)
            self.state = 1071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1068
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1074
            self.value_or_id()
            self.state = 1078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1075
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1081
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wait_instrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(WordlifyParser.WAIT, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_wait_instr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_instr" ):
                listener.enterWait_instr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_instr" ):
                listener.exitWait_instr(self)




    def wait_instr(self):

        localctx = WordlifyParser.Wait_instrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_wait_instr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.match(WordlifyParser.WAIT)
            self.state = 1087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1084
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1090
            self.match(WordlifyParser.T__1)
            self.state = 1094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1091
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1096
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1097
            self.value_or_id()
            self.state = 1101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1098
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1103
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1104
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(WordlifyParser.EXECUTE, 0)

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_execute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecute" ):
                listener.enterExecute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecute" ):
                listener.exitExecute(self)




    def execute(self):

        localctx = WordlifyParser.ExecuteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_execute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.match(WordlifyParser.EXECUTE)
            self.state = 1110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1107
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1113
            self.match(WordlifyParser.T__1)
            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1114
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1136
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,173,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1120
                    self.value_or_id()
                    self.state = 1124
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1121
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1126
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1127
                    self.match(WordlifyParser.T__2)
                    self.state = 1131
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                        self.state = 1128
                        _la = self._input.LA(1)
                        if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1133
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
             
                self.state = 1138
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

            self.state = 1139
            self.value_or_id()
            self.state = 1143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1140
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1145
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1146
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_filesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET_FILES(self):
            return self.getToken(WordlifyParser.GET_FILES, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_get_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_files" ):
                listener.enterGet_files(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_files" ):
                listener.exitGet_files(self)




    def get_files(self):

        localctx = WordlifyParser.Get_filesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_get_files)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self.match(WordlifyParser.GET_FILES)
            self.state = 1152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1149
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1154
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1155
            self.match(WordlifyParser.T__1)
            self.state = 1159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1156
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1161
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1162
            self.value_or_id()
            self.state = 1166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1163
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1169
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Date_modifiedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE_MODIFIED(self):
            return self.getToken(WordlifyParser.DATE_MODIFIED, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_date_modified

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDate_modified" ):
                listener.enterDate_modified(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDate_modified" ):
                listener.exitDate_modified(self)




    def date_modified(self):

        localctx = WordlifyParser.Date_modifiedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_date_modified)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self.match(WordlifyParser.DATE_MODIFIED)
            self.state = 1175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1172
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1178
            self.match(WordlifyParser.T__1)
            self.state = 1182
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1179
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1184
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1185
            self.value_or_id()
            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1186
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1192
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIZE(self):
            return self.getToken(WordlifyParser.SIZE, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_size

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSize" ):
                listener.enterSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSize" ):
                listener.exitSize(self)




    def size(self):

        localctx = WordlifyParser.SizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_size)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1194
            self.match(WordlifyParser.SIZE)
            self.state = 1198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1195
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1200
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1201
            self.match(WordlifyParser.T__1)
            self.state = 1205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1202
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1207
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1208
            self.value_or_id()
            self.state = 1212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1209
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1214
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1215
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(WordlifyParser.EXIT, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_exit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExit" ):
                listener.enterExit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExit" ):
                listener.exitExit(self)




    def exit(self):

        localctx = WordlifyParser.ExitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_exit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self.match(WordlifyParser.EXIT)
            self.state = 1221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1218
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1224
            self.match(WordlifyParser.T__1)
            self.state = 1228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1225
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1231
            self.value_or_id()
            self.state = 1235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1232
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1237
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1238
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(WordlifyParser.CREATE, 0)

        def value_or_id(self):
            return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate" ):
                listener.enterCreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate" ):
                listener.exitCreate(self)




    def create(self):

        localctx = WordlifyParser.CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1240
            self.match(WordlifyParser.CREATE)
            self.state = 1244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1241
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1246
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1247
            self.match(WordlifyParser.T__1)
            self.state = 1251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1248
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1253
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1254
            self.value_or_id()
            self.state = 1258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1255
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1260
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1261
            self.match(WordlifyParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_or_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(WordlifyParser.Value_or_idContext)
            else:
                return self.getTypedRuleContext(WordlifyParser.Value_or_idContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.WS)
            else:
                return self.getToken(WordlifyParser.WS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(WordlifyParser.NL)
            else:
                return self.getToken(WordlifyParser.NL, i)

        def getRuleIndex(self):
            return WordlifyParser.RULE_array

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray" ):
                listener.enterArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray" ):
                listener.exitArray(self)




    def array(self):

        localctx = WordlifyParser.ArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_array)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1263
            self.match(WordlifyParser.T__5)
            self.state = 1267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                self.state = 1264
                _la = self._input.LA(1)
                if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1269
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0):
                self.state = 1270
                self.value_or_id()
                self.state = 1287
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,193,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1274
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 1271
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1276
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1277
                        self.match(WordlifyParser.T__2)
                        self.state = 1281
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                            self.state = 1278
                            _la = self._input.LA(1)
                            if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 1283
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1284
                        self.value_or_id() 
                    self.state = 1289
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,193,self._ctx)

                self.state = 1293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==WordlifyParser.WS or _la==WordlifyParser.NL:
                    self.state = 1290
                    _la = self._input.LA(1)
                    if not(_la==WordlifyParser.WS or _la==WordlifyParser.NL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1298
            self.match(WordlifyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_or_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUM(self):
            return self.getToken(WordlifyParser.NUM, 0)

        def STR(self):
            return self.getToken(WordlifyParser.STR, 0)

        def ID(self):
            return self.getToken(WordlifyParser.ID, 0)

        def BOOL(self):
            return self.getToken(WordlifyParser.BOOL, 0)

        def getRuleIndex(self):
            return WordlifyParser.RULE_value_or_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_or_id" ):
                listener.enterValue_or_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_or_id" ):
                listener.exitValue_or_id(self)




    def value_or_id(self):

        localctx = WordlifyParser.Value_or_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_value_or_id)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << WordlifyParser.BOOL) | (1 << WordlifyParser.STR) | (1 << WordlifyParser.ID) | (1 << WordlifyParser.NUM))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





